<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
  <title>紅楓吟 - Linux</title>
    <subtitle>风落花语风落天，花落风雨花落田.</subtitle>
  <link href="https://honmaple.me/categories/tech/linux/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://honmaple.me"/>
  <generator uri="https://github.com/honmaple/snow">Snow</generator>
    <updated>Fri, 20 Dec 2019 17:52:45 +0000</updated>
  <id>https://honmaple.me</id>
    <entry xml:lang="zh">
      <title>ansible笔记</title>
      <link href="" rel="alternate"></link>
      <published>Tue, 04 Sep 2018 10:53:51 +0000</published>
      <updated>Fri, 20 Dec 2019 17:52:45 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2018/09/ansible笔记.html" type="text/html"/>
      <id>https://honmaple.me/articles/2018/09/ansible笔记.html</id>
      <summary type="html">
&lt;h1 id=&quot;heading-1&quot;&gt;ansible动态解析inventory&lt;/h1&gt;
&lt;p&gt;
  &lt;b&gt;ansible&lt;/b&gt;调用inventory模块时总会调用一个文件或脚本来进行处理, 但我想要动态的解析inventory, 即直接传入一个字符串而不是文件, 直接调用ansible的接口来进行解析（不同格式的inventory也可以手动解析，比如yaml格式可以使用pyyaml解析，不过直接使用ansible接口会更方便一些）
&lt;/p&gt;

&lt;p&gt;
  但问题是&lt;b&gt;ansible&lt;/b&gt;没有直接可供调用的接口, 不过可以直接查看ansible源码，找到相应的解析函数，封装一下即可
&lt;/p&gt;

&lt;p&gt;
  查找源码, 根据 &lt;code&gt;InventoryManager&lt;/code&gt; 传递的&lt;b&gt;source&lt;/b&gt;变量找到&lt;code&gt;parse_sources&lt;/code&gt;这个函数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;InventoryManager&lt;/span&gt;(object):
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;parse_sources&lt;/span&gt;(self, cache&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;False):
        &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;...&lt;/span&gt;&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;ansible动态解析inventory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;ansible自定义模块传递list变量会变成字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;常见问题FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;ansible动态解析inventory&lt;/h1&gt;
&lt;p&gt;
  &lt;b&gt;ansible&lt;/b&gt;调用inventory模块时总会调用一个文件或脚本来进行处理, 但我想要动态的解析inventory, 即直接传入一个字符串而不是文件, 直接调用ansible的接口来进行解析（不同格式的inventory也可以手动解析，比如yaml格式可以使用pyyaml解析，不过直接使用ansible接口会更方便一些）
&lt;/p&gt;

&lt;p&gt;
  但问题是&lt;b&gt;ansible&lt;/b&gt;没有直接可供调用的接口, 不过可以直接查看ansible源码，找到相应的解析函数，封装一下即可
&lt;/p&gt;

&lt;p&gt;
  查找源码, 根据 &lt;code&gt;InventoryManager&lt;/code&gt; 传递的&lt;b&gt;source&lt;/b&gt;变量找到&lt;code&gt;parse_sources&lt;/code&gt;这个函数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;InventoryManager&lt;/span&gt;(object):
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;parse_sources&lt;/span&gt;(self, cache&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;False):
        &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt; iterate over inventory sources and parse each one to populate it&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;_setup_inventory_plugins()
        &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;
  然后再根据
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;_setup_inventory_plugins&lt;/span&gt;(self):
    &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt; sets up loaded inventory plugins for usage &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    inventory_loader &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; PluginLoader(&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;InventoryModule&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;ansible.plugins.inventory&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;, C&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;DEFAULT_INVENTORY_PLUGIN_PATH, &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;inventory_plugins&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;
  找到对应的解析&lt;b&gt;plugin&lt;/b&gt;, 我使用的是&lt;b&gt;ini&lt;/b&gt;格式的inventory, 所以自定义一下&lt;code&gt;ansible.plugins.inventory.ini.InventoryModule&lt;/code&gt;这个模块即可
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;from&lt;/span&gt; ansible.plugins.inventory.ini &lt;span style=&quot;color:#f92672&quot;&gt;import&lt;/span&gt; InventoryModule
&lt;span style=&quot;color:#f92672&quot;&gt;from&lt;/span&gt; ansible.inventory.data &lt;span style=&quot;color:#f92672&quot;&gt;import&lt;/span&gt; InventoryData
&lt;span style=&quot;color:#f92672&quot;&gt;from&lt;/span&gt; ansible.parsing.dataloader &lt;span style=&quot;color:#f92672&quot;&gt;import&lt;/span&gt; DataLoader
&lt;span style=&quot;color:#f92672&quot;&gt;from&lt;/span&gt; ansible.module_utils._text &lt;span style=&quot;color:#f92672&quot;&gt;import&lt;/span&gt; to_text
&lt;span style=&quot;color:#f92672&quot;&gt;from&lt;/span&gt; ansible.template &lt;span style=&quot;color:#f92672&quot;&gt;import&lt;/span&gt; Templar


&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;InventoryCustomModule&lt;/span&gt;(InventoryModule):
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;mine_parse&lt;/span&gt;(self, b_data):
        self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;loader &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; DataLoader()
        self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;inventory &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; InventoryData()
        self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;templar &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; Templar(loader&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;loader)
        &lt;span style=&quot;color:#66d9ef&quot;&gt;try&lt;/span&gt;:
            data &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; to_text(b_data, errors&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;surrogate_or_strict&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;splitlines()
        &lt;span style=&quot;color:#66d9ef&quot;&gt;except&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;UnicodeError&lt;/span&gt;:
            data &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; []
            &lt;span style=&quot;color:#66d9ef&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color:#f92672&quot;&gt;in&lt;/span&gt; b_data&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;splitlines():
                &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; line &lt;span style=&quot;color:#f92672&quot;&gt;and&lt;/span&gt; line[&lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;] &lt;span style=&quot;color:#f92672&quot;&gt;in&lt;/span&gt; self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;b_COMMENT_MARKERS:
                    data&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;append(&lt;span style=&quot;color:#e6db74&quot;&gt;u&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;)
                &lt;span style=&quot;color:#66d9ef&quot;&gt;else&lt;/span&gt;:
                    data&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;append(to_text(line, errors&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;surrogate_or_strict&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;))
        &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;_parse(&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;, data)&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;如何使用&lt;/b&gt;:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;text &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;\
&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;[MY-HOST]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY_HOST-1 ansible_ssh_host=127.0.0.1&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY_HOST-2 ansible_ssh_host=127.0.0.2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY_HOST-3 ansible_ssh_host=127.0.0.3&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY_HOST-4 ansible_ssh_host=127.0.0.4&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;[MY-HOST:vars]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;vip=127.0.0.10&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;ppp=test&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;[MY-HOST1]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY_HOST1-1 ansible_ssh_host=127.0.0.11&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY_HOST1-2 ansible_ssh_host=127.0.0.12&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;[MY-HOST:children]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;MY-HOST1&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
module &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; InventoryCustomModule()
module&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;mine_parse(text)

&lt;span style=&quot;color:#66d9ef&quot;&gt;for&lt;/span&gt; _, group &lt;span style=&quot;color:#f92672&quot;&gt;in&lt;/span&gt; module&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;inventory&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;groups&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;items():
    &lt;span style=&quot;color:#66d9ef&quot;&gt;print&lt;/span&gt;(group, group&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;child_groups, group&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;vars)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;for&lt;/span&gt; host &lt;span style=&quot;color:#f92672&quot;&gt;in&lt;/span&gt; group&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;hosts:
        &lt;span style=&quot;color:#66d9ef&quot;&gt;print&lt;/span&gt;(host, host&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;vars)&lt;/pre&gt;
&lt;p&gt;
    &lt;b&gt;结果&lt;/b&gt;:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(ungrouped, [], {})
(all, [ungrouped], {})
(MY-HOST, [MY-HOST1], {u&amp;#39;vip&amp;#39;: u&amp;#39;127.0.0.10&amp;#39;, u&amp;#39;ppp&amp;#39;: u&amp;#39;test&amp;#39;})
(MY_HOST-1, {u&amp;#39;ansible_ssh_host&amp;#39;: u&amp;#39;127.0.0.1&amp;#39;, &amp;#39;inventory_file&amp;#39;: None, &amp;#39;inventory_dir&amp;#39;: None})
(MY_HOST-2, {u&amp;#39;ansible_ssh_host&amp;#39;: u&amp;#39;127.0.0.2&amp;#39;, &amp;#39;inventory_file&amp;#39;: None, &amp;#39;inventory_dir&amp;#39;: None})
(MY_HOST-3, {u&amp;#39;ansible_ssh_host&amp;#39;: u&amp;#39;127.0.0.3&amp;#39;, &amp;#39;inventory_file&amp;#39;: None, &amp;#39;inventory_dir&amp;#39;: None})
(MY_HOST-4, {u&amp;#39;ansible_ssh_host&amp;#39;: u&amp;#39;127.0.0.4&amp;#39;, &amp;#39;inventory_file&amp;#39;: None, &amp;#39;inventory_dir&amp;#39;: None})
(MY-HOST1, [], {})
(MY_HOST1-1, {u&amp;#39;ansible_ssh_host&amp;#39;: u&amp;#39;127.0.0.11&amp;#39;, &amp;#39;inventory_file&amp;#39;: None, &amp;#39;inventory_dir&amp;#39;: None})
(MY_HOST1-2, {u&amp;#39;ansible_ssh_host&amp;#39;: u&amp;#39;127.0.0.12&amp;#39;, &amp;#39;inventory_file&amp;#39;: None, &amp;#39;inventory_dir&amp;#39;: None})&lt;/pre&gt;

&lt;p&gt;
    可以看出已经没什么大的问题了, 但有一个点, &lt;b&gt;all&lt;/b&gt;组下的groups列表只有&lt;code&gt;ungrouped&lt;/code&gt;, 正常情况下&lt;code&gt;MY-HOST&lt;/code&gt;组也应该继承&lt;code&gt;all&lt;/code&gt;组, &lt;del&gt;可能是还需要一些其他的操作吧&lt;/del&gt;，继续翻源码，找到了&lt;code&gt;InventoryData&lt;/code&gt;的&lt;code&gt;reconcile_inventory&lt;/code&gt;方法, 修改一下即可
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;module &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; InventoryCustomModule()
module&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;mine_parse(text)
module&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;inventory&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;reconcile_inventory()&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-2&quot;&gt;ansible自定义模块传递list变量会变成字符串&lt;/h1&gt;
&lt;p&gt;
  我自定义了一个模块，需要传入一个&lt;b&gt;list&lt;/b&gt;变量&lt;code&gt;group_names&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;from&lt;/span&gt; ansible.module_utils.basic &lt;span style=&quot;color:#f92672&quot;&gt;import&lt;/span&gt; AnsibleModule


&lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;main&lt;/span&gt;():
    module &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; AnsibleModule(
        argument_spec&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;dict(group_names&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{
            &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;required&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;: True
        }))

    i &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; module&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;params&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;get(&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;group_names&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;)
    msg &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; {&lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;group_names&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;: i, &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;: str(type(i))}
    module&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;fail_json(changed&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;False, msg&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;msg)


&lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; __name__ &lt;span style=&quot;color:#f92672&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;__main__&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;:
    main()&lt;/pre&gt;
&lt;p&gt;
  但发现传入的变量最后变成的&lt;code&gt;str type&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;FAILED! =&amp;gt; {&amp;#34;changed&amp;#34;: false, &amp;#34;failed&amp;#34;: true, &amp;#34;msg&amp;#34;: {&amp;#34;group_names&amp;#34;: &amp;#34;[&amp;#39;test&amp;#39;]&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;&amp;#34;}}&lt;/pre&gt;
&lt;p&gt;
  最后查找资料后才知道, 传递的变量需要增加&lt;code&gt;type&lt;/code&gt;参数, 否则都是&lt;b&gt;str&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;module &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; AnsibleModule(
    argument_spec&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;dict(group_names&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{
        &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;required&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;: True,
        &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;list&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
    }))&lt;/pre&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;常见问题FAQ&lt;/h1&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Aborting, target uses selinux but python bindings (libselinux-python) aren&amp;#39;t installed!&lt;/pre&gt;

&lt;p&gt;
  查看目标机器是否安装 &lt;code&gt;libselinux-python&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install libselinux-python&lt;/pre&gt;

&lt;p&gt;
  修改&lt;code&gt;ansible.cfg&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;interpreter_python = /usr/bin/python&lt;/pre&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>如何保持一个干净的系统</title>
      <link href="" rel="alternate"></link>
      <published>Wed, 11 Jul 2018 10:42:19 +0000</published>
      <updated>Thu, 03 Jun 2021 11:57:13 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2018/07/如何保持一个干净的系统.html" type="text/html"/>
      <id>https://honmaple.me/articles/2018/07/如何保持一个干净的系统.html</id>
      <summary type="html">
&lt;p&gt;
由于工作需要经常会使用多种语言, 比如 python, golang, lua, javascript等, 各种语言都有自己的包管理器，像python的包管理器&lt;b&gt;pip&lt;/b&gt;, lua的包管理器&lt;b&gt;luarocks&lt;/b&gt;。。。
&lt;/p&gt;

&lt;p&gt;
每个包管理器安装package的方式，位置都不相同，对于一个有洁癖的人来说,
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ls ~/ -al&lt;/pre&gt;
&lt;p&gt;
后各种各样的&lt;code&gt;.something&lt;/code&gt;简直是场灾难, 所以保持一个干净的系统是非常必要的, 比如把相关语言的package都放到一个目录(我选择放到&lt;code&gt;$HOME/repo/{language}&lt;/code&gt;)下
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
请不要使用root用户，或者sudo来安装非必要的软件包
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;python&lt;/h2&gt;
&lt;p&gt;
   我的&lt;b&gt;python&lt;/b&gt;环境是&lt;code&gt;pip+virtualenv+virtualenvwrapper&lt;/code&gt;, &lt;b&gt;pip&lt;/b&gt;可以有多种使用方式...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
由于工作需要经常会使用多种语言, 比如 python, golang, lua, javascript等, 各种语言都有自己的包管理器，像python的包管理器&lt;b&gt;pip&lt;/b&gt;, lua的包管理器&lt;b&gt;luarocks&lt;/b&gt;。。。
&lt;/p&gt;

&lt;p&gt;
每个包管理器安装package的方式，位置都不相同，对于一个有洁癖的人来说,
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ls ~/ -al&lt;/pre&gt;
&lt;p&gt;
后各种各样的&lt;code&gt;.something&lt;/code&gt;简直是场灾难, 所以保持一个干净的系统是非常必要的, 比如把相关语言的package都放到一个目录(我选择放到&lt;code&gt;$HOME/repo/{language}&lt;/code&gt;)下
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
请不要使用root用户，或者sudo来安装非必要的软件包
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;python&lt;/h2&gt;
&lt;p&gt;
   我的&lt;b&gt;python&lt;/b&gt;环境是&lt;code&gt;pip+virtualenv+virtualenvwrapper&lt;/code&gt;, &lt;b&gt;pip&lt;/b&gt;可以有多种使用方式:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;sudo&lt;/b&gt;
     &lt;b&gt;sudo&lt;/b&gt;安装的package放到&lt;code&gt;/usr/lib64/python-{verison}&lt;/code&gt;目录下, 这可能会与系统的包管理器所安装的python package冲突, 比如&lt;b&gt;docker&lt;/b&gt;可以使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;sudo pacman -S docker&lt;/pre&gt;
&lt;p&gt;
     也可以使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;sudo pip install docker&lt;/pre&gt;
&lt;p&gt;
     但更新系统包时可能有冲突导致无法更新
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;--user*(-U)
     使用本地安装，不需要*sudo&lt;/b&gt;权限, 安装的package会放到&lt;code&gt;$HOME/.local&lt;/code&gt;目录下
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;virtualenv&lt;/b&gt;
     python的各种依赖包环境分离靠的就是&lt;b&gt;virtualenv&lt;/b&gt;, 它会把安装的&lt;b&gt;package&lt;/b&gt;放到&lt;code&gt;$WORKON_HOME&lt;/code&gt;这个环境变量下, 我平时也主要使用这个，但一些常用的package, 像http,docker-compose,pelican等, 我不想在使用时还得
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;workon {virtualenv name}&lt;/pre&gt;
&lt;p&gt;
     然后才能使用, 太麻烦
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
   最有效的方法是搭配&lt;code&gt;--user&lt;/code&gt;和&lt;code&gt;virtualenv&lt;/code&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;--user&lt;/code&gt;的安装目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export PYTHONUSERBASE&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$HOME/repo/python&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;virtualenv&lt;/code&gt;的安装目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export WORKON_HOME&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$HOME/repo/python/virtualenv
source $HOME/repo/python/bin/virtualenvwrapper.sh&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;PATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export PATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$PATH:$HOME/repo/python/bin&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 其它设置
      python终端自从3.4后，默认会记录命令历史到 &lt;code&gt;$HOME/.python_history&lt;/code&gt;, 这也需要修改一下
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export PYTHONHISTFILE&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$HOME/repo/python/history&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
   然后无论是&lt;code&gt;pip install package --user&lt;/code&gt;还是&lt;b&gt;mkvirtualenv&lt;/b&gt;后&lt;code&gt;pip install package&lt;/code&gt;, 所安装的package都会放到&lt;code&gt;$HOME/repo/python&lt;/code&gt;目录下
&lt;/p&gt;

&lt;p&gt;
   &lt;b&gt;参考文档&lt;/b&gt;:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://bugs.python.org/issue2088&quot;&gt;https://bugs.python.org/issue2088&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP&quot;&gt;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;golang&lt;/h2&gt;
&lt;p&gt;
   与python同理
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;GOPATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export GOPATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$HOME/repo/golang&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;PATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export PATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$PATH:$HOME/repo/python/bin:$HOME/repo/golang/bin&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-3&quot;&gt;lua&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;b&gt;luarocks&lt;/b&gt;安装默认参数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;alias luarocks&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;luarocks --tree=$HOME/repo/lua&amp;#39;&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;LUA_PATH&lt;/code&gt;与&lt;code&gt;LUA_CPATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export LUA_PATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&quot;color:#e6db74&quot;&gt;/repo/lua/share/lua/5.3/?.lua;&lt;/span&gt;$HOME&lt;span style=&quot;color:#e6db74&quot;&gt;/repo/lua/share/lua/5.3/?/init.lua;&lt;/span&gt;$LUA_PATH&lt;span style=&quot;color:#e6db74&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
export LUA_CPATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&quot;color:#e6db74&quot;&gt;/repo/lua/lib/lua/5.3/?.so;&lt;/span&gt;$LUA_CPATH&lt;span style=&quot;color:#e6db74&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;PATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export PATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$PATH:$HOME/repo/python/bin:$HOME/repo/golang/bin:$HOME/repo/lua/bin&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-4&quot;&gt;javascript&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 修改&lt;code&gt;npmrc&lt;/code&gt;配置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;npm config set prefix $HOME/repo/npm
npm config set cache $HOME/repo/npm&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;NODE_PATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export NODE_PATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&quot;color:#e6db74&quot;&gt;/repo/npm/lib/node_modules:&lt;/span&gt;$NODE_PATH&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 设置&lt;code&gt;PATH&lt;/code&gt;变量
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;export PATH&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;$PATH:$HOME/repo/python/bin:$HOME/repo/golang/bin:$HOME/repo/lua/bin:$HOME/repo/npm/bin&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 测试
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;npm install -g js-beautify &lt;span style=&quot;color:#75715e&quot;&gt;# 将会安装到$HOME/repo/npm目录&lt;/span&gt;
npm install js-beautify &lt;span style=&quot;color:#75715e&quot;&gt;# 将会安装到当前目录下&lt;/span&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
   最后, 把相关代码放到&lt;code&gt;$HOME/.bashrc&lt;/code&gt;中, 就可以享受一个相对干净的系统了
&lt;/p&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>linux笔记</title>
      <link href="" rel="alternate"></link>
      <published>Tue, 19 Dec 2017 17:30:18 +0000</published>
      <updated>Tue, 15 Feb 2022 18:21:24 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/12/linux笔记.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/12/linux笔记.html</id>
      <summary type="html">
&lt;h1 id=&quot;heading-1&quot;&gt;记录&lt;/h1&gt;
&lt;h2 id=&quot;heading-1.1&quot;&gt;设置临时英文环境变量&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;LANG&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;en_US.UTF-8&amp;#34;&lt;/span&gt; git branch 2&amp;gt; /dev/null&lt;/pre&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;linux下gif播放&lt;/h1&gt;
&lt;p&gt;
  &lt;b&gt;feh&lt;/b&gt;只支持静态文件,可用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;animate output.gif&lt;/pre&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;supervisor增加新配置不重启&lt;/h1&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;supervisorctl reread
supervisorctl update&lt;/pre&gt;

&lt;h1 id=&quot;heading-4&quot;&gt;文件操作&lt;/h1&gt;
&lt;h2 id=&quot;heading-4.1&quot;&gt;zip打包排除文件&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;zip -r -x=.git/* -x=*.pyc...&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;记录&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;设置临时英文环境变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;linux下gif播放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;supervisor增加新配置不重启&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;文件操作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4.1&quot;&gt;zip打包排除文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4.2&quot;&gt;获取文件压缩后的md5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4.3&quot;&gt;ag仅查找目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4.4&quot;&gt;替换^M字符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;NET&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5.1&quot;&gt;iptables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5.2&quot;&gt;SSH&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5.2.1&quot;&gt;git clone时不提示Are you sure you want to continue connecting (yes/no)?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;Disk&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6.1&quot;&gt;thunar提示&amp;#34;not authorized to perform operation&amp;#34;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-7&quot;&gt;数据库&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-7.1&quot;&gt;设置mysql的密码小于8字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-7.2&quot;&gt;修改postgresql字段长度&lt;span class=&quot;tag&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;linux&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-8&quot;&gt;进程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-8.1&quot;&gt;查看进程work目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9&quot;&gt;命令&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.1&quot;&gt;find&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.2&quot;&gt;awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.3&quot;&gt;date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.4&quot;&gt;curl&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.4.1&quot;&gt;curl请求指定IP的http域名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.4.2&quot;&gt;curl请求指定IP的https域名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.4.3&quot;&gt;curl请求搭配grep查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.4.4&quot;&gt;curl请求form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-9.5&quot;&gt;wget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;记录&lt;/h1&gt;
&lt;h2 id=&quot;heading-1.1&quot;&gt;设置临时英文环境变量&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;LANG&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;en_US.UTF-8&amp;#34;&lt;/span&gt; git branch 2&amp;gt; /dev/null&lt;/pre&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;linux下gif播放&lt;/h1&gt;
&lt;p&gt;
  &lt;b&gt;feh&lt;/b&gt;只支持静态文件,可用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;animate output.gif&lt;/pre&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;supervisor增加新配置不重启&lt;/h1&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;supervisorctl reread
supervisorctl update&lt;/pre&gt;

&lt;h1 id=&quot;heading-4&quot;&gt;文件操作&lt;/h1&gt;
&lt;h2 id=&quot;heading-4.1&quot;&gt;zip打包排除文件&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;zip -r -x=.git/* -x=*.pyc ../release.py *&lt;/pre&gt;

&lt;h2 id=&quot;heading-4.2&quot;&gt;获取文件压缩后的md5&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;tar -cf - action_plugins/ group_vars/ | md5sum&lt;/pre&gt;

&lt;h2 id=&quot;heading-4.3&quot;&gt;ag仅查找目录&lt;/h2&gt;
&lt;p&gt;
   &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher/issues/379&quot;&gt;https://github.com/ggreer/the_silver_searcher/issues/379&lt;/a&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ag -G --file-search-regex *.txt /home/username&lt;/pre&gt;
&lt;h2 id=&quot;heading-4.4&quot;&gt;替换^M字符&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;sed -i -e &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;s/^M//g&amp;#39;&lt;/span&gt; file
&lt;span style=&quot;color:#75715e&quot;&gt;# or&lt;/span&gt;
sed -i -e &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;s/^M//g&amp;#39;&lt;/span&gt; directory/*&lt;/pre&gt;
&lt;p&gt;
   注意: 这里的 &lt;code&gt;^M&lt;/code&gt; 要使用 &lt;code&gt;CTRL-V CTRL-M&lt;/code&gt; 生成，而不是直接键入 &lt;code&gt;^M&lt;/code&gt;
&lt;/p&gt;

&lt;h1 id=&quot;heading-5&quot;&gt;NET&lt;/h1&gt;
&lt;p&gt;
  网络相关的笔记
&lt;/p&gt;

&lt;h2 id=&quot;heading-5.1&quot;&gt;iptables&lt;/h2&gt;
&lt;p&gt;
   iptable修改forword默认策略
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;iptables -P FORWARD ACCEPT&lt;/pre&gt;

&lt;h2 id=&quot;heading-5.2&quot;&gt;SSH&lt;/h2&gt;
&lt;h3 id=&quot;heading-5.2.1&quot;&gt;git clone时不提示Are you sure you want to continue connecting (yes/no)?&lt;/h3&gt;
&lt;p&gt;
    &lt;code&gt;~/.ssh/config&lt;/code&gt;
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Host github.com
    StrictHostKeyChecking no&lt;/pre&gt;

&lt;h1 id=&quot;heading-6&quot;&gt;Disk&lt;/h1&gt;
&lt;p&gt;
  磁盘相关笔记, 包括分区，挂载，磁盘清理修复等
&lt;/p&gt;

&lt;h2 id=&quot;heading-6.1&quot;&gt;thunar提示&amp;#34;not authorized to perform operation&amp;#34;&lt;/h2&gt;
&lt;p&gt;
   之前我一直参考&lt;a href=&quot;http://blog.chinaunix.net/uid-25906175-id-3030600.html&quot;&gt;http://blog.chinaunix.net/uid-25906175-id-3030600.html&lt;/a&gt;, 通过修改 &lt;b&gt;/usr/share/polkit-1/actions/org.freedesktop.udisks.policy&lt;/b&gt; 中 &lt;b&gt;filesystem-mount-system&lt;/b&gt; 的 &lt;code&gt;auth_admin_keep&lt;/code&gt; 为 &lt;code&gt;yes&lt;/code&gt;, 但最近(2018-8-2)更新重启后这种方法无法成功
&lt;/p&gt;

&lt;p&gt;
   后来参考这里&lt;a href=&quot;https://wiki.archlinux.org/index.php/Polkit#Authentication_agents&quot;&gt;https://wiki.archlinux.org/index.php/Polkit#Authentication_agents&lt;/a&gt; 和 &lt;a href=&quot;https://askubuntu.com/questions/487911/thunar-not-authorized-to-acces-mounted-volumes&quot;&gt;https://askubuntu.com/questions/487911/thunar-not-authorized-to-acces-mounted-volumes&lt;/a&gt;, 通过安装 &lt;b&gt;Authentication_agents&lt;/b&gt; 并启动
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1&lt;/pre&gt;

&lt;h1 id=&quot;heading-7&quot;&gt;数据库&lt;/h1&gt;
&lt;h2 id=&quot;heading-7.1&quot;&gt;设置mysql的密码小于8字符&lt;/h2&gt;
&lt;p&gt;
   ERROR 1819 (HY000): Your password does not satisfy the current policy requirements
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;SET&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;GLOBAL&lt;/span&gt;  validate_password_policy&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;LOW&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 LOW
     政策只测试密码长度。 密码必须至少有8个字符长。
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 MEDIUM
     政策的条件 密码必须包含至少1数字字符,1 大写和小写字符,和1特别 (nonalphanumeric)字符。
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 STRONG
     政策的情况 密码子字符串长度为4的或更长时间不能匹配 单词在字典文件中,如果一个人被指定。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;SET&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;GLOBAL&lt;/span&gt; validate_password_length&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;6&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ALTER&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;USER&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;test_user&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;localhost&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt; IDENTIFIED &lt;span style=&quot;color:#66d9ef&quot;&gt;BY&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;test_password&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;&lt;/pre&gt;
&lt;h2 id=&quot;heading-7.2&quot;&gt;修改postgresql字段长度&lt;span class=&quot;tag&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;linux&lt;/span&gt;&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;ALTER&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;TABLE&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ALTER&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;COLUMN&lt;/span&gt; password &lt;span style=&quot;color:#66d9ef&quot;&gt;TYPE&lt;/span&gt; character varying(&lt;span style=&quot;color:#ae81ff&quot;&gt;256&lt;/span&gt;);&lt;/pre&gt;

&lt;h1 id=&quot;heading-8&quot;&gt;进程&lt;/h1&gt;
&lt;h2 id=&quot;heading-8.1&quot;&gt;查看进程work目录&lt;/h2&gt;
&lt;p&gt;
   &lt;a href=&quot;https://superuser.com/questions/103309/how-can-i-know-the-absolute-path-of-a-running-process&quot;&gt;https://superuser.com/questions/103309/how-can-i-know-the-absolute-path-of-a-running-process&lt;/a&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;pwdx $pid&lt;/pre&gt;

&lt;h1 id=&quot;heading-9&quot;&gt;命令&lt;/h1&gt;
&lt;h2 id=&quot;heading-9.1&quot;&gt;find&lt;/h2&gt;
&lt;p&gt;
   &lt;a href=&quot;https://linuxstory.org/fros-plan-2017-11-02-linux-find-command/&quot;&gt;参考&lt;/a&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;find /tmp -name test                    &lt;span style=&quot;color:#75715e&quot;&gt;# 查询tmp目录下test文件&lt;/span&gt;
find /tmp -name test                    &lt;span style=&quot;color:#75715e&quot;&gt;# 查询tmp目录下以test开头的文件&lt;/span&gt;
find /etc -name test??                  &lt;span style=&quot;color:#75715e&quot;&gt;# 查询tmp目录下以test开头并且文件名为6位字母的文件&lt;/span&gt;
find /tmp -user test                    &lt;span style=&quot;color:#75715e&quot;&gt;# 查询test用户在tmp目录下创建的文件&lt;/span&gt;
find /tmp -size +204800                 &lt;span style=&quot;color:#75715e&quot;&gt;# 查询tmp目录下大于100MB的文件&lt;/span&gt;
find /tmp -size -20480                  &lt;span style=&quot;color:#75715e&quot;&gt;# 查询tmp目录下小于10MB的文件&lt;/span&gt;
find /tmp -size +20480 &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; -size -204800 &lt;span style=&quot;color:#75715e&quot;&gt;# 查询tmp目录下大于100MB的文件并且小于10MB的文件&lt;/span&gt;
find /tmp -size +20480 -a -size -204800 &lt;span style=&quot;color:#75715e&quot;&gt;# 同上&lt;/span&gt;
find /tmp -amin -10                     &lt;span style=&quot;color:#75715e&quot;&gt;# 查询10分钟之前访问的文件&lt;/span&gt;
find /tmp -mmin -10                     &lt;span style=&quot;color:#75715e&quot;&gt;# 查询10分钟之内修改的文件&lt;/span&gt;
find /tmp -cmin -10                     &lt;span style=&quot;color:#75715e&quot;&gt;# 查询10分钟之内属性被修改的文件&lt;/span&gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-9.2&quot;&gt;awk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 显示行号和内容
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;zcat test.log | awk &amp;#39;{print NR,$0}&amp;#39;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 统计文件列数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;zcat test.log | awk &amp;#39;{print NF}&amp;#39; | sort | uniq -c&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 筛选列数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;zcat test.log | awk &amp;#39;{ if (NF &amp;lt; 30) {print NR,NF,$0}}&amp;#39;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-9.3&quot;&gt;date&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 字符串转时间戳
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;date -d &amp;#39;06/12/2012 07:21:22&amp;#39; +&amp;#34;%s&amp;#34;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 时间戳转字符串
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;date -r 1644915240&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-9.4&quot;&gt;curl&lt;/h2&gt;
&lt;h3 id=&quot;heading-9.4.1&quot;&gt;curl请求指定IP的http域名&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;curl http://ip:port/test -H &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;host:example.com&amp;#39;&lt;/span&gt;&lt;/pre&gt;

&lt;h3 id=&quot;heading-9.4.2&quot;&gt;curl请求指定IP的https域名&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;curl https://example.com/test --resolve &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;example.com:443:ip&amp;#39;&lt;/span&gt;&lt;/pre&gt;

&lt;h3 id=&quot;heading-9.4.3&quot;&gt;curl请求搭配grep查询&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;curl http://192.168.60.32:9200/_cat/indices?v 2&amp;gt;&amp;amp;1 | grep updns&lt;/pre&gt;

&lt;h3 id=&quot;heading-9.4.4&quot;&gt;curl请求form&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;curl -d &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;param1=value1&amp;amp;param2=value2&amp;#34;&lt;/span&gt; -X POST http://localhost:3000/data&lt;/pre&gt;
&lt;p&gt;
    或者
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;curl -d &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;param1=value1&amp;amp;param2=value2&amp;#34;&lt;/span&gt; -H &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Content-Type: application/x-www-form-urlencoded&amp;#34;&lt;/span&gt; -X POST http://localhost:3000/data&lt;/pre&gt;

&lt;h2 id=&quot;heading-9.5&quot;&gt;wget&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 下载目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;wget -r -np -nH http://127.0.0.0.1:8000/test-dir&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>ansible快速部署加速方案</title>
      <link href="" rel="alternate"></link>
      <published>Sun, 08 Oct 2017 00:00:00 +0000</published>
      <updated>Sun, 08 Oct 2017 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/10/ansible快速部署加速方案.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/10/ansible快速部署加速方案.html</id>
      <summary type="html">
&lt;p&gt;
ansible是基于Python的 &lt;b&gt;自动化部署&lt;/b&gt; 方案,但是目前只是通过命令行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ansible -i hosts all -a &amp;#39;uptime&amp;#39;
# or
ansible-playbook -i hosts playbook.yml -e &amp;#39;args&amp;#39; -t deploy&lt;/pre&gt;
&lt;p&gt;
实现自动化部署.
&lt;/p&gt;

&lt;p&gt;
长此以往，虽然可以实现所谓的自动化，但产品业务线多且杂的情况下，项目很难维护，更不用说以文件为存储的表现形式很差,针对目前使用ansible的经验以及使用中的困难,可以针对性的提出一些解决方案
&lt;/p&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;加速&lt;/h1&gt;

&lt;h2 id=&quot;heading-1.1&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;
  自动化部署其中最大的障碍就是...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;加速&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;目标&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;web界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;任务队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
ansible是基于Python的 &lt;b&gt;自动化部署&lt;/b&gt; 方案,但是目前只是通过命令行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ansible -i hosts all -a &amp;#39;uptime&amp;#39;
# or
ansible-playbook -i hosts playbook.yml -e &amp;#39;args&amp;#39; -t deploy&lt;/pre&gt;
&lt;p&gt;
实现自动化部署.
&lt;/p&gt;

&lt;p&gt;
长此以往，虽然可以实现所谓的自动化，但产品业务线多且杂的情况下，项目很难维护，更不用说以文件为存储的表现形式很差,针对目前使用ansible的经验以及使用中的困难,可以针对性的提出一些解决方案
&lt;/p&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;加速&lt;/h1&gt;

&lt;h2 id=&quot;heading-1.1&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;
  自动化部署其中最大的障碍就是 &lt;b&gt;网络&lt;/b&gt; 的原因
&lt;/p&gt;

&lt;p&gt;
  其中需要通过网络上传一些模板文件,有的甚至还需要上传一些压缩包,虽然说几MB的东西很快就能上传成功，但如果把这上传文件所需要的2秒乘以上百，上千台主机呢,更不用说ansible的表现形式就是一个任务一个任务的往下执行,假如在上传模板这一步卡住(等待所有服务器上传成功),这时某台未模板化的服务器的某服务需要重启，是不是会出问题呢
&lt;/p&gt;

&lt;h2 id=&quot;heading-1.2&quot;&gt;方案&lt;/h2&gt;
&lt;p&gt;
  针对这一问题,目前想到的解决方案如下:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;适当增加fork数&lt;/b&gt;
    目前fork数默认为50，可以适当增加
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;大文件使用内网(外网)下载&lt;/b&gt;
    从部署机上上传文件可能会出现这样那样的问题，尤其是上传到国外服务器时经常会出现ansible playbook的任务卡住问题(其实是正在以几KB/s的龟速运行)，所以其中大于xxMB的文件(压缩包)全部使用从远程服务器上下载方式,并且全部进行加密处理
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;把超过几百台服务器的节点分组多进程运行&lt;/b&gt;
    服务器一旦多了，对应任务的等待时间也就多了，所以将500台的节点分为十组，每组50台,使用多进程分别同时运行，这样可以有效减少任务等待时间,需要注意每组运行失败的服务器。
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;把经常出问题或者网络不太好的节点放到最后运行&lt;/b&gt;
    像中国移动以及香港，国外的某些节点在运行ansible playbook的时候总会或多或少的出些问题,这些节点可以考虑放到最后,并且需要找出问题原因进行优化
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-2&quot;&gt;目标&lt;/h1&gt;

&lt;h2 id=&quot;heading-2.1&quot;&gt;web界面&lt;/h2&gt;
&lt;p&gt;
   使用过ansible的同学一定知道ansible-tower，它是ansible的web方式部署，通过web界面就可以添加删除任务,并且运行ansible playbook,可惜，它是收费的 /捂脸
&lt;/p&gt;

&lt;h2 id=&quot;heading-2.2&quot;&gt;任务队列&lt;/h2&gt;
&lt;p&gt;
   把ansible playbook放到任务队列里，由消费者去消费对应的任务
&lt;/p&gt;

&lt;p&gt;
   未完待续...
&lt;/p&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>ansible-playbook中tasks单进程</title>
      <link href="" rel="alternate"></link>
      <published>Tue, 19 Sep 2017 00:00:00 +0000</published>
      <updated>Tue, 19 Sep 2017 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/09/ansible-playbook中tasks单进程.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/09/ansible-playbook中tasks单进程.html</id>
      <summary type="html">
&lt;p&gt;
之前有一个需求,ansible-playbook中需要某一步单步执行,也就是说在有多台服务器时,某个任务只能一台服务器执行完后,另一台服务器才能执行,否者对应集群的服务会出问题
&lt;/p&gt;

&lt;p&gt;
这是一个很简单的需求,ansible中也有对应的实现, &lt;code&gt;--fork 1&lt;/code&gt; 或者 使用 &lt;code&gt;serial&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
但是如果有人忘记加 &lt;code&gt;--fork 1&lt;/code&gt; 了呢，而且该任务是在子任务中，使用 &lt;b&gt;include&lt;/b&gt; 加载, &lt;code&gt;serial&lt;/code&gt; 关键字无法在某一特定任务中使用,只能与 &lt;b&gt;hosts&lt;/b&gt; 同级
&lt;/p&gt;

&lt;p&gt;
所幸，在这里 &lt;a href=&quot;https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task&quot;&gt;https://www.bountysource.com/issues/26342862-support...&lt;/a&gt;&lt;/p&gt;</summary>
      <content type="html">
&lt;p&gt;
之前有一个需求,ansible-playbook中需要某一步单步执行,也就是说在有多台服务器时,某个任务只能一台服务器执行完后,另一台服务器才能执行,否者对应集群的服务会出问题
&lt;/p&gt;

&lt;p&gt;
这是一个很简单的需求,ansible中也有对应的实现, &lt;code&gt;--fork 1&lt;/code&gt; 或者 使用 &lt;code&gt;serial&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
但是如果有人忘记加 &lt;code&gt;--fork 1&lt;/code&gt; 了呢，而且该任务是在子任务中，使用 &lt;b&gt;include&lt;/b&gt; 加载, &lt;code&gt;serial&lt;/code&gt; 关键字无法在某一特定任务中使用,只能与 &lt;b&gt;hosts&lt;/b&gt; 同级
&lt;/p&gt;

&lt;p&gt;
所幸，在这里 &lt;a href=&quot;https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task&quot;&gt;https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task&lt;/a&gt; 找到了解决办法,使用 &lt;b&gt;delegate_to&lt;/b&gt;
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;-&lt;/span&gt; name: service restart
  &lt;span style=&quot;color:#75715e&quot;&gt;# serial: 1 would be the proper solution here, but that can only be set on play level&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# upstream issue: https://github.com/ansible/ansible/issues/12170&lt;/span&gt;
  run_once: true
  with_items: &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;{{play_hosts}}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;
  delegate_to: &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;{{ item }}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  command: &lt;span style=&quot;color:#e6db74&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;/bin/service restart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;/pre&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>Linux总结(草稿)</title>
      <link href="" rel="alternate"></link>
      <published>Wed, 12 Jul 2017 00:00:00 +0000</published>
      <updated>Wed, 12 Jul 2017 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/07/Linux伪总结.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/07/Linux伪总结.html</id>
      <summary type="html">
&lt;h1 id=&quot;heading-1&quot;&gt;Linux发展历史&lt;/h1&gt;
&lt;p&gt;
  Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
  后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
  推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
  UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
  于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展
&lt;/p&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;Linux的最小组成&lt;/h1&gt;
&lt;p&gt;
  Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
  进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。
&lt;/p&gt;

&lt;p&gt;
  语言:一般有头文件与库文件,头文件为实现,库文件为声明
&lt;/p&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;Linux的安装与启动&lt;/h1&gt;
&lt;p&gt;
  当linux启动时，首先启动内核，内核调用init来完成引导进程...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;Linux发展历史&lt;/h1&gt;
&lt;p&gt;
  Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
  后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
  推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
  UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
  于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展
&lt;/p&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;Linux的最小组成&lt;/h1&gt;
&lt;p&gt;
  Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
  进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。
&lt;/p&gt;

&lt;p&gt;
  语言:一般有头文件与库文件,头文件为实现,库文件为声明
&lt;/p&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;Linux的安装与启动&lt;/h1&gt;
&lt;p&gt;
  当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
  然后运行/etc/rc.d/init.d中运行级别的启动脚本。
&lt;/p&gt;

&lt;p&gt;
  分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便
&lt;/p&gt;

&lt;p&gt;
  文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等,
  其中ext4单个分区最大可管理16TB磁盘,xfs单分区最大支持2PB磁盘
&lt;/p&gt;

&lt;p&gt;
  内存管理：当内存不够时,linux会杀死内存占用最高的进程,像mongodb就是一个占内存大户
&lt;/p&gt;

&lt;p&gt;
  常用命令:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 file: 识别文件类型与编码格式
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 ldd:用于打印程序或者库文件所依赖的共享库列表
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  运行级别:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 0: 停机
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
　　- 1: 单用户模式
　　- 2: 多用户，没有 NFS
　　- 3: 完全多用户模式(标准的运行级)
　　- 4: 没有用到
　　- 5: X11
　　- 6: 重新启动
&lt;/p&gt;
&lt;/blockquote&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>我的Linux历程</title>
      <link href="" rel="alternate"></link>
      <published>Wed, 05 Jul 2017 00:00:00 +0000</published>
      <updated>Wed, 05 Jul 2017 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/07/我的Linux历程.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/07/我的Linux历程.html</id>
      <summary type="html">
&lt;h1 id=&quot;heading-1&quot;&gt;Linux&lt;/h1&gt;
&lt;p&gt;
  是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统
&lt;/p&gt;

&lt;p&gt;
  Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。
&lt;/p&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;Linux发行版&lt;/h1&gt;
&lt;p&gt;
  简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版
&lt;/p&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;Linux历程&lt;/h1&gt;
&lt;p&gt;
  曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,
  大概是这样的 centos --&amp;gt; kali --&amp;gt; ubuntu --&amp;gt; fedora --&amp;gt;...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;Linux发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;Linux历程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;Linux的娱乐性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;Linux上的实用性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;深入了解Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;Linux&lt;/h1&gt;
&lt;p&gt;
  是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统
&lt;/p&gt;

&lt;p&gt;
  Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。
&lt;/p&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;Linux发行版&lt;/h1&gt;
&lt;p&gt;
  简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版
&lt;/p&gt;

&lt;h1 id=&quot;heading-3&quot;&gt;Linux历程&lt;/h1&gt;
&lt;p&gt;
  曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,
  大概是这样的 centos --&amp;gt; kali --&amp;gt; ubuntu --&amp;gt; fedora --&amp;gt; ubuntu kylin --&amp;gt; mint --&amp;gt; debian --&amp;gt; fedora --&amp;gt; archlinux ......,Linux发行版大概分为3系,
  debain系,包括ubuntu,mint,kali等,使用包管理器apt-get、aptitude、dpkg;centos或者说红帽系，包括众所周知的小白鼠版本fedora，
  如果不是每半年要重装一次，我会一直使用它,而不是archlinux,所使用的包管理器yum,fedora已更换成dnf;
  还有其它系，因为它们所占份额太小,包括archlinux,gentoo等
&lt;/p&gt;

&lt;h1 id=&quot;heading-4&quot;&gt;Linux的娱乐性&lt;/h1&gt;
&lt;p&gt;
  说实话，Linux上的游戏对比windows上就是渣，大致是因为Linux上驱动的问题，这也难怪Linus会对nvidia竖中指，虽说有开源的实现,但与nvidia在windows上性能的对比还相差甚远，
  不过Linux上还是有很多可玩的游戏的,steam对Linux的支持尤为重要,
  推荐几个steam上的游戏,正好这几天夏促打折:无主之地2,饥荒，cs:go等
&lt;/p&gt;

&lt;h1 id=&quot;heading-5&quot;&gt;Linux上的实用性&lt;/h1&gt;
&lt;p&gt;
  Linux在个人桌面上属于小众市场,使用Linux的大多是程序员，或者是工作需要才会使用，虽说对比windows，Linux也足够应付日常生活,但并不是所有公司都会照顾这小众的Linux用户,
  非常感谢网易云音乐与深度团队合作开发了网易云音乐Linux客户端，非常鄙视腾讯放弃对LinuxQQ的维护
&lt;/p&gt;

&lt;h1 id=&quot;heading-6&quot;&gt;深入了解Linux&lt;/h1&gt;
&lt;p&gt;
  linux由内核,shell,文件系统和应用软件组成，没有扩展名的概念，分为普通文件，目录，链接，设备,管道文件,其文件系统结构:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 bin  存放二进制可执行文件(ls,cat,mkdir等)
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 boot  存放用于系统引导时使用的各种文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 dev 用于存放设备文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 etc  存放系统配置文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 home 存放所有用户文件的根目录
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 lib  存放跟文件系统中的程序运行所需要的共享库及内核模块
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 mnt  系统管理员安装临时文件系统的安装点
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 opt  额外安装的可选应用程序包所放置的位置
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 proc  虚拟文件系统，存放当前内存的映射
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 root  超级用户目录
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 sbin  存放二进制可执行文件，只有root才能访问
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 tmp  用于存放各种临时文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 var  用于存放运行时需要改变数据的文件
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>晒晒我的Linux及桌面</title>
      <link href="" rel="alternate"></link>
      <published>Mon, 01 May 2017 00:00:00 +0000</published>
      <updated>Mon, 01 May 2017 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/05/晒晒我的Linux及桌面.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/05/晒晒我的Linux及桌面.html</id>
      <summary type="html">
&lt;p&gt;

&lt;a href=&quot;https://static.honmaple.com/images/2017/05/149364033937825.png?type=show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://static.honmaple.com/images/2017/05/149364033937825.png?type=thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;

&lt;a href=&quot;https://static.honmaple.com/images/2017/05/149364138162872.png?type=show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://static.honmaple.com/images/2017/05/149364138162872.png?type=thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;

&lt;a href=&quot;https://static.honmaple.com/images/2017/05/149364171386276.png?type=show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://static.honmaple.com/images/2017/05/149364171386276.png?type=thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
ps:真TM的闲着蛋疼
&lt;/p&gt;</summary>
      <content type="html">
&lt;p&gt;

&lt;a href=&quot;https://static.honmaple.com/images/2017/05/149364033937825.png?type=show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://static.honmaple.com/images/2017/05/149364033937825.png?type=thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;

&lt;a href=&quot;https://static.honmaple.com/images/2017/05/149364138162872.png?type=show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://static.honmaple.com/images/2017/05/149364138162872.png?type=thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;

&lt;a href=&quot;https://static.honmaple.com/images/2017/05/149364171386276.png?type=show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://static.honmaple.com/images/2017/05/149364171386276.png?type=thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
ps:真TM的闲着蛋疼
&lt;/p&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>linux终端常用快捷键</title>
      <link href="" rel="alternate"></link>
      <published>Thu, 16 Feb 2017 00:00:00 +0000</published>
      <updated>Thu, 16 Feb 2017 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2017/02/linux终端常用快捷键.html" type="text/html"/>
      <id>https://honmaple.me/articles/2017/02/linux终端常用快捷键.html</id>
      <summary type="html">
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 移动光标快捷键
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ctrl+f	向前移动一个字符
ctrl+b	向后移动一个字符
alt+f	向前移动一个单词
alt+b	向后移动一个单词
ctrl+a	移动到当前行首
ctrl+e	移动到当前行尾
ctrl+l	清屏，并在屏幕最上面开始一个新行&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 编辑命令行快捷键
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ctrl+d	删除当前的字符
ctrl+t	交换当前字符和前一个字符的位置
alt+t	交换当前单词和前一个单词的位置
alt+u	把当前单词变成大写
alt+l	把当前单词变成小写
alt+c	把当前单词变成首字母大写的单词
ctrl+v	添加一个特殊字符，例如，要添加一个制表符，按ctrl+v+tab&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 剪切、粘贴快捷键...&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
      <content type="html">
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 移动光标快捷键
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ctrl+f	向前移动一个字符
ctrl+b	向后移动一个字符
alt+f	向前移动一个单词
alt+b	向后移动一个单词
ctrl+a	移动到当前行首
ctrl+e	移动到当前行尾
ctrl+l	清屏，并在屏幕最上面开始一个新行&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 编辑命令行快捷键
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ctrl+d	删除当前的字符
ctrl+t	交换当前字符和前一个字符的位置
alt+t	交换当前单词和前一个单词的位置
alt+u	把当前单词变成大写
alt+l	把当前单词变成小写
alt+c	把当前单词变成首字母大写的单词
ctrl+v	添加一个特殊字符，例如，要添加一个制表符，按ctrl+v+tab&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 剪切、粘贴快捷键
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ctrl+k	剪切文本直到行的末尾
ctrl+u	剪切文本直到行的起始
ctrl+w	剪切光标前的单词
alt+d	剪切光标后的单词
ctrl+y	粘贴最近剪切的文本
alt+y	回退到先前剪切的文本并粘贴它
ctrl+c	删除整行&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>centos7安装python3及pip3</title>
      <link href="" rel="alternate"></link>
      <published>Thu, 07 Jul 2016 00:00:00 +0000</published>
      <updated>Thu, 07 Jul 2016 00:00:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2016/07/centos7安装python3及pip3.html" type="text/html"/>
      <id>https://honmaple.me/articles/2016/07/centos7安装python3及pip3.html</id>
      <summary type="html">
&lt;h1 id=&quot;heading-1&quot;&gt;安装Python3&lt;/h1&gt;

&lt;p&gt;
安装python3很简单
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 下载源码并且编译
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 安装epel
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
这里采用第二种方法:
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install epel-release&lt;/pre&gt;

&lt;p&gt;
安装完成之后,yum list python3*,你就可以看见 &lt;b&gt;python34&lt;/b&gt;
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install python34&lt;/pre&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;安装pip3&lt;/h1&gt;
&lt;p&gt;
  &lt;a href=&quot;http://stackoverflow.com/questions/6587507/how-to-install-pip-with-python-3&quot;&gt;参考问题&lt;/a&gt;
  如果在上述安装 &lt;b&gt;python3&lt;/b&gt;时采用了第二种方法,pip默认未安装,而且无法通过&lt;code&gt;yum install python34-pip&lt;/code&gt;来安装
&lt;/p&gt;

&lt;p&gt;
  正确的方法应该是:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install python34-setuptools
easy...&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;安装Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;安装pip3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;安装Python3&lt;/h1&gt;

&lt;p&gt;
安装python3很简单
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 下载源码并且编译
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 安装epel
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
这里采用第二种方法:
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install epel-release&lt;/pre&gt;

&lt;p&gt;
安装完成之后,yum list python3*,你就可以看见 &lt;b&gt;python34&lt;/b&gt;
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install python34&lt;/pre&gt;

&lt;h1 id=&quot;heading-2&quot;&gt;安装pip3&lt;/h1&gt;
&lt;p&gt;
  &lt;a href=&quot;http://stackoverflow.com/questions/6587507/how-to-install-pip-with-python-3&quot;&gt;参考问题&lt;/a&gt;
  如果在上述安装 &lt;b&gt;python3&lt;/b&gt;时采用了第二种方法,pip默认未安装,而且无法通过&lt;code&gt;yum install python34-pip&lt;/code&gt;来安装
&lt;/p&gt;

&lt;p&gt;
  正确的方法应该是:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;yum install python34-setuptools
easy_install-3.4 pip &lt;span style=&quot;color:#75715e&quot;&gt;# 这里可能有一些出入,总之是使用python3的easy_install&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;
ok,就这样
&lt;/p&gt;</content>
        <category term="Tech/Linux"></category>
    </entry>
</feed>