<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
  <title>紅楓吟</title>
    <subtitle>风落花语风落天，花落风雨花落田.</subtitle>
  <link href="https://honmaple.me/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://honmaple.me/index.html"/>
  <generator uri="https://github.com/honmaple/snow">Snow</generator>
    <updated>Sat, 05 Oct 2024 20:13:59 +0000</updated>
  <id>https://honmaple.me</id>
    <entry xml:lang="zh">
      <title>Flutter实现本地化多语言</title>
      <link href="https://honmaple.me/articles/2024/10/fluttershi-xian-ben-di-hua-duo-yu-yan.html" rel="alternate"></link>
      <published>Wed, 02 Oct 2024 13:12:27 +0000</published>
      <updated>Sat, 05 Oct 2024 20:13:59 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2024/10/fluttershi-xian-ben-di-hua-duo-yu-yan.html" type="text/html"/>
      <id>https://honmaple.me/articles/2024/10/fluttershi-xian-ben-di-hua-duo-yu-yan.html</id>
      <summary type="html">
&lt;h2 id=&quot;heading-1&quot;&gt;内置组件本地化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 添加依赖
&lt;/p&gt;

&lt;p&gt;
      Flutter默认组件的本地化只需要添加
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;flutter_localizations&lt;/span&gt;:
  &lt;span style=&quot;color:#66d9ef&quot;&gt;sdk&lt;/span&gt;: flutter&lt;/pre&gt;
&lt;p&gt;
      使用命令行添加就是
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;flutter pub add flutter_localizations --sdk=flutter&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改入口组件 &lt;b&gt;main.dart&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;package:flutter_localizations/flutter_localizations.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;&lt;/pre&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; MaterialApp(
  title: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Localizations Sample App&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;,
  localizationsDelegates...&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;内置组件本地化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;自定义本地化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;自定义本地化(非代码自动生成)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;本地化多语言的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;优化多语言选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;内置组件本地化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 添加依赖
&lt;/p&gt;

&lt;p&gt;
      Flutter默认组件的本地化只需要添加
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;flutter_localizations&lt;/span&gt;:
  &lt;span style=&quot;color:#66d9ef&quot;&gt;sdk&lt;/span&gt;: flutter&lt;/pre&gt;
&lt;p&gt;
      使用命令行添加就是
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;flutter pub add flutter_localizations --sdk=flutter&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改入口组件 &lt;b&gt;main.dart&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;package:flutter_localizations/flutter_localizations.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;&lt;/pre&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; MaterialApp(
  title: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Localizations Sample App&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;,
  localizationsDelegates: [
    GlobalMaterialLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
  ],
  supportedLocales: [
    Locale(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;en&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;), &lt;span style=&quot;color:#75715e&quot;&gt;// English
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;    Locale(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;), &lt;span style=&quot;color:#75715e&quot;&gt;// Chinese
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;  ],
  home: MyHomePage(),
);&lt;/pre&gt;
&lt;p&gt;
      这样Flutter内置组件所显示的语言就能和系统语言保持一致，如果想要手动修改，只需要添加参数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; MaterialApp(
  ...
  locale: Locale(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;),
);&lt;/pre&gt;

&lt;p&gt;
      如果想要修改指定的组件，需要使用到 &lt;code&gt;Localizations.override&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Widget build(BuildContext context) {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; Scaffold(
    appBar: AppBar(
      title: Text(widget.title),
    ),
    body: Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;[
          Localizations.override(
            context: context,
            locale: &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; Locale(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;),
            child: Builder(
              builder: (context) {
                &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; CalendarDatePicker(
                  initialDate: DateTime.now(),
                  firstDate: DateTime(&lt;span style=&quot;color:#ae81ff&quot;&gt;1900&lt;/span&gt;),
                  lastDate: DateTime(&lt;span style=&quot;color:#ae81ff&quot;&gt;2100&lt;/span&gt;),
                  onDateChanged: (value) {},
                );
              },
            ),
          ),
        ],
      ),
    ),
  );
}&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;自定义本地化&lt;/h2&gt;
&lt;p&gt;
   根据官方文档，可以利用 &lt;code&gt;flutter_localozations&lt;/code&gt; 和 &lt;code&gt;intl&lt;/code&gt; 来实现。但是如果根据官方文档，那可不是一般的麻烦，而是相当麻烦，操作步骤包括但不限于
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 修改 &lt;code&gt;pubsepc.yaml&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 添加 &lt;code&gt;l10n.yaml&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 添加 &lt;code&gt;.arb&lt;/code&gt; 文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
   当然，这一切也不能说是很麻烦，毕竟只要第一次改好，后续只用修改 &lt;code&gt;.arb&lt;/code&gt; 文件就能自动运行，但根据这个流程生成的多语言本地化，我觉得有几个问题：
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 自动生成的 &lt;code&gt;.dart&lt;/code&gt; 文件是保存在 &lt;code&gt;{项目目录}/.dart_tool/flutter_gen/gen_l10n&lt;/code&gt; 目录下的，这会导致项目默认的代码没有多语言相关，只有一些不知所谓的 &lt;code&gt;.arb&lt;/code&gt; 文件，毕竟与多语言相关的代码都是自动生成的
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 也是最重要的一点， 我为什么要在默认语言下重复定义一个不能带空格，只允许定义符合 &lt;b&gt;dart方法名称&lt;/b&gt; 的关键字以供调用，比如一个简单的字符串
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Hello World&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)&lt;/pre&gt;

&lt;p&gt;
      我必须在默认语言定义一个
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;// app_es.arb
&amp;#34;helloWorld&amp;#34;: &amp;#34;Hello World&amp;#34;&lt;/pre&gt;

&lt;p&gt;
      然后在其它语言定义
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;// app_zh.arb
&amp;#34;helloWorld&amp;#34;: &amp;#34;你好 世界&amp;#34;&lt;/pre&gt;
&lt;p&gt;
      最后再修改默认的调用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(AppLocations.of(context).helloWorld)&lt;/pre&gt;
&lt;p&gt;
      我为什么不能直接使用原有的字符串呢，这样就不用再为默认的语言添加额外的翻译，比如
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(AppLocations.of(context).tr(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Hello World&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;))&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
   所以，我仔细研究了一下，大抵不用如此麻烦
&lt;/p&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;自定义本地化(非代码自动生成)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 首先添加 &lt;b&gt;l10n.dart&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;dart:async&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;package:flutter/foundation.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;package:flutter/widgets.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;package:flutter_localizations/flutter_localizations.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;package:intl/intl.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;as&lt;/span&gt; intl;

&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;l10n_en.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;l10n_zh.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;L10n&lt;/span&gt; {
  L10n(&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; locale)
  &lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; localeName &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; intl.Intl.canonicalizedLocale(locale.toString());

  &lt;span style=&quot;color:#66d9ef&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; localeName;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;static&lt;/span&gt; L10n&lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt; of(BuildContext context) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; Localizations.of&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;L10n&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;(context, L10n);
  }

  &lt;span style=&quot;color:#66d9ef&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; LocalizationsDelegate&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;L10n&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; delegate &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; _L10nDelegate();

  &lt;span style=&quot;color:#66d9ef&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; List&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;LocalizationsDelegate&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;dynamic&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; localizationsDelegates &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;LocalizationsDelegate&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;dynamic&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;[
    delegate,
    GlobalMaterialLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
  ];

  &lt;span style=&quot;color:#66d9ef&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; List&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;Locale&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; supportedLocales &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;Locale&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;[
    Locale(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;en&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;),
    Locale(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;)
  ];

  &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; tr(&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; key);
}

&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;_L10nDelegate&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;extends&lt;/span&gt; LocalizationsDelegate&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;L10n&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; _L10nDelegate();

  &lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;@&lt;/span&gt;override
  Future&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;L10n&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; load(Locale locale) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; SynchronousFuture&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;L10n&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;(lookupL10n(locale));
  }

  &lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;@&lt;/span&gt;override
  &lt;span style=&quot;color:#66d9ef&quot;&gt;bool&lt;/span&gt; isSupported(Locale locale) &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;[&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;en&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;].contains(locale.languageCode);

  &lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;@&lt;/span&gt;override
  &lt;span style=&quot;color:#66d9ef&quot;&gt;bool&lt;/span&gt; shouldReload(_L10nDelegate old) &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;false&lt;/span&gt;;
}

L10n lookupL10n(Locale locale) {
  &lt;span style=&quot;color:#75715e&quot;&gt;// Lookup logic when only language code is specified.
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;  &lt;span style=&quot;color:#66d9ef&quot;&gt;switch&lt;/span&gt; (locale.languageCode) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;en&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; L10nEn();
    &lt;span style=&quot;color:#66d9ef&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; L10nZh();
  }

  &lt;span style=&quot;color:#66d9ef&quot;&gt;throw&lt;/span&gt; FlutterError(
    &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;L10n.delegate failed to load unsupported locale &amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;$&lt;/span&gt;locale&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;. This is likely &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;an issue with the localizations generation tool. Please file an issue &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;on GitHub with a reproducible sample app and the gen-l10n configuration &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;that was used.&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;);
}&lt;/pre&gt;
&lt;p&gt;
      上述代码其实是由根据官方文档自动生成的 &lt;code&gt;.dart&lt;/code&gt; 文件转化而来
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 添加默认语言的翻译
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;// l10n_en.dart
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;l10n.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;L10nEn&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;extends&lt;/span&gt; L10n {
  L10nEn([&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; locale &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;en&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;(locale);

  &lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;@&lt;/span&gt;override
  &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; tr(&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; key) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; translations[key] &lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt; key;
  }
}

&lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; translations &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; {};&lt;/pre&gt;
&lt;p&gt;
      对的，你没有看错， &lt;code&gt;translations&lt;/code&gt; 甚至可以是空的，这样就不用重复定义默认语言的翻译
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 添加其它语言的翻译
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;// l10n_zh.dart
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;l10n.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;L10nZh&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;extends&lt;/span&gt; L10n {
  L10nZh([&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; locale &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;(locale);

  &lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;@&lt;/span&gt;override
  &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; tr(&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; key) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; translations[key] &lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt; key;
  }
}

&lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; translations &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; {
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Settings&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;设置&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Basic Settings&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;基础设置&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Theme&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;主题&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Language&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;语言&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;About&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;关于&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Help&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;帮助&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;,
};&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改 &lt;b&gt;main.dart&lt;/b&gt; 入口组件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;app/l10n/l10n.dart&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; MaterialApp(
  title: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Localizations Sample App&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;,
  localizationsDelegates: L10n.localizationsDelegates,
  supportedLocales: L10n.supportedLocales,
  home: MyHomePage(),
);&lt;/pre&gt;
&lt;p&gt;
      这样就能使用自定义的翻译了
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-4&quot;&gt;本地化多语言的使用&lt;/h2&gt;
&lt;p&gt;
   最常用的是在 &lt;code&gt;Text&lt;/code&gt; 组件里
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(L10n.of(context)&lt;span style=&quot;color:#f92672&quot;&gt;!&lt;/span&gt;.tr(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Hello World&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;))&lt;/pre&gt;
&lt;p&gt;
   但是所有的字符都要添加 &lt;code&gt;L10n.of(context)!&lt;/code&gt; 未免有些麻烦，所以我增加了自定义扩展
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;code&gt;BuildContext&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;extension L10nContext on BuildContext {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; tr(&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; key) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;final&lt;/span&gt; t &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; L10n.of(&lt;span style=&quot;color:#66d9ef&quot;&gt;this&lt;/span&gt;);
    &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; (t &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;null&lt;/span&gt;) {
      &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; key;
    }
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; t.tr(key);
  }
}&lt;/pre&gt;

&lt;p&gt;
     使用方式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(context.tr(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Hello World&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;))&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;code&gt;String&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;extension L10nString on &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt; tr(BuildContext context) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;final&lt;/span&gt; t &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; L10n.of(context);
    &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; (t &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;null&lt;/span&gt;) {
      &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;this&lt;/span&gt;;
    }
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; t.tr(&lt;span style=&quot;color:#66d9ef&quot;&gt;this&lt;/span&gt;);
  }
}&lt;/pre&gt;

&lt;p&gt;
     使用方式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Hello World&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;.tr(context))&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;code&gt;Text&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;extension L10nText on Text {
  Text tr(BuildContext context) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;final&lt;/span&gt; t &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; L10n.of(context);
    &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; (t &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;null&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt; data &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;null&lt;/span&gt;) {
      &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;this&lt;/span&gt;;
    }
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; Text(t.tr(data &lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;&lt;/span&gt;),
      key: key,
      style: style,
      strutStyle: strutStyle,
      textAlign: textAlign,
      textDirection: textDirection,
      locale: locale,
      softWrap: softWrap,
      overflow: overflow,
      textScaler: textScaler,
      maxLines: maxLines,
      semanticsLabel: semanticsLabel,
      textWidthBasis: textWidthBasis);
  }
}&lt;/pre&gt;

&lt;p&gt;
     使用方式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Text(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Hello World&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;).tr(context)&lt;/pre&gt;

&lt;p&gt;
     如此，就能最大限度的较少对原有代码的侵略性修改
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-5&quot;&gt;优化多语言选择&lt;/h2&gt;
&lt;p&gt;
   我这里选用的是 &lt;b&gt;riverpod&lt;/b&gt; 进行状态管理，首先定义一个本地语言的状态
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;final&lt;/span&gt; localeProvider &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; StateProvider&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt;((ref) {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;;
});&lt;/pre&gt;

&lt;p&gt;
   接着修改 &lt;b&gt;main.dart&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;MyApp&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;extends&lt;/span&gt; ConsumerWidget {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; MyApp({&lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;.key});

  &lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;@&lt;/span&gt;override
  Widget build(BuildContext context, WidgetRef ref) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;final&lt;/span&gt; localeCode &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; ref.watch(localeProvider);

    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; MaterialApp(
      locale: L10n.delegate.isSupported(localeCode) &lt;span style=&quot;color:#f92672&quot;&gt;?&lt;/span&gt; Locale(localeCode) &lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;null&lt;/span&gt;,
      ...
    );
  }
}&lt;/pre&gt;

&lt;p&gt;
   这样就能很方便地修改应用的显示语言
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ref.read(localeProvider.notifier).state &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;zh&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;;&lt;/pre&gt;

&lt;h2 id=&quot;heading-6&quot;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://docs.flutter.dev/ui/accessibility-and-internationalization/internationalization&quot;&gt;https://docs.flutter.dev/ui/accessibility-and-internationalization/internationalization&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://docs.flutter.cn/ui/accessibility-and-internationalization/internationalization&quot;&gt;https://docs.flutter.cn/ui/accessibility-and-internationalization/internationalization&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Tech/Coding/Flutter"></category>
    </entry>
    <entry xml:lang="zh">
      <title>为maple-translate增加更友好的sdcv离线翻译</title>
      <link href="https://honmaple.me/articles/2024/04/wei-maple-translatezeng-jia-geng-you-hao-de-sdcvchi-xian-fan-yi.html" rel="alternate"></link>
      <published>Mon, 22 Apr 2024 21:51:27 +0000</published>
      <updated>Mon, 22 Apr 2024 23:14:41 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2024/04/wei-maple-translatezeng-jia-geng-you-hao-de-sdcvchi-xian-fan-yi.html" type="text/html"/>
      <id>https://honmaple.me/articles/2024/04/wei-maple-translatezeng-jia-geng-you-hao-de-sdcvchi-xian-fan-yi.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
之前我写的Emacs翻译插件 &lt;b&gt;maple-translate&lt;/b&gt; 有一个 &lt;b&gt;sdcv&lt;/b&gt; 离线翻译的功能，它使用了 &lt;code&gt;Elisp&lt;/code&gt; 解析 &lt;b&gt;StarDict&lt;/b&gt; 的字典文件，所以不需要安装其它任何依赖。但是也是因为此原因，首次使用离线翻译需要等待字典文件加载到内存，这不是很友好，此次我将添加 &lt;b&gt;sdcv&lt;/b&gt; 二进制文件的支持，使离线翻译能够更加快捷方便
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
首先是安装 &lt;b&gt;sdcv&lt;/b&gt; 二进制文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;└──╼ brew install sdcv
└──╼ sdcv --help
用法：
  sdcv [选项…]  words

帮助选项：
  -h, --help...&lt;/pre&gt;</summary>
      <content type="html">
&lt;blockquote&gt;
&lt;p&gt;
之前我写的Emacs翻译插件 &lt;b&gt;maple-translate&lt;/b&gt; 有一个 &lt;b&gt;sdcv&lt;/b&gt; 离线翻译的功能，它使用了 &lt;code&gt;Elisp&lt;/code&gt; 解析 &lt;b&gt;StarDict&lt;/b&gt; 的字典文件，所以不需要安装其它任何依赖。但是也是因为此原因，首次使用离线翻译需要等待字典文件加载到内存，这不是很友好，此次我将添加 &lt;b&gt;sdcv&lt;/b&gt; 二进制文件的支持，使离线翻译能够更加快捷方便
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
首先是安装 &lt;b&gt;sdcv&lt;/b&gt; 二进制文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;└──╼ brew install sdcv
└──╼ sdcv --help
用法：
  sdcv [选项…]  words

帮助选项：
  -h, --help                     显示帮助选项

应用程序选项：
  -v, --version                  display version information and exit
  -l, --list-dicts               display list of available dictionaries and exit
  -u, --use-dict=bookname        for search use only dictionary with this bookname
  -n, --non-interactive          for use in scripts
  -j, --json-output              print the result formatted as JSON
  --json                         print the result formatted as JSON
  -e, --exact-search             do not fuzzy-search for similar words, only return exact matches
  -0, --utf8-output              output must be in utf8
  -1, --utf8-input               input of sdcv in utf8
  -2, --data-dir=path/to/dir     use this directory as path to stardict data directory
  -x, --only-data-dir            only use the dictionaries in data-dir, do not search in user and system directories
  -c, --color                    colorize the output&lt;/pre&gt;

&lt;p&gt;
然后定义二进制文件的路径，如果 &lt;b&gt;sdcv&lt;/b&gt; 未安装，则返回为 &lt;code&gt;nil&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(defvar maple-translate-sdcv-program (executable-find &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;sdcv&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;))&lt;/pre&gt;

&lt;p&gt;
接着修改之前写好的 &lt;code&gt;maple-translate-sdcv&lt;/code&gt; 函数，通过判断 &lt;code&gt;maple-translate-sdcv-program&lt;/code&gt; 是否为空采取不同的翻译操作
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(defun maple-translate-sdcv(word &lt;span style=&quot;color:#66d9ef&quot;&gt;&amp;amp;optional&lt;/span&gt; callback)
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Search WORD with sdcv, use async request if CALLBACK non-nil.&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  (if maple-translate-sdcv-program
      (maple-translate-execute maple-translate-sdcv-program
        :args (&lt;span style=&quot;color:#a6e22e&quot;&gt;append&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-n&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-x&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-j&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-0&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-1&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
                      (cl-loop for dict in maple-translate-sdcv-dicts
                               collect (&lt;span style=&quot;color:#a6e22e&quot;&gt;expand-file-name&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;cdr&lt;/span&gt; dict) maple-translate-sdcv-dir))
                      (&lt;span style=&quot;color:#a6e22e&quot;&gt;list&lt;/span&gt; word))
        :format (maple-translate-sdcv-format)
        :callback callback)
    &lt;span style=&quot;color:#75715e&quot;&gt;;; ...&lt;/span&gt;
    &lt;span style=&quot;color:#75715e&quot;&gt;;; 使用ELisp解析并翻译&lt;/span&gt;
    ))&lt;/pre&gt;
&lt;p&gt;
需要说明的是，由于该函数接收一个 &lt;code&gt;callback&lt;/code&gt; 的变量，用于处理异步翻译，如果是同步翻译，可以直接使用 &lt;code&gt;call-process&lt;/code&gt; 获取结果
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(with-temp-buffer
  (&lt;span style=&quot;color:#a6e22e&quot;&gt;apply&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;call-process&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;sdcv&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;t&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-n&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-x&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-j&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-0&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-1&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;-2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;/Users/xxx/.emacs.d/stardict/stardict-lazyworm-ec-2.4.2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;word&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;))
  (&lt;span style=&quot;color:#a6e22e&quot;&gt;buffer-string&lt;/span&gt;))&lt;/pre&gt;

&lt;p&gt;
但如果是异步翻译，则需要使用 &lt;code&gt;start-process&lt;/code&gt; ，再通过监听进程状态在进程结束后再获取翻译结果
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(let ((name (&lt;span style=&quot;color:#a6e22e&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;maple-translate-process %s&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;,&lt;/span&gt;program)))
  (&lt;span style=&quot;color:#a6e22e&quot;&gt;set-process-sentinel&lt;/span&gt;
   (&lt;span style=&quot;color:#a6e22e&quot;&gt;apply&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;start-process&lt;/span&gt; name (&lt;span style=&quot;color:#a6e22e&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;*%s*&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; name) &lt;span style=&quot;color:#f92672&quot;&gt;,&lt;/span&gt;program &lt;span style=&quot;color:#f92672&quot;&gt;,&lt;/span&gt;args)
   (lambda(process _)
     (unless (process-live-p process)
       (with-current-buffer (&lt;span style=&quot;color:#a6e22e&quot;&gt;process-buffer&lt;/span&gt; process)
         (prog1 (&lt;span style=&quot;color:#a6e22e&quot;&gt;funcall&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;,&lt;/span&gt;callback &lt;span style=&quot;color:#f92672&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;format&lt;/span&gt;)
           (&lt;span style=&quot;color:#a6e22e&quot;&gt;kill-buffer&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;current-buffer&lt;/span&gt;))))))))&lt;/pre&gt;
&lt;p&gt;
这里的 &lt;b&gt;buffer&lt;/b&gt; 名称也可以通过 &lt;code&gt;(generate-new-buffer &amp;#34; *temp*&amp;#34; t)&lt;/code&gt; 生成一个临时 &lt;b&gt;buffer&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
最后就是翻译结果的展示，由于输出的是多行 &lt;b&gt;json&lt;/b&gt;，比如:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;[]
[{&amp;#34;dict&amp;#34;: &amp;#34;懒虫简明英汉词典&amp;#34;,&amp;#34;word&amp;#34;:&amp;#34;word&amp;#34;,&amp;#34;definition&amp;#34;:&amp;#34;\n[wә:d]\nn.\n字, 词, 话, 消息, 诺言, 命令\nvt.\n为...措辞&amp;#34;}]&lt;/pre&gt;
&lt;p&gt;
所以我在解析翻译结果时取了个巧，没有使用 &lt;code&gt;(buffer-string)&lt;/code&gt; 而是直接在 &lt;b&gt;buffer&lt;/b&gt; 里操作，每次都跳到开始位置，再依次向下移动 &lt;b&gt;n&lt;/b&gt; 行，这个 &lt;b&gt;n&lt;/b&gt; 即是字典的数量，最后使用 &lt;code&gt;(thing-at-point &amp;#39;line t)&lt;/code&gt; 获取当前行的数据
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(defun maple-translate-sdcv-format()
  &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;Format result with sdcv output.&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  (let ((results (cl-loop for index from &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;
                          for dicts in maple-translate-sdcv-dicts
                          collect
                          (progn
                            (&lt;span style=&quot;color:#a6e22e&quot;&gt;goto-char&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;point-min&lt;/span&gt;))
                            (&lt;span style=&quot;color:#a6e22e&quot;&gt;forward-line&lt;/span&gt; index)
                            (string-join (cl-loop for child across-ref (json-read-from-string (&lt;span style=&quot;color:#a6e22e&quot;&gt;decode-coding-string&lt;/span&gt; (thing-at-point &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;line&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;t&lt;/span&gt;) &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;utf-8&lt;/span&gt;))
                                                  collect (&lt;span style=&quot;color:#a6e22e&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;%s: %s&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
                                                                  (alist-get &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dict&lt;/span&gt; child)
                                                                  (alist-get &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;definition&lt;/span&gt; child)))
                                         &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)))))
    (unless (&lt;span style=&quot;color:#a6e22e&quot;&gt;null&lt;/span&gt; results)
      (string-join (cl-remove &lt;span style=&quot;color:#66d9ef&quot;&gt;nil&lt;/span&gt; results) &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;))))&lt;/pre&gt;

&lt;p&gt;
最终效果
&lt;/p&gt;
&lt;video width=&quot;100%&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;https://s.libforest.com/images/2024/04/maple-translate-sdcv.mov&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;

&lt;p&gt;
&lt;b&gt;maple-translate&lt;/b&gt;的具体修改可见: &lt;a href=&quot;https://github.com/honmaple/emacs-maple-translate/commit/dfd0eae6486d62c26a3fa3fb07ee7e5f4640eb16&quot;&gt;dfd0eae&lt;/a&gt;
&lt;/p&gt;</content>
        <category term="Tech/Linux/Emacs"></category>
    </entry>
    <entry xml:lang="zh">
      <title>使用Homebrew Tap发布个人工具</title>
      <link href="https://honmaple.me/articles/2024/03/shi-yong-homebrew-tapfa-bu-ge-ren-gong-ju.html" rel="alternate"></link>
      <published>Thu, 28 Mar 2024 09:31:23 +0000</published>
      <updated>Thu, 28 Mar 2024 10:56:02 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2024/03/shi-yong-homebrew-tapfa-bu-ge-ren-gong-ju.html" type="text/html"/>
      <id>https://honmaple.me/articles/2024/03/shi-yong-homebrew-tapfa-bu-ge-ren-gong-ju.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
作为MacOS用户，&lt;b&gt;Homebrew&lt;/b&gt; 是必不可少的工具之一，正如它的描述所示 &lt;code&gt;The missing package manager for macOS&lt;/code&gt; —— 它提供了很多 &lt;b&gt;App Store&lt;/b&gt; 没有的软件和工具。
&lt;/p&gt;

&lt;p&gt;
而什么是 &lt;b&gt;Tap&lt;/b&gt;？&lt;b&gt;Tap&lt;/b&gt; 全称 &lt;code&gt;Third-Party Repositories&lt;/code&gt;，顾名思义为第三方仓库，它可以创建属于自己的软件集合，不用将软件发布到官方仓库，避免了和官方仓库的其它软件同名，也不用发PR，等审核等诸多优势。此次，我将创建一个 &lt;b&gt;Homebrew Tap&lt;/b&gt;，用于为我自己开发的部分软件和工具提供更加方便的安装方式。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;创建Tap&lt;/h2&gt;
&lt;p&gt;
   使用 &lt;code&gt;brew&lt;/code&gt; 命令创建...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;创建Tap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;生成模版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;修改模版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;安装软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;上传到Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
作为MacOS用户，&lt;b&gt;Homebrew&lt;/b&gt; 是必不可少的工具之一，正如它的描述所示 &lt;code&gt;The missing package manager for macOS&lt;/code&gt; —— 它提供了很多 &lt;b&gt;App Store&lt;/b&gt; 没有的软件和工具。
&lt;/p&gt;

&lt;p&gt;
而什么是 &lt;b&gt;Tap&lt;/b&gt;？&lt;b&gt;Tap&lt;/b&gt; 全称 &lt;code&gt;Third-Party Repositories&lt;/code&gt;，顾名思义为第三方仓库，它可以创建属于自己的软件集合，不用将软件发布到官方仓库，避免了和官方仓库的其它软件同名，也不用发PR，等审核等诸多优势。此次，我将创建一个 &lt;b&gt;Homebrew Tap&lt;/b&gt;，用于为我自己开发的部分软件和工具提供更加方便的安装方式。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;创建Tap&lt;/h2&gt;
&lt;p&gt;
   使用 &lt;code&gt;brew&lt;/code&gt; 命令创建
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;└──╼ brew tap-new honmaple/tap
Initialized empty Git repository in /usr/local/Homebrew/Library/Taps/honmaple/homebrew-tap/.git/
[main (root-commit) 7d893ca] Create honmaple/tap tap
 3 files changed, 90 insertions(+)
 create mode 100644 .github/workflows/publish.yml
 create mode 100644 .github/workflows/tests.yml
 create mode 100644 README.md
==&amp;gt; Created honmaple/tap
/usr/local/Homebrew/Library/Taps/honmaple/homebrew-tap

When a pull request making changes to a formula (or formulae) becomes green
(all checks passed), then you can publish the built bottles.
To do so, label your PR as `pr-pull` and the workflow will be triggered.&lt;/pre&gt;

&lt;p&gt;
   创建后会提示在 &lt;code&gt;/usr/local/Homebrew/Library/Taps/honmaple/homebrew-tap/&lt;/code&gt; 目录生成一个 &lt;b&gt;Git&lt;/b&gt; 仓库
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;生成模版&lt;/h2&gt;
&lt;p&gt;
   比如我想要为已经打包好的工具 &lt;b&gt;Snow 0.1.2&lt;/b&gt; 生成模版，注意指定 &lt;code&gt;--tap&lt;/code&gt; 参数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;└──╼ brew create https://github.com/honmaple/snow/releases/download/v0.1.2/snow-darwin.tar.gz --tap honmaple/tap
Formula name [snow]:
...&lt;/pre&gt;
&lt;p&gt;
   在输入提示的工具名称后（也可以保持默认），这时会生成并使用默认编辑器打开 &lt;code&gt;/usr/local/Homebrew/Library/Taps/honmaple/homebrew-tap/Formula/snow.rb&lt;/code&gt;，内容如下:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;# Documentation: https://docs.brew.sh/Formula-Cookbook&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;#                https://rubydoc.brew.sh/Formula&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# PLEASE REMOVE ALL GENERATED COMMENTS BEFORE SUBMITTING YOUR PULL REQUEST!&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Snow&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Formula&lt;/span&gt;
  desc &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;static site generator&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  homepage &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  url &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https://github.com/honmaple/snow/releases/download/v0.1.2/snow-darwin.tar.gz&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  sha256 &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;78a65c740eff24193132e063654bd1d7023f6687c94ce852e50a03a43eaba558&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  license &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;BSD-3-Clause&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;

  &lt;span style=&quot;color:#75715e&quot;&gt;# depends_on &amp;#34;cmake&amp;#34; =&amp;gt; :build&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;install&lt;/span&gt;
    &lt;span style=&quot;color:#75715e&quot;&gt;# Remove unrecognized options if they cause configure to fail&lt;/span&gt;
    &lt;span style=&quot;color:#75715e&quot;&gt;# https://rubydoc.brew.sh/Formula.html#std_configure_args-instance_method&lt;/span&gt;
    system &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;./configure&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;--disable-silent-rules&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt;std_configure_args
    &lt;span style=&quot;color:#75715e&quot;&gt;# system &amp;#34;cmake&amp;#34;, &amp;#34;-S&amp;#34;, &amp;#34;.&amp;#34;, &amp;#34;-B&amp;#34;, &amp;#34;build&amp;#34;, *std_cmake_args&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  test &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt;
    &lt;span style=&quot;color:#75715e&quot;&gt;# `test do` will create, run in and delete a temporary directory.&lt;/span&gt;
    &lt;span style=&quot;color:#75715e&quot;&gt;# ...&lt;/span&gt;
    system &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;修改模版&lt;/h2&gt;
&lt;p&gt;
   因为我此次发布的只是一个 &lt;b&gt;Go&lt;/b&gt; 编译的二进制文件，只用将文件添加到可执行目录即可。如需其它操作，请查阅&lt;a href=&quot;https://docs.brew.sh/Taps&quot;&gt;Homebrew Tap官方文档&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
   修改模版后内容如下：
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Snow&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Formula&lt;/span&gt;
  homepage &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https://github.com/honmaple/snow&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  desc &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;static site generator&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  url &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https://github.com/honmaple/snow/releases/download/v0.1.2/snow-darwin.tar.gz&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  sha256 &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;78a65c740eff24193132e063654bd1d7023f6687c94ce852e50a03a43eaba558&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  license &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;BSD-3-Clause&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;install&lt;/span&gt;
    bin&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;install &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;snow&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  test &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt;
    assert_match &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;snow version &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#{&lt;/span&gt;version&lt;span style=&quot;color:#e6db74&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;, shell_output(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#{&lt;/span&gt;bin&lt;span style=&quot;color:#e6db74&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;/snow --version&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;
   从模版文件中就能看出，如果我们需要发布下一版本，只需要修改 &lt;code&gt;url&lt;/code&gt; 和 &lt;code&gt;sha256&lt;/code&gt; 两个参数，其中 &lt;code&gt;sha256&lt;/code&gt; 可以使用 &lt;code&gt;sh256sum v0.1.2/snow-darwin.tar.gz&lt;/code&gt; 获得
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;安装软件&lt;/h2&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;brew install honmaple/tap/snow&lt;/pre&gt;
&lt;p&gt;
   &lt;b&gt;注意&lt;/b&gt;：不能直接使用 &lt;code&gt;brew install snow&lt;/code&gt;，因为如果在 &lt;code&gt;homebrew/core&lt;/code&gt; 有相同名称的包，默认将会安装 &lt;code&gt;homebrew/core&lt;/code&gt; 上的包，所以必须指明使用哪个 &lt;b&gt;Tap&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;上传到Github&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 首先需要到 &lt;b&gt;Github&lt;/b&gt; 创建一个公共仓库，取名 &lt;code&gt;homebrew-{Tap名称}&lt;/code&gt;, 比如我的是 &lt;code&gt;honmaple/homebrew-tap&lt;/code&gt;，注意名称必须是 &lt;code&gt;homebrew-&lt;/code&gt; 开头，方便后续直接使用 &lt;code&gt;{用户名}/{Tap名称}&lt;/code&gt;。创建好后先不要克隆到本地
      
&lt;a href=&quot;https://s.libforest.com/images/2024/03/homebrew-tap-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2024/03/homebrew-tap-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 复制之前创建好的 &lt;code&gt;honmaple/tap&lt;/code&gt; 目录，方便后续维护
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;cp -r /usr/local/Homebrew/Library/Taps/honmaple/homebrew-tap ~/Git/&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改仓库
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;cd ~/Git/homebrew-tap
# 删除默认的Github Action
rm -rf .github
# 添加远程
git remote add origin git@github.com:honmaple/homebrew-tap.git
# 添加软件
git add Formula/snow.rb
git commit -m &amp;#34;add snow.rb&amp;#34;
git push origin master&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 重置本地tap，首先需要卸载之前创建好的 &lt;code&gt;honmaple/tap&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;brew untap honmaple/tap&lt;/pre&gt;
&lt;p&gt;
      如果已经安装了 &lt;code&gt;homebrew/tap/snow&lt;/code&gt;, 需要先卸载
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;brew uninstall honmaple/tap/snow&lt;/pre&gt;

&lt;p&gt;
      在执行完 &lt;b&gt;修改仓库&lt;/b&gt; 这一步后，就可以重新添加 &lt;b&gt;tap&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;brew tap honmaple/tap&lt;/pre&gt;
&lt;p&gt;
      并重新安装想要的软件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;brew install honample/tap/snow&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-6&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;
   至此，创建一个私人使用的 MacOS 软件包集合就此结束，我可以往里面添加一些自己写的软件和工具，可以是 &lt;b&gt;Bash&lt;/b&gt; 脚本，也可以是 &lt;b&gt;Go&lt;/b&gt; 编译好的二进制等，后面就不用再指定具体目录或者手动复制文件到 &lt;code&gt;$PATH/bin&lt;/code&gt; 目录下了。OK
&lt;/p&gt;</content>
        <category term="Tech"></category>
    </entry>
    <entry xml:lang="zh">
      <title>使用Go重写MetingJS的API</title>
      <link href="https://honmaple.me/articles/2023/12/shi-yong-gozhong-xie-metingjsde-api.html" rel="alternate"></link>
      <published>Tue, 26 Dec 2023 13:23:00 +0000</published>
      <updated>Mon, 01 Apr 2024 10:37:50 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/12/shi-yong-gozhong-xie-metingjsde-api.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/12/shi-yong-gozhong-xie-metingjsde-api.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;MetingJS&lt;/b&gt; 是一款通过获取网易云音乐或者QQ音乐等服务的歌单、歌手、歌曲、歌词等信息，然后使用开源HTML5播放器 &lt;b&gt;APlayer&lt;/b&gt; 进行播放的插件。而 &lt;b&gt;MetingJS&lt;/b&gt; 是一段很小的JS代码，它提供了一个默认的API接口：&lt;a href=&quot;https://api.i-meto.com/meting/api&quot;&gt;https://api.i-meto.com/meting/api&lt;/a&gt; , 但很不幸，该接口偶尔会出问题，作者也很久没有回复issue了。
&lt;/p&gt;

&lt;p&gt;
现在也有一个开源的 &lt;a href=&quot;https://github.com/injahow/meting-api&quot;&gt;injahow/meting-api&lt;/a&gt;，该服务同样使用PHP编写，我不太懂PHP，我只是想要设置一个缓存，来缓存所有的歌曲信息，而不仅仅是歌单列表，另外是可以支持内存缓存和本地磁盘缓存，而不是直接从本地文件中读取。
&lt;/p&gt;

&lt;p&gt;
基于此，与其自己改不是太懂的PHP，说不定会出现一些意想不到的漏洞...&lt;/p&gt;&lt;/blockquote&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;手动部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;Docker部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.3&quot;&gt;配置说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.4&quot;&gt;命令行参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.5&quot;&gt;网页端设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;演示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;MetingJS&lt;/b&gt; 是一款通过获取网易云音乐或者QQ音乐等服务的歌单、歌手、歌曲、歌词等信息，然后使用开源HTML5播放器 &lt;b&gt;APlayer&lt;/b&gt; 进行播放的插件。而 &lt;b&gt;MetingJS&lt;/b&gt; 是一段很小的JS代码，它提供了一个默认的API接口：&lt;a href=&quot;https://api.i-meto.com/meting/api&quot;&gt;https://api.i-meto.com/meting/api&lt;/a&gt; , 但很不幸，该接口偶尔会出问题，作者也很久没有回复issue了。
&lt;/p&gt;

&lt;p&gt;
现在也有一个开源的 &lt;a href=&quot;https://github.com/injahow/meting-api&quot;&gt;injahow/meting-api&lt;/a&gt;，该服务同样使用PHP编写，我不太懂PHP，我只是想要设置一个缓存，来缓存所有的歌曲信息，而不仅仅是歌单列表，另外是可以支持内存缓存和本地磁盘缓存，而不是直接从本地文件中读取。
&lt;/p&gt;

&lt;p&gt;
基于此，与其自己改不是太懂的PHP，说不定会出现一些意想不到的漏洞(源自某安全公司多次CTF换来的教训)，不如使用熟悉的Go重写实现，毕竟核心代码也不是太多
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 支持网易云音乐，QQ音乐
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 支持新服务接口扩展
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 支持所有请求结果的缓存
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 更方便的配置(环境变量+配置文件)，而不用修改源文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 基于 &lt;b&gt;Go&lt;/b&gt; 编写，一次编译，到处运行
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;使用&lt;/h2&gt;
&lt;h3 id=&quot;heading-2.1&quot;&gt;手动部署&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 下载仓库
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/honmaple/meting-api&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 编译可执行文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;go mod download
go build -o meting-api .&lt;/pre&gt;
&lt;p&gt;
      或者使用 &lt;b&gt;Docker&lt;/b&gt; 进行编译, 编译后的文件在 &lt;code&gt;/usr/bin/meting-api&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker build -t meting-api .&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 运行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -D&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.2&quot;&gt;Docker部署&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run --name meting-api --restart=always -d -p 8000:8000 -v /tmp/meting-cache:/opt/meting-api/cache honmaple/meting-api&lt;/pre&gt;
&lt;h3 id=&quot;heading-2.3&quot;&gt;配置说明&lt;/h3&gt;
&lt;p&gt;
    配置可以使用环境变量或者配置文件设置
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 环境变量: 使用 &lt;code&gt;METING_XXXX&lt;/code&gt;, 比如 &lt;code&gt;METING_CACHE_TTL&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 配置文件: 默认使用当前目录下的 &lt;code&gt;config.yaml&lt;/code&gt;, 如果使用 &lt;b&gt;Docker&lt;/b&gt; 部署，需要文件挂载到 &lt;code&gt;/opt/meting-api/config.yaml&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 具体配置:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;# 缓存过期时间&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;cache.ttl&lt;/span&gt;:                  &lt;span style=&quot;color:#ae81ff&quot;&gt;3600&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 缓存路径，设置为空是禁用缓存&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;cache.path&lt;/span&gt;:                 &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;./cache&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 是否激活缓存&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;cache.enabled&lt;/span&gt;:              &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;

&lt;span style=&quot;color:#75715e&quot;&gt;# 服务监听地址，:8000 表示监听 0.0.0.0:8000&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.addr&lt;/span&gt;:                &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;:8000&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 对外服务地址，比如 https://api.xxxx.com/meting&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.host&lt;/span&gt;:                &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&quot;color:#75715e&quot;&gt;## cors设置&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.cors.allow_headers&lt;/span&gt;:
  - &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.cors.allow_origins&lt;/span&gt;:
  - &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.cors.allow_methods&lt;/span&gt;:
  - &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;

&lt;span style=&quot;color:#75715e&quot;&gt;# 日志相关, out可选stdout,stderr,file，或者使用|分隔多个，比如stderr|file&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.out&lt;/span&gt;:                 &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;stdout&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 日志级别&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.level&lt;/span&gt;:               &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 日志文件名格式&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.file_format&lt;/span&gt;:         &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;%Y%m%d&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 日志文件保留数量&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.file_rotation_count&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.4&quot;&gt;命令行参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 查看支持的服务
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api --list&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 指定监听地址
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -a :8001
./meting-api --addr :8001&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 显示请求记录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -D
./meting-api --debug&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 指定配置文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -c /etc/meting.yaml
./meting-api --config /etc/meting.yaml&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 显示当前配置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api config&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 删除指定缓存
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api delete-cache &amp;#39;server:netease:type:${type}:id:${id}&amp;#39;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.5&quot;&gt;网页端设置&lt;/h3&gt;
&lt;p&gt;
    其中 &lt;code&gt;http://localhost:8000/&lt;/code&gt; 是对外服务的接口
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;meting-js&lt;/span&gt;
  &lt;span style=&quot;color:#a6e22e&quot;&gt;server&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;netease&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#a6e22e&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;artist&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#a6e22e&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;6452&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;meting-js&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;meting_api&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;http://localhost:8000/?server=:server&amp;amp;type=:type&amp;amp;id=:id&amp;amp;auth=:auth&amp;amp;r=:r&amp;#39;&lt;/span&gt;;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;演示&lt;/h2&gt;
   
  &lt;meting-js server=&quot;netease&quot; type=&quot;playlist&quot; id=&quot;9085878380&quot;&gt;&lt;/meting-js&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
 if (!shortcodes) {
     var shortcodes = {};
 }
 if (!shortcodes[&quot;music&quot;] &amp;&amp; document.querySelector(&quot;meting-js&quot;)) {
     var meting_api = &#39;https://api.honmaple.com/meting?server=:server&amp;type=:type&amp;id=:id&amp;auth=:auth&amp;r=:r&#39;;

     shortcodes.loadJS(&quot;https://honmaple.me/static/lib/js/APlayer.min.js&quot;, false, true);
     shortcodes.loadJS(&quot;https://honmaple.me/static/lib/js/Meting.min.js&quot;, false, true);

     shortcodes.loadCSS(&quot;https://honmaple.me/static/lib/css/APlayer.min.css&quot;);
     shortcodes.loadCSS(&quot;https://honmaple.me/static/css/aplayer.css&quot;);
 }
 shortcodes[&quot;music&quot;] = true;
&lt;/script&gt;</content>
        <category term="Tech"></category>
    </entry>
    <entry xml:lang="zh">
      <title>Snow静态博客处理多图排版</title>
      <link href="https://honmaple.me/articles/2023/12/snowjing-tai-bo-ke-chu-li-duo-tu-pai-ban.html" rel="alternate"></link>
      <published>Sun, 17 Dec 2023 17:04:52 +0000</published>
      <updated>Wed, 06 Mar 2024 15:09:17 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/12/snowjing-tai-bo-ke-chu-li-duo-tu-pai-ban.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/12/snowjing-tai-bo-ke-chu-li-duo-tu-pai-ban.html</id>
      <summary type="html">
&lt;p&gt;
事情的缘由是我无意中发现之前写的部分文章里的图片没有渲染出来，才想起之前博客系统改版，从 &lt;b&gt;Pelican&lt;/b&gt; 切换到 &lt;b&gt;Snow&lt;/b&gt; 时竟然忘记了，看了一下原文，大部分都是以下形式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(二...&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;解析原始链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;并排显示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;多行显示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;图片懒加载和点击全屏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;显示效果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
事情的缘由是我无意中发现之前写的部分文章里的图片没有渲染出来，才想起之前博客系统改版，从 &lt;b&gt;Pelican&lt;/b&gt; 切换到 &lt;b&gt;Snow&lt;/b&gt; 时竟然忘记了，看了一下原文，大部分都是以下形式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(二).jpg]]
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(三).jpg]]
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(一).jpg]]
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;
&lt;p&gt;
因为我之前的博客主题使用了 &lt;b&gt;Bootstrap&lt;/b&gt;，为了能够让多张图片并排显示，所以用了 &lt;b&gt;Bootstrap&lt;/b&gt; 里的 &lt;code&gt;.row .col-*&lt;/code&gt;。但前不久移除了全部的 &lt;b&gt;Bootstrap&lt;/b&gt;，现在当然不会生效。另外一点是我之前用的 &lt;b&gt;org mode&lt;/b&gt; 解析器可以直接解析 &lt;b&gt;HTML&lt;/b&gt; 中的链接，但更换了新的解析器 &lt;a href=&quot;https://github.com/honmaple/org-golang&quot;&gt;org-golang&lt;/a&gt; 后，已经无法不能解析HTML中的原始链接
&lt;/p&gt;

&lt;p&gt;
此次利用 &lt;b&gt;Snow&lt;/b&gt; 博客系统中的 &lt;b&gt;shortcode&lt;/b&gt; 功能实现多图排版，让图片可以并排显示，多行显示。
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;解析原始链接&lt;/h2&gt;
&lt;p&gt;
   首先在主题下创建一个名为 &lt;code&gt;img-layout&lt;/code&gt; 的 &lt;b&gt;shortcode&lt;/b&gt;，比如我使用的主题叫做 &lt;b&gt;snow&lt;/b&gt;，所以在 &lt;code&gt;themes/snow/templates/shortcodes&lt;/code&gt; 目录下创建一个 &lt;code&gt;img-layout.html&lt;/code&gt; 文件，并添加 &lt;code&gt;markdown&lt;/code&gt; 或者 &lt;code&gt;org&lt;/code&gt; 的 &lt;b&gt;filter&lt;/b&gt; 将原始文本解析成HTML
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;img-layout&amp;#34;&lt;/span&gt;&amp;gt;
  {%- if params.type == &amp;#34;markdown&amp;#34; %}
  {{ body | markdown | safe }}
  {%- else %}
  {{ body | org | safe }}
  {%- endif %}
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;p&gt;
   接着修改原始文章
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;#+begin_export html
&amp;lt;shortcode _name=&amp;#34;img-layout&amp;#34;&amp;gt;
[[https://s.libforest.com/images/pic/西湖/日落(二).jpg]]
[[https://s.libforest.com/images/pic/西湖/日落(三).jpg]]
[[https://s.libforest.com/images/pic/西湖/日落(一).jpg]]
&amp;lt;/shortcode&amp;gt;
#+end_export&lt;/pre&gt;

&lt;p&gt;
   经过修改，原始文章中的内容将会自动渲染成
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;img-layout&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(二).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(三).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(一).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;并排显示&lt;/h2&gt;
&lt;p&gt;
   有了固定结构的HTML， 接着就可以添加 &lt;b&gt;css&lt;/b&gt;，使多张图片可以并排显示
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;display&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;flex&lt;/span&gt;;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;wrap&lt;/span&gt;;
}

.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;width&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;auto&lt;/span&gt;;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;min-width&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;max-width&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;%&lt;/span&gt;;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;flex&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;10000&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;%&lt;/span&gt;;
}

&lt;span style=&quot;color:#75715e&quot;&gt;/* 处理手机等设备图片显示问题 */&lt;/span&gt;
@&lt;span style=&quot;color:#66d9ef&quot;&gt;media&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;screen&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;max-width&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;600px&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;)&lt;/span&gt; {
    .&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; {
        &lt;span style=&quot;color:#66d9ef&quot;&gt;min-width&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;%&lt;/span&gt;
    }
}

&lt;span style=&quot;color:#75715e&quot;&gt;/* 添加图片上下左右间隔 */&lt;/span&gt;
.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;margin&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;-0.25&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;-0.25&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#75715e&quot;&gt;!important&lt;/span&gt;;
}

.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;margin&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0.25&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#75715e&quot;&gt;!important&lt;/span&gt;;
}&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;多行显示&lt;/h2&gt;
&lt;p&gt;
   多行显示可以利用文件解析时每次遇到空行都会生成一个新的段落，比如
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;[[https://s.libforest.com/images/pic/西湖/日落(一).jpg]]

[[https://s.libforest.com/images/pic/西湖/日落(二).jpg]]&lt;/pre&gt;
&lt;p&gt;
   就会生成
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(一).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(二).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/pre&gt;
&lt;p&gt;
   故如果需要多行显示，只用在多张图片中间添加一个空行即可
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;图片懒加载和点击全屏&lt;/h2&gt;
&lt;p&gt;
   之前的图片懒加载和点击全屏的功能我也是利用 &lt;b&gt;Snow&lt;/b&gt; 中的 &lt;b&gt;shortcode&lt;/b&gt; 功能实现的，我在 &lt;code&gt;themes/snow/templates/shortcodes&lt;/code&gt; 目录下建立了一个 &lt;code&gt;img.html&lt;/code&gt; 的文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;{{ params.src }}&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;data-fancybox&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;data-src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;{{ params.src + &amp;#39;-thumb&amp;#39; }}&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;lazyload&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/pre&gt;
&lt;p&gt;
   这样，文章内所有的 &lt;code&gt;img&lt;/code&gt; 标签的图片都会加上懒加载和点击全屏的功能(基于 &lt;b&gt;lazysizes&lt;/b&gt; 和 &lt;b&gt;fancybox&lt;/b&gt;)
&lt;/p&gt;

&lt;p&gt;
   但是，由于 &lt;b&gt;Snow&lt;/b&gt; 中 &lt;b&gt;shortcode&lt;/b&gt; 的实现是一次性遍历 &lt;b&gt;HTML DOM&lt;/b&gt;，无法在一个 &lt;b&gt;shortcode&lt;/b&gt; 内部调用另一个 &lt;b&gt;shortcode&lt;/b&gt;。
   所幸 &lt;b&gt;Snow&lt;/b&gt; 是我自己写的，思索片刻，我在 &lt;b&gt;shortcode&lt;/b&gt; 实现中加入了三行代码，这样就能在一个 &lt;b&gt;shortcode&lt;/b&gt; 中重复调用其它的 &lt;b&gt;shortcode&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;vars := map[string]interface{}{
...
&lt;span style=&quot;color:#a6e22e&quot;&gt;+	&amp;#34;_shortcode&amp;#34;: func(s string) string {
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+		return self.shortcode(page, s)
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+	},
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;}
&lt;/pre&gt;

&lt;p&gt;
   然后修改 &lt;code&gt;img-layout.html&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;img-layout&amp;#34;&lt;/span&gt;&amp;gt;
  {%- if params.type == &amp;#34;markdown&amp;#34; %}
  {{ _shortcode(body | markdown) | safe }}
  {%- else %}
  {{ _shortcode(body | org) | safe }}
  {%- endif %}
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;p&gt;
   最后添加 &lt;b&gt;css&lt;/b&gt; 样式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;- .img-layout p &amp;gt; img {
&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ .img-layout p &amp;gt; img, .img-layout p &amp;gt; a {
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;color:#a6e22e&quot;&gt;+ .img-layout p &amp;gt; a &amp;gt; img {
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+     height: 100%;
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ }
&lt;/span&gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;显示效果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 两张图片
&lt;/p&gt;
     &lt;div class=&quot;img-layout&quot;&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 三张图片
&lt;/p&gt;
     &lt;div class=&quot;img-layout&quot;&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 多行显示
&lt;/p&gt;
     &lt;div class=&quot;img-layout&quot;&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-6&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://immmmm.com/about-images-gird/&quot;&gt;https://immmmm.com/about-images-gird/&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Tech"></category>
    </entry>
    <entry xml:lang="zh">
      <title>绿联Nas优化</title>
      <link href="https://honmaple.me/articles/2023/12/lu-lian-nasyou-hua.html" rel="alternate"></link>
      <published>Tue, 12 Dec 2023 21:54:12 +0000</published>
      <updated>Wed, 06 Mar 2024 15:09:26 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/12/lu-lian-nasyou-hua.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/12/lu-lian-nasyou-hua.html</id>
      <summary type="html">
&lt;p&gt;
记录一下，每次升级系统都要重新改一次
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;禁用迅雷&lt;/h2&gt;
&lt;p&gt;
   找到 &lt;code&gt;/ugreen/thunder/xunlei-pan/start.sh&lt;/code&gt; 文件，注释掉倒数第二行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;#su - $thunderName ...&lt;/pre&gt;

&lt;p&gt;
   运行 &lt;code&gt;/ugreen/thunder/xunlei-pan/stop.sh&lt;/code&gt; 关闭当前进程
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;禁用移动云盘&lt;/h2&gt;
&lt;p&gt;
   删除 &lt;code&gt;/data/nas_server/cmcc_svr&lt;/code&gt; 文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;mv /data/nas_server/cmcc_svr...&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;禁用迅雷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;禁用移动云盘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;禁用p2px&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;ssh自启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
记录一下，每次升级系统都要重新改一次
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;禁用迅雷&lt;/h2&gt;
&lt;p&gt;
   找到 &lt;code&gt;/ugreen/thunder/xunlei-pan/start.sh&lt;/code&gt; 文件，注释掉倒数第二行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;#su - $thunderName ...&lt;/pre&gt;

&lt;p&gt;
   运行 &lt;code&gt;/ugreen/thunder/xunlei-pan/stop.sh&lt;/code&gt; 关闭当前进程
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;禁用移动云盘&lt;/h2&gt;
&lt;p&gt;
   删除 &lt;code&gt;/data/nas_server/cmcc_svr&lt;/code&gt; 文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;mv /data/nas_server/cmcc_svr /data/nas_server/cmcc_svr.bak&lt;/pre&gt;

&lt;p&gt;
   关闭当前进程
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ps axuf | grep cmcc | grep -v grep | awk &amp;#39;{printf $2}&amp;#39; | xargs kill -9&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;禁用p2px&lt;/h2&gt;
&lt;p&gt;
   新建一个脚本 &lt;code&gt;/root/script/myp2p&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt; -e &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;/data/nas_server/p2px/p2px&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;; &lt;span style=&quot;color:#66d9ef&quot;&gt;then&lt;/span&gt;
    mv /data/nas_server/p2px/p2px /data/nas_server/p2px/p2px.bak
&lt;span style=&quot;color:#66d9ef&quot;&gt;fi&lt;/span&gt;

killall -q -9 p2px &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; true&lt;/pre&gt;

&lt;p&gt;
   在 &lt;code&gt;/etc/crontabs/root&lt;/code&gt; 文件添加一个定时任务
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;*/3 * * * * /root/script/myp2p&lt;/pre&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;ssh自启动&lt;/h2&gt;
&lt;p&gt;
   新建一个脚本 &lt;code&gt;/root/script/myscript&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;
run_myscript&lt;span style=&quot;color:#f92672&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;{&lt;/span&gt;
    mkdir -m &lt;span style=&quot;color:#ae81ff&quot;&gt;0700&lt;/span&gt; -p /var/empty
    netstat -anp | grep 0.0.0.0:922 | grep sshd | grep -v grep &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; /usr/sbin/sshd -D

    sleep &lt;span style=&quot;color:#ae81ff&quot;&gt;10&lt;/span&gt;

    &lt;span style=&quot;color:#75715e&quot;&gt;# zerotier相关&lt;/span&gt;
    lsmod | grep tun | grep -v grep &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod &lt;span style=&quot;color:#ae81ff&quot;&gt;666&lt;/span&gt; /dev/net/tun &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker restart zerotier

    ip route | grep 10.8.235 | grep -v grep &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; ip route add 10.8.235.0/24 via 192.168.100.2
&lt;span style=&quot;color:#f92672&quot;&gt;}&lt;/span&gt;

run_myscript &amp;amp;
echo &lt;span style=&quot;color:#e6db74&quot;&gt;`&lt;/span&gt;date&lt;span style=&quot;color:#e6db74&quot;&gt;`&lt;/span&gt; &amp;gt; /tmp/myscript.txt&lt;/pre&gt;

&lt;p&gt;
   添加到自启动
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ln -s  /root/script/myscript /etc/rc.d/S99myscript&lt;/pre&gt;</content>
        <category term="Tech/Geek"></category>
    </entry>
    <entry xml:lang="zh">
      <title>重复造轮子之Emacs翻译插件maple-translate</title>
      <link href="https://honmaple.me/articles/2023/11/zhong-fu-zao-lun-zi-zhi-emacsfan-yi-cha-jian-maple-translate.html" rel="alternate"></link>
      <published>Fri, 03 Nov 2023 22:19:03 +0000</published>
      <updated>Wed, 15 Nov 2023 15:21:38 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/11/zhong-fu-zao-lun-zi-zhi-emacsfan-yi-cha-jian-maple-translate.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/11/zhong-fu-zao-lun-zi-zhi-emacsfan-yi-cha-jian-maple-translate.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
我之前一直都在使用 &lt;a href=&quot;https://github.com/xuchunyang/youdao-dictionary.el&quot;&gt;youdao-dictionary&lt;/a&gt; 这个插件，虽然没有配置过秘钥，这时会有使用次数的限制(反正是每天1000次还是多少来着，有些忘了)，但是我平时使用次数不多，所以也不会达到使用限制，不管是单词翻译还是长句翻译都很不错。但最近几个月 &lt;b&gt;youdao-dictionary&lt;/b&gt; 如果不配置私钥，处于一个完全不可用的状态。
&lt;/p&gt;

&lt;p&gt;
我曾寻找过它的替代品，并且使用过一段时间的 &lt;a href=&quot;https://github.com/condy0919/fanyi.el&quot;&gt;fanyi.el&lt;/a&gt;，不可否认，这同样是一个非常不错的插件，不管是UI还是功能，但是，可能是因为 &lt;b&gt;fanyi.el&lt;/b&gt; 使用异步请求的原因，偶尔会出现一些意想不到的报错，更重要的是它不支持长句翻译和离线翻译。
&lt;/p&gt;

&lt;p&gt;
考虑再三，还是决定自己造一个轮子，主要功能就按照我之前使用 &lt;b&gt;youdao-dictionary&lt;/b&gt; 的习惯...&lt;/p&gt;&lt;/blockquote&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;如何使用?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;长句翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;谷歌翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;离线翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;多引擎翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;翻译原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
我之前一直都在使用 &lt;a href=&quot;https://github.com/xuchunyang/youdao-dictionary.el&quot;&gt;youdao-dictionary&lt;/a&gt; 这个插件，虽然没有配置过秘钥，这时会有使用次数的限制(反正是每天1000次还是多少来着，有些忘了)，但是我平时使用次数不多，所以也不会达到使用限制，不管是单词翻译还是长句翻译都很不错。但最近几个月 &lt;b&gt;youdao-dictionary&lt;/b&gt; 如果不配置私钥，处于一个完全不可用的状态。
&lt;/p&gt;

&lt;p&gt;
我曾寻找过它的替代品，并且使用过一段时间的 &lt;a href=&quot;https://github.com/condy0919/fanyi.el&quot;&gt;fanyi.el&lt;/a&gt;，不可否认，这同样是一个非常不错的插件，不管是UI还是功能，但是，可能是因为 &lt;b&gt;fanyi.el&lt;/b&gt; 使用异步请求的原因，偶尔会出现一些意想不到的报错，更重要的是它不支持长句翻译和离线翻译。
&lt;/p&gt;

&lt;p&gt;
考虑再三，还是决定自己造一个轮子，主要功能就按照我之前使用 &lt;b&gt;youdao-dictionary&lt;/b&gt; 的习惯:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 翻译光标下的单词，以及选中的单词或句子
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 翻译的内容输出到 &lt;code&gt;echoarea&lt;/code&gt; 或者新的 &lt;code&gt;buffer&lt;/code&gt;，方便复制
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 增加一个离线翻译的功能，并且可以不依赖外部工具
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;
基于上述，所以有了这个新的轮子 &lt;a href=&quot;https://github.com/honmaple/emacs-maple-translate&quot;&gt;maple-translate&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;如何使用?&lt;/h2&gt;
&lt;p&gt;
   可以使用 &lt;b&gt;quelpa&lt;/b&gt; 安装
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(use-package maple-translate
  :quelpa (:fetcher github :repo &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;honmaple/emacs-maple-translate&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
  :commands (maple-translate maple-translate+))&lt;/pre&gt;

&lt;p&gt;
   或者手动下载仓库
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/honmaple/emacs-maple-translate ~/.emacs.d/site-lisp/maple-translate&lt;/pre&gt;

&lt;p&gt;
   然后进行配置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(use-package maple-translate
  :ensure &lt;span style=&quot;color:#66d9ef&quot;&gt;nil&lt;/span&gt;
  :commands (maple-translate maple-translate+))&lt;/pre&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;长句翻译&lt;/h2&gt;
&lt;p&gt;
   &lt;del&gt;目前长句翻译仅支持 &lt;code&gt;youdao&lt;/code&gt;&lt;/del&gt;, 目前支持 &lt;code&gt;youdao&lt;/code&gt; 和 &lt;code&gt;google&lt;/code&gt; 两种翻译引擎，可以修改设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-engine &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;youdao&lt;/span&gt;)
&lt;span style=&quot;color:#75715e&quot;&gt;;; 或者&lt;/span&gt;
(setq maple-translate-engine &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;google&lt;/span&gt;)&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;谷歌翻译&lt;/h2&gt;
&lt;p&gt;
   国内无法直接使用，但是可以单独为谷歌翻译设置代理
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-google-url &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https://translate.googleapis.com/translate_a/single&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
(setq maple-translate-google-proxies
      &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;http&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;127.0.0.1:1086&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
        (&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;127.0.0.1:1086&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)))&lt;/pre&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;离线翻译&lt;/h2&gt;
&lt;p&gt;
   我个人平时在使用 &lt;b&gt;Emacs&lt;/b&gt; 时不太习惯依赖外部的工具，比如我之前就写过一个markdown，org-mode实时预览插件 &lt;a href=&quot;https://github.com/honmaple/emacs-maple-preview&quot;&gt;maple-preview&lt;/a&gt;，它区别于其它插件，并不会依赖外部的工具，比如 &lt;b&gt;Pandoc&lt;/b&gt;，甚至不会生出任何文件到我的本地环境
&lt;/p&gt;

&lt;p&gt;
   同样的，我也不希望使用离线翻译时还要依赖外部诸如 &lt;b&gt;sdcv，goldendict&lt;/b&gt; 等工具，我想要直接使用 &lt;code&gt;Elisp&lt;/code&gt; 来对词典进行解析。所幸前人栽树，后人乘凉，已经有了一个纯 &lt;code&gt;Elisp&lt;/code&gt; 实现的解析器 &lt;a href=&quot;https://www.emacswiki.org/emacs/stardict.el&quot;&gt;https://www.emacswiki.org/emacs/stardict.el&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   我所需要做的，就是下载需要的词典到本地(这个步骤是必须的，即使我不喜欢)，然后设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;;; 离线词典所在的目录&lt;/span&gt;
(setq maple-translate-sdcv-dir &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;~/.stardict/dicts&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&quot;color:#75715e&quot;&gt;;; 所使用的词典 -&amp;gt; (词典名词 . 词典具体目录)&lt;/span&gt;
(setq maple-translate-sdcv-dicts
      &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;lazyworm-ec&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;stardict-lazyworm-ec-2.4.2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
        (&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;lazyworm-ce&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;stardict-lazyworm-ce-2.4.2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)))&lt;/pre&gt;

&lt;p&gt;
   最后修改翻译引擎
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-engine &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;sdcv&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;
   注意：&lt;b&gt;第一次使用离线翻译需要等待词典初始化，这会需要耗费一段时间，后面就快了&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;多引擎翻译&lt;/h2&gt;
&lt;p&gt;
   &lt;b&gt;maple-translate&lt;/b&gt; 同样支持&lt;b&gt;多引擎&lt;/b&gt;，需要修改设置为一个列表
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-engine &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;(youdao dictcn sdcv))&lt;/pre&gt;

&lt;h2 id=&quot;heading-6&quot;&gt;翻译原理&lt;/h2&gt;
&lt;p&gt;
   目前支持的几个引擎: &lt;code&gt;youdao(有道)&lt;/code&gt;、&lt;code&gt;dictcn(海词)&lt;/code&gt;、&lt;code&gt;iciba(金山词霸)&lt;/code&gt;、&lt;code&gt;bing(必应)&lt;/code&gt;、&lt;code&gt;google(谷歌)&lt;/code&gt;、&lt;code&gt;sdcv(离线)&lt;/code&gt;。除 &lt;code&gt;sdcv&lt;/code&gt; 外，其它几个都依赖于网络，&lt;b&gt;maple-translate&lt;/b&gt; 可以看作是一个爬虫，通过爬取翻译页面，然后使用Emacs内置的 &lt;code&gt;dom&lt;/code&gt; 对HTML进行解析，最后获取到想要的内容(谷歌使用API获取)。基于此，我还写了一个超简单的 &lt;code&gt;类xpath&lt;/code&gt; 解析器
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(defun maple-translate-dom-by-key(dom key)
  (let (func num)
    (when (&lt;span style=&quot;color:#a6e22e&quot;&gt;string-match&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;([0-9]+&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
      (setq num (match-string &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; key))
      (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;substring&lt;/span&gt; key &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;-&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;length&lt;/span&gt; key) (&lt;span style=&quot;color:#a6e22e&quot;&gt;length&lt;/span&gt; num) &lt;span style=&quot;color:#ae81ff&quot;&gt;2&lt;/span&gt;))))
    (cond ((string-prefix-p &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
           (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;substring&lt;/span&gt; key &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;) func &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dom-by-class&lt;/span&gt;))
          ((string-prefix-p &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
           (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;substring&lt;/span&gt; key &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;) func &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dom-by-id&lt;/span&gt;))
          ((string-prefix-p &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
           (setq func (lambda(p _) (dom-children p))))
          (&lt;span style=&quot;color:#66d9ef&quot;&gt;t&lt;/span&gt; (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;intern&lt;/span&gt; key) func &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dom-by-tag&lt;/span&gt;)))
    (if (&lt;span style=&quot;color:#a6e22e&quot;&gt;null&lt;/span&gt; num)
        (&lt;span style=&quot;color:#a6e22e&quot;&gt;funcall&lt;/span&gt; func dom key)
      (&lt;span style=&quot;color:#a6e22e&quot;&gt;nth&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;string-to-number&lt;/span&gt; num) (&lt;span style=&quot;color:#a6e22e&quot;&gt;funcall&lt;/span&gt; func dom key)))))

(defun maple-translate-dom-find(dom xpath)
  (cl-loop for key in (string-split (string-trim xpath) &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
           if (&lt;span style=&quot;color:#a6e22e&quot;&gt;consp&lt;/span&gt; dom)
           do (setq dom (maple-translate-dom-by-key dom key))
           else return dom)
  dom)&lt;/pre&gt;

&lt;p&gt;
   这样，我就能通过一些简单的语法来定位想要的内容，比如在有道里面使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(maple-translate-dom-find dom &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;.simple dict-module/.trans-container/.word-exp&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;
   获取到 &lt;b&gt;class&lt;/b&gt; 名称为 &lt;code&gt;simple dict-module&lt;/code&gt; 下的 &lt;b&gt;class&lt;/b&gt; 名称为 &lt;code&gt;trans-container&lt;/code&gt; 下的 &lt;b&gt;class&lt;/b&gt; 名称为 &lt;code&gt;word-exp&lt;/code&gt; 的所有元素, 也就是&lt;b&gt;基本释义&lt;/b&gt;
&lt;/p&gt;</content>
        <category term="Tech/Linux/Emacs"></category>
    </entry>
    <entry xml:lang="zh">
      <title>使用acme.sh申请SSL证书</title>
      <link href="https://honmaple.me/articles/2023/09/shi-yong-acme-shshen-qing-sslzheng-shu.html" rel="alternate"></link>
      <published>Sun, 24 Sep 2023 13:57:51 +0000</published>
      <updated>Sun, 24 Sep 2023 19:06:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/09/shi-yong-acme-shshen-qing-sslzheng-shu.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/09/shi-yong-acme-shshen-qing-sslzheng-shu.html</id>
      <summary type="html">
&lt;h2 id=&quot;heading-1&quot;&gt;部署教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;安装并配置acme.sh&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 安装&lt;br/&gt;
       这里使用 &lt;b&gt;Docker&lt;/b&gt; 安装，方便环境隔离。&lt;code&gt;/opt/acme.sh&lt;/code&gt; 为挂载目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name acme.sh \
-e AUTO_UPGRADE=0 \
-e TZ=Asia/Shanghai \
-v /opt/acme.sh:/acme.sh \
neilpang/acme.sh daemon&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 配置&lt;br/&gt;
       &lt;b&gt;acme...&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;部署教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;安装并配置acme.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;固定域名(webroot)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.1&quot;&gt;申请证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.2&quot;&gt;配置SSL证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.3&quot;&gt;配置NGINX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.4&quot;&gt;重启NGINX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3&quot;&gt;泛域名(DNS)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.1&quot;&gt;令牌获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.2&quot;&gt;账户ID获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.3&quot;&gt;编辑配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.4&quot;&gt;申请证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.5&quot;&gt;安装证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.4&quot;&gt;搭配NginxProxyManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.5&quot;&gt;更新证书(手动)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;部署教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;安装并配置acme.sh&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 安装&lt;br/&gt;
       这里使用 &lt;b&gt;Docker&lt;/b&gt; 安装，方便环境隔离。&lt;code&gt;/opt/acme.sh&lt;/code&gt; 为挂载目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name acme.sh \
-e AUTO_UPGRADE=0 \
-e TZ=Asia/Shanghai \
-v /opt/acme.sh:/acme.sh \
neilpang/acme.sh daemon&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 配置&lt;br/&gt;
       &lt;b&gt;acme.sh&lt;/b&gt; 默认使用的是 &lt;b&gt;ZeroSSL&lt;/b&gt;，我这里修改为 &lt;b&gt;Let&amp;#39;s Encrypt&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --set-default-ca --server letsencrypt
docker exec acme.sh --set-default-chain --preferred-chain &amp;#34;ISRG&amp;#34; --server letsencrypt&lt;/pre&gt;
&lt;p&gt;
       注：&lt;code&gt;--preferred-chain &amp;#34;ISRG&amp;#34;&lt;/code&gt; 表示设置根证书为 &lt;b&gt;ISRG Root X1&lt;/b&gt;, 它与 &lt;b&gt;DST Root CA X3&lt;/b&gt; 的区别主要是
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ISRG Root X1&lt;/b&gt; 会更新一些，&lt;b&gt;DST Root CA X3&lt;/b&gt; 已于2021年9月30日到期
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 一些旧的设备（例如，iPhone 4 或 HTC Dream）不会信任 &lt;b&gt;ISRG Root X1&lt;/b&gt;，因为它们没有获得软件更新
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 虽说 &lt;b&gt;DST Root CA X3&lt;/b&gt; 已到期，但Android设备仍能够继续正常访问使用 Let’s Encrypt 证书加密的网站，其它旧设备将会得到证书过期警告
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 注册账号(&lt;b&gt;记得修改为自己的邮箱&lt;/b&gt;)
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --register-account --server letsencrypt -m i@example.com
[Sun Sep 24 15:49:59 CST 2023] Create account key ok.
[Sun Sep 24 15:49:59 CST 2023] Registering account: https://acme-v02.api.letsencrypt.org/directory
[Sun Sep 24 15:50:05 CST 2023] Registered
[Sun Sep 24 15:50:05 CST 2023] ACCOUNT_THUMBPRINT=&amp;#39;xxx&amp;#39;&lt;/pre&gt;
&lt;p&gt;
       这时会在 &lt;code&gt;/acme.sh&lt;/code&gt; 目录下生成一个 &lt;code&gt;http.header&lt;/code&gt; 文件，申请证书时会使用该文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-1.2&quot;&gt;固定域名(webroot)&lt;/h3&gt;
&lt;p&gt;
    如果只有少数几个固定的域名，这时可以使用 &lt;b&gt;webroot&lt;/b&gt; 方式申请SSL证书。&lt;b&gt;webroot&lt;/b&gt; 方式会在本地生成一个验证文件，申请证书时通过验证该文件验证域名所有权
&lt;/p&gt;

&lt;h4 id=&quot;heading-1.2.1&quot;&gt;申请证书&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --issue -d example.com -d www.example.com,nas.example.com -w /acme.sh/example.com&lt;/pre&gt;
&lt;p&gt;
     执行后会在挂载目录 &lt;code&gt;/opt/acme.sh&lt;/code&gt; 下生成SSL证书相关的 &lt;b&gt;cert&lt;/b&gt; 文件和 &lt;b&gt;key&lt;/b&gt; 文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;$ ls example.com
ca.cer  fullchain.cer  example.com.cer  example.com.conf  example.com.csr  example.com.csr.conf  example.com.key&lt;/pre&gt;
&lt;h4 id=&quot;heading-1.2.2&quot;&gt;配置SSL证书&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/fullchain.cer&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/example.com.key&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_dhparam&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/dhparam.pem&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_session_cache&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;shared:SSL:1m&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_session_timeout&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;5m&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_protocols&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1.1&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1.2&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1.3&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_ciphers&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;on&lt;/span&gt;;&lt;/pre&gt;

&lt;p&gt;
     如何生成 &lt;b&gt;dhparam&lt;/b&gt; 的证书?
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;openssl dhparam -out /opt/acme.sh/example.com/dhparam.pem 2048&lt;/pre&gt;
&lt;h4 id=&quot;heading-1.2.3&quot;&gt;配置NGINX&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;Let&amp;#39;s Encrypt&lt;/b&gt; 只会在 &lt;b&gt;80&lt;/b&gt; 端口验证域名所有权，所以只需要在 &lt;b&gt;80&lt;/b&gt; 端口添加一个 &lt;b&gt;location&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;server&lt;/span&gt; {
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;       &lt;span style=&quot;color:#ae81ff&quot;&gt;80&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;[::]:80&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;server_name&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;www.example.com&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;nas.example.com&lt;/span&gt;;

    &lt;span style=&quot;color:#f92672&quot;&gt;location&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/&lt;/span&gt; {
        &lt;span style=&quot;color:#f92672&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;301&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;https://example.com&lt;/span&gt;$request_uri;
    }
    &lt;span style=&quot;color:#f92672&quot;&gt;location&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;^~&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/.well-known/acme-challenge&lt;/span&gt; {
        &lt;span style=&quot;color:#f92672&quot;&gt;alias&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/.well-known/acme-challenge&lt;/span&gt;;
    }
}

&lt;span style=&quot;color:#66d9ef&quot;&gt;server&lt;/span&gt; {
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;       &lt;span style=&quot;color:#ae81ff&quot;&gt;443&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;ssl&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;       &lt;span style=&quot;color:#e6db74&quot;&gt;[::]:443&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;ssl&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;server_name&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;nas.example.com&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;include&lt;/span&gt;      &lt;span style=&quot;color:#e6db74&quot;&gt;/etc/nginx/conf.d/ssl/example.com.conf&lt;/span&gt;;

    &lt;span style=&quot;color:#f92672&quot;&gt;......&lt;/span&gt;
&lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;h4 id=&quot;heading-1.2.4&quot;&gt;重启NGINX&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;nginx -t
nginx -s reload&lt;/pre&gt;
&lt;h3 id=&quot;heading-1.3&quot;&gt;泛域名(DNS)&lt;/h3&gt;
&lt;p&gt;
    &lt;b&gt;webroot&lt;/b&gt; 无法申请泛域名证书，泛域名证书的申请需要利用&lt;b&gt;DNS服务提供商&lt;/b&gt;的API，动态添加一个TEXT记录，这里以 &lt;b&gt;Cloudflare&lt;/b&gt; 为例
&lt;/p&gt;
&lt;h4 id=&quot;heading-1.3.1&quot;&gt;令牌获取&lt;/h4&gt;
&lt;p&gt;
     右上角点击&lt;b&gt;我的个人资料&lt;/b&gt;, 然后点击&lt;b&gt;创建令牌&lt;/b&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     然后选择&lt;b&gt;DNS模版&lt;/b&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;令牌名称&lt;/b&gt;可以随意
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;权限&lt;/b&gt;设置为 &lt;code&gt;区域 -&amp;gt; DNS -&amp;gt; 编辑&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;区域资源&lt;/b&gt;设置为 &lt;code&gt;包括 -&amp;gt; 特定区域 -&amp;gt; 域名(example.com)&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     继续以显示摘要, 然后创建令牌
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-04.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-04.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     最后记得保存令牌到本地
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-05.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-05.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h4 id=&quot;heading-1.3.2&quot;&gt;账户ID获取&lt;/h4&gt;
&lt;p&gt;
     选择对应的域名，在&lt;b&gt;概况&lt;/b&gt;的右下角会有账户ID显示
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-06.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-06.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h4 id=&quot;heading-1.3.3&quot;&gt;编辑配置&lt;/h4&gt;
&lt;p&gt;
     编辑 &lt;code&gt;/opt/acme.sh&lt;/code&gt; 目录下的 &lt;code&gt;account.conf&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ CF_Token=&amp;#39;xxx&amp;#39;
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ CF_Account_ID=&amp;#39;xxx&amp;#39;
&lt;/span&gt;&lt;/pre&gt;

&lt;h4 id=&quot;heading-1.3.4&quot;&gt;申请证书&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --issue --dns dns_cf -d &amp;#34;nas.example.com&amp;#34; -d &amp;#34;*.nas.example.com&amp;#34;&lt;/pre&gt;

&lt;h4 id=&quot;heading-1.3.5&quot;&gt;安装证书&lt;/h4&gt;
&lt;p&gt;
     如果想要修改默认安装的目录，则可以使用 &lt;code&gt;--install-cert&lt;/code&gt; 命令
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --install-cert -d nas.example.com \
--key-file /nginx/data/custom_ssl/npm-1/privkey.pem \
--fullchain-file /nginx/data/custom_ssl/npm-1/fullchain.pem&lt;/pre&gt;

&lt;p&gt;
     如果想要更新证书后同步重启NGINX，可以继续添加命令参数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;--reloadcmd &amp;#34;nginx -s reload&amp;#34;&lt;/pre&gt;

&lt;h3 id=&quot;heading-1.4&quot;&gt;搭配NginxProxyManager&lt;/h3&gt;
&lt;p&gt;
    首先打开 &lt;b&gt;NginxProxyManager&lt;/b&gt;, 选择 &lt;b&gt;SSL Cetificates&lt;/b&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    然后选择 &lt;b&gt;Add SSL Cetificates -&amp;gt; Custom&lt;/b&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    最后添加相关文件:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Certificate&lt;/b&gt;: &lt;code&gt;nas.example.com.cer&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Certificate Key&lt;/b&gt;: &lt;code&gt;nas.example.com.key&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Intermediate Certificate&lt;/b&gt;: &lt;code&gt;ca.cer&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    为了避免证书过期后重新添加，需要把&lt;b&gt;NginxProxyManager&lt;/b&gt;挂载目录也挂载到 &lt;b&gt;acme.sh&lt;/b&gt; 容器
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker stop acme.sh
docker rm acme.sh
docker run -d --name acme.sh \
-e AUTO_UPGRADE=0 \
-e TZ=Asia/Shanghai \
-v /opt/acme.sh:/acme.sh \
-v /opt/nginx:/nginx \
neilpang/acme.sh daemon&lt;/pre&gt;

&lt;p&gt;
    然后修改申请证书的命令
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --issue --dns dns_cf -d &amp;#34;nas.example.com&amp;#34; -d &amp;#34;*.nas.example.com&amp;#34; \
--renew-hook &amp;#34;acme.sh --install-cert -d nas.example.com \
--key-file /nginx/data/custom_ssl/npm-1/privkey.pem \
--fullchain-file /nginx/data/custom_ssl/npm-1/fullchain.pem&amp;#34;&lt;/pre&gt;

&lt;p&gt;
    如果提示 &lt;code&gt;Domains not changed&lt;/code&gt;, 则需要使用 &lt;code&gt;--force&lt;/code&gt; 重新申请
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.5&quot;&gt;更新证书(手动)&lt;/h3&gt;
&lt;p&gt;
    从 &lt;b&gt;Let&amp;#39;s Encrypt&lt;/b&gt; 申请到的证书有效期是90天，&lt;b&gt;acme.sh&lt;/b&gt; 每60天会对证书进行更新，你也可以手动强制更新：
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;# 查询证书申请信息
acme.sh --list

# 手动强制更新证书
acme.sh --renew -d nas.example.com -d *.nas.example.com --force&lt;/pre&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/acmesh-official/acme.sh/wiki/Preferred-Chain&quot;&gt;https://github.com/acmesh-official/acme.sh/wiki/Preferred-Chain&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://letsencrypt.org/zh-cn/docs/dst-root-ca-x3-expiration-september-2021/&quot;&gt;https://letsencrypt.org/zh-cn/docs/dst-root-ca-x3-expiration-september-2021/&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://shiping.date/82.html&quot;&gt;https://shiping.date/82.html&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Tech"></category>
    </entry>
    <entry xml:lang="zh">
      <title>Zerotier笔记</title>
      <link href="https://honmaple.me/articles/2023/09/zerotier-note.html" rel="alternate"></link>
      <published>Sun, 17 Sep 2023 15:41:40 +0000</published>
      <updated>Sun, 24 Sep 2023 16:52:48 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/09/zerotier-note.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/09/zerotier-note.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;zerotier&lt;/b&gt; 可谓是慕名许久，但之前一直没有太多内网穿透和异地组网的需求，此次准备在外网访问家里NAS部署的部分应用，所以也调研了一些相关的应用，最终选择了 &lt;b&gt;zerotier&lt;/b&gt; 来对我现有的机器进行组网
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;FRP&lt;/b&gt;: 需要将服务器的端口映射出去，不太喜欢这种暴力的方式。我目前的服务基本上只会在 &lt;code&gt;0.0.0.0&lt;/code&gt; 监听80、443等常用端口，其它服务一律监听 &lt;code&gt;127.0.0.1&lt;/code&gt;，通过nginx访问内部的服务
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;DDNS&lt;/b&gt;: 家里的NAS直接暴露在公网，这非常不安全，而且家用宽带无法使用80，443端口，只能使用高位端口
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ZEROTIER&lt;/b&gt;: 使用 &lt;b&gt;P2P&lt;/b&gt; 的方式对多台服务器进行组网，映射的端口只允许加入组网的设备访问，这在速度和安全性上确实是我所需要的...&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;相关概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;部署教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;UI界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;Zerotier客户端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.3&quot;&gt;私有Planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.4&quot;&gt;私有Planet服务器加入组网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.5&quot;&gt;UI和Zerotier分开部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;组网教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.1&quot;&gt;创建网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.2&quot;&gt;加入网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.3&quot;&gt;跨网段访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.4&quot;&gt;安全限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;FAQ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4.1&quot;&gt;如何修改默认的9993端口?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;zerotier&lt;/b&gt; 可谓是慕名许久，但之前一直没有太多内网穿透和异地组网的需求，此次准备在外网访问家里NAS部署的部分应用，所以也调研了一些相关的应用，最终选择了 &lt;b&gt;zerotier&lt;/b&gt; 来对我现有的机器进行组网
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;FRP&lt;/b&gt;: 需要将服务器的端口映射出去，不太喜欢这种暴力的方式。我目前的服务基本上只会在 &lt;code&gt;0.0.0.0&lt;/code&gt; 监听80、443等常用端口，其它服务一律监听 &lt;code&gt;127.0.0.1&lt;/code&gt;，通过nginx访问内部的服务
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;DDNS&lt;/b&gt;: 家里的NAS直接暴露在公网，这非常不安全，而且家用宽带无法使用80，443端口，只能使用高位端口
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ZEROTIER&lt;/b&gt;: 使用 &lt;b&gt;P2P&lt;/b&gt; 的方式对多台服务器进行组网，映射的端口只允许加入组网的设备访问，这在速度和安全性上确实是我所需要的
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Planet&lt;/b&gt;: 行星服务器，也称根服务器。主要用于管理 &lt;b&gt;zerotier&lt;/b&gt; 客户端的地址信息
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Moon&lt;/b&gt;: 月亮服务器，也称中继服务器、跳转服务器。主要用于当两台设备无法直连时，可以通过Moon中转连接
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Leaf&lt;/b&gt;: 组网使用的设备，可以是一台服务器，一台NAS，甚至一台手机
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;部署教程&lt;/h2&gt;
&lt;p&gt;
   现在我有三台设备需要进行组网，一台A在国外， 一台B在国内(腾讯云)，还有一台C在家里(NAS)。我准备将私有Planet部署到机器A，同时机器A也会加入到内网里，A、B、C三台设备可以通过内网相互访问
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.1&quot;&gt;UI界面&lt;/h3&gt;
&lt;p&gt;
    以 &lt;code&gt;jonnyan404/zerotier-planet&lt;/code&gt; 为例
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 创建目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;mkdir /opt/zerotier /opt/ztncui&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 部署服务
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name ztncui --restart always \
-p 4000:4000 -p 9993:9993/tcp -p 9993:9993/udp \
-e MYADDR={服务器公网IP} \
-e HTTP_PORT=4000 \
-e HTTP_ALL_INTERFACES=yes \
-e ZTNCUI_PASSWD=mrdoc.fun \
-v /opt/zerotier:/var/lib/zerotier-one \
-v /opt/ztncui:/opt/key-networks/ztncui/etc \
keynetworks/ztncui&lt;/pre&gt;
&lt;p&gt;
       然后就可以通过 &lt;code&gt;服务器公网IP:4000&lt;/code&gt; 访问UI管理界面，默认的用户名和密码: &lt;code&gt;admin,mrdoc.fun&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-2.2&quot;&gt;Zerotier客户端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Linux&lt;/b&gt;: 部署方式很简单，注意区分 &lt;b&gt;host网络&lt;/b&gt; 和 &lt;b&gt;bridge网络&lt;/b&gt;，这两个在安全性有所区别(具体在下面讲)
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run --name zerotier -d \
--restart always \
--net host \
--cap-add NET_ADMIN \
--device /dev/net/tun \
-v /opt/zerotier:/var/lib/zerotier-one \
zerotier/zerotier:latest&lt;/pre&gt;
&lt;p&gt;
      如果使用私有Planet，记得替换 &lt;code&gt;/opt/zerotier/planet&lt;/code&gt; 文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Android&lt;/b&gt;: 推荐使用 &lt;a href=&quot;https://github.com/kaaass/ZerotierFix&quot;&gt;https://github.com/kaaass/ZerotierFix&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.3&quot;&gt;私有Planet&lt;/h3&gt;
&lt;p&gt;
    默认的Planet信息是硬编码在zertier代码里，如果安装好客户端后会在 &lt;code&gt;zerotier-cli peers&lt;/code&gt; 看到官方的Planet服务器。
&lt;/p&gt;

&lt;p&gt;
    而部署私有的Planet的目的:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 官方的服务器基本都位于国外或者香港，服务连通性无法得到保证
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 安全性。试想一个陌生的设备加入到网络，而这个设备的许可只需要得到官方的认证即可。当然，官方是基本不可能发生这样的情况，但如果有一个完全控制的网络，何乐而不为呢
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
    如何生成私有Planet文件?
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/jonnyan404/zerotier-planet --depth=1
cd zerotier-planet
docker cp mkmoonworld-x86_64 ztncui:/tmp
docker cp patch.sh ztncui:/tmp
docker exec -it ztncui bash /tmp/patch.sh
docker restart ztncui&lt;/pre&gt;
&lt;p&gt;
    这样就会在挂载目录 &lt;code&gt;/opt/zerotier&lt;/code&gt; 下生成一个新的 &lt;b&gt;planet&lt;/b&gt; 文件，记得下载并备份。&lt;b&gt;所有加入组网的客户端都需要替换该文件&lt;/b&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.4&quot;&gt;私有Planet服务器加入组网&lt;/h3&gt;
&lt;p&gt;
    如果按照上述部署流程也可以正常使用 &lt;code&gt;zerotier&lt;/code&gt; 组网，&lt;b&gt;但是&lt;/b&gt;，如果想要把部署了私有Planet的设备也加入到内网，貌似没有一篇文章说到。 所以我专门研究了一下，想要把私有Planet的机器也加入到内网，大概是可以分为下面几种方式:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 (&lt;b&gt;不推荐&lt;/b&gt;) 修改ztncui内部zerotier的默认端口9993 &lt;br/&gt;
       在 &lt;code&gt;/opt/zerotier&lt;/code&gt; 目录下添加一个 &lt;code&gt;local.conf&lt;/code&gt;，并设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;{
    &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;primaryPort&amp;#34;&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;9995&lt;/span&gt;
    }
}&lt;/pre&gt;
&lt;p&gt;
       然后修改 &lt;code&gt;patch.sh&lt;/code&gt; 文件里的 &lt;code&gt;9993&lt;/code&gt; 端口，以及 &lt;code&gt;/start_ztncui.sh&lt;/code&gt; 添加一行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;echo &amp;#34;ZT_ADDR=localhost:$ZT_PORT&amp;#34; &amp;gt; /opt/key-networks/ztncui/.env&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 部署两个zerotier: 除了ztncui容器内部的一个zerotier，再在机器上部署一个客户端，并修改端口，避免端口冲突
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 (&lt;b&gt;推荐&lt;/b&gt;) ztncui镜像的UI和zerotier分开部署&lt;br/&gt;
       我研究后才发现 &lt;code&gt;ztncui&lt;/code&gt; 的相关镜像把事情弄的很复杂，都把 &lt;code&gt;ztncui&lt;/code&gt; 和 &lt;code&gt;zerotier&lt;/code&gt; 放到同一个镜像，专门去连接 &lt;code&gt;localhost:9993&lt;/code&gt; 。其实是可以把两个镜像分开的，&lt;b&gt;UI&lt;/b&gt; 只做 &lt;b&gt;UI&lt;/b&gt; ，使用 &lt;b&gt;API&lt;/b&gt; 去连接 &lt;b&gt;zerotier&lt;/b&gt; 官方的镜像
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-2.5&quot;&gt;UI和Zerotier分开部署&lt;/h3&gt;
&lt;p&gt;
    如果想要自己构建Docker镜像，可以参考 &lt;a href=&quot;https://github.com/honmaple/ztncui-aio&quot;&gt;honmaple/ztncui-aio&lt;/a&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 部署 &lt;b&gt;zerotier&lt;/b&gt; 的客户端(部署过的可以忽略)
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name zerotier --restart always --net=host --cap-add NET_ADMIN --device /dev/net/tun -v /opt/zerotier:/var/lib/zerotier-one zerotier/zerotier:latest&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 部署 &lt;b&gt;UI&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name ztncui --restart always \
-e MYADDR={服务器IP} \
-e HTTP_PORT=4000 \
-e HTTP_ALL_INTERFACES=yes \
-e ZT_ADDR={zerotier地址, 比如Docker网关:9993} \
-e ZT_TOKEN={可以为空，但需要挂载zerotier-one的配置路径} \
-v /opt/ztncui:/opt/ztncui/etc \
-v /opt/zerotier:/var/lib/zerotier-one \
-p 4000:4000 \
honmaple/ztncui:latest&lt;/pre&gt;
&lt;p&gt;
       &lt;b&gt;ZT_ADDR&lt;/b&gt;: 由于 &lt;b&gt;zerotier&lt;/b&gt; 和 &lt;b&gt;ztncui&lt;/b&gt; 没有部署在一个容器，所以需要从UI内部访问宿主机的 &lt;b&gt;&lt;b&gt;9993&lt;/b&gt;&lt;/b&gt; 端口，这里可以使用UI容器的网关访问，比如UI容器的IP是 &lt;b&gt;&lt;b&gt;172.17.0.12&lt;/b&gt;&lt;/b&gt;，则访问 &lt;b&gt;&lt;b&gt;172.17.0.1&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
       另外，&lt;b&gt;zerotier&lt;/b&gt; 默认的API接口只允许 &lt;b&gt;&lt;b&gt;127.0.0.1&lt;/b&gt;&lt;/b&gt; 访问，所以需要在挂载目录 &lt;code&gt;/opt/zerotier&lt;/code&gt; 下新建一个 &lt;b&gt;&lt;b&gt;local.conf&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;{
    &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;allowManagementFrom&amp;#34;&lt;/span&gt;: [&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;127.0.0.1/24&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;172.17.0.1/24&amp;#34;&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改归属的用户和用户组
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec -it zerotier bash
cd /var/lib/zerotier-one
chown zerotier-one:zerotier-one local.conf
exit&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 生成私有Planet文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/honmaple/ztncui-aio --depth=1
cd ztncui-aio
docker cp script/mkmoonworld-x86_64 zerotier:/tmp
docker cp script/patch.sh zerotier:/tmp
docker exec -it zerotier bash /tmp/patch.sh {服务器IP}&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 重启
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker restart zerotier&lt;/pre&gt;
&lt;p&gt;
       这样就能使私有Planet和zerotier客户端共存，让Planet服务器也能加入到内网环境了
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-3&quot;&gt;组网教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-3.1&quot;&gt;创建网络&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 使用浏览器打开UI管理界面 &lt;code&gt;{服务器公网IP}:4000&lt;/code&gt;，&lt;code&gt;honmaple/ztncui&lt;/code&gt; 默认用户名密码是 &lt;code&gt;admin,password&lt;/code&gt;
       
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 点击 &lt;code&gt;Add network&lt;/code&gt;，输入一个网络名称，比如 &lt;b&gt;testlab&lt;/b&gt;。然后选择 &lt;code&gt;Easy setup&lt;/code&gt;
       
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 添加一个内网网段，记得这个内网网段不能和需要加入组网的设备网段相同，比如我的设备C网段是 &lt;code&gt;192.168.31.0/24&lt;/code&gt; ，就不能添加该网段，另外Docker所使用的网段 &lt;code&gt;172.0.0.0/8&lt;/code&gt; 也需要避免添加，所以我这里选择 &lt;code&gt;10.8.230.0/24&lt;/code&gt;。&lt;b&gt;不同的设备内网网段不同，请根据实际添加&lt;/b&gt;
       
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-3.2&quot;&gt;加入网络&lt;/h3&gt;
&lt;p&gt;
    创建好网络后就会得到一串网络ID，登录到设备，然后使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec zerotier zerotier-cli join {网络ID}&lt;/pre&gt;

&lt;p&gt;
    加入网络，正常情况下会得到
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;200 join OK&lt;/pre&gt;
&lt;p&gt;
    刷新管理界面就会出现一个新的成员
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-04.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-04.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    然后勾选 &lt;b&gt;Authorizerd&lt;/b&gt; 允许加入，再次刷新，就能看到该设备分配了一个新的IP &lt;code&gt;10.8.230.170&lt;/code&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-05.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-05.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    返回设备，可以看到设备多了一个新的IP
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-06.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-06.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-3.3&quot;&gt;跨网段访问&lt;/h3&gt;
&lt;p&gt;
    什么是跨网段访问? 比如现在我可以通过 &lt;b&gt;10.8.230.0/24&lt;/b&gt; 访问已经加入组网的设备，但我想要在&lt;b&gt;设备B&lt;/b&gt;上访问我家里的其它设备，但是，我家里设备的网段是 &lt;b&gt;192.168.31.0/24&lt;/b&gt;，正常是无法访问的，只能访问已经加入组网的Nas。这时需要配置静态路由，让设备B访问 &lt;b&gt;192.168.31.0/24&lt;/b&gt; 网段时走zerotier配置好的IP。
&lt;/p&gt;

&lt;p&gt;
    如果手动添加就是
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ip route add 192.168.31.0/24 via 10.8.230.170 dev {zerotier建立的网卡}&lt;/pre&gt;

&lt;p&gt;
    当然，也可以直接使用zerotier管理界面添加，选择 &lt;code&gt;Routes&lt;/code&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-07.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-07.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;Target&lt;/b&gt; 输入想要访问的网段：&lt;code&gt;192.168.31.0/24&lt;/code&gt;，&lt;b&gt;Gateway&lt;/b&gt; 输入之前分配的IP：&lt;code&gt;10.8.230.170&lt;/code&gt;。
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-08.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-08.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    创建好后可以在设备B上执行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ping 192.168.31.XX(除设备C之外的内网设备IP)&lt;/pre&gt;
&lt;p&gt;
    查看网络是否连通
&lt;/p&gt;

&lt;h3 id=&quot;heading-3.4&quot;&gt;安全限制&lt;/h3&gt;
&lt;p&gt;
    正因为跨网段访问只需要添加一个静态路由，就能访问我家里的其它设备，这无疑是非常不安全的。如果私有Planet服务器遭到入侵，我家里的所有联网设备都会暴露出去，即使加入组网只是其中的一台。基于此原因，我专门调整了一下zerotier的部署方式，不再使用 &lt;b&gt;host网络&lt;/b&gt; 的方式部署，而是创建一个新的Docker网络 &lt;code&gt;zerotier&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker network create --driver=bridge --subnet=192.168.100.0/24 --gateway=192.168.100.1 zerotier&lt;/pre&gt;
&lt;p&gt;
    注: &lt;code&gt;192.168.100.0/24&lt;/code&gt; 是一个全新的网段，不要使用172网段
&lt;/p&gt;

&lt;p&gt;
    然后删除之前部署的 &lt;b&gt;zerotier&lt;/b&gt; 客户端，并使用 &lt;b&gt;zerotier网络&lt;/b&gt; 重新部署
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker stop zerotier
docker rm zerotier
docker run -d --name zerotier --restart always --net zerotier --cap-add NET_ADMIN --device /dev/net/tun -v /opt/zerotier:/var/lib/zerotier-one zerotier/zerotier:latest&lt;/pre&gt;
&lt;p&gt;
    细心的朋友应该会发现我这里没有将 &lt;b&gt;9993&lt;/b&gt; 端口映射给宿主机，这是由于我测试发现两台设备只需要其中一台开放 &lt;code&gt;9993&lt;/code&gt; 端口，两台设备之间就能直连。如果两台设备都不开放端口，则会通过开放了端口的其它设备进行跳转，查看 &lt;b&gt;peers&lt;/b&gt; 会看到一直是 &lt;b&gt;RELAY&lt;/b&gt; 状态
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;root@cf5f973bd294:/# zerotier-cli peers
200 peers
&amp;lt;ztaddr&amp;gt;   &amp;lt;ver&amp;gt;  &amp;lt;role&amp;gt; &amp;lt;lat&amp;gt; &amp;lt;link&amp;gt;   &amp;lt;lastTX&amp;gt; &amp;lt;lastRX&amp;gt; &amp;lt;path&amp;gt;
xxxxxxxxx  1.12.1 LEAF      -1 RELAY&lt;/pre&gt;

&lt;p&gt;
    这时想要从设备B访问我家里其它联网的设备已是不可能，除非突破Docker的限制。而正常情况下，我想要从设备B上访问的是部署在设备C的其它服务(以Docker服务为主)，所以，现在可以添加一个新的路由 &lt;b&gt;192.168.100.0/24&lt;/b&gt; 指向 &lt;b&gt;10.8.230.170&lt;/b&gt;，然后修改其它镜像使用的网络为 &lt;b&gt;zerotier&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --rm --name=test-nginx --net=zerotier nginx:stable-alpine
docker exec -it test-nginx ip a&lt;/pre&gt;

&lt;p&gt;
    接着在设备B上执行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ping 192.168.100.3(test-nginx的IP)
curl 192.168.100.3&lt;/pre&gt;

&lt;p&gt;
    如果无法访问，需要在Docker所在宿主机上添加路由
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ip route add 10.8.230.0/24 via 192.168.100.2(zerotier客户端的IP)&lt;/pre&gt;

&lt;p&gt;
    另外，由于Docker的IP可能会发生改变，除创建容器时指定 &lt;code&gt;--ip&lt;/code&gt; 外，还可以将服务的端口映射出去，比如 &lt;b&gt;NasTools&lt;/b&gt; 使用端口为 3000，那么可以在创建容器时指定
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;-p 11300:3000&lt;/pre&gt;
&lt;p&gt;
    然后在设备B上访问 &lt;code&gt;192.168.100.1:11300&lt;/code&gt;，即&lt;b&gt;网关地址+映射的端口&lt;/b&gt;，这样就能避免Docker重启后IP发生改变而导致服务异常的情况
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;heading-4.1&quot;&gt;如何修改默认的9993端口?&lt;/h3&gt;
&lt;p&gt;
    在 &lt;b&gt;zerotier&lt;/b&gt; 挂载的目录下新建一个 &lt;code&gt;local.conf&lt;/code&gt; 文件，并设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;{
    &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;primaryPort&amp;#34;&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;9995&lt;/span&gt;
    }
}&lt;/pre&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/honmaple/ztncui-aio&quot;&gt;https://github.com/honmaple/ztncui-aio&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/jonnyan404/zerotier-planet&quot;&gt;https://github.com/jonnyan404/zerotier-planet&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/zerotier/ZeroTierOne/blob/dev/README.docker.md&quot;&gt;https://github.com/zerotier/ZeroTierOne/blob/dev/README.docker.md&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://docs.zerotier.com/zerotier/zerotier.conf/&quot;&gt;https://docs.zerotier.com/zerotier/zerotier.conf/&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Tech/Geek"></category>
    </entry>
    <entry xml:lang="zh">
      <title>文件同步和备份</title>
      <link href="https://honmaple.me/articles/2023/08/文件同步和备份.html" rel="alternate"></link>
      <published>Fri, 04 Aug 2023 15:30:04 +0000</published>
      <updated>Thu, 21 Sep 2023 11:13:21 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/08/文件同步和备份.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/08/文件同步和备份.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
最近在写一个文件同步和备份的软件，特此记录
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;同步&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;单向同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.1.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 选项一: 源目录的文件和目标目录的文件都发生修改:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 覆盖文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 跳过文件: 不作任何处理
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项二: 源目录的文件被删除时，是否删除目标目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.1.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;第一次同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。&lt;b&gt;后续同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;无修改&lt;/b&gt;: 无操作
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;新增文件&lt;/b&gt;: 对比信息文件判断是否新增
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;选项一...&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;单向同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1.1&quot;&gt;同步选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1.2&quot;&gt;同步逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;镜像同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.1&quot;&gt;同步选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.2&quot;&gt;同步逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3&quot;&gt;双向同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.1&quot;&gt;同步选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.2&quot;&gt;同步逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
最近在写一个文件同步和备份的软件，特此记录
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;同步&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;单向同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.1.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 选项一: 源目录的文件和目标目录的文件都发生修改:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 覆盖文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 跳过文件: 不作任何处理
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项二: 源目录的文件被删除时，是否删除目标目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.1.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;第一次同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。&lt;b&gt;后续同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;无修改&lt;/b&gt;: 无操作
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;新增文件&lt;/b&gt;: 对比信息文件判断是否新增
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;修改文件&lt;/b&gt;: 对比信息文件判断是否修改
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;删除文件&lt;/b&gt;: 对比信息文件判断是否删除
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: 无操作
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-1.2&quot;&gt;镜像同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.2.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 单向同步选项一: 覆盖文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 单向同步选项二: 同步删除目标目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.2.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     逻辑同单向同步
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.3&quot;&gt;双向同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.3.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 选项一: 源目录的文件和目标目录的文件都发生修改:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 保留最新的文件: 对比文件修改时间，如果源目录的文件最新, 则覆盖目标目录的文件; 反之，覆盖源目录的文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 以源目录为准: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 以目标目录为准: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 跳过文件: 不作任何处理
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项二: 源目录的文件被删除时，是否删除目标目录的文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项三: 目标目录的文件被删除时，是否删除源目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.3.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;第一次同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。&lt;b&gt;后续同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;无修改&lt;/b&gt;: 对比信息文件判断
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;新增文件&lt;/b&gt;: 对比信息文件判断是否新增
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;修改文件&lt;/b&gt;: 对比信息文件判断是否修改
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;删除文件&lt;/b&gt;: 对比信息文件判断是否删除
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: 无操作
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Life"></category>
    </entry>
</feed>