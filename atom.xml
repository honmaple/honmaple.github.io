<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
  <title>紅楓吟 - index</title>
    <subtitle>风落花语风落天，花落风雨花落田.</subtitle>
  <link href="https://honmaple.me/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://honmaple.me/index.html"/>
  <generator uri="https://github.com/honmaple/snow">Snow</generator>
    <updated>Tue, 26 Dec 2023 20:58:32 +0000</updated>
  <id>https://honmaple.me</id>
    <entry xml:lang="zh">
      <title>使用Go重写MetingJS的API</title>
      <link href="" rel="alternate"></link>
      <published>Tue, 26 Dec 2023 13:23:00 +0000</published>
      <updated>Tue, 26 Dec 2023 20:58:32 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/12/shi-yong-gozhong-xie-metingjsde-api.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/12/shi-yong-gozhong-xie-metingjsde-api.html</id>
      <summary type="html">
&lt;p&gt;
&lt;b&gt;MetingJS&lt;/b&gt; 是一款通过获取网易云音乐或者QQ音乐等服务的歌单、歌手、歌曲、歌词等信息，然后使用开源HTML5播放器 &lt;b&gt;APlayer&lt;/b&gt; 进行播放的插件。而 &lt;b&gt;MetingJS&lt;/b&gt; 是一段很小的JS代码，它提供了一个默认的API接口：&lt;a href=&quot;https://api.i-meto.com/meting/api&quot;&gt;https://api.i-meto.com/meting/api&lt;/a&gt; , 但很不幸，该接口偶尔会出问题，作者也很久没有回复issue了。
&lt;/p&gt;

&lt;p&gt;
现在也有一个开源的 &lt;a href=&quot;https://github.com/injahow/meting-api&quot;&gt;injahow/meting-api&lt;/a&gt;，该服务同样使用PHP编写，我不太懂PHP，我只是想要设置一个缓存，来缓存所有的歌曲信息，而不仅仅是歌单列表，另外是可以支持内存缓存和本地磁盘缓存，而不是直接从本地文件中读取。
&lt;/p&gt;

&lt;p&gt;
基于此，与其自己改不是太懂的PHP，说不定会出现一些意想不到的漏洞...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;手动部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;Docker部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.3&quot;&gt;配置说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.4&quot;&gt;命令行参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.5&quot;&gt;网页端设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;演示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;MetingJS&lt;/b&gt; 是一款通过获取网易云音乐或者QQ音乐等服务的歌单、歌手、歌曲、歌词等信息，然后使用开源HTML5播放器 &lt;b&gt;APlayer&lt;/b&gt; 进行播放的插件。而 &lt;b&gt;MetingJS&lt;/b&gt; 是一段很小的JS代码，它提供了一个默认的API接口：&lt;a href=&quot;https://api.i-meto.com/meting/api&quot;&gt;https://api.i-meto.com/meting/api&lt;/a&gt; , 但很不幸，该接口偶尔会出问题，作者也很久没有回复issue了。
&lt;/p&gt;

&lt;p&gt;
现在也有一个开源的 &lt;a href=&quot;https://github.com/injahow/meting-api&quot;&gt;injahow/meting-api&lt;/a&gt;，该服务同样使用PHP编写，我不太懂PHP，我只是想要设置一个缓存，来缓存所有的歌曲信息，而不仅仅是歌单列表，另外是可以支持内存缓存和本地磁盘缓存，而不是直接从本地文件中读取。
&lt;/p&gt;

&lt;p&gt;
基于此，与其自己改不是太懂的PHP，说不定会出现一些意想不到的漏洞(源自某安全公司多次CTF换来的教训)，不如使用熟悉的Go重写实现，毕竟核心代码也不是太多
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 支持网易云音乐，QQ音乐
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 支持新服务接口扩展
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 支持所有请求结果的缓存
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 更方便的配置(环境变量+配置文件)，而不用修改源文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 基于 &lt;b&gt;Go&lt;/b&gt; 编写，一次编译，到处运行
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;使用&lt;/h2&gt;
&lt;h3 id=&quot;heading-2.1&quot;&gt;手动部署&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 下载仓库
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/honmaple/meting-api&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 编译可执行文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;go mod download
go build -o meting-api .&lt;/pre&gt;
&lt;p&gt;
      或者使用 &lt;b&gt;Docker&lt;/b&gt; 进行编译, 编译后的文件在 &lt;code&gt;/usr/bin/meting-api&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker build -t meting-api .&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 运行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -D&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.2&quot;&gt;Docker部署&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run --name meting-api --restart=always -d -p 8000:8000 -v /tmp/meting-cache:/opt/meting-api/cache honmaple/meting-api&lt;/pre&gt;
&lt;h3 id=&quot;heading-2.3&quot;&gt;配置说明&lt;/h3&gt;
&lt;p&gt;
    配置可以使用环境变量或者配置文件设置
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 环境变量: 使用 &lt;code&gt;METING_XXXX&lt;/code&gt;, 比如 &lt;code&gt;METING_CACHE_TTL&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 配置文件: 默认使用当前目录下的 &lt;code&gt;config.yaml&lt;/code&gt;, 如果使用 &lt;b&gt;Docker&lt;/b&gt; 部署，需要文件挂载到 &lt;code&gt;/opt/meting-api/config.yaml&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 具体配置:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;# 缓存过期时间&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;cache.ttl&lt;/span&gt;:                  &lt;span style=&quot;color:#ae81ff&quot;&gt;3600&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 缓存路径，设置为空是禁用缓存&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;cache.path&lt;/span&gt;:                 &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;./cache&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 是否激活缓存&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;cache.enabled&lt;/span&gt;:              &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;

&lt;span style=&quot;color:#75715e&quot;&gt;# 服务监听地址，:8000 表示监听 0.0.0.0:8000&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.addr&lt;/span&gt;:                &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;:8000&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 对外服务地址，比如 https://api.xxxx.com/meting&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.host&lt;/span&gt;:                &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&quot;color:#75715e&quot;&gt;## cors设置&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.cors.allow_headers&lt;/span&gt;:
  - &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.cors.allow_origins&lt;/span&gt;:
  - &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;server.cors.allow_methods&lt;/span&gt;:
  - &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;

&lt;span style=&quot;color:#75715e&quot;&gt;# 日志相关, out可选stdout,stderr,file，或者使用|分隔多个，比如stderr|file&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.out&lt;/span&gt;:                 &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;stdout&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 日志级别&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.level&lt;/span&gt;:               &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 日志文件名格式&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.file_format&lt;/span&gt;:         &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;%Y%m%d&amp;#34;&lt;/span&gt;
&lt;span style=&quot;color:#75715e&quot;&gt;# 日志文件保留数量&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;logger.file_rotation_count&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.4&quot;&gt;命令行参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 查看支持的服务
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api --list&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 指定监听地址
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -a :8001
./meting-api --addr :8001&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 显示请求记录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -D
./meting-api --debug&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 指定配置文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api -c /etc/meting.yaml
./meting-api --config /etc/meting.yaml&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 显示当前配置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api config&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 删除指定缓存
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;./meting-api delete-cache &amp;#39;server:netease:type:${type}:id:${id}&amp;#39;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.5&quot;&gt;网页端设置&lt;/h3&gt;
&lt;p&gt;
    其中 &lt;code&gt;http://localhost:8000/&lt;/code&gt; 是对外服务的接口
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;meting-js&lt;/span&gt;
  &lt;span style=&quot;color:#a6e22e&quot;&gt;server&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;netease&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#a6e22e&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;artist&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#a6e22e&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;6452&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;meting-js&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;meting_api&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;http://localhost:8000/?server=:server&amp;amp;type=:type&amp;amp;id=:id&amp;amp;auth=:auth&amp;amp;r=:r&amp;#39;&lt;/span&gt;;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;演示&lt;/h2&gt;
   
  &lt;meting-js server=&quot;netease&quot; type=&quot;playlist&quot; id=&quot;9085878380&quot;&gt;&lt;/meting-js&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
 if (!shortcodes) {
     var shortcodes = {};
 }
 if (!shortcodes[&quot;music&quot;] &amp;&amp; document.querySelector(&quot;meting-js&quot;)) {
     var meting_api = &#39;https://api.honmaple.com/meting?server=:server&amp;type=:type&amp;id=:id&amp;auth=:auth&amp;r=:r&#39;;

     shortcodes.loadJS(&quot;https://honmaple.me/static/lib/js/APlayer.min.js&quot;, false, true);
     shortcodes.loadJS(&quot;https://honmaple.me/static/lib/js/Meting.min.js&quot;, false, true);

     shortcodes.loadCSS(&quot;https://honmaple.me/static/lib/css/APlayer.min.css&quot;);
     shortcodes.loadCSS(&quot;https://honmaple.me/static/css/aplayer.css&quot;);
 }
 shortcodes[&quot;music&quot;] = true;
&lt;/script&gt;
</content>
        <category term="Life/Coding"></category>
    </entry>
    <entry xml:lang="zh">
      <title>Snow静态博客处理多图排版</title>
      <link href="" rel="alternate"></link>
      <published>Sun, 17 Dec 2023 17:04:52 +0000</published>
      <updated>Sun, 17 Dec 2023 20:54:41 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/12/snowjing-tai-bo-ke-chu-li-duo-tu-pai-ban.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/12/snowjing-tai-bo-ke-chu-li-duo-tu-pai-ban.html</id>
      <summary type="html">
&lt;p&gt;
事情的缘由是我无意中发现之前写的部分文章里的图片没有渲染出来，才想起之前博客系统改版，从 &lt;b&gt;Pelican&lt;/b&gt; 切换到 &lt;b&gt;Snow&lt;/b&gt; 时竟然忘记了，看了一下原文，大部分都是以下形式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(二...&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;解析原始链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;并排显示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;多行显示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;图片懒加载和点击全屏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;显示效果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
事情的缘由是我无意中发现之前写的部分文章里的图片没有渲染出来，才想起之前博客系统改版，从 &lt;b&gt;Pelican&lt;/b&gt; 切换到 &lt;b&gt;Snow&lt;/b&gt; 时竟然忘记了，看了一下原文，大部分都是以下形式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(二).jpg]]
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(三).jpg]]
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;col-md-4&amp;#34;&lt;/span&gt;&amp;gt;
    [[https://s.libforest.com/images/pic/西湖/日落(一).jpg]]
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;
&lt;p&gt;
因为我之前的博客主题使用了 &lt;b&gt;Bootstrap&lt;/b&gt;，为了能够让多张图片并排显示，所以用了 &lt;b&gt;Bootstrap&lt;/b&gt; 里的 &lt;code&gt;.row .col-*&lt;/code&gt;。但前不久移除了全部的 &lt;b&gt;Bootstrap&lt;/b&gt;，现在当然不会生效。另外一点是我之前用的 &lt;b&gt;org mode&lt;/b&gt; 解析器可以直接解析 &lt;b&gt;HTML&lt;/b&gt; 中的链接，但更换了新的解析器 &lt;a href=&quot;https://github.com/honmaple/org-golang&quot;&gt;org-golang&lt;/a&gt; 后，已经无法不能解析HTML中的原始链接
&lt;/p&gt;

&lt;p&gt;
此次利用 &lt;b&gt;Snow&lt;/b&gt; 博客系统中的 &lt;b&gt;shortcode&lt;/b&gt; 功能实现多图排版，让图片可以并排显示，多行显示。
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;解析原始链接&lt;/h2&gt;
&lt;p&gt;
   首先在主题下创建一个名为 &lt;code&gt;img-layout&lt;/code&gt; 的 &lt;b&gt;shortcode&lt;/b&gt;，比如我使用的主题叫做 &lt;b&gt;snow&lt;/b&gt;，所以在 &lt;code&gt;themes/snow/templates/shortcodes&lt;/code&gt; 目录下创建一个 &lt;code&gt;img-layout.html&lt;/code&gt; 文件，并添加 &lt;code&gt;markdown&lt;/code&gt; 或者 &lt;code&gt;org&lt;/code&gt; 的 &lt;b&gt;filter&lt;/b&gt; 将原始文本解析成HTML
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;img-layout&amp;#34;&lt;/span&gt;&amp;gt;
  {%- if params.type == &amp;#34;markdown&amp;#34; %}
  {{ body | markdown | safe }}
  {%- else %}
  {{ body | org | safe }}
  {%- endif %}
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;p&gt;
   接着修改原始文章
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;#+begin_export html
&amp;lt;shortcode _name=&amp;#34;img-layout&amp;#34;&amp;gt;
[[https://s.libforest.com/images/pic/西湖/日落(二).jpg]]
[[https://s.libforest.com/images/pic/西湖/日落(三).jpg]]
[[https://s.libforest.com/images/pic/西湖/日落(一).jpg]]
&amp;lt;/shortcode&amp;gt;
#+end_export&lt;/pre&gt;

&lt;p&gt;
   经过修改，原始文章中的内容将会自动渲染成
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;img-layout&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(二).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(三).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(一).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
  &amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;并排显示&lt;/h2&gt;
&lt;p&gt;
   有了固定结构的HTML， 接着就可以添加 &lt;b&gt;css&lt;/b&gt;，使多张图片可以并排显示
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;display&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;flex&lt;/span&gt;;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;wrap&lt;/span&gt;;
}

.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;width&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;auto&lt;/span&gt;;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;min-width&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;max-width&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;%&lt;/span&gt;;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;flex&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;10000&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;%&lt;/span&gt;;
}

&lt;span style=&quot;color:#75715e&quot;&gt;/* 处理手机等设备图片显示问题 */&lt;/span&gt;
@&lt;span style=&quot;color:#66d9ef&quot;&gt;media&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;screen&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;max-width&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;600px&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;)&lt;/span&gt; {
    .&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; {
        &lt;span style=&quot;color:#66d9ef&quot;&gt;min-width&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;%&lt;/span&gt;
    }
}

&lt;span style=&quot;color:#75715e&quot;&gt;/* 添加图片上下左右间隔 */&lt;/span&gt;
.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;margin&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;-0.25&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;-0.25&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#75715e&quot;&gt;!important&lt;/span&gt;;
}

.&lt;span style=&quot;color:#a6e22e&quot;&gt;img-layout&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;margin&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;0.5&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;0.25&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;rem&lt;/span&gt; &lt;span style=&quot;color:#75715e&quot;&gt;!important&lt;/span&gt;;
}&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;多行显示&lt;/h2&gt;
&lt;p&gt;
   多行显示可以利用文件解析时每次遇到空行都会生成一个新的段落，比如
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;[[https://s.libforest.com/images/pic/西湖/日落(一).jpg]]

[[https://s.libforest.com/images/pic/西湖/日落(二).jpg]]&lt;/pre&gt;
&lt;p&gt;
   就会生成
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(一).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;https://s.libforest.com/images/pic/西湖/日落(二).jpg&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/pre&gt;
&lt;p&gt;
   故如果需要多行显示，只用在多张图片中间添加一个空行即可
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;图片懒加载和点击全屏&lt;/h2&gt;
&lt;p&gt;
   之前的图片懒加载和点击全屏的功能我也是利用 &lt;b&gt;Snow&lt;/b&gt; 中的 &lt;b&gt;shortcode&lt;/b&gt; 功能实现的，我在 &lt;code&gt;themes/snow/templates/shortcodes&lt;/code&gt; 目录下建立了一个 &lt;code&gt;img.html&lt;/code&gt; 的文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;{{ params.src }}&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;data-fancybox&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;data-src&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;{{ params.src + &amp;#39;-thumb&amp;#39; }}&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;lazyload&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/pre&gt;
&lt;p&gt;
   这样，文章内所有的 &lt;code&gt;img&lt;/code&gt; 标签的图片都会加上懒加载和点击全屏的功能(基于 &lt;b&gt;lazysizes&lt;/b&gt; 和 &lt;b&gt;fancybox&lt;/b&gt;)
&lt;/p&gt;

&lt;p&gt;
   但是，由于 &lt;b&gt;Snow&lt;/b&gt; 中 &lt;b&gt;shortcode&lt;/b&gt; 的实现是一次性遍历 &lt;b&gt;HTML DOM&lt;/b&gt;，无法在一个 &lt;b&gt;shortcode&lt;/b&gt; 内部调用另一个 &lt;b&gt;shortcode&lt;/b&gt;。
   所幸 &lt;b&gt;Snow&lt;/b&gt; 是我自己写的，思索片刻，我在 &lt;b&gt;shortcode&lt;/b&gt; 实现中加入了三行代码，这样就能在一个 &lt;b&gt;shortcode&lt;/b&gt; 中重复调用其它的 &lt;b&gt;shortcode&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;vars := map[string]interface{}{
...
&lt;span style=&quot;color:#a6e22e&quot;&gt;+	&amp;#34;_shortcode&amp;#34;: func(s string) string {
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+		return self.shortcode(page, s)
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+	},
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;}
&lt;/pre&gt;

&lt;p&gt;
   然后修改 &lt;code&gt;img-layout.html&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&amp;lt;&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;img-layout&amp;#34;&lt;/span&gt;&amp;gt;
  {%- if params.type == &amp;#34;markdown&amp;#34; %}
  {{ _shortcode(body | markdown) | safe }}
  {%- else %}
  {{ _shortcode(body | org) | safe }}
  {%- endif %}
&amp;lt;/&lt;span style=&quot;color:#f92672&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/pre&gt;

&lt;p&gt;
   最后添加 &lt;b&gt;css&lt;/b&gt; 样式
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;- .img-layout p &amp;gt; img {
&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ .img-layout p &amp;gt; img, .img-layout p &amp;gt; a {
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;color:#a6e22e&quot;&gt;+ .img-layout p &amp;gt; a &amp;gt; img {
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+     height: 100%;
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ }
&lt;/span&gt;&lt;/pre&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;显示效果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 两张图片
&lt;/p&gt;
     &lt;div class=&quot;img-layout&quot;&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 三张图片
&lt;/p&gt;
     &lt;div class=&quot;img-layout&quot;&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 多行显示
&lt;/p&gt;
     &lt;div class=&quot;img-layout&quot;&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(一).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(二).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/pic/西湖/日落(三).jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-6&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://immmmm.com/about-images-gird/&quot;&gt;https://immmmm.com/about-images-gird/&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Life/Coding"></category>
    </entry>
    <entry xml:lang="zh">
      <title>绿联Nas优化</title>
      <link href="" rel="alternate"></link>
      <published>Tue, 12 Dec 2023 21:54:12 +0000</published>
      <updated>Sun, 17 Dec 2023 20:22:07 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/12/lu-lian-nasyou-hua.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/12/lu-lian-nasyou-hua.html</id>
      <summary type="html">
&lt;p&gt;
记录一下，每次升级系统都要重新改一次
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;禁用迅雷&lt;/h2&gt;
&lt;p&gt;
   找到 &lt;code&gt;/ugreen/thunder/xunlei-pan/start.sh&lt;/code&gt; 文件，注释掉倒数第二行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;#su - $thunderName ...&lt;/pre&gt;

&lt;p&gt;
   运行 &lt;code&gt;/ugreen/thunder/xunlei-pan/stop.sh&lt;/code&gt; 关闭当前进程
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;禁用移动云盘&lt;/h2&gt;
&lt;p&gt;
   删除 &lt;code&gt;/data/nas_server/cmcc_svr&lt;/code&gt; 文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;mv /data/nas_server/cmcc_svr...&lt;/pre&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;禁用迅雷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;禁用移动云盘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;禁用p2px&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;ssh自启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
记录一下，每次升级系统都要重新改一次
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;禁用迅雷&lt;/h2&gt;
&lt;p&gt;
   找到 &lt;code&gt;/ugreen/thunder/xunlei-pan/start.sh&lt;/code&gt; 文件，注释掉倒数第二行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;#su - $thunderName ...&lt;/pre&gt;

&lt;p&gt;
   运行 &lt;code&gt;/ugreen/thunder/xunlei-pan/stop.sh&lt;/code&gt; 关闭当前进程
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;禁用移动云盘&lt;/h2&gt;
&lt;p&gt;
   删除 &lt;code&gt;/data/nas_server/cmcc_svr&lt;/code&gt; 文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;mv /data/nas_server/cmcc_svr /data/nas_server/cmcc_svr.bak&lt;/pre&gt;

&lt;p&gt;
   关闭当前进程
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ps axuf | grep cmcc | grep -v grep | awk &amp;#39;{printf $2}&amp;#39; | xargs kill -9&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;禁用p2px&lt;/h2&gt;
&lt;p&gt;
   新建一个脚本 &lt;code&gt;/root/script/myp2p&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt; -e &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;/data/nas_server/p2px/p2px&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;; &lt;span style=&quot;color:#66d9ef&quot;&gt;then&lt;/span&gt;
    mv /data/nas_server/p2px/p2px /data/nas_server/p2px/p2px.bak
&lt;span style=&quot;color:#66d9ef&quot;&gt;fi&lt;/span&gt;

killall -q -9 p2px &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; true&lt;/pre&gt;

&lt;p&gt;
   在 &lt;code&gt;/etc/crontabs/root&lt;/code&gt; 文件添加一个定时任务
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;*/3 * * * * /root/script/myp2p&lt;/pre&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;ssh自启动&lt;/h2&gt;
&lt;p&gt;
   新建一个脚本 &lt;code&gt;/root/script/myscript&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;
run_myscript&lt;span style=&quot;color:#f92672&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;{&lt;/span&gt;
    mkdir -m &lt;span style=&quot;color:#ae81ff&quot;&gt;0700&lt;/span&gt; -p /var/empty
    netstat -anp | grep 0.0.0.0:922 | grep sshd | grep -v grep &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; /usr/sbin/sshd -D

    sleep &lt;span style=&quot;color:#ae81ff&quot;&gt;10&lt;/span&gt;

    &lt;span style=&quot;color:#75715e&quot;&gt;# zerotier相关&lt;/span&gt;
    lsmod | grep tun | grep -v grep &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod &lt;span style=&quot;color:#ae81ff&quot;&gt;666&lt;/span&gt; /dev/net/tun &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker restart zerotier

    ip route | grep 10.8.235 | grep -v grep &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; ip route add 10.8.235.0/24 via 192.168.100.2
&lt;span style=&quot;color:#f92672&quot;&gt;}&lt;/span&gt;

run_myscript &amp;amp;
echo &lt;span style=&quot;color:#e6db74&quot;&gt;`&lt;/span&gt;date&lt;span style=&quot;color:#e6db74&quot;&gt;`&lt;/span&gt; &amp;gt; /tmp/myscript.txt&lt;/pre&gt;

&lt;p&gt;
   添加到自启动
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ln -s  /root/script/myscript /etc/rc.d/S99myscript&lt;/pre&gt;</content>
        <category term="Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>重复造轮子之Emacs翻译插件maple-translate</title>
      <link href="" rel="alternate"></link>
      <published>Fri, 03 Nov 2023 22:19:03 +0000</published>
      <updated>Wed, 15 Nov 2023 15:21:38 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/11/zhong-fu-zao-lun-zi-zhi-emacsfan-yi-cha-jian-maple-translate.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/11/zhong-fu-zao-lun-zi-zhi-emacsfan-yi-cha-jian-maple-translate.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
我之前一直都在使用 &lt;a href=&quot;https://github.com/xuchunyang/youdao-dictionary.el&quot;&gt;youdao-dictionary&lt;/a&gt; 这个插件，虽然没有配置过秘钥，这时会有使用次数的限制(反正是每天1000次还是多少来着，有些忘了)，但是我平时使用次数不多，所以也不会达到使用限制，不管是单词翻译还是长句翻译都很不错。但最近几个月 &lt;b&gt;youdao-dictionary&lt;/b&gt; 如果不配置私钥，处于一个完全不可用的状态。
&lt;/p&gt;

&lt;p&gt;
我曾寻找过它的替代品，并且使用过一段时间的 &lt;a href=&quot;https://github.com/condy0919/fanyi.el&quot;&gt;fanyi.el&lt;/a&gt;，不可否认，这同样是一个非常不错的插件，不管是UI还是功能，但是，可能是因为 &lt;b&gt;fanyi.el&lt;/b&gt; 使用异步请求的原因，偶尔会出现一些意想不到的报错，更重要的是它不支持长句翻译和离线翻译。
&lt;/p&gt;

&lt;p&gt;
考虑再三，还是决定自己造一个轮子，主要功能就按照我之前使用 &lt;b&gt;youdao-dictionary&lt;/b&gt; 的习惯...&lt;/p&gt;&lt;/blockquote&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;如何使用?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;长句翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;谷歌翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;离线翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;多引擎翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;翻译原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
我之前一直都在使用 &lt;a href=&quot;https://github.com/xuchunyang/youdao-dictionary.el&quot;&gt;youdao-dictionary&lt;/a&gt; 这个插件，虽然没有配置过秘钥，这时会有使用次数的限制(反正是每天1000次还是多少来着，有些忘了)，但是我平时使用次数不多，所以也不会达到使用限制，不管是单词翻译还是长句翻译都很不错。但最近几个月 &lt;b&gt;youdao-dictionary&lt;/b&gt; 如果不配置私钥，处于一个完全不可用的状态。
&lt;/p&gt;

&lt;p&gt;
我曾寻找过它的替代品，并且使用过一段时间的 &lt;a href=&quot;https://github.com/condy0919/fanyi.el&quot;&gt;fanyi.el&lt;/a&gt;，不可否认，这同样是一个非常不错的插件，不管是UI还是功能，但是，可能是因为 &lt;b&gt;fanyi.el&lt;/b&gt; 使用异步请求的原因，偶尔会出现一些意想不到的报错，更重要的是它不支持长句翻译和离线翻译。
&lt;/p&gt;

&lt;p&gt;
考虑再三，还是决定自己造一个轮子，主要功能就按照我之前使用 &lt;b&gt;youdao-dictionary&lt;/b&gt; 的习惯:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 翻译光标下的单词，以及选中的单词或句子
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 翻译的内容输出到 &lt;code&gt;echoarea&lt;/code&gt; 或者新的 &lt;code&gt;buffer&lt;/code&gt;，方便复制
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 增加一个离线翻译的功能，并且可以不依赖外部工具
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;
基于上述，所以有了这个新的轮子 &lt;a href=&quot;https://github.com/honmaple/emacs-maple-translate&quot;&gt;maple-translate&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;如何使用?&lt;/h2&gt;
&lt;p&gt;
   可以使用 &lt;b&gt;quelpa&lt;/b&gt; 安装
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(use-package maple-translate
  :quelpa (:fetcher github :repo &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;honmaple/emacs-maple-translate&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
  :commands (maple-translate maple-translate+))&lt;/pre&gt;

&lt;p&gt;
   或者手动下载仓库
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/honmaple/emacs-maple-translate ~/.emacs.d/site-lisp/maple-translate&lt;/pre&gt;

&lt;p&gt;
   然后进行配置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(use-package maple-translate
  :ensure &lt;span style=&quot;color:#66d9ef&quot;&gt;nil&lt;/span&gt;
  :commands (maple-translate maple-translate+))&lt;/pre&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;长句翻译&lt;/h2&gt;
&lt;p&gt;
   &lt;del&gt;目前长句翻译仅支持 &lt;code&gt;youdao&lt;/code&gt;&lt;/del&gt;, 目前支持 &lt;code&gt;youdao&lt;/code&gt; 和 &lt;code&gt;google&lt;/code&gt; 两种翻译引擎，可以修改设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-engine &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;youdao&lt;/span&gt;)
&lt;span style=&quot;color:#75715e&quot;&gt;;; 或者&lt;/span&gt;
(setq maple-translate-engine &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;google&lt;/span&gt;)&lt;/pre&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;谷歌翻译&lt;/h2&gt;
&lt;p&gt;
   国内无法直接使用，但是可以单独为谷歌翻译设置代理
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-google-url &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https://translate.googleapis.com/translate_a/single&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
(setq maple-translate-google-proxies
      &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;http&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;127.0.0.1:1086&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
        (&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;https&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;127.0.0.1:1086&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)))&lt;/pre&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;离线翻译&lt;/h2&gt;
&lt;p&gt;
   我个人平时在使用 &lt;b&gt;Emacs&lt;/b&gt; 时不太习惯依赖外部的工具，比如我之前就写过一个markdown，org-mode实时预览插件 &lt;a href=&quot;https://github.com/honmaple/emacs-maple-preview&quot;&gt;maple-preview&lt;/a&gt;，它区别于其它插件，并不会依赖外部的工具，比如 &lt;b&gt;Pandoc&lt;/b&gt;，甚至不会生出任何文件到我的本地环境
&lt;/p&gt;

&lt;p&gt;
   同样的，我也不希望使用离线翻译时还要依赖外部诸如 &lt;b&gt;sdcv，goldendict&lt;/b&gt; 等工具，我想要直接使用 &lt;code&gt;Elisp&lt;/code&gt; 来对词典进行解析。所幸前人栽树，后人乘凉，已经有了一个纯 &lt;code&gt;Elisp&lt;/code&gt; 实现的解析器 &lt;a href=&quot;https://www.emacswiki.org/emacs/stardict.el&quot;&gt;https://www.emacswiki.org/emacs/stardict.el&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   我所需要做的，就是下载需要的词典到本地(这个步骤是必须的，即使我不喜欢)，然后设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#75715e&quot;&gt;;; 离线词典所在的目录&lt;/span&gt;
(setq maple-translate-sdcv-dir &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;~/.stardict/dicts&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&quot;color:#75715e&quot;&gt;;; 所使用的词典 -&amp;gt; (词典名词 . 词典具体目录)&lt;/span&gt;
(setq maple-translate-sdcv-dicts
      &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;lazyworm-ec&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;stardict-lazyworm-ec-2.4.2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
        (&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;lazyworm-ce&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;stardict-lazyworm-ce-2.4.2&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)))&lt;/pre&gt;

&lt;p&gt;
   最后修改翻译引擎
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-engine &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;sdcv&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;
   注意：&lt;b&gt;第一次使用离线翻译需要等待词典初始化，这会需要耗费一段时间，后面就快了&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;多引擎翻译&lt;/h2&gt;
&lt;p&gt;
   &lt;b&gt;maple-translate&lt;/b&gt; 同样支持&lt;b&gt;多引擎&lt;/b&gt;，需要修改设置为一个列表
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(setq maple-translate-engine &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#39;&lt;/span&gt;(youdao dictcn sdcv))&lt;/pre&gt;

&lt;h2 id=&quot;heading-6&quot;&gt;翻译原理&lt;/h2&gt;
&lt;p&gt;
   目前支持的几个引擎: &lt;code&gt;youdao(有道)&lt;/code&gt;、&lt;code&gt;dictcn(海词)&lt;/code&gt;、&lt;code&gt;iciba(金山词霸)&lt;/code&gt;、&lt;code&gt;bing(必应)&lt;/code&gt;、&lt;code&gt;google(谷歌)&lt;/code&gt;、&lt;code&gt;sdcv(离线)&lt;/code&gt;。除 &lt;code&gt;sdcv&lt;/code&gt; 外，其它几个都依赖于网络，&lt;b&gt;maple-translate&lt;/b&gt; 可以看作是一个爬虫，通过爬取翻译页面，然后使用Emacs内置的 &lt;code&gt;dom&lt;/code&gt; 对HTML进行解析，最后获取到想要的内容(谷歌使用API获取)。基于此，我还写了一个超简单的 &lt;code&gt;类xpath&lt;/code&gt; 解析器
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(defun maple-translate-dom-by-key(dom key)
  (let (func num)
    (when (&lt;span style=&quot;color:#a6e22e&quot;&gt;string-match&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;([0-9]+&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
      (setq num (match-string &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; key))
      (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;substring&lt;/span&gt; key &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;-&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;length&lt;/span&gt; key) (&lt;span style=&quot;color:#a6e22e&quot;&gt;length&lt;/span&gt; num) &lt;span style=&quot;color:#ae81ff&quot;&gt;2&lt;/span&gt;))))
    (cond ((string-prefix-p &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
           (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;substring&lt;/span&gt; key &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;) func &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dom-by-class&lt;/span&gt;))
          ((string-prefix-p &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
           (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;substring&lt;/span&gt; key &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;) func &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dom-by-id&lt;/span&gt;))
          ((string-prefix-p &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt; key)
           (setq func (lambda(p _) (dom-children p))))
          (&lt;span style=&quot;color:#66d9ef&quot;&gt;t&lt;/span&gt; (setq key (&lt;span style=&quot;color:#a6e22e&quot;&gt;intern&lt;/span&gt; key) func &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#39;dom-by-tag&lt;/span&gt;)))
    (if (&lt;span style=&quot;color:#a6e22e&quot;&gt;null&lt;/span&gt; num)
        (&lt;span style=&quot;color:#a6e22e&quot;&gt;funcall&lt;/span&gt; func dom key)
      (&lt;span style=&quot;color:#a6e22e&quot;&gt;nth&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;string-to-number&lt;/span&gt; num) (&lt;span style=&quot;color:#a6e22e&quot;&gt;funcall&lt;/span&gt; func dom key)))))

(defun maple-translate-dom-find(dom xpath)
  (cl-loop for key in (string-split (string-trim xpath) &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)
           if (&lt;span style=&quot;color:#a6e22e&quot;&gt;consp&lt;/span&gt; dom)
           do (setq dom (maple-translate-dom-by-key dom key))
           else return dom)
  dom)&lt;/pre&gt;

&lt;p&gt;
   这样，我就能通过一些简单的语法来定位想要的内容，比如在有道里面使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;(maple-translate-dom-find dom &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;.simple dict-module/.trans-container/.word-exp&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;
   获取到 &lt;b&gt;class&lt;/b&gt; 名称为 &lt;code&gt;simple dict-module&lt;/code&gt; 下的 &lt;b&gt;class&lt;/b&gt; 名称为 &lt;code&gt;trans-container&lt;/code&gt; 下的 &lt;b&gt;class&lt;/b&gt; 名称为 &lt;code&gt;word-exp&lt;/code&gt; 的所有元素, 也就是&lt;b&gt;基本释义&lt;/b&gt;
&lt;/p&gt;</content>
        <category term="Linux/Emacs"></category>
    </entry>
    <entry xml:lang="zh">
      <title>使用acme.sh申请SSL证书</title>
      <link href="" rel="alternate"></link>
      <published>Sun, 24 Sep 2023 13:57:51 +0000</published>
      <updated>Sun, 24 Sep 2023 19:06:00 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/09/shi-yong-acme-shshen-qing-sslzheng-shu.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/09/shi-yong-acme-shshen-qing-sslzheng-shu.html</id>
      <summary type="html">
&lt;h2 id=&quot;heading-1&quot;&gt;部署教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;安装并配置acme.sh&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 安装&lt;br/&gt;
       这里使用 &lt;b&gt;Docker&lt;/b&gt; 安装，方便环境隔离。&lt;code&gt;/opt/acme.sh&lt;/code&gt; 为挂载目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name acme.sh \
-e AUTO_UPGRADE=0 \
-e TZ=Asia/Shanghai \
-v /opt/acme.sh:/acme.sh \
neilpang/acme.sh daemon&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 配置&lt;br/&gt;
       &lt;b&gt;acme...&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;部署教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;安装并配置acme.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;固定域名(webroot)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.1&quot;&gt;申请证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.2&quot;&gt;配置SSL证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.3&quot;&gt;配置NGINX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.4&quot;&gt;重启NGINX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3&quot;&gt;泛域名(DNS)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.1&quot;&gt;令牌获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.2&quot;&gt;账户ID获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.3&quot;&gt;编辑配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.4&quot;&gt;申请证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.5&quot;&gt;安装证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.4&quot;&gt;搭配NginxProxyManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.5&quot;&gt;更新证书(手动)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;部署教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;安装并配置acme.sh&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 安装&lt;br/&gt;
       这里使用 &lt;b&gt;Docker&lt;/b&gt; 安装，方便环境隔离。&lt;code&gt;/opt/acme.sh&lt;/code&gt; 为挂载目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name acme.sh \
-e AUTO_UPGRADE=0 \
-e TZ=Asia/Shanghai \
-v /opt/acme.sh:/acme.sh \
neilpang/acme.sh daemon&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 配置&lt;br/&gt;
       &lt;b&gt;acme.sh&lt;/b&gt; 默认使用的是 &lt;b&gt;ZeroSSL&lt;/b&gt;，我这里修改为 &lt;b&gt;Let&amp;#39;s Encrypt&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --set-default-ca --server letsencrypt
docker exec acme.sh --set-default-chain --preferred-chain &amp;#34;ISRG&amp;#34; --server letsencrypt&lt;/pre&gt;
&lt;p&gt;
       注：&lt;code&gt;--preferred-chain &amp;#34;ISRG&amp;#34;&lt;/code&gt; 表示设置根证书为 &lt;b&gt;ISRG Root X1&lt;/b&gt;, 它与 &lt;b&gt;DST Root CA X3&lt;/b&gt; 的区别主要是
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ISRG Root X1&lt;/b&gt; 会更新一些，&lt;b&gt;DST Root CA X3&lt;/b&gt; 已于2021年9月30日到期
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 一些旧的设备（例如，iPhone 4 或 HTC Dream）不会信任 &lt;b&gt;ISRG Root X1&lt;/b&gt;，因为它们没有获得软件更新
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 虽说 &lt;b&gt;DST Root CA X3&lt;/b&gt; 已到期，但Android设备仍能够继续正常访问使用 Let’s Encrypt 证书加密的网站，其它旧设备将会得到证书过期警告
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 注册账号(&lt;b&gt;记得修改为自己的邮箱&lt;/b&gt;)
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --register-account --server letsencrypt -m i@example.com
[Sun Sep 24 15:49:59 CST 2023] Create account key ok.
[Sun Sep 24 15:49:59 CST 2023] Registering account: https://acme-v02.api.letsencrypt.org/directory
[Sun Sep 24 15:50:05 CST 2023] Registered
[Sun Sep 24 15:50:05 CST 2023] ACCOUNT_THUMBPRINT=&amp;#39;xxx&amp;#39;&lt;/pre&gt;
&lt;p&gt;
       这时会在 &lt;code&gt;/acme.sh&lt;/code&gt; 目录下生成一个 &lt;code&gt;http.header&lt;/code&gt; 文件，申请证书时会使用该文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-1.2&quot;&gt;固定域名(webroot)&lt;/h3&gt;
&lt;p&gt;
    如果只有少数几个固定的域名，这时可以使用 &lt;b&gt;webroot&lt;/b&gt; 方式申请SSL证书。&lt;b&gt;webroot&lt;/b&gt; 方式会在本地生成一个验证文件，申请证书时通过验证该文件验证域名所有权
&lt;/p&gt;

&lt;h4 id=&quot;heading-1.2.1&quot;&gt;申请证书&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --issue -d example.com -d www.example.com,nas.example.com -w /acme.sh/example.com&lt;/pre&gt;
&lt;p&gt;
     执行后会在挂载目录 &lt;code&gt;/opt/acme.sh&lt;/code&gt; 下生成SSL证书相关的 &lt;b&gt;cert&lt;/b&gt; 文件和 &lt;b&gt;key&lt;/b&gt; 文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;$ ls example.com
ca.cer  fullchain.cer  example.com.cer  example.com.conf  example.com.csr  example.com.csr.conf  example.com.key&lt;/pre&gt;
&lt;h4 id=&quot;heading-1.2.2&quot;&gt;配置SSL证书&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/fullchain.cer&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/example.com.key&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_dhparam&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/dhparam.pem&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_session_cache&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;shared:SSL:1m&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_session_timeout&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;5m&lt;/span&gt;;

&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_protocols&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1.1&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1.2&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;TLSv1.3&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_ciphers&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&lt;/span&gt;;
&lt;span style=&quot;color:#66d9ef&quot;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;on&lt;/span&gt;;&lt;/pre&gt;

&lt;p&gt;
     如何生成 &lt;b&gt;dhparam&lt;/b&gt; 的证书?
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;openssl dhparam -out /opt/acme.sh/example.com/dhparam.pem 2048&lt;/pre&gt;
&lt;h4 id=&quot;heading-1.2.3&quot;&gt;配置NGINX&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;Let&amp;#39;s Encrypt&lt;/b&gt; 只会在 &lt;b&gt;80&lt;/b&gt; 端口验证域名所有权，所以只需要在 &lt;b&gt;80&lt;/b&gt; 端口添加一个 &lt;b&gt;location&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;server&lt;/span&gt; {
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;       &lt;span style=&quot;color:#ae81ff&quot;&gt;80&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;[::]:80&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;server_name&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;www.example.com&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;nas.example.com&lt;/span&gt;;

    &lt;span style=&quot;color:#f92672&quot;&gt;location&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/&lt;/span&gt; {
        &lt;span style=&quot;color:#f92672&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;301&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;https://example.com&lt;/span&gt;$request_uri;
    }
    &lt;span style=&quot;color:#f92672&quot;&gt;location&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;^~&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/.well-known/acme-challenge&lt;/span&gt; {
        &lt;span style=&quot;color:#f92672&quot;&gt;alias&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;/opt/acme.sh/example.com/.well-known/acme-challenge&lt;/span&gt;;
    }
}

&lt;span style=&quot;color:#66d9ef&quot;&gt;server&lt;/span&gt; {
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;       &lt;span style=&quot;color:#ae81ff&quot;&gt;443&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;ssl&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;listen&lt;/span&gt;       &lt;span style=&quot;color:#e6db74&quot;&gt;[::]:443&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;ssl&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;server_name&lt;/span&gt;  &lt;span style=&quot;color:#e6db74&quot;&gt;nas.example.com&lt;/span&gt;;
    &lt;span style=&quot;color:#f92672&quot;&gt;include&lt;/span&gt;      &lt;span style=&quot;color:#e6db74&quot;&gt;/etc/nginx/conf.d/ssl/example.com.conf&lt;/span&gt;;

    &lt;span style=&quot;color:#f92672&quot;&gt;......&lt;/span&gt;
&lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;h4 id=&quot;heading-1.2.4&quot;&gt;重启NGINX&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;nginx -t
nginx -s reload&lt;/pre&gt;
&lt;h3 id=&quot;heading-1.3&quot;&gt;泛域名(DNS)&lt;/h3&gt;
&lt;p&gt;
    &lt;b&gt;webroot&lt;/b&gt; 无法申请泛域名证书，泛域名证书的申请需要利用&lt;b&gt;DNS服务提供商&lt;/b&gt;的API，动态添加一个TEXT记录，这里以 &lt;b&gt;Cloudflare&lt;/b&gt; 为例
&lt;/p&gt;
&lt;h4 id=&quot;heading-1.3.1&quot;&gt;令牌获取&lt;/h4&gt;
&lt;p&gt;
     右上角点击&lt;b&gt;我的个人资料&lt;/b&gt;, 然后点击&lt;b&gt;创建令牌&lt;/b&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     然后选择&lt;b&gt;DNS模版&lt;/b&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;令牌名称&lt;/b&gt;可以随意
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;权限&lt;/b&gt;设置为 &lt;code&gt;区域 -&amp;gt; DNS -&amp;gt; 编辑&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;区域资源&lt;/b&gt;设置为 &lt;code&gt;包括 -&amp;gt; 特定区域 -&amp;gt; 域名(example.com)&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     继续以显示摘要, 然后创建令牌
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-04.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-04.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
     最后记得保存令牌到本地
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-05.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-05.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h4 id=&quot;heading-1.3.2&quot;&gt;账户ID获取&lt;/h4&gt;
&lt;p&gt;
     选择对应的域名，在&lt;b&gt;概况&lt;/b&gt;的右下角会有账户ID显示
     
&lt;a href=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-06.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/cloudflare-token-06.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h4 id=&quot;heading-1.3.3&quot;&gt;编辑配置&lt;/h4&gt;
&lt;p&gt;
     编辑 &lt;code&gt;/opt/acme.sh&lt;/code&gt; 目录下的 &lt;code&gt;account.conf&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ CF_Token=&amp;#39;xxx&amp;#39;
&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ CF_Account_ID=&amp;#39;xxx&amp;#39;
&lt;/span&gt;&lt;/pre&gt;

&lt;h4 id=&quot;heading-1.3.4&quot;&gt;申请证书&lt;/h4&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --issue --dns dns_cf -d &amp;#34;nas.example.com&amp;#34; -d &amp;#34;*.nas.example.com&amp;#34;&lt;/pre&gt;

&lt;h4 id=&quot;heading-1.3.5&quot;&gt;安装证书&lt;/h4&gt;
&lt;p&gt;
     如果想要修改默认安装的目录，则可以使用 &lt;code&gt;--install-cert&lt;/code&gt; 命令
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --install-cert -d nas.example.com \
--key-file /nginx/data/custom_ssl/npm-1/privkey.pem \
--fullchain-file /nginx/data/custom_ssl/npm-1/fullchain.pem&lt;/pre&gt;

&lt;p&gt;
     如果想要更新证书后同步重启NGINX，可以继续添加命令参数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;--reloadcmd &amp;#34;nginx -s reload&amp;#34;&lt;/pre&gt;

&lt;h3 id=&quot;heading-1.4&quot;&gt;搭配NginxProxyManager&lt;/h3&gt;
&lt;p&gt;
    首先打开 &lt;b&gt;NginxProxyManager&lt;/b&gt;, 选择 &lt;b&gt;SSL Cetificates&lt;/b&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    然后选择 &lt;b&gt;Add SSL Cetificates -&amp;gt; Custom&lt;/b&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    最后添加相关文件:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Certificate&lt;/b&gt;: &lt;code&gt;nas.example.com.cer&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Certificate Key&lt;/b&gt;: &lt;code&gt;nas.example.com.key&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Intermediate Certificate&lt;/b&gt;: &lt;code&gt;ca.cer&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/acme.sh-nginx-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    为了避免证书过期后重新添加，需要把&lt;b&gt;NginxProxyManager&lt;/b&gt;挂载目录也挂载到 &lt;b&gt;acme.sh&lt;/b&gt; 容器
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker stop acme.sh
docker rm acme.sh
docker run -d --name acme.sh \
-e AUTO_UPGRADE=0 \
-e TZ=Asia/Shanghai \
-v /opt/acme.sh:/acme.sh \
-v /opt/nginx:/nginx \
neilpang/acme.sh daemon&lt;/pre&gt;

&lt;p&gt;
    然后修改申请证书的命令
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec acme.sh --issue --dns dns_cf -d &amp;#34;nas.example.com&amp;#34; -d &amp;#34;*.nas.example.com&amp;#34; \
--renew-hook &amp;#34;acme.sh --install-cert -d nas.example.com \
--key-file /nginx/data/custom_ssl/npm-1/privkey.pem \
--fullchain-file /nginx/data/custom_ssl/npm-1/fullchain.pem&amp;#34;&lt;/pre&gt;

&lt;p&gt;
    如果提示 &lt;code&gt;Domains not changed&lt;/code&gt;, 则需要使用 &lt;code&gt;--force&lt;/code&gt; 重新申请
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.5&quot;&gt;更新证书(手动)&lt;/h3&gt;
&lt;p&gt;
    从 &lt;b&gt;Let&amp;#39;s Encrypt&lt;/b&gt; 申请到的证书有效期是90天，&lt;b&gt;acme.sh&lt;/b&gt; 每60天会对证书进行更新，你也可以手动强制更新：
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;# 查询证书申请信息
acme.sh --list

# 手动强制更新证书
acme.sh --renew -d nas.example.com -d *.nas.example.com --force&lt;/pre&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/acmesh-official/acme.sh/wiki/Preferred-Chain&quot;&gt;https://github.com/acmesh-official/acme.sh/wiki/Preferred-Chain&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://letsencrypt.org/zh-cn/docs/dst-root-ca-x3-expiration-september-2021/&quot;&gt;https://letsencrypt.org/zh-cn/docs/dst-root-ca-x3-expiration-september-2021/&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://shiping.date/82.html&quot;&gt;https://shiping.date/82.html&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>Zerotier笔记</title>
      <link href="" rel="alternate"></link>
      <published>Sun, 17 Sep 2023 15:41:40 +0000</published>
      <updated>Sun, 24 Sep 2023 16:52:48 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/09/zerotier-note.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/09/zerotier-note.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;zerotier&lt;/b&gt; 可谓是慕名许久，但之前一直没有太多内网穿透和异地组网的需求，此次准备在外网访问家里NAS部署的部分应用，所以也调研了一些相关的应用，最终选择了 &lt;b&gt;zerotier&lt;/b&gt; 来对我现有的机器进行组网
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;FRP&lt;/b&gt;: 需要将服务器的端口映射出去，不太喜欢这种暴力的方式。我目前的服务基本上只会在 &lt;code&gt;0.0.0.0&lt;/code&gt; 监听80、443等常用端口，其它服务一律监听 &lt;code&gt;127.0.0.1&lt;/code&gt;，通过nginx访问内部的服务
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;DDNS&lt;/b&gt;: 家里的NAS直接暴露在公网，这非常不安全，而且家用宽带无法使用80，443端口，只能使用高位端口
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ZEROTIER&lt;/b&gt;: 使用 &lt;b&gt;P2P&lt;/b&gt; 的方式对多台服务器进行组网，映射的端口只允许加入组网的设备访问，这在速度和安全性上确实是我所需要的...&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;相关概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;部署教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;UI界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;Zerotier客户端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.3&quot;&gt;私有Planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.4&quot;&gt;私有Planet服务器加入组网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.5&quot;&gt;UI和Zerotier分开部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;组网教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.1&quot;&gt;创建网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.2&quot;&gt;加入网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.3&quot;&gt;跨网段访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.4&quot;&gt;安全限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;FAQ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4.1&quot;&gt;如何修改默认的9993端口?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;zerotier&lt;/b&gt; 可谓是慕名许久，但之前一直没有太多内网穿透和异地组网的需求，此次准备在外网访问家里NAS部署的部分应用，所以也调研了一些相关的应用，最终选择了 &lt;b&gt;zerotier&lt;/b&gt; 来对我现有的机器进行组网
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;FRP&lt;/b&gt;: 需要将服务器的端口映射出去，不太喜欢这种暴力的方式。我目前的服务基本上只会在 &lt;code&gt;0.0.0.0&lt;/code&gt; 监听80、443等常用端口，其它服务一律监听 &lt;code&gt;127.0.0.1&lt;/code&gt;，通过nginx访问内部的服务
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;DDNS&lt;/b&gt;: 家里的NAS直接暴露在公网，这非常不安全，而且家用宽带无法使用80，443端口，只能使用高位端口
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ZEROTIER&lt;/b&gt;: 使用 &lt;b&gt;P2P&lt;/b&gt; 的方式对多台服务器进行组网，映射的端口只允许加入组网的设备访问，这在速度和安全性上确实是我所需要的
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Planet&lt;/b&gt;: 行星服务器，也称根服务器。主要用于管理 &lt;b&gt;zerotier&lt;/b&gt; 客户端的地址信息
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Moon&lt;/b&gt;: 月亮服务器，也称中继服务器、跳转服务器。主要用于当两台设备无法直连时，可以通过Moon中转连接
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Leaf&lt;/b&gt;: 组网使用的设备，可以是一台服务器，一台NAS，甚至一台手机
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;部署教程&lt;/h2&gt;
&lt;p&gt;
   现在我有三台设备需要进行组网，一台A在国外， 一台B在国内(腾讯云)，还有一台C在家里(NAS)。我准备将私有Planet部署到机器A，同时机器A也会加入到内网里，A、B、C三台设备可以通过内网相互访问
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.1&quot;&gt;UI界面&lt;/h3&gt;
&lt;p&gt;
    以 &lt;code&gt;jonnyan404/zerotier-planet&lt;/code&gt; 为例
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 创建目录
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;mkdir /opt/zerotier /opt/ztncui&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 部署服务
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name ztncui --restart always \
-p 4000:4000 -p 9993:9993/tcp -p 9993:9993/udp \
-e MYADDR={服务器公网IP} \
-e HTTP_PORT=4000 \
-e HTTP_ALL_INTERFACES=yes \
-e ZTNCUI_PASSWD=mrdoc.fun \
-v /opt/zerotier:/var/lib/zerotier-one \
-v /opt/ztncui:/opt/key-networks/ztncui/etc \
keynetworks/ztncui&lt;/pre&gt;
&lt;p&gt;
       然后就可以通过 &lt;code&gt;服务器公网IP:4000&lt;/code&gt; 访问UI管理界面，默认的用户名和密码: &lt;code&gt;admin,mrdoc.fun&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-2.2&quot;&gt;Zerotier客户端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Linux&lt;/b&gt;: 部署方式很简单，注意区分 &lt;b&gt;host网络&lt;/b&gt; 和 &lt;b&gt;bridge网络&lt;/b&gt;，这两个在安全性有所区别(具体在下面讲)
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run --name zerotier -d \
--restart always \
--net host \
--cap-add NET_ADMIN \
--device /dev/net/tun \
-v /opt/zerotier:/var/lib/zerotier-one \
zerotier/zerotier:latest&lt;/pre&gt;
&lt;p&gt;
      如果使用私有Planet，记得替换 &lt;code&gt;/opt/zerotier/planet&lt;/code&gt; 文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;Android&lt;/b&gt;: 推荐使用 &lt;a href=&quot;https://github.com/kaaass/ZerotierFix&quot;&gt;https://github.com/kaaass/ZerotierFix&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-2.3&quot;&gt;私有Planet&lt;/h3&gt;
&lt;p&gt;
    默认的Planet信息是硬编码在zertier代码里，如果安装好客户端后会在 &lt;code&gt;zerotier-cli peers&lt;/code&gt; 看到官方的Planet服务器。
&lt;/p&gt;

&lt;p&gt;
    而部署私有的Planet的目的:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 官方的服务器基本都位于国外或者香港，服务连通性无法得到保证
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 安全性。试想一个陌生的设备加入到网络，而这个设备的许可只需要得到官方的认证即可。当然，官方是基本不可能发生这样的情况，但如果有一个完全控制的网络，何乐而不为呢
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
    如何生成私有Planet文件?
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/jonnyan404/zerotier-planet --depth=1
cd zerotier-planet
docker cp mkmoonworld-x86_64 ztncui:/tmp
docker cp patch.sh ztncui:/tmp
docker exec -it ztncui bash /tmp/patch.sh
docker restart ztncui&lt;/pre&gt;
&lt;p&gt;
    这样就会在挂载目录 &lt;code&gt;/opt/zerotier&lt;/code&gt; 下生成一个新的 &lt;b&gt;planet&lt;/b&gt; 文件，记得下载并备份。&lt;b&gt;所有加入组网的客户端都需要替换该文件&lt;/b&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.4&quot;&gt;私有Planet服务器加入组网&lt;/h3&gt;
&lt;p&gt;
    如果按照上述部署流程也可以正常使用 &lt;code&gt;zerotier&lt;/code&gt; 组网，&lt;b&gt;但是&lt;/b&gt;，如果想要把部署了私有Planet的设备也加入到内网，貌似没有一篇文章说到。 所以我专门研究了一下，想要把私有Planet的机器也加入到内网，大概是可以分为下面几种方式:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 (&lt;b&gt;不推荐&lt;/b&gt;) 修改ztncui内部zerotier的默认端口9993 &lt;br/&gt;
       在 &lt;code&gt;/opt/zerotier&lt;/code&gt; 目录下添加一个 &lt;code&gt;local.conf&lt;/code&gt;，并设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;{
    &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;primaryPort&amp;#34;&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;9995&lt;/span&gt;
    }
}&lt;/pre&gt;
&lt;p&gt;
       然后修改 &lt;code&gt;patch.sh&lt;/code&gt; 文件里的 &lt;code&gt;9993&lt;/code&gt; 端口，以及 &lt;code&gt;/start_ztncui.sh&lt;/code&gt; 添加一行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;echo &amp;#34;ZT_ADDR=localhost:$ZT_PORT&amp;#34; &amp;gt; /opt/key-networks/ztncui/.env&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 部署两个zerotier: 除了ztncui容器内部的一个zerotier，再在机器上部署一个客户端，并修改端口，避免端口冲突
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 (&lt;b&gt;推荐&lt;/b&gt;) ztncui镜像的UI和zerotier分开部署&lt;br/&gt;
       我研究后才发现 &lt;code&gt;ztncui&lt;/code&gt; 的相关镜像把事情弄的很复杂，都把 &lt;code&gt;ztncui&lt;/code&gt; 和 &lt;code&gt;zerotier&lt;/code&gt; 放到同一个镜像，专门去连接 &lt;code&gt;localhost:9993&lt;/code&gt; 。其实是可以把两个镜像分开的，&lt;b&gt;UI&lt;/b&gt; 只做 &lt;b&gt;UI&lt;/b&gt; ，使用 &lt;b&gt;API&lt;/b&gt; 去连接 &lt;b&gt;zerotier&lt;/b&gt; 官方的镜像
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-2.5&quot;&gt;UI和Zerotier分开部署&lt;/h3&gt;
&lt;p&gt;
    如果想要自己构建Docker镜像，可以参考 &lt;a href=&quot;https://github.com/honmaple/ztncui-aio&quot;&gt;honmaple/ztncui-aio&lt;/a&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 部署 &lt;b&gt;zerotier&lt;/b&gt; 的客户端(部署过的可以忽略)
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name zerotier --restart always --net=host --cap-add NET_ADMIN --device /dev/net/tun -v /opt/zerotier:/var/lib/zerotier-one zerotier/zerotier:latest&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 部署 &lt;b&gt;UI&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --name ztncui --restart always \
-e MYADDR={服务器IP} \
-e HTTP_PORT=4000 \
-e HTTP_ALL_INTERFACES=yes \
-e ZT_ADDR={zerotier地址, 比如Docker网关:9993} \
-e ZT_TOKEN={可以为空，但需要挂载zerotier-one的配置路径} \
-v /opt/ztncui:/opt/ztncui/etc \
-v /opt/zerotier:/var/lib/zerotier-one \
-p 4000:4000 \
honmaple/ztncui:latest&lt;/pre&gt;
&lt;p&gt;
       &lt;b&gt;ZT_ADDR&lt;/b&gt;: 由于 &lt;b&gt;zerotier&lt;/b&gt; 和 &lt;b&gt;ztncui&lt;/b&gt; 没有部署在一个容器，所以需要从UI内部访问宿主机的 &lt;b&gt;&lt;b&gt;9993&lt;/b&gt;&lt;/b&gt; 端口，这里可以使用UI容器的网关访问，比如UI容器的IP是 &lt;b&gt;&lt;b&gt;172.17.0.12&lt;/b&gt;&lt;/b&gt;，则访问 &lt;b&gt;&lt;b&gt;172.17.0.1&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
       另外，&lt;b&gt;zerotier&lt;/b&gt; 默认的API接口只允许 &lt;b&gt;&lt;b&gt;127.0.0.1&lt;/b&gt;&lt;/b&gt; 访问，所以需要在挂载目录 &lt;code&gt;/opt/zerotier&lt;/code&gt; 下新建一个 &lt;b&gt;&lt;b&gt;local.conf&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;{
    &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;allowManagementFrom&amp;#34;&lt;/span&gt;: [&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;127.0.0.1/24&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;172.17.0.1/24&amp;#34;&lt;/span&gt;]
    }
}&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改归属的用户和用户组
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec -it zerotier bash
cd /var/lib/zerotier-one
chown zerotier-one:zerotier-one local.conf
exit&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 生成私有Planet文件
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;git clone https://github.com/honmaple/ztncui-aio --depth=1
cd ztncui-aio
docker cp script/mkmoonworld-x86_64 zerotier:/tmp
docker cp script/patch.sh zerotier:/tmp
docker exec -it zerotier bash /tmp/patch.sh {服务器IP}&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 重启
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker restart zerotier&lt;/pre&gt;
&lt;p&gt;
       这样就能使私有Planet和zerotier客户端共存，让Planet服务器也能加入到内网环境了
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-3&quot;&gt;组网教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-3.1&quot;&gt;创建网络&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 使用浏览器打开UI管理界面 &lt;code&gt;{服务器公网IP}:4000&lt;/code&gt;，&lt;code&gt;honmaple/ztncui&lt;/code&gt; 默认用户名密码是 &lt;code&gt;admin,password&lt;/code&gt;
       
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 点击 &lt;code&gt;Add network&lt;/code&gt;，输入一个网络名称，比如 &lt;b&gt;testlab&lt;/b&gt;。然后选择 &lt;code&gt;Easy setup&lt;/code&gt;
       
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 添加一个内网网段，记得这个内网网段不能和需要加入组网的设备网段相同，比如我的设备C网段是 &lt;code&gt;192.168.31.0/24&lt;/code&gt; ，就不能添加该网段，另外Docker所使用的网段 &lt;code&gt;172.0.0.0/8&lt;/code&gt; 也需要避免添加，所以我这里选择 &lt;code&gt;10.8.230.0/24&lt;/code&gt;。&lt;b&gt;不同的设备内网网段不同，请根据实际添加&lt;/b&gt;
       
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-3.2&quot;&gt;加入网络&lt;/h3&gt;
&lt;p&gt;
    创建好网络后就会得到一串网络ID，登录到设备，然后使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec zerotier zerotier-cli join {网络ID}&lt;/pre&gt;

&lt;p&gt;
    加入网络，正常情况下会得到
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;200 join OK&lt;/pre&gt;
&lt;p&gt;
    刷新管理界面就会出现一个新的成员
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-04.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-04.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    然后勾选 &lt;b&gt;Authorizerd&lt;/b&gt; 允许加入，再次刷新，就能看到该设备分配了一个新的IP &lt;code&gt;10.8.230.170&lt;/code&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-05.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-05.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    返回设备，可以看到设备多了一个新的IP
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-06.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-06.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-3.3&quot;&gt;跨网段访问&lt;/h3&gt;
&lt;p&gt;
    什么是跨网段访问? 比如现在我可以通过 &lt;b&gt;10.8.230.0/24&lt;/b&gt; 访问已经加入组网的设备，但我想要在&lt;b&gt;设备B&lt;/b&gt;上访问我家里的其它设备，但是，我家里设备的网段是 &lt;b&gt;192.168.31.0/24&lt;/b&gt;，正常是无法访问的，只能访问已经加入组网的Nas。这时需要配置静态路由，让设备B访问 &lt;b&gt;192.168.31.0/24&lt;/b&gt; 网段时走zerotier配置好的IP。
&lt;/p&gt;

&lt;p&gt;
    如果手动添加就是
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ip route add 192.168.31.0/24 via 10.8.230.170 dev {zerotier建立的网卡}&lt;/pre&gt;

&lt;p&gt;
    当然，也可以直接使用zerotier管理界面添加，选择 &lt;code&gt;Routes&lt;/code&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-07.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-07.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;Target&lt;/b&gt; 输入想要访问的网段：&lt;code&gt;192.168.31.0/24&lt;/code&gt;，&lt;b&gt;Gateway&lt;/b&gt; 输入之前分配的IP：&lt;code&gt;10.8.230.170&lt;/code&gt;。
    
&lt;a href=&quot;https://s.libforest.com/images/2023/09/zerotier-08.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/09/zerotier-08.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    创建好后可以在设备B上执行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ping 192.168.31.XX(除设备C之外的内网设备IP)&lt;/pre&gt;
&lt;p&gt;
    查看网络是否连通
&lt;/p&gt;

&lt;h3 id=&quot;heading-3.4&quot;&gt;安全限制&lt;/h3&gt;
&lt;p&gt;
    正因为跨网段访问只需要添加一个静态路由，就能访问我家里的其它设备，这无疑是非常不安全的。如果私有Planet服务器遭到入侵，我家里的所有联网设备都会暴露出去，即使加入组网只是其中的一台。基于此原因，我专门调整了一下zerotier的部署方式，不再使用 &lt;b&gt;host网络&lt;/b&gt; 的方式部署，而是创建一个新的Docker网络 &lt;code&gt;zerotier&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker network create --driver=bridge --subnet=192.168.100.0/24 --gateway=192.168.100.1 zerotier&lt;/pre&gt;
&lt;p&gt;
    注: &lt;code&gt;192.168.100.0/24&lt;/code&gt; 是一个全新的网段，不要使用172网段
&lt;/p&gt;

&lt;p&gt;
    然后删除之前部署的 &lt;b&gt;zerotier&lt;/b&gt; 客户端，并使用 &lt;b&gt;zerotier网络&lt;/b&gt; 重新部署
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker stop zerotier
docker rm zerotier
docker run -d --name zerotier --restart always --net zerotier --cap-add NET_ADMIN --device /dev/net/tun -v /opt/zerotier:/var/lib/zerotier-one zerotier/zerotier:latest&lt;/pre&gt;
&lt;p&gt;
    细心的朋友应该会发现我这里没有将 &lt;b&gt;9993&lt;/b&gt; 端口映射给宿主机，这是由于我测试发现两台设备只需要其中一台开放 &lt;code&gt;9993&lt;/code&gt; 端口，两台设备之间就能直连。如果两台设备都不开放端口，则会通过开放了端口的其它设备进行跳转，查看 &lt;b&gt;peers&lt;/b&gt; 会看到一直是 &lt;b&gt;RELAY&lt;/b&gt; 状态
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;root@cf5f973bd294:/# zerotier-cli peers
200 peers
&amp;lt;ztaddr&amp;gt;   &amp;lt;ver&amp;gt;  &amp;lt;role&amp;gt; &amp;lt;lat&amp;gt; &amp;lt;link&amp;gt;   &amp;lt;lastTX&amp;gt; &amp;lt;lastRX&amp;gt; &amp;lt;path&amp;gt;
xxxxxxxxx  1.12.1 LEAF      -1 RELAY&lt;/pre&gt;

&lt;p&gt;
    这时想要从设备B访问我家里其它联网的设备已是不可能，除非突破Docker的限制。而正常情况下，我想要从设备B上访问的是部署在设备C的其它服务(以Docker服务为主)，所以，现在可以添加一个新的路由 &lt;b&gt;192.168.100.0/24&lt;/b&gt; 指向 &lt;b&gt;10.8.230.170&lt;/b&gt;，然后修改其它镜像使用的网络为 &lt;b&gt;zerotier&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run -d --rm --name=test-nginx --net=zerotier nginx:stable-alpine
docker exec -it test-nginx ip a&lt;/pre&gt;

&lt;p&gt;
    接着在设备B上执行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ping 192.168.100.3(test-nginx的IP)
curl 192.168.100.3&lt;/pre&gt;

&lt;p&gt;
    如果无法访问，需要在Docker所在宿主机上添加路由
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ip route add 10.8.230.0/24 via 192.168.100.2(zerotier客户端的IP)&lt;/pre&gt;

&lt;p&gt;
    另外，由于Docker的IP可能会发生改变，除创建容器时指定 &lt;code&gt;--ip&lt;/code&gt; 外，还可以将服务的端口映射出去，比如 &lt;b&gt;NasTools&lt;/b&gt; 使用端口为 3000，那么可以在创建容器时指定
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;-p 11300:3000&lt;/pre&gt;
&lt;p&gt;
    然后在设备B上访问 &lt;code&gt;192.168.100.1:11300&lt;/code&gt;，即&lt;b&gt;网关地址+映射的端口&lt;/b&gt;，这样就能避免Docker重启后IP发生改变而导致服务异常的情况
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;heading-4.1&quot;&gt;如何修改默认的9993端口?&lt;/h3&gt;
&lt;p&gt;
    在 &lt;b&gt;zerotier&lt;/b&gt; 挂载的目录下新建一个 &lt;code&gt;local.conf&lt;/code&gt; 文件，并设置
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;{
    &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;#34;primaryPort&amp;#34;&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;9995&lt;/span&gt;
    }
}&lt;/pre&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/honmaple/ztncui-aio&quot;&gt;https://github.com/honmaple/ztncui-aio&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/jonnyan404/zerotier-planet&quot;&gt;https://github.com/jonnyan404/zerotier-planet&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/zerotier/ZeroTierOne/blob/dev/README.docker.md&quot;&gt;https://github.com/zerotier/ZeroTierOne/blob/dev/README.docker.md&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;a href=&quot;https://docs.zerotier.com/zerotier/zerotier.conf/&quot;&gt;https://docs.zerotier.com/zerotier/zerotier.conf/&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Linux"></category>
    </entry>
    <entry xml:lang="zh">
      <title>文件同步和备份</title>
      <link href="" rel="alternate"></link>
      <published>Fri, 04 Aug 2023 15:30:04 +0000</published>
      <updated>Thu, 21 Sep 2023 11:13:21 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/08/文件同步和备份.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/08/文件同步和备份.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
最近在写一个文件同步和备份的软件，特此记录
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;同步&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;单向同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.1.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 选项一: 源目录的文件和目标目录的文件都发生修改:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 覆盖文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 跳过文件: 不作任何处理
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项二: 源目录的文件被删除时，是否删除目标目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.1.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;第一次同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。&lt;b&gt;后续同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;无修改&lt;/b&gt;: 无操作
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;新增文件&lt;/b&gt;: 对比信息文件判断是否新增
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;选项一...&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;单向同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1.1&quot;&gt;同步选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1.2&quot;&gt;同步逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;镜像同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.1&quot;&gt;同步选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2.2&quot;&gt;同步逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3&quot;&gt;双向同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.1&quot;&gt;同步选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3.2&quot;&gt;同步逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
最近在写一个文件同步和备份的软件，特此记录
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;同步&lt;/h2&gt;
&lt;h3 id=&quot;heading-1.1&quot;&gt;单向同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.1.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 选项一: 源目录的文件和目标目录的文件都发生修改:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 覆盖文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 跳过文件: 不作任何处理
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项二: 源目录的文件被删除时，是否删除目标目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.1.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;第一次同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。&lt;b&gt;后续同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;无修改&lt;/b&gt;: 无操作
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;新增文件&lt;/b&gt;: 对比信息文件判断是否新增
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;修改文件&lt;/b&gt;: 对比信息文件判断是否修改
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;删除文件&lt;/b&gt;: 对比信息文件判断是否删除
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: 无操作
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;heading-1.2&quot;&gt;镜像同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.2.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 单向同步选项一: 覆盖文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 单向同步选项二: 同步删除目标目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.2.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     逻辑同单向同步
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.3&quot;&gt;双向同步&lt;/h3&gt;
&lt;h4 id=&quot;heading-1.3.1&quot;&gt;同步选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 选项一: 源目录的文件和目标目录的文件都发生修改:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 保留最新的文件: 对比文件修改时间，如果源目录的文件最新, 则覆盖目标目录的文件; 反之，覆盖源目录的文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 以源目录为准: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 以目标目录为准: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 跳过文件: 不作任何处理
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项二: 源目录的文件被删除时，是否删除目标目录的文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 选项三: 目标目录的文件被删除时，是否删除源目录的文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;heading-1.3.2&quot;&gt;同步逻辑&lt;/h4&gt;
&lt;p&gt;
     &lt;b&gt;第一次同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。&lt;b&gt;后续同步&lt;/b&gt;会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;无修改&lt;/b&gt;: 对比信息文件判断
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;新增文件&lt;/b&gt;: 对比信息文件判断是否新增
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录新增文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;修改文件&lt;/b&gt;: 对比信息文件判断是否修改
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;选项一&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 源目录&lt;b&gt;删除文件&lt;/b&gt;: 对比信息文件判断是否删除
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录无修改: &lt;b&gt;源目录 -&amp;gt; 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录修改文件: &lt;b&gt;源目录 &amp;lt;- 目录目录&lt;/b&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 目标目录删除文件: 无操作
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
        <category term="Life"></category>
    </entry>
    <entry xml:lang="zh">
      <title>绿联云Nas新版本v3.4.0固件开启SSH</title>
      <link href="" rel="alternate"></link>
      <published>Fri, 14 Jul 2023 17:51:50 +0000</published>
      <updated>Thu, 20 Jul 2023 09:54:51 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/07/绿联云Nas新版本v3.4.0固件开启SSH.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/07/绿联云Nas新版本v3.4.0固件开启SSH.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
之前老的方式&lt;b&gt;固定前缀加远程协助验证码&lt;/b&gt;在更新到最新版本的&lt;b&gt;v3.4.0&lt;/b&gt;后已经失效，想要开启ssh只能使用另一种方式，也希望绿联云官方在系统更加完善(&lt;b&gt;权限管理、软件卸载&lt;/b&gt;)前不要再继续封堵开启的方式，当然，如果能提供官方的开启方式更好
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;b&gt;免责声明：本教程所提供的内容仅供学习交流使用，请勿用于商业及非法用途，因此产生的任何法律纠纷均与本人无关！如有侵权，请您联系我，我将立刻删除该内容&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;注：此教程可能会造成未知的后果，在此期间所造成的系统风险请自行承担&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;创建随机镜像&lt;/h2&gt;
&lt;p&gt;
   首先拉取一个镜像，我这里选择 &lt;code&gt;nginx:stable-alpine&lt;/code&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   然后点击创建容器，存储空间&lt;b&gt;添加一个任意目录&lt;/b&gt;，挂载到 &lt;code&gt;/data&lt;/code&gt; 下...&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;创建随机镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;抓包获取Token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;手动创建容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;修改SSH配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;SSH登录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;问题排查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-7&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
之前老的方式&lt;b&gt;固定前缀加远程协助验证码&lt;/b&gt;在更新到最新版本的&lt;b&gt;v3.4.0&lt;/b&gt;后已经失效，想要开启ssh只能使用另一种方式，也希望绿联云官方在系统更加完善(&lt;b&gt;权限管理、软件卸载&lt;/b&gt;)前不要再继续封堵开启的方式，当然，如果能提供官方的开启方式更好
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;b&gt;免责声明：本教程所提供的内容仅供学习交流使用，请勿用于商业及非法用途，因此产生的任何法律纠纷均与本人无关！如有侵权，请您联系我，我将立刻删除该内容&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;注：此教程可能会造成未知的后果，在此期间所造成的系统风险请自行承担&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;创建随机镜像&lt;/h2&gt;
&lt;p&gt;
   首先拉取一个镜像，我这里选择 &lt;code&gt;nginx:stable-alpine&lt;/code&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-01.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-01.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   然后点击创建容器，存储空间&lt;b&gt;添加一个任意目录&lt;/b&gt;，挂载到 &lt;code&gt;/data&lt;/code&gt; 下，&lt;b&gt;其它参数为默认&lt;/b&gt;，然后下一步，先&lt;b&gt;不要点击完成&lt;/b&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-02.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-02.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;抓包获取Token&lt;/h2&gt;
&lt;p&gt;
   打开 &lt;b&gt;wireshark&lt;/b&gt; 进行抓包，输入筛选参数
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;ip.dst_host == 192.168.31.65 and http and http.request.method==POST&lt;/pre&gt;

&lt;p&gt;
   然后返回绿联云，点击完成，这时会在 &lt;b&gt;wireshark&lt;/b&gt; 窗口看到一条HTTP请求
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-03.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-03.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   点击这条请求，然后 &lt;b&gt;右键 -&amp;gt; Follow -&amp;gt; HTTP Stream&lt;/b&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-04.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-04.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   这时会看到具体的&lt;b&gt;HTTP请求头和请求参数&lt;/b&gt;，在下方的Find里输入 &lt;code&gt;create&lt;/code&gt; 进行查找，然后将红色内容复制到本地，将请求参数 &lt;code&gt;{&amp;#34;_query&amp;#34;...}&lt;/code&gt; 复制到一个 &lt;b&gt;json&lt;/b&gt; 文件
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-05.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-05.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   接着修改 &lt;b&gt;json&lt;/b&gt; 文件，找到&lt;b&gt;HostConfig -&amp;gt; Mounts&lt;/b&gt;，将里面的 &lt;b&gt;Source&lt;/b&gt; 参数修改为 &lt;code&gt;/&lt;/code&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-06.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-06.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;手动创建容器&lt;/h2&gt;
&lt;p&gt;
   首先到绿联云删除刚开始创建的容器
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-07.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-07.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   然后使用命令行手动请求创建容器，其中 &lt;b&gt;ugreen.json&lt;/b&gt; 为抓包获取并修改后的参数文件，请求头保持一致
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-08.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-08.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   创建完成后，返回绿联云，刷新并查看详情，可以看到绿联系统的根目录已经挂载到容器内部
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-09.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-09.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;修改SSH配置&lt;/h2&gt;
&lt;p&gt;
   使用终端进入Docker内部
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-10.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-10.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   然后添加公钥到root目录，怎么生成公私钥这里不再叙述。
   查看sshd的配置，默认是不允许使用公钥匙登录的，所以需要修改 &lt;code&gt;PubkeyAuthentication no&lt;/code&gt; 为 &lt;code&gt;PubkeyAuthentication yes&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-11.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-11.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
   接着到&lt;b&gt;设备管理 -&amp;gt; 远程协助 -&amp;gt; 开启远程调试功能&lt;/b&gt;，重启sshd就是关闭远程调试然后重新打开
&lt;/p&gt;

&lt;h2 id=&quot;heading-5&quot;&gt;SSH登录&lt;/h2&gt;
&lt;p&gt;
   最后就可以使用ssh公钥登录绿联云系统了
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-12.jpg-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-SSH-12.jpg-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-6&quot;&gt;问题排查&lt;/h2&gt;
&lt;p&gt;
   如果无法使用ssh公钥登录，可以查看系统的ssh登录日志
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;grep ssh /data/data/nas_server/log/system/*syslog | less&lt;/pre&gt;

&lt;p&gt;
   如果提示 &lt;code&gt;Authentication refused: bad ownership or modes for directory /root&lt;/code&gt;，则执行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;chmod go-w /data/root&lt;/pre&gt;

&lt;p&gt;
   如果提示 &lt;code&gt;ssh-rsa: signature algorithm not supported&lt;/code&gt;，则添加下面配置到&lt;b&gt;sshd_config&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;PubkeyAcceptedKeyTypes=+ssh-rsa&lt;/pre&gt;

&lt;h2 id=&quot;heading-7&quot;&gt;其它&lt;/h2&gt;
&lt;p&gt;
   升级到&lt;b&gt;v3.4.0&lt;/b&gt;后，目前觉得还不错，其中&lt;b&gt;批量重命名，TMDB接口，自定义Hosts&lt;/b&gt;等都是非常有用的功能，也希望绿联能再接再厉，我们这些用户也能和绿联Nas一同成长。
&lt;/p&gt;

&lt;p&gt;
   对了，之前文件同步会修改源文件权限的问题已经被修复，&lt;b&gt;Very Good&lt;/b&gt;
&lt;/p&gt;</content>
        <category term="Life"></category>
    </entry>
    <entry xml:lang="zh">
      <title>绿联DX4600 Pro虚拟机探索</title>
      <link href="" rel="alternate"></link>
      <published>Thu, 06 Jul 2023 00:18:35 +0000</published>
      <updated>Wed, 15 Nov 2023 15:15:48 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/07/绿联DX4600 Pro虚拟机探索.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/07/绿联DX4600 Pro虚拟机探索.html</id>
      <summary type="html">
&lt;blockquote&gt;
&lt;p&gt;
本次探索源于上次发现可以&lt;b&gt;使用Docker来管理群晖虚拟机&lt;/b&gt;，而绿联本身是自带&lt;b&gt;kvm&lt;/b&gt;内核模块的，但是要等到绿联官方支持虚拟机，又不知道会等到猴年马月。所以我有一个大胆的想法，能否使用Docker搭建一个可以自由管理虚拟机的程序，最起码可以安装一个windows替换掉绿联内置的有着各种限制的迅雷
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;b&gt;注意：非专业人士请勿模仿，除非你知道什么是KVM，在此期间所造成的系统风险请自行承担&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;虚拟机管理&lt;/h2&gt;
&lt;p&gt;
   选择了我之前使用过的 &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 来管理 &lt;code&gt;KVM&lt;/code&gt;，说实话，这个管理程序比起威联通群晖这些官方自带确实不太好用，但用于测试还是足够了，如果有更好更方便的推荐请在评论区留言
&lt;/p&gt;

&lt;p&gt;
   &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 没有官方的  &lt;code&gt;Docker&lt;/code&gt; 镜像，只能自己编译，虽然它本身带有一个 &lt;b&gt;Dockerfile&lt;/b&gt;，但如果自己构建会遇到各种各样的问题，下面是我遇到的部分问题
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.1&quot;&gt;Ubuntu版本问题&lt;/h3&gt;
&lt;p&gt;
    &lt;b&gt;retspen...&lt;/b&gt;&lt;/p&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;虚拟机管理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;Ubuntu版本问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;Libvirt安装依赖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;构建Docker&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;导入镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;ssh登录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.3&quot;&gt;运行Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.4&quot;&gt;启动libvirtd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;管理界面&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3.1&quot;&gt;创建虚拟机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
本次探索源于上次发现可以&lt;b&gt;使用Docker来管理群晖虚拟机&lt;/b&gt;，而绿联本身是自带&lt;b&gt;kvm&lt;/b&gt;内核模块的，但是要等到绿联官方支持虚拟机，又不知道会等到猴年马月。所以我有一个大胆的想法，能否使用Docker搭建一个可以自由管理虚拟机的程序，最起码可以安装一个windows替换掉绿联内置的有着各种限制的迅雷
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;b&gt;注意：非专业人士请勿模仿，除非你知道什么是KVM，在此期间所造成的系统风险请自行承担&lt;/b&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;虚拟机管理&lt;/h2&gt;
&lt;p&gt;
   选择了我之前使用过的 &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 来管理 &lt;code&gt;KVM&lt;/code&gt;，说实话，这个管理程序比起威联通群晖这些官方自带确实不太好用，但用于测试还是足够了，如果有更好更方便的推荐请在评论区留言
&lt;/p&gt;

&lt;p&gt;
   &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 没有官方的  &lt;code&gt;Docker&lt;/code&gt; 镜像，只能自己编译，虽然它本身带有一个 &lt;b&gt;Dockerfile&lt;/b&gt;，但如果自己构建会遇到各种各样的问题，下面是我遇到的部分问题
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.1&quot;&gt;Ubuntu版本问题&lt;/h3&gt;
&lt;p&gt;
    &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 默认是基于一个 &lt;b&gt;Ubuntu22.04&lt;/b&gt; 的镜像构建，但是，如果自行构建会发现旧版本的 &lt;b&gt;Docker&lt;/b&gt; 和 &lt;b&gt;Ubuntu22.04&lt;/b&gt; 根本不兼容
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 报错一
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;The following signatures couldn&amp;#39;t be verified because the public key is not available: NO_PUBKEY 871920D1991BC93C&lt;/pre&gt;
&lt;p&gt;
      搜索了一下，说是可以使用 &lt;code&gt;apt-key&lt;/code&gt; 命令添加公钥解决，实际上
      
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-01.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-01.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 报错二
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg are ignored as the file is not readable by user &amp;#39;_apt&amp;#39; executing apt-key.&lt;/pre&gt;
&lt;p&gt;
      这个报错可以通过&lt;b&gt;删除gpg文件忽略&lt;/b&gt;，但实际上没什么用。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    真正的解决方式是&lt;b&gt;升级自身的Docker版本&lt;/b&gt;，最小要到 &lt;code&gt;20.0&lt;/code&gt; 以上，因为我使用的Mac，最新版本的Docker也不过是 &lt;code&gt;19.03.13&lt;/code&gt;，所以没办法使用升级Docker的方式解决，只能降级Ubuntu的版本
&lt;/p&gt;

&lt;p&gt;
    一开始我直接把版本降到最熟悉的18.04，但在安装Python库发现部分库的指定版本要求Python3.8，否则找不到指定版本
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-02.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-02.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    如果使用 &lt;code&gt;apt&lt;/code&gt; 直接安装 &lt;code&gt;Python3.8&lt;/code&gt;，会发现有两个问题：
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 其中一个依赖 &lt;code&gt;python3-lxml&lt;/code&gt; 没有3.8的版本，直接安装会同时安装 &lt;code&gt;Python3.6&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;code&gt;venv&lt;/code&gt; 无法使用
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
    后面甚至想要忽略Python版本强行安装
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;pip3 install -r conf/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --ignore-requires-python&lt;/pre&gt;

&lt;p&gt;
    但仍然是一堆报错
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-03.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-03.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    所以再次测试升级到 &lt;b&gt;20.04&lt;/b&gt; 的版本，还好 &lt;b&gt;20.04&lt;/b&gt; 安装的Python3正是 &lt;code&gt;Python3.8&lt;/code&gt;，故此正常
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.2&quot;&gt;Libvirt安装依赖&lt;/h3&gt;
&lt;p&gt;
    由于 &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 是依赖libvirt对虚拟机进行管理的，而绿联使用的系统本身没有libvirt进程，所以我将在Docker内部安装，在此期间也遇到了部分问题，下面对部分依赖包统一说明一下
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;libvirt-daemon&lt;/b&gt; &lt;br/&gt;
      libvirtd的进程包
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;libvirt-daemon-system&lt;/b&gt; &lt;br/&gt;
      libvirtd的默认配置包，如果不安装需要手动编写配置
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;iptables&lt;/b&gt; &lt;br/&gt;
      libvirtd的依赖，不安装启动libvirtd时会报错
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;dnsmasq&lt;/b&gt; &lt;br/&gt;
      libvirtd的依赖，不安装kvm的默认网络无法启动，导致后续建立的虚拟机无法联网
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;qemu-kvm&lt;/b&gt; &lt;br/&gt;
      不安装导致后续新建虚拟机时可选的架构和芯片组为空
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;qemu-utils&lt;/b&gt; &lt;br/&gt;
      不安装导致虚拟机无法使用qcow2，只能使用raw格式
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;virt-manager(可选)&lt;/b&gt; &lt;br/&gt;
      通过命令行管理虚拟机
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;构建Docker&lt;/h2&gt;
&lt;p&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-04.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-04.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   修改完 &lt;b&gt;Ubuntu版本&lt;/b&gt; 和添加 &lt;b&gt;KVM所需依赖&lt;/b&gt; 后，就能成功构建Docker(实际构建大小在&lt;b&gt;1.4G&lt;/b&gt;左右)。
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-05.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-05.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.1&quot;&gt;导入镜像&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 首先先导出镜像
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker save -o webvirtcloud.tar webvirtcloud:test-2&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 上传到绿联Nas，可以同时上传后面创建虚拟机所用的iso文件
       
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-06.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-06.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 打开绿联Docker，在镜像管理里选择从设备导入镜像
       
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-07.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-07.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-2.2&quot;&gt;ssh登录&lt;/h3&gt;
&lt;p&gt;
    老传统了，这里就不再过多叙述，具体可看 &lt;del&gt;&lt;a href=&quot;https://honmaple.me/articles/2023/06/绿联DX4600%20Pro禁用迅雷和中国移动云盘进程.html&quot;&gt;绿联DX4600 Pro禁用迅雷和中国移动云盘进程&lt;/a&gt;&lt;/del&gt; &lt;a href=&quot;https://honmaple.me/articles/2023/07/ugreen-nas-open-ssh.html&quot;&gt;绿联云Nas新版本v3.4.0固件开启SSH&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.3&quot;&gt;运行Docker&lt;/h3&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker run --rm -p 8088:80 -p 6080:6080 --device=/dev/kvm --privileged webvirtcloud:test-2&lt;/pre&gt;

&lt;p&gt;
    &lt;code&gt;8088&lt;/code&gt; 是 &lt;b&gt;retspen/webvirtcloud&lt;/b&gt; 界面端口，启动后可以通过 &lt;code&gt;NasIP:8088&lt;/code&gt; 访问，&lt;code&gt;6080&lt;/code&gt; 是 &lt;b&gt;VNC&lt;/b&gt; 端口，启动虚拟机后可以直接使用浏览器访问
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-08.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-08.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.4&quot;&gt;启动libvirtd&lt;/h3&gt;
&lt;p&gt;
    由于我只修改了Dockerfile里的依赖，所以&lt;b&gt;libvirtd&lt;/b&gt;只能手动启动，如果想要自动启动的可以添加启动脚本到 &lt;code&gt;/etc/service&lt;/code&gt; 目录
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 进入&lt;b&gt;Docker内部&lt;/b&gt;：
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker exec -it {镜像名} bash&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 修改&lt;b&gt;配置文件&lt;/b&gt;: 使用 vi 打开 &lt;code&gt;/etc/libvirt/libvirtd.conf&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;- unix_sock_group = &amp;#34;libvirt&amp;#34;
&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;+ unix_sock_group = &amp;#34;www-data&amp;#34;
&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 启动&lt;b&gt;libvirtd&lt;/b&gt;:
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;libvirtd -d&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 启动&lt;b&gt;virtlogd&lt;/b&gt;：
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;virtlogd -d&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;heading-3&quot;&gt;管理界面&lt;/h2&gt;
&lt;p&gt;
   通过 &lt;code&gt;NasIP:8088&lt;/code&gt; 访问管理界面，默认用户名和密码都是 &lt;b&gt;admin&lt;/b&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-09.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-09.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   登录成功后，点击&lt;b&gt;计算节点 -&amp;gt; 本地&lt;/b&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-10.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-10.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   然后添加一个&lt;b&gt;本地节点&lt;/b&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-11.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-11.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   添加后正常情况就会显示&lt;b&gt;已连接&lt;/b&gt;
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-12.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-12.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   接着继续点击右边的&lt;b&gt;眼睛图案 -&amp;gt; 选择存储 -&amp;gt; 右上角的+号&lt;/b&gt;，添加两个存储
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-13.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-13.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 test: 路径为 &lt;code&gt;/var/lib/libvirt/images&lt;/code&gt;，用于存放虚拟机文件
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 iso:  路径为 &lt;code&gt;/var/lib/libvirt/iso&lt;/code&gt;，存放iso镜像文件
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
   然后返回绿联Nas的ssh界面，复制iso文件到Docker内部，或者在执行Docker命令时使用 &lt;code&gt;-v /mnt/xxxx/Docker/webvirtcloud/iso:/var/lib/libvirt/iso&lt;/code&gt; 将文件提前挂载到Docker内部
   
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-14.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-14.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-3.1&quot;&gt;创建虚拟机&lt;/h3&gt;
&lt;p&gt;
    一切准备就绪，现在我们就能创建虚拟机了。
&lt;/p&gt;

&lt;p&gt;
    选择&lt;b&gt;实例 -&amp;gt; 创建&lt;/b&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-15.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-15.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    点击下一个，注意：&lt;b&gt;webvirtcloud&lt;/b&gt; 这里的操作有些反人类，最好选择&lt;b&gt;规格 -&amp;gt; 应用&lt;/b&gt;，不要使用自定义和模版，否则无法挂载&lt;b&gt;CD-ROM&lt;/b&gt;。我这里选择30G的mini，存储一定要改成 &lt;b&gt;test&lt;/b&gt;，然后创建
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-16.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-16.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-17.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-17.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    点击创建后会到实例页面，先不要启动，到&lt;b&gt;设置 -&amp;gt; 磁盘&lt;/b&gt;挂载想要安装的系统iso文件，然后在旁边的启动顺序里确认&lt;b&gt;启动第一项&lt;/b&gt;是iso所在的磁盘
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-18.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-18.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-19.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-19.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-20.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-20.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    接着就可以开机了，开机后可以点击&lt;b&gt;访问 -&amp;gt; 控制台&lt;/b&gt;使用VNC打开系统安装界面，安装完成后记得重新调整启动顺序以及卸载iso镜像
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-21.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-KVM-21.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    至此，使用第三方Docker搭建的绿联Nas虚拟机管理也就完成了，如果急需使用虚拟机功能，又想保留绿联Nas的系统，随绿联一起“成长”的用户可以利用此功能创建虚拟机，如果不着急的可以等官方的实现
&lt;/p&gt;

&lt;h2 id=&quot;heading-4&quot;&gt;其它&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 没有修改libvirtd里的 &lt;code&gt;unix_sock_group&lt;/code&gt; 配置为 &lt;b&gt;www-data&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;Failed to connect socket to &amp;#39;/var/run/libvirt/libvirt-sock&amp;#39;: Permission denied&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 Docker内部(不是绿联系统)执行 &lt;code&gt;chmod 666 /dev/kvm&lt;/code&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;libvirt 错误- internal error: process exited while connecting to monitor: Could not access KVM kernel module: Permission denied 2023-07-05T16:17:57.942238Z qemu-system-x86_64: failed to initialize KVM: Permission denied&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 未安装&lt;b&gt;dnsmasq&lt;/b&gt;，如果手动安装，使用 &lt;code&gt;virsh net-start default&lt;/code&gt; 手动启动
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;libbvirt 错误- Requested operation is not valid: network &amp;#39;default&amp;#39; is not active&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 未安装&lt;b&gt;qemu-utils&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;internal error: creation of non-raw file images is not supported without qemu-img.&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
   注意：文章中并未修改绿联Nas本身的系统，所有的安装包和修改文件配置都是在Docker内部进行
&lt;/p&gt;</content>
        <category term="Life"></category>
    </entry>
    <entry xml:lang="zh">
      <title>绿联DX4600 Pro安装一个超酷超帅的Docker</title>
      <link href="" rel="alternate"></link>
      <published>Tue, 04 Jul 2023 12:37:02 +0000</published>
      <updated>Tue, 04 Jul 2023 13:25:46 +0000</updated>
      <author>
        <name>honmaple</name>
      </author>
      <link rel="alternate" href="https://honmaple.me/articles/2023/07/绿联DX4600 Pro安装一个超酷超帅的Docker.html" type="text/html"/>
      <id>https://honmaple.me/articles/2023/07/绿联DX4600 Pro安装一个超酷超帅的Docker.html</id>
      <summary type="html">
&lt;p&gt;
绿联Nas的系统真是一言难尽，所以最近几天我都在寻找一种安装群晖的教程，也知晓群晖其实也没那么容易安装，主要是安装群晖后，有很大的概率&lt;b&gt;导致机器指示灯，风扇，甚至M.2固态失效&lt;/b&gt;，也正因为此，虽然已经整理好了安装的教程，但迟迟没有动手，此次在网上搜寻教程时无意中发现了一个超酷超帅的Docker镜像，安装后真的会惊叹为何会有如此棒的东西，它就是
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;https://github.com/kroese/virtual-dsm&quot;&gt;kroese/virtual-dsm&lt;/a&gt; ，一个利用Docker管理群晖虚拟机的镜像，对于没有虚拟机功能的绿联Nas来说，无疑是非常棒地既可以体验本地群晖系统，又不用刷机改引导，格式化硬盘的方法
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;安装教程&lt;/h2&gt;
&lt;p&gt;
   安装流程和之前的已有的一篇文章相差不大 &lt;a href=&quot;https://post.smzdm.com/p/an36zmz2/&quot;&gt;绿联DX4600安装docker黑群晖&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   当然这里也会写上部分我自己特别折腾的记录，大家可以放心食用
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.1&quot;&gt;下载镜像&lt;/h3&gt;
&lt;p&gt;
    打开绿联Docker，输入 &lt;code&gt;kroese/virtual-dsm&lt;/code&gt; 下载镜像
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-01.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-01.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.2&quot;&gt;使用ssh登录到后台...&lt;/h3&gt;</summary>
      <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id=&quot;text-table-of-contents&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;安装教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.1&quot;&gt;下载镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.2&quot;&gt;使用ssh登录到后台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-1.3&quot;&gt;使用Docker命令行安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;折腾教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.1&quot;&gt;群晖本地IP(macvlan)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-2.2&quot;&gt;webdav挂载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
绿联Nas的系统真是一言难尽，所以最近几天我都在寻找一种安装群晖的教程，也知晓群晖其实也没那么容易安装，主要是安装群晖后，有很大的概率&lt;b&gt;导致机器指示灯，风扇，甚至M.2固态失效&lt;/b&gt;，也正因为此，虽然已经整理好了安装的教程，但迟迟没有动手，此次在网上搜寻教程时无意中发现了一个超酷超帅的Docker镜像，安装后真的会惊叹为何会有如此棒的东西，它就是
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;https://github.com/kroese/virtual-dsm&quot;&gt;kroese/virtual-dsm&lt;/a&gt; ，一个利用Docker管理群晖虚拟机的镜像，对于没有虚拟机功能的绿联Nas来说，无疑是非常棒地既可以体验本地群晖系统，又不用刷机改引导，格式化硬盘的方法
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;heading-1&quot;&gt;安装教程&lt;/h2&gt;
&lt;p&gt;
   安装流程和之前的已有的一篇文章相差不大 &lt;a href=&quot;https://post.smzdm.com/p/an36zmz2/&quot;&gt;绿联DX4600安装docker黑群晖&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   当然这里也会写上部分我自己特别折腾的记录，大家可以放心食用
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.1&quot;&gt;下载镜像&lt;/h3&gt;
&lt;p&gt;
    打开绿联Docker，输入 &lt;code&gt;kroese/virtual-dsm&lt;/code&gt; 下载镜像
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-01.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-01.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;heading-1.2&quot;&gt;使用ssh登录到后台&lt;/h3&gt;
&lt;p&gt;
    其中登录教程在我之前的一篇文章中有介绍 &lt;a href=&quot;https://honmaple.me/articles/2023/06/绿联DX4600 Pro禁用迅雷和中国移动云盘进程.html&quot;&gt;绿联DX4600 Pro禁用迅雷和中国移动云盘进程&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    这里就再简单介绍一下:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 开启远程协助，记住验证码
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 重启机器(注意先保存进行中的任务)
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 使用 &lt;b&gt;ssh&lt;/b&gt; 客户端登录，端口 &lt;b&gt;922&lt;/b&gt;，密码 &lt;code&gt;L#W$%W1uGa&lt;/code&gt; 加上验证码，用户 &lt;b&gt;root&lt;/b&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;heading-1.3&quot;&gt;使用Docker命令行安装&lt;/h3&gt;
&lt;p&gt;
    首先需要验证挂载的目录，我这里是找了两个已经创建并挂载了本地存储的镜像，使用
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker inspect --format &amp;#34;{{json .HostConfig.Mounts}}&amp;#34; 镜像名&lt;/pre&gt;
&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-02.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-02.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    查看挂载的实际目录，可以看出Docker实际挂载的目录由
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;/mnt/media_rw/ + 硬盘UUID + /.ugreen_nas/ + 用户ID + 硬盘目录&lt;/pre&gt;
&lt;p&gt;
    这几部分构成，那么就好办了，首先创建一个&lt;b&gt;DSM的目录&lt;/b&gt;，用于存放群晖虚拟机文件，我这里选择&lt;b&gt;固态硬盘&lt;/b&gt;，避免使用机械硬盘&lt;b&gt;导致硬盘无法休眠&lt;/b&gt;，如果选择其它硬盘，需要先创建一个没什么用的Docker挂载目录，然后使用 &lt;code&gt;inspect&lt;/code&gt; 找到实际的路径
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-03.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-03.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    建立好目录后使用命令行安装镜像
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-04.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-04.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    其中的几个参数
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;DISK_SIZE=100G&lt;/b&gt;: 分配给群晖虚拟机100G的磁盘空间，这部分空间会作为&lt;b&gt;存储1&lt;/b&gt;使用
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;ALLOCATE=N&lt;/b&gt;: 是否预分配100G的大小(Y)，还是按照实际大小展示在绿联Nas上(N)(这个参数貌似没生效)
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;CPU_CORES=2&lt;/b&gt;: 分配给虚拟机的核数，我的是 &lt;b&gt;n6005&lt;/b&gt;，四核，所以分了两核给群晖
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;RAM_SIZE=8192M&lt;/b&gt;: 分配给虚拟机的内存大小
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 &lt;b&gt;--network 实际的网络&lt;/b&gt;: 也可以不写，使用默认的 &lt;code&gt;Docker bridge&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    创建完成后使用 &lt;code&gt;docker logs -f DSM&lt;/code&gt; 查看日志，直到日志显示
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-05.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-05.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    在此期间，也可以打开浏览器，使用绿联Nas &lt;b&gt;IP+端口5000&lt;/b&gt; 进行访问
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-06.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-06.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-07.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-07.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    然后就是正常的群晖初始化，至此，想要体验本地群晖系统的就可以行动了
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;等等，后面还有&lt;/b&gt;。。。
&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;折腾教程&lt;/h2&gt;
&lt;h3 id=&quot;heading-2.1&quot;&gt;群晖本地IP(macvlan)&lt;/h3&gt;
&lt;p&gt;
    按照GitHub上的教程，我原本想要配置一个和局域网内其它设备相同网段的IP给群晖虚拟机，所以我创建了一个基于 &lt;code&gt;macvlan&lt;/code&gt; 的网络
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker network create -d macvlan --subnet=192.168.31.0/24 --gateway=192.168.31.1 --ip-range=192.168.31.66/32 -o parent=eth0  dsmnet&lt;/pre&gt;

&lt;p&gt;
    然后使用 &lt;code&gt;--network dsmnet&lt;/code&gt; 重新创建Docker，结果怎么着，报错了
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;docker: Error response from daemon: failed to create the macvlan port: operation not supported.&lt;/pre&gt;

&lt;p&gt;
    第一眼我还觉得这是由于docker打包脚本里的 &lt;code&gt;EXPOSE&lt;/code&gt; 的锅，甚至去搜索能否禁用该操作，结果也是显而易见的，什么都没找到。后来仔细看了一下报错信息：&lt;code&gt;operation not supported&lt;/code&gt;
    好吧，确认一下 &lt;code&gt;macvlan&lt;/code&gt; 相关的模块是否被加载
&lt;/p&gt;

&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;lsmod | grep macvlan&lt;/pre&gt;

&lt;p&gt;
    果然，&lt;b&gt;绿联Nas默认是没有macvlan模块的&lt;/b&gt;，所以想用绿联Nas部署一个openwrt旁路由的可以先歇了。那么，我能否自己安装macvlan模块呢？
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-08.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-08.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    对不起，打扰了。不对，内核版本不符，那么我去下载一个和内核版本相符的文件，使用 &lt;b&gt;uname -r&lt;/b&gt; 看一下绿联用的版本
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;5.10.120&lt;/pre&gt;

&lt;p&gt;
    我直接去官方库里找，还好找到了，同样使用的 &lt;b&gt;5.10.120-1&lt;/b&gt;
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;wget https://downloads.openwrt.org/releases/22.03.0-rc4/targets/x86/64/packages/kmod-macvlan_5.10.120-1_x86_64.ipk&lt;/pre&gt;

&lt;p&gt;
    继续安装，结果还是一样
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-09.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-09.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    因为我对openwrt不太熟悉，实在进行不下去了，&lt;b&gt;只好放弃&lt;/b&gt;。不过也能看出绿联还是编译了一些属于自己的东西的，没有直接使用默认的openwrt内核，不过现在大概只能等绿联自己升级固件来默认支持macvlan了，或者有没有大佬能够解答一下这个问题
&lt;/p&gt;

&lt;h3 id=&quot;heading-2.2&quot;&gt;webdav挂载&lt;/h3&gt;
&lt;p&gt;
    因为docker安装的群晖无法直接使用插入的硬盘，甚至不能映射某个目录到群晖虚拟机，所以如果想用群晖来操作绿联Nas上面的文件，只能通过网络挂载
&lt;/p&gt;

&lt;p&gt;
    绿联本身支持的网络挂载有限，不支持&lt;code&gt;NFS&lt;/code&gt;，但是还好可以支持&lt;code&gt;webdav&lt;/code&gt;和&lt;code&gt;ftp&lt;/code&gt;，那么可以去群晖web管理界面，打开 &lt;b&gt;file station -&amp;gt; 工具 -&amp;gt; 远程连接 -&amp;gt; 连接设置 -&amp;gt; ftp/webdav&lt;/b&gt; 进行配置
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-10.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-10.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-11.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-11.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    你以为我要说的就这，这不是&lt;b&gt;显而易见，浅显易懂，入口即化&lt;/b&gt;的吗？实际上，除了&lt;code&gt;ftp&lt;/code&gt;可以正常挂载外，&lt;code&gt;webdav&lt;/code&gt;却是死活挂载不了，总是提示&lt;b&gt;连接被服务器拒绝&lt;/b&gt;，搞得我还以为绿联是不是连一个基础的webdav都没做好，但我用我的mac连接又可以正常挂载，差点把我整emo
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-12.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-12.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    我可以确认我的配置是对的，那到底是哪里出了问题，打开群晖的&lt;b&gt;ssh&lt;/b&gt;，也确认了是可以正常和宿主机通信的
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-13.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-13.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    最后搞得实在没办法了，抓包吧，还好群晖默认已经安装了&lt;b&gt;tcpdump&lt;/b&gt;，只需要生成&lt;b&gt;pcap&lt;/b&gt;文件就行
&lt;/p&gt;
&lt;pre style=&quot;color:#f8f8f2;background-color:#272822&quot;&gt;tcpdump -i eth0 host 192.168.31.65 -w ugreen/webdav.pcap&lt;/pre&gt;

&lt;p&gt;
    终端运行抓包命令，另一边在群晖界面进行添加webdav的操作，等待再次提示连接被服务器拒绝后，再等待5s，暂停抓包，然后把 &lt;b&gt;webdav.pcap&lt;/b&gt; 下载到本地，使用 &lt;b&gt;wireshark&lt;/b&gt; 查看
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-14.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-14.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    乍一看没什么问题，都是正常的&lt;b&gt;DNS查询&lt;/b&gt;和&lt;b&gt;TCP握手&lt;/b&gt;，可仔细一看，怎么会&lt;b&gt;多了一个斜杆&lt;/b&gt;，而且服务端返回了401错误
&lt;/p&gt;

&lt;p&gt;
    
&lt;a href=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-15.png-show&quot; data-fancybox=&quot;image&quot;&gt;
  &lt;img data-src=&quot;https://s.libforest.com/images/2023/07/DX4600Pro-DSM-15.png-thumb&quot; class=&quot;lazyload&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    原来群晖挂载webdav的路径&lt;b&gt;一定不能使用斜杆开头&lt;/b&gt;，&lt;b&gt;一定不能使用斜杆开头&lt;/b&gt;，&lt;b&gt;一定不能使用斜杆开头&lt;/b&gt;，重要的事情说三遍，需要把 &lt;code&gt;/dav/share/&lt;/code&gt; 改成 &lt;code&gt;dav/share/&lt;/code&gt; (注意，绿联webdav路径后必须有一个斜杆)
&lt;/p&gt;

&lt;p&gt;
    至此，webdav挂载也ok了
&lt;/p&gt;

&lt;h2 id=&quot;heading-3&quot;&gt;其它&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
 在使用 &lt;b&gt;非macvlan&lt;/b&gt; 网络创建的群晖系统里内置的 &lt;b&gt;IP 20.20.20.21&lt;/b&gt; 以及 &lt;b&gt;网关20.20.20.1&lt;/b&gt; 是不能修改的，修改后可能会导致无法从浏览器访问群晖
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 可以修改DNS服务为&lt;b&gt;局域网网关&lt;/b&gt;或者&lt;b&gt;自建DNS的IP&lt;/b&gt;，修改后记得重启群晖系统
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
 功耗，启动 &lt;code&gt;virtual-dsm&lt;/code&gt; 前我的机器功耗大概是&lt;b&gt;18W&lt;/b&gt;，启动后在&lt;b&gt;26W&lt;/b&gt;左右，一段时间后又会变成&lt;b&gt;19W&lt;/b&gt;，这应该和系统内运行的任务有关
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
        <category term="Life"></category>
    </entry>
</feed>