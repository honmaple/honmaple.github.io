[{"content":"龟虽寿，意犹千里可近，生死两忘。\n  fxxToVRCp6QmC1SK2svYxZTQ8jqdJRlaWdiNfSiQNlaMmy5vnmkStctxkQL16MI2584qbQFO0UorUPhy/4bnACu1M13ZATLwCA5ttW5yLNjki0L20mrhINHMAkq2LcX17q/+XionhcA6OwDhQ+wG+k7Jm2mqdjzQkYqOF9u1n7w8wrPTi9Wd0je4t5lixwy77VVpSK7j2ilD9L6Io4KHuUgV1j/GzvFGz+lkZLNu465cn9ZMlOgQa0AhRuiM/VTJwDdB5b+EaqoOTQfS62r0MlHFifaUW5Zwd9gtNMuVogaAmR9a/rQq/Z0Q88YX7AzPJTaRHUxZ7wGGClvnCQM397czsDGt4ZMF8nn5mo5A52YGNr3puvIJQ9LIakmh8aM4OeSqZ9oZ7yU7T2/IHkMu2hfn6UHrYLrGmI1TdM7DFFIvlWyDU1l7cjO5e6s8wlMYjG8lfcZrR0SUQYpGolMgE1h2nbMEbSQSL1InPMtyDJxmnOEDE3/mc6puWR4vddaii4nH8ingdGzqBR2VEhRsEcIh3Ww1yKIoiyv5EIngXNZnUjeugVTkKq6Afq0bbRic++mjOBg7o/KkTXxBFD77/Dt4m/x+1WnGvEbYyjQddI9d7VeoRmUG2vdPFJ9Ow+kPxypTkcnwNbVqNFDkPfOzEnO3VdB41jEQnyYPnwqv2Gti37sLOT9KMhW+NVao+TVWF+IZ6cNMLvBiVN13CfZ87+ygT/iuYz3c1+Biz/AJxuVoe52OPqdTF70OE46I/q1uTMFftoE+RiRJprOS80uEoWu9kGEoOlrHkp61AJG2dWtTy68pAwbVfF8GKAdqIQ3zd5oRSdss1GDaeHW3PSWl+wbkVrKoCbzzPGG84lcAf18TZoe0P+6bEXXJ2wTHYJWNGX+SHFnQxcTvVzUnx7q8h+54N+kqw8MXlXoJYnPGJYxKr6/UMofdQiECF1ija8vQQROMMFCk9Rrua+GE37J+ysieFVzbDkUdpeiI0yqYpKMTwc7+CdBIq5slzbPvUBpd/QhrS/FPOul26ZmNY3NeAHbYj0VyDK/KbzfwEgdlUIDoKe+HLRvQhLIdgzlvPAKHpF2V1dB6pL85pgPIMPKRuXbAdzU2kZlm0UPOrOERjJo9CHTnV4Lef/6j8VVbn3+EcVp61z6+MAdbprvG67DqHKgmirmdqnlhcafeG59EMD8lLwmcQSl9aEKAvzOkBov3HJipSUY4tDZIE10JsIC0rnWmXrseOvynJh7vNyCzMg5Nv4ua6KxLs2Tv+4b49tagG8btjqhaD1u5sVW8N3apMgld0CtdQPegSjZv+N2fhFkfwfQG5v1l77j5x+Wj4UDObjWahgH851j9YfWBz9mS5GuLln6Ao7D+6hzNsyf30aYjgdLk5ofuCIDif1usL65gI/pxasDbRKdEJr4jBvCwco2Q6O/pIuMcET/p9iSZ5GPK42mWTaqJtjPuYLnRd7vzRYkPUqUU5q6k968gd4rbDJ4lBK2uyDG++vBGEJFIuITdwTM/LGQoLF74W0THOlzq+vZ9VJ7uy+QOhVeka79c2f+OL2xgSRm600CxEcAWIXICMnTDqJ/XsZu457AbIRMIZAdTHFUWGX/gBw3cmB8crictUjEBYR8gGX6SdqjXbVMz0s2EsokYSkJ4syTn7v77a+ZFC8yf7JHWKF5vJgvW9EBtu9VBxPkyw1AgEWpHc8PXsgbNHQdkrMXIUsNmubVmo8ZakV3s7CZSSriWWPYsHhjXZFsk9nSZxqg4AgsgbKuGNnWlECQTg5HeoYaAmbWQ3Wz7k7rwuLx2SjW+Vf4A/qd3ebMXZLWt6tn4DATd+XtWHxS9z6NForE04MuYBwz2UGCCwFRXOR1khu7kCS3jLw==\n\n\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;","index":0,"permalink":"https://honmaple.me/articles/2019/06/龟虽寿.html","summary":"\u003cdiv class=\"encrypt-container entry-encrypt\"\u003e\n  \u003cdiv class=\"encrypt-form entry-form\"\u003e\n    \u003cinput type=\"password\" class=\"encrypt-password\" placeholder=\"请输入密码\" /\u003e\n    \u003ci class=\"fa fa-key encrypt-button\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\u003cdiv class=\"encrypt-desc\"\u003e龟虽寿，意犹千里可近，生死两忘。\u003c/div\u003e\n  \u003cdiv class=\"encrypt-content\" style=\"display:none;\"\u003efxxToVRCp6QmC1SK2svYxZTQ8jqdJRlaWdiNfSiQNlaMmy5vnmkStctxkQL16MI2584qbQFO0UorUPhy/4bnACu1M13ZATLwCA5ttW5yLNjki0L20mrhINHMAkq2LcX17q/+XionhcA6OwDhQ+wG+k7Jm2mqdjzQkYqOF9u1n7w8wrPTi9Wd0je4t5lixwy77VVpSK7j2ilD9L6Io4KHuUgV1j/GzvFGz+lkZLNu465cn9ZMlOgQa0AhRuiM/VTJwDdB5b+EaqoOTQfS62r0MlHFifaUW5Zwd9gtNMuVogaAmR9a/rQq/Z0Q88YX7AzPJTaRHUxZ7wGGClvnCQM397czsDGt4ZMF8nn5mo5A52YGNr3puvIJQ9LIakmh8aM4OeSqZ9oZ7yU7T2/IHkMu2hfn6UHrYLrGmI1TdM7DFFIvlWyDU1l7cjO5e6s8wlMYjG8lfcZrR0SUQYpGolMgE1h2nbMEbSQSL1InPMtyDJxmnOEDE3/mc6puWR4vddaii4nH8ingdGzqBR2VEhRsEcIh3Ww1yKIoiyv5EIngXNZnUjeugVTkKq6Afq0bbRic++mjOBg7o/KkTXxBFD77/Dt4m/x+1WnGvEbYyjQddI9d7VeoRmUG2vdPFJ9Ow+kPxypTkcnwNbVqNFDkPfOzEnO3VdB41jEQnyYPnwqv2Gti37sLOT9KMhW+NVao+TVWF+IZ6cNMLvBiVN13CfZ87+ygT/iuYz3c1+Biz/AJxuVoe52OPqdTF70OE46I/q1uTMFftoE+RiRJprOS80uEoWu9kGEoOlrHkp61AJG2dWtTy68pAwbVfF8GKAdqIQ3zd5oRSdss1GDaeHW3PSWl+wbkVrKoCbzzPGG84lcAf18TZoe0P+6bEXXJ2wTHYJWNGX+SHFnQxcTvVzUnx7q8h+54N+kqw8MXlXoJYnPGJYxKr6/UMofdQiECF1ija8vQQROMMFCk9Rrua+GE37J+ysieFVzbDkUdpeiI0yqYpKMTwc7+CdBIq5slzbPvUBpd/QhrS/FPOul26ZmNY3NeAHbYj0VyDK/KbzfwEgdlUIDoKe+HLRvQhLIdgzlvPAKHpF2V1dB6pL85pgPIMPKRuXbAdzU2kZlm0UPOrOERjJo9CHTnV4Lef/6j8VVbn3+EcVp61z6+MAdbprvG67DqHKgmirmdqnlhcafeG59EMD8lLwmcQSl9aEKAvzOkBov3HJipSUY4tDZIE10JsIC0rnWmXrseOvynJh7vNyCzMg5Nv4ua6KxLs2Tv+4b49tagG8btjqhaD1u5sVW8N3apMgld0CtdQPegSjZv+N2fhFkfwfQG5v1l77j5x+Wj4UDObjWahgH851j9YfWBz9mS5GuLln6Ao7D+6hzNsyf30aYjgdLk5ofuCIDif1usL65gI/pxasDbRKdEJr4jBvCwco2Q6O/pIuMcET/p9iSZ5GPK42mWTaqJtjPuYLnRd7vzRYkPUqUU5q6k968gd4rbDIDsEAtvW9HoKEsicDvB5UXfMejYYxnKbBFrAYYl9dllEvnKKVx9mW+h4U0uY89HzQ==\u003c/div\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;\n\u003c/script\u003e\n","title":"龟虽寿"},{"content":"Table of Contents\n第一关\n第二关\n第三关\n第四关\n第五关\n第六关\n第七关\n第八关\n第九关\n\n修改 user-agent\n\n第十关\n\n\n\n无意间看到，试了一下,结果http://www.fj543.com/hack/\n\n\n第一关\n\n  没什么好说的,查看源码\n\n\n\n  \n\n  \n\n\n\n第二关\n\n  还是查看源码,结果发现\n\nonSubmit=\u0026#34;return chkPassword()\u0026#34;\n\n  Ok,f12进入 console,输入\n\nfunction chkPassword(){\nalert(\u0026#39;adas\u0026#39;);\n}\n\n\n  覆盖原有js\n\n\n第三关\n\n  这关我也没想到，后来百度之，原来是cookie的原因\n\n\n\n  还是进 console\n\ndocument.cookie=\u0026#34;login=yes\u0026#34;\n\n\n第四关\n\n  \n\n  \n\n  看到这里是不是很熟悉，摩尔斯密码,google一下\n  对应的密码就是 iamok\n\n\n第五关\n\n  根据提示,密文为成 YmFzZTY0aXNvaw== 或 ad93c1d102ae60f4\n\n\n\n  第一个很熟悉为base64加密,第二个为md5加密,解密后的密文为\n\n    └──╼ base64 -d\nYmFzZTY0aXNvaw==\n(C-D)base64isok\n\n第六关\n\n  what?这是什么,实在是想不出来,百度一下, 原来\n\npassword = sum(port)\n\n  密码为各数据库port之和\n\npassword = MSSQL(1433)+MySQL(3306)+Oracle(1521) = 6260\n\n第七关\n\n  \n\n  \n\n\n\n\n  很明显,考察的是对图片的处理,但是我不会,不会，会....\n\n\n\n  文本打开,拉到最后面你会发现“爸鼻我们去哪儿”(vim打开乱码,emacs打开还是图片,C-c C-c转换后乱码)\n  feh打开，发现\u0026#34;8b\u0026#34;\n  OK,key应该就是 8bwmqne\n  （待会儿试试将emacs的编码转成windows的）\n\n\n第八关\n\n  社工,百度\n\n\n\n  其实只要右上角，查看作者介绍就能知道\n  吴世昌的弟弟叫吴其昌,网名 fj573\n\n\n第九关\n\n  提示语 ：使用IE 5.43版本的浏览器访问?level=9token可以得到令牌。(Use IE 5.43 version to browse ?level=9token)\n\n\n\n  直接访问 www.fj543.com/hack/?level=9token\n\n\n\n  得到提示:您的浏览器不是IE 5.43版本！(Your browser is not IE 5.43)\n  OK，知道了，这关考察 user-agent\n\n\n修改 user-agent\n\n   f12，关闭按钮旁边 More tools 选择 Network conditions\n   选择IE7,将MSIE 7.0改成MSIE 5.43.\n   注意:直接点击无法复制,选择Nerwork,刷新后随意点一个查看 Headers\n\n\n第十关\n\n  需要下载运行文件，算了","index":1,"permalink":"https://honmaple.me/articles/2016/06/黑客丛林之旅.html","summary":"\n\u003cp\u003e\n无意间看到，试了一下,结果\u003ca href=\"http://www.fj543.com/hack/\"\u003ehttp://www.fj543.com/hack/\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e第一关\u003c/h1\u003e\n\u003cp\u003e\n  没什么好说的,查看源码\n\u003c/p\u003e\n\n\u003cp\u003e\n  \n\u003ca href=\"https://static.honmaple.com/images/2018/08/one_2016-06-21_21-59-19.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2018/08/one_2016-06-21_21-59-19.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e第二关\u003c/h1\u003e\n\u003cp\u003e\n  还是查看源码,结果发现\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eonSubmit=\u0026#34;return chkPassword()\u0026#34;\u003c/pre\u003e\n\u003cp\u003e\n  Ok,f12进入 \u003cb\u003econsole\u003c/b\u003e,输入\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echkPassword\u003c/span\u003e(){\n\u003cspan style=\"color:#a6e22e\"\u003ealert\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;adas\u0026#39;\u003c/span\u003e);\n}\n\u003c/pre\u003e\n\u003cp\u003e\n  覆盖原有js\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-3\"\u003e第三关\u003c/h1\u003e\n\u003cp\u003e\n  这关我也没想到，后来百度之，原来是cookie的原因\n\u003c/p\u003e\n\n\u003cp\u003e\n  还是进 \u003cb\u003econsole...\u003c/b\u003e\u003c/p\u003e","title":"黑客丛林之旅"},{"content":"莫相逢只道人生初见寻归里岂敢天涯且听风雨且听云\n\n\n\n\n\n\n庄周，意逍遥","index":2,"permalink":"https://honmaple.me/articles/2019/04/鱼.html","summary":"\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n莫相逢\u003cbr/\u003e只道人生初见\u003cbr/\u003e寻归里\u003cbr/\u003e岂敢天涯\u003cbr/\u003e且听风雨且听云\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n庄周，意逍遥\n\u003c/p\u003e\n\u003c/div\u003e\n","title":"鱼"},{"content":"Table of Contents\n前言\n实现方式\n\nMarkdown渲染\n查找HTML标签\n替换HTML\n\n结尾\n\n\n前言\n\n   shortcode,直译过来就是 短代码。 使用过 hugo 的人对此也一定有所了解，shortcode 允许用户使用部分关键参数就可以在文章内部插入设置好的HTML模版内容，而不用写大段的HTML代码，比如插入指定视频或者音乐,使用 shortcode 之前需要使用 iframe\n\n\u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34;\n        marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34;\n        width=330 height=86\n        src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id=xxx\u0026amp;auto=0\u0026amp;height=66\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\n\n\n   而使用 shortcode 后就可以只用指定关键的 id 参数\n\n{{\u0026lt;163music xxx\u0026gt;}}\n\n   当网易云音乐的分享代码更新后，可以直接更新 shortcode 代码, 而不是搜索替换每一篇包括该iframe代码的文章, 同时 shortcode 也可以扩展 Markdown 的功能，比如文本的居中，居左，居右\n\n{{\u0026lt;align left\u0026gt;}}\n  文本内容\n  {{\u0026lt;/align\u0026gt;}}\n\n实现方式\n\n   而想要在静态博客中实现 shortcode 功能, 目前有两种方式\n\n\n\n\n 方式一: 修改 Markdown 解析器, 在静态生成器解析文章内容时就可以对 shortcode 进行解析，并将 shortcode 替换成写好的模版，至少，我看到 hugo 就是这么实现的\n\n\n\n 方式二: 如果不想修改 Markdown 解析器，还可以直接修改生成好的 HTML 内容，这种方式实现原理很简单，Markdown允许插入HTML代码, 那么我们就可以直接在文章中写一个\n\n\u0026lt;shortcode _name=\u0026#34;163music\u0026#34; id=\u0026#34;xxx\u0026#34; /\u0026gt;\n\n     然后在现有的 Markdown 解析库解析文章并生成 HTML 后再次对HTML内容进行解析，目前主流语言都有现成的库很方便地解析HTML内容, 下面以 Go 为例\n\n\n\nMarkdown渲染\n\n    比如有一篇文章，我想要添加网易云音乐的某首歌到文章内部，当使用现有的Markdown库对内容进行渲染\n\npackage main\n\nimport (\n    \u0026#34;github.com/russross/blackfriday/v2\u0026#34;\n)\n\nfunc main() {\n    content := `# Hello World\n\u0026lt;shortcode _name=\u0026#34;163music\u0026#34; id=\u0026#34;xxx\u0026#34; /\u0026gt;\nThis is one of my favorite **music**.\n  `\n    d := blackfriday.Run(content)\n    fmt.Println(string(d))\n}\n\n\n    输出结果\n\n\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\n\n\u0026lt;p\u0026gt;\u0026lt;shortcode _name=\u0026#34;163music\u0026#34; id=\u0026#34;xxx\u0026#34; /\u0026gt;\n  This is one of my favorite \u0026lt;strong\u0026gt;music\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt;\n\n查找HTML标签\n\n    可以使用 golang.org/x/net/html 对HTML内容进行解析, 并查找到 shortcode\n\npackage main\n\nimport (\n    \u0026#34;bytes\u0026#34;\n    \u0026#34;fmt\u0026#34;\n    \u0026#34;github.com/russross/blackfriday/v2\u0026#34;\n    \u0026#34;golang.org/x/net/html\u0026#34;\n    \u0026#34;text/template\u0026#34;\n)\n\nfunc main() {\n    // ...\n    var (\n        w bytes.Buffer\n        z = html.NewTokenizer(bytes.NewReader(d))\n    )\n    for {\n        next := z.Next()\n        if next == html.ErrorToken {\n            break\n        }\n\n        token := z.Token()\n        switch next {\n        case html.StartTagToken, html.SelfClosingTagToken:\n            // 找到shortcode标签\n            if token.Data == \u0026#34;shortcode\u0026#34; {\n\n            }\n        }\n        w.WriteString(token.String())\n    }\n    fmt.Println(w.String())\n}\n\n替换HTML\n\n    首先把需要替换的 iframe 转换成模版\n\nreplace := `\u0026lt;iframe\nframeborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34;\nmarginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34;\nwidth=330 height=86\nsrc=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id={{ .id }}\u0026amp;auto=0\u0026amp;height=66\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;`\n\ntmpl, err := template.New(\u0026#34;test\u0026#34;).Parse(replace)\nif err != nil {\n    panic(err)\n}\n\n\n    然后根据标签参数替换原来的HTML\n\n// 获取该标签的参数\nattrs := make(map[string]string)\nfor _, attr := range token.Attr {\n    attrs[attr.Key] = attr.Val\n}\n// 确认是163music\nif attrs[\u0026#34;_name\u0026#34;] == \u0026#34;163music\u0026#34; {\n    // 获取替换的内容\n    var buf bytes.Buffer\n    err := tmpl.Execute(\u0026amp;buf, attrs)\n    if err != nil {\n        panic(err)\n    }\n    w.WriteString(buf.String())\n    continue\n}\n\n\n    最后的输出结果\n\n\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\n\n\u0026lt;p\u0026gt;\u0026lt;iframe\n     frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34;\n     marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34;\n     width=330 height=86\n     src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id=xxx\u0026amp;auto=0\u0026amp;height=66\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\n  This is one of my favorite \u0026lt;strong\u0026gt;music\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt;\n\n结尾\n\n   目前snow的 shortcode 功能就是根据第二种方式实现的，具体可以参考 hooks/shortcode/shortcode.go, 利用此特性甚至还可以实现类似 Hugo 中的 Markdown Render Hook 功能,用于自定义 img, a 等标签","index":3,"permalink":"https://honmaple.me/articles/2023/02/静态博客中的shortcode实现.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e\n   \u003cb\u003eshortcode\u003c/b\u003e,直译过来就是 \u003cb\u003e短代码\u003c/b\u003e。 使用过 \u003cb\u003ehugo\u003c/b\u003e 的人对此也一定有所了解，\u003cb\u003eshortcode\u003c/b\u003e 允许用户使用部分关键参数就可以在文章内部插入设置好的HTML模版内容，而不用写大段的HTML代码，比如插入指定视频或者音乐,使用 \u003cb\u003eshortcode\u003c/b\u003e 之前需要使用 \u003cb\u003eiframe\u003c/b\u003e\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eiframe\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eframeborder\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eborder\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#a6e22e\"\u003emarginwidth\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emarginheight\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0...\u003c/span\u003e\u003c/pre\u003e","title":"静态博客中的shortcode实现"},{"content":"这是一篇加密的文章，你需要输入正确的密码.\n  AGA9WX2cs8REDW6XDmcRlrA3SE6ZUfvEK+vGy75kGx45As102wyNCymLLninE8fmapw9BnZlF3zk2NmCsJlGSzPZ9bMPD5aRIsp1sWRwBAV+b3pTTwSOkS/0IN7pLwGgS7/vh0wZkH+G6eGzVzphAWqd09BRTjQ9rAsLSO502/qBV5874gW3RTIBTx8GKFZN73bGYH+QYXjNtoDDr0iPHaXqVvFtNiCKy9OzJ6OujYiWenNp8K7QnbheJy/Twmrr47PKSC19qSifdF1J6hyZTe3nlIoyhICYpSMvs2rkvi0o8Ner00sFj9Iw2C3Fzo1Ac5mmDxnviAb1yUC8K29RCCvIK6LBjaIsMhAFACFeibTTAd32m1YEjxcDOOVlISrKiRAW6zOHHNdKPQ0FTb3jCKkTlQc4smcqSzu6fadk2+8OtaGHusWauoxjmcGykaqIh+s08mRxUByl+lsxxVfHQ/nmzmY3VFrxmXqLuDFVgX0uifJ/Aan3eMUi7+J2eboK82qQomptCwyJemE8eCagXGgAgA97pLR+iCLNkiS9w4V+b2KZfpdltVSVd8u78fGRUcXyBWBCTESvMlUJjTvoQla57kJPacJwX9InOlQl9q5A0A3V/YI/BygmRkKO7QWi92wh664dHAZeC0jIkA9dIV49Zq8SCBz/TnKu8dqDzLny4JZZNm8Rbv9C8HV1qOGZiZtq13LsLeWEwZq6ShOOO/ShIThDQWjKTT8s+VZRpB/OMEuPGm1Ec8Ifj4frjjKqZSXhW2ga8u8VWQbLaoftuqDPqOfsQGN7SxjRCqEHXV1sJuKRM+m+8rJal+G+xE474xf7wrnx2pA5cFJ+lHfsCOWc8LP0IMlzbT1IjTTfqz+repFLAqz2oHiBvLb88fu4e9kJmNPDRtrwEPm/i0mXkruF8DvkV2F3KIFt2wCW4MzWlNv3RJF9rpvO+rNuGu+mNBJTLyQhvO2KqNwIVlh3xTKGS1qrw+YE7hsYxmLuTU+L3+rQamMKCl5B9QJ6/urxvbrsTk9C2B9wwcvWKecHBvxnJ3KHAZiMF+OkGUjH8VNVo9rilFDwJlLXFah2zIC44kmyWvUX2gjRjeGrZewIzRFQSCXLG1xPiIGW2k5b077t9gLYR3MlAD7eUzdhjwWKhWdVJL/BWAmneZSqgOqsFFdevR0vKwy+rNhS5AAvgPBpkZ/aI2WMqEwkJtdhYBoHC1yGuWCqy+aLTByPP0jw0UzebuG7GUcnTGRdtbFCVj3H5OZ5N/UVQCR+rDoBsai+1vJl0fYGj8+ILMWEM3HNxloCFKAD2bU1dvSX5xfGZSnDTrhNpYUVjtYwf2ROxAb61MNNkDoAfOis6s3dObpKE4h2mlL0OXCVndMPJ2vQ7Xgv4wJJG3i0Vpzb+HkTxUy+3HU8Pd71cmHG88ETrVWRzfIKaNkLuEzHGHNh2tX3HItJsaoaiMXTbTzq3V2UZxetRvxCzbzdbgaAXOaZbwPMXgNDbLUqsA+LjsNwxycoAnT2D7BVbfGpJPz37kWNd3spncxhll7S5jDaEpFLU6R5uJr7SfqV2Em6mpcg+h1I6KsMmOztE/FJADl1jhQ1/Sm3CxBQWfaveSO5Io4kUO438v/0rmijge+F1n4fo9fj53FY7TEL/xgOBKOL1jAQE2eP1asVKOLw/axxSmNko/fETE42nAT5qbEQHQwgvwp1kYK/8yIDr3wMPmynSnvZhtuV91dumwOS3MxvXGeykQav2MXJkHqdE3i8cmfCXVA1SlV4yg3QNOSy0IpQv/aAYnmhnqWtQgDN+e45AFTprJK3yiPHM83OIihlFJbHDPOFN4JEkPxvJNpbKUNwCqpOV2N22cgUWb9aJb8vZRAl2LDvyzeFmMQ29dgNHZdDALdOaJAcSwlDfP4KLWjaMz/nBounoWaTLBDQv2Ll7W/IZzV+MbId4ztV/B5PuKnYcpbwnm9gg66WOTgmCn73cxCrqGkpCi6dOMfMiWcUuO5pYp6wrUltBouHxzKAU065FLgMB1gioIPnEtQmcVoIHMFRfaL703+tq4jb6Jn72l25Uuej5t/65GvEzRBuwBgO5Qg21Hr810kZp8jzeEqlH8dQYFV5n3xcuWfFKTcRrzfPyu7+x6xmncmA4ZCabRDYSoLUJG+QQrRgc+Sc5uhFGz9V9LPQw9X+vVi4TWVoSUafRxhn6oOCCcSVJ8pAWBDkF0J2XMlCDEwJGpvGcGMPYZ4BLHpf3W6u47pzo1OmS/u+M4oBAy+/teJpHy7JRtcdEDqMgi3w5YY+IkHv39t9iQq6dhbL0P1h67U4XJm1iCTua9t6jAv7yiSyYS/rUdunSFO25TWVvNQO0DK0hZl9sTZpK14gCk5WlLQqbThS9frIpYVfRGgTG479RMW8c3cIt8FN4w06SpwYcFJzwez4ryADeDLph7pL6WiHj2v9eQ4a0shVc62OQhBbC3BSdGDN9DPeMvIWcs3ocqw0tAcZIJTcoE0+X9/iiYKxmu48z8PjdRnf2fUoj3Bvfc/JVnoTrirHT5o83X24/kcye7LR48///OxapMJ8fY/ec5NZ/nc0+EZ52mwkdTkJUFL3JE2sJvIS6hdRSBp2ZVjO435jiqtd78+t3y4FhOfa+TzrMWcRMofbKOEoKcwsLoJBXKndBvymjB6fJ/8y5i2HvTWASu0iDe+eRh22sRYzKPt/EvuQmqVmdDGekXFY7VpMetkpoyeb5+NllSI37rlAl2/3/SuGaLWLM/7vR1/Nj1WpSNZb/gYaRCq1oH5EcMYFtWSHTW/6x1NLyNg/A2dxArpDcA5aAwjDLE4JjlQfI58NcH34Lw6XASjzj5TODYxcpFz1bF4XVEFnAqX4FRpoqR1fP9d+OzkkXhenXbk8oiEEzhrI4i0Y8Q+weENqK7S5piC3tY2dQGvnJZpToQ8w79FuS/3GtnB30/+NLKu1sKstDXJS8VUka20Y6mRgT9UARGxzwhCs3yzhaYpkk7oHYfkV/0kRTXC0e0qmbAtpx+EhHR3Ynr0dIR8h+ED2JXQQstWfc+HreSKDeMuNUDz3N686IU3EkPK3gT29OfBQcgKBstNoQ7v3rE4Y7Ld1GuL/Lg39CcGXNn34mNL3PSin4vxG5jFP4f+piQ3t1toMQZpQBj50tqbSSi4YuR8z/s4EMaMxv3EIH3brBf589Ac414s4RhdcvJ9SfnrPKvzbFboB/I26gEJ+swivnarpX++P7BnynmYjtQGJitgb6jD0pOb+F5DyOC4S8MMAc70d+qdYY9Dr0FpHmiKKP3y3U7fcoFrLctjnpMqZBbRLqzremIs3rhiB9a15c+Yx2NZLIyQ7W1vuVPsrTCLmk6EuySoQP8qpYBhq9ChekI/THkGTHV5xeYhuvGvdUCduRjrgmwo1DIA3dwXmQ074sDV1UDcSkwK7HvnaxN1cpjqLSJWIPH3ESuHxLxckJ6tT9321LgTXsZTFWbA/f0SxjzBaBBmLDyaCOGcReZaPvaPb1M7d6uEn36zjn+IIueFh5J0kNFLkoYnwPeBbzJzDrq1j+NRiUcR1BrIhz74hgVXzaJ0uhXglc3gCFi5t4HrkgLi1gXc860VKFuPeDRHrF3sr2z+gCmSDUQ1yMi4=\n\n\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;","index":4,"permalink":"https://honmaple.me/articles/2015/06/随便写写——日本.html","summary":"\u003cdiv class=\"encrypt-container entry-encrypt\"\u003e\n  \u003cdiv class=\"encrypt-form entry-form\"\u003e\n    \u003cinput type=\"password\" class=\"encrypt-password\" placeholder=\"请输入密码\" /\u003e\n    \u003ci class=\"fa fa-key encrypt-button\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\u003cdiv class=\"encrypt-desc\"\u003e这是一篇加密的文章，你需要输入正确的密码.\u003c/div\u003e\n  \u003cdiv class=\"encrypt-content\" style=\"display:none;\"\u003eAGA9WX2cs8REDW6XDmcRlrA3SE6ZUfvEK+vGy75kGx45As102wyNCymLLninE8fmapw9BnZlF3zk2NmCsJlGSzPZ9bMPD5aRIsp1sWRwBAV+b3pTTwSOkS/0IN7pLwGgS7/vh0wZkH+G6eGzVzphAWqd09BRTjQ9rAsLSO502/qBV5874gW3RTIBTx8GKFZN73bGYH+QYXjNtoDDr0iPHaXqVvFtNiCKy9OzJ6OujYiWenNp8K7QnbheJy/Twmrr47PKSC19qSifdF1J6hyZTe3nlIoyhICYpSMvs2rkvi0o8Ner00sFj9Iw2C3Fzo1Ac5mmDxnviAb1yUC8K29RCCvIK6LBjaIsMhAFACFeibTTAd32m1YEjxcDOOVlISrKiRAW6zOHHNdKPQ0FTb3jCKkTlQc4smcqSzu6fadk2+8OtaGHusWauoxjmcGykaqIh+s08mRxUByl+lsxxVfHQ/nmzmY3VFrxmXqLuDFVgX0uifJ/Aan3eMUi7+J2eboK82qQomptCwyJemE8eCagXGgAgA97pLR+iCLNkiS9w4V+b2KZfpdltVSVd8u78fGRUcXyBWBCTESvMlUJjTvoQla57kJPacJwX9InOlQl9q5A0A3V/YI/BygmRkKO7QWi92wh664dHAZeC0jIkA9dIV49Zq8SCBz/TnKu8dqDzLny4JZZNm8Rbv9C8HV1qOGZiZtq13LsLeWEwZq6ShOOO/ShIThDQWjKTT8s+VZRpB/OMEuPGm1Ec8Ifj4frjjKqZSXhW2ga8u8VWQbLaoftuqDPqOfsQGN7SxjRCqEHXV1sJuKRM+m+8rJal+G+xE474xf7wrnx2pA5cFJ+lHfsCOWc8LP0IMlzbT1IjTTfqz+repFLAqz2oHiBvLb88fu4e9kJmNPDRtrwEPm/i0mXkruF8DvkV2F3KIFt2wCW4MzWlNv3RJF9rpvO+rNuGu+mNBJTLyQhvO2KqNwIVlh3xTKGS1qrw+YE7hsYxmLuTU+L3+rQamMKCl5B9QJ6/urxvbrsTk9C2B9wwcvWKecHBvxnJ3KHAZiMF+OkGUjH8VNVo9rilFDwJlLXFah2zIC44kmyWvUX2gjRjeGrZewIzRFQSCXLG1xPiIGW2k5b077t9gLYR3MlAD7eUzdhjwWKhWdVJL/BWAmneZSqgOqsFFdevR0vKwy+rNhS5AAvgPBpkZ/aI2WMqEwkJtdhYBoHC1yGuWCqy+aLTByPP0jw0UzebuG7GUcnTGRdtbFCVj3H5OZ5N/UVQCR+rDoBsai+1vJl0fYGj8+ILMWEM3HNxloCFKAD2bU1dvSX5xfGZSnDTrhNpYUVjtYwf2ROxAb61MNNkDoAfOis6s3dObpKE4h2mlL0OXCVndMPJ2vQ7Xgv4wJJG3i0Vpzb+HkTxUy+3HU8Pd71cmHG88ETrVWRzfIKaNkLuEzHGHNh2tX3HItJsaoaiMXTbTzq3V2UZxetRvxCzbzdbgaAXOaZbwPMXgNDbLUqsA+LjsNwxycoAnT2D7BVbfGpJPz37kWNd3spqSnj5ol+Z7Asvktlg5Ofgg==\u003c/div\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;\n\u003c/script\u003e\n","title":"随便写写——日本"},{"content":"作为中国人，不应该死守文化，而是应该发展文化，否则就像今天看的电影，安禄山，龙脉等中国元素却被运用在外国电影中，而这，并不是文化的相互交融。大家想想我们中国的端午节，为什么国际社会就相信是源自棒子？除了棒子的据“理”力争（不要脸）外还有什么，是它一直在发展端午文化，一直发展到提起端午节自然而然地就想起它这个国家。而我们中国呢？就算对端午节的真正来历心知肚明，又能怎样？难道全世界地喊端午节是中国的，谁信？如果再不发展那些即将“消失”的文化，那么将来全世界都有中国文化的身影而全世界都没有人记得这些精粹来自中国。\n\n\n\n拥有五千年古老且优秀历史的中华儿女们，在历史的长河中我们已经失去了太多太多优秀的文化，而大多数是由于战乱，这些我们无法阻止，但今天，生活在和平年代的今天，难道我们这些所谓的中华儿女就忍心看着自己的文化流向他国？就忍心中华祖先们经历五千年沉淀的文化就此消逝？不，中华民族的灵魂告诉我们，中华儿女不会让祖先的英灵埋没，中华儿女不会让祖先的精神消逝，中华儿女更不会白白地让祖先的文化流向他国。\n\n\n\n发展文化已经刻不容缓","index":5,"permalink":"https://honmaple.me/articles/2013/03/随便写写——文化.html","summary":"\n\u003cp\u003e\n作为中国人，不应该死守文化，而是应该发展文化，否则就像今天看的电影，安禄山，龙脉等中国元素却被运用在外国电影中，而这，并不是文化的相互交融。大家想想我们中国的端午节，为什么国际社会就相信是源自棒子？除了棒子的据“理”力争（不要脸）外还有什么，是它一直在发展端午文化，一直发展到提起端午节自然而然地就想起它这个国家。而我们中国呢？就算对端午节的真正来历心知肚明，又能怎样？难道全世界地喊端午节是中国的，谁信？如果再不发展那些即将“消失”的文化，那么将来全世界都有中国文化的身影而全世界都没有人记得这些精粹来自中国。\n\u003c/p\u003e\n\n\u003cp\u003e\n拥有五千年古老且优秀历史的中华儿女们，在历史的长河中我们已经失去了太多太多优秀的文化，而大多数是由于战乱，这些我们无法阻止，但今天，生活在和平年代的今天，难道我们这些所谓的中华儿女就忍心看着自己的文化流向他国？就忍心中华祖先们经历五千年沉淀的文化就此消逝？不，中华民族的灵魂告诉我们...\u003c/p\u003e","title":"随便写写——文化"},{"content":"Table of Contents\n本地创建一个测试目录\n客户端文件同步里添加该目录\n修改文件并等待文件同步完成\n\n\n\n前不久 618 入手了一个绿联 DX4600 Pro，差不多用了快一个月，具体吐槽的点就不说了，毕竟平时 Docker 用的比较多，自带的应用只能说能用，昨天测试了一下文件同步和时间机器的功能，却无意中发现了一个重大BUG\n\n\n\n\n绿联的文件同步会修改本地源文件的权限，本地文件原来是 644 的权限，使用文件同步会被直接修改成 755，还好我只测试了一个目录，而且这个目录使用了Git进行管理，可以快速恢复，如果是整机备份并且没有用Git或者其它版本系统进行管理的话，我只能说，你们有福了，一个文件一个文件地恢复吧\n\n\n\n\n复现步骤：\n\n\n本地创建一个测试目录\n\n   \n\n  \n\n\n客户端文件同步里添加该目录\n\n   \n\n  \n\n   \n\n  \n\n\n\n\n   设置完成后可以看到原始目录下会多出几个目录，这个不用管\n   \n\n  \n\n\n修改文件并等待文件同步完成\n\n   \n\n  \n\n\n\n\n   这时会发现无论修改多少次，无论是手动刷新还是自动同步，文件权限都不会被修改\n\n\n\n   但是，如果这时候打开绿联云客户端自带的文件管理，并打开同步的目录(不用打开文件，只打开目录)，然后手动刷新同步，或者等待自动同步完成，就会发现本地文件的权限已经被更改\n   \n\n  \n\n   \n\n  \n\n\n\n\n   这么严重的BUG，我觉得真的不应该出现，如果已经使用了文件同步的用户，千万千万不要打开绿联云文件管理里的同步目录\n\n\n\n   我目前使用的是MacOS v4.3.0 版本，其它系统暂时不清楚是否有同样的问题","index":6,"permalink":"https://honmaple.me/articles/2023/06/重大BUG——绿联NAS用户暂时不要使用文件同步功能.html","summary":"\n\u003cp\u003e\n前不久 \u003cb\u003e618\u003c/b\u003e 入手了一个\u003cb\u003e绿联 DX4600 Pro\u003c/b\u003e，差不多用了快一个月，具体吐槽的点就不说了，毕竟平时 \u003cb\u003eDocker\u003c/b\u003e 用的比较多，自带的应用只能说能用，昨天测试了一下文件同步和时间机器的功能，却无意中发现了一个\u003cb\u003e重大BUG\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n绿联的文件同步会修改本地源文件的权限，本地文件原来是 \u003cb\u003e644\u003c/b\u003e 的权限，使用文件同步会被直接修改成 \u003cb\u003e755\u003c/b\u003e，还好我只测试了一个目录，而且这个目录使用了Git进行管理，可以快速恢复，如果是整机备份并且没有用Git或者其它版本系统进行管理的话，我只能说，你们有福了，一个文件一个文件地恢复吧\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003cb\u003e复现步骤：\u003c/b\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003e本地创建一个测试目录\u003c/h2\u003e\n\u003cp\u003e\n   \n\u003ca href=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-01.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-01.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ch2 id=\"heading-2\"\u003e客户端文件同步里添加该目录\u003c/h2\u003e\n\u003cp\u003e\n   \n\u003ca href=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-02.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-02.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n   \n\u003ca href=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-03.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-03.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   设置完成后可以看到原始目录下会多出几个目录，这个不用管\n   \n\u003ca href=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-04.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-04.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ch2 id=\"heading-3\"\u003e修改文件并等待文件同步完成\u003c/h2\u003e\n\u003cp\u003e\n   \n\u003ca href=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-05.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/06/DX4600Pro-filesync-bug-05.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   这时会发现\u003cb\u003e无论修改多少次...\u003c/b\u003e\u003c/p\u003e","title":"重大BUG——绿联NAS用户暂时不要使用文件同步功能"},{"content":"Table of Contents\n如何使用?\n长句翻译\n离线翻译\n多引擎翻译\n翻译原理\n\n\n\n\n我之前一直都在使用 youdao-dictionary 这个插件，也没有配置过秘钥，虽然不配置接口会有使用次数的限制(反正是每天1000次还是多少来着，有些忘了)，但是我平时使用次数不多，所以也不会达到使用限制，不管是单词翻译还是长句翻译都很不错。但最近几个月 youdao-dictionary 如果不配置私钥，处于一个完全不可用的状态。\n\n\n\n我曾寻找过它的替代品，并且使用过一段时间的 fanyi.el，不可否认，这同样是一个非常不错的插件，不管是UI还是功能，但是，可能是因为 fanyi.el 使用异步请求的原因，偶尔会出现一些意想不到的报错，更重要的是它不支持长句翻译和离线翻译。\n\n\n\n考虑再三，还是决定自己造一个轮子，主要功能就按照我之前使用 youdao-dictionary 的习惯:\n\n\n\n\n 翻译光标下的单词，以及选中的单词或句子\n\n\n\n 翻译的内容输出到 echoarea 或者新的 buffer，方便复制\n\n\n\n 增加一个离线翻译的功能，并且可以不依赖外部工具\n\n\n\n\n\n基于上述，所以有了这个新的轮子 maple-translate\n\n\n如何使用?\n\n   可以使用 quelpa 安装\n\n(use-package maple-translate\n  :quelpa (:fetcher github :repo \u0026#34;honmaple/emacs-maple-translate\u0026#34;)\n  :commands (maple-translate maple-translate+))\n\n\n   或者手动下载仓库\n\ngit clone https://github.com/honmaple/emacs-maple-translate ~/.emacs.d/site-lisp/maple-translate\n\n\n   然后进行配置\n\n(use-package maple-translate\n  :ensure nil\n  :commands (maple-translate maple-translate+))\n\n长句翻译\n\n   目前长句翻译仅支持 youdao, 可以修改翻译引擎\n\n(setq maple-translate-engine \u0026#39;youdao)\n\n离线翻译\n\n   我个人平时在使用 Emacs 时不太习惯依赖外部的工具，比如我之前就写过一个markdown，org-mode实时预览插件 maple-preview，它区别于其它插件，并不会依赖外部的工具，比如 Pandoc，甚至不会生出任何文件到我的本地环境\n\n\n\n   同样的，我也不希望使用离线翻译时还要依赖外部诸如 sdcv，goldendict 等工具，我想要直接使用 Elisp 来对词典进行解析。所幸前人栽树，后人乘凉，已经有了一个纯 Elisp 实现的解析器 www.emacswiki.org/emacs/stardict.el\n\n\n\n   我所需要做的，就是下载需要的词典到本地(这个步骤是必须的，即使我不喜欢)，然后设置\n\n;; 离线词典所在的目录\n(setq maple-translate-sdcv-dir \u0026#34;~/.stardict/dicts\u0026#34;)\n;; 所使用的词典 -\u0026gt; (词典名词 . 词典具体目录)\n(setq maple-translate-sdcv-dicts\n      \u0026#39;((\u0026#34;lazyworm-ec\u0026#34; . \u0026#34;stardict-lazyworm-ec-2.4.2\u0026#34;)\n        (\u0026#34;lazyworm-ce\u0026#34; . \u0026#34;stardict-lazyworm-ce-2.4.2\u0026#34;)))\n\n\n   最后修改翻译引擎\n\n(setq maple-translate-engine \u0026#39;sdcv)\n\n   注意：第一次使用离线翻译需要等待词典初始化，这会需要耗费一段时间，后面就快了\n\n\n多引擎翻译\n\n   maple-translate 同样支持多引擎，需要修改设置为一个列表\n\n(setq maple-translate-engine \u0026#39;(youdao dictcn sdcv))\n\n翻译原理\n\n   目前支持的几个引擎: youdao、dictcn、iciba、bing、sdcv。除 sdcv 外，其它几个都依赖于网络，maple-translate 可以看作是一个爬虫，通过爬取翻译页面，然后使用Emacs内置的 dom 对HTML进行解析，最后获取到想要的内容。基于此，我还写了一个超简单的 类xpath 解析器\n\n(defun maple-translate-dom-by-key(dom key)\n  (let (func num)\n    (when (string-match \u0026#34;\\\\[\\\\([0-9]+\\\\)\\\\]\u0026#34; key)\n      (setq num (match-string 1 key))\n      (setq key (substring key 0 (- (length key) (length num) 2))))\n    (cond ((string-prefix-p \u0026#34;.\u0026#34; key)\n           (setq key (substring key 1) func \u0026#39;dom-by-class))\n          ((string-prefix-p \u0026#34;#\u0026#34; key)\n           (setq key (substring key 1) func \u0026#39;dom-by-id))\n          ((string-prefix-p \u0026#34;*\u0026#34; key)\n           (setq func (lambda(p _) (dom-children p))))\n          (t (setq key (intern key) func \u0026#39;dom-by-tag)))\n    (if (null num)\n        (funcall func dom key)\n      (nth (string-to-number num) (funcall func dom key)))))\n\n(defun maple-translate-dom-find(dom xpath)\n  (cl-loop for key in (string-split (string-trim xpath) \u0026#34;/\u0026#34;)\n           if (consp dom)\n           do (setq dom (maple-translate-dom-by-key dom key))\n           else return dom)\n  dom)\n\n\n   这样，我就能通过一些简单的语法来定位想要的内容，比如在有道里面使用\n\n(maple-translate-dom-find dom \u0026#34;.simple dict-module/.trans-container/.word-exp\u0026#34;)\n\n   获取到 class 名称为 simple dict-module 下的 class 名称为 trans-container 下的 class 名称为 word-exp 的所有元素, 也就是基本释义","index":7,"permalink":"https://honmaple.me/articles/2023/11/zhong-fu-zao-lun-zi-zhi-emacsfan-yi-cha-jian-maple-translate.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n我之前一直都在使用 \u003ca href=\"https://github.com/xuchunyang/youdao-dictionary.el\"\u003eyoudao-dictionary\u003c/a\u003e 这个插件，也没有配置过秘钥，虽然不配置接口会有使用次数的限制(反正是每天1000次还是多少来着，有些忘了)，但是我平时使用次数不多，所以也不会达到使用限制，不管是单词翻译还是长句翻译都很不错。但最近几个月 \u003cb\u003eyoudao-dictionary\u003c/b\u003e 如果不配置私钥，处于一个完全不可用的状态。\n\u003c/p\u003e\n\n\u003cp\u003e\n我曾寻找过它的替代品，并且使用过一段时间的 \u003ca href=\"https://github.com/condy0919/fanyi.el\"\u003efanyi.el\u003c/a\u003e，不可否认，这同样是一个非常不错的插件，不管是UI还是功能，但是，可能是因为 \u003cb\u003efanyi.el\u003c/b\u003e 使用异步请求的原因，偶尔会出现一些意想不到的报错，更重要的是它不支持长句翻译和离线翻译。\n\u003c/p\u003e\n\n\u003cp\u003e\n考虑再三，还是决定自己造一个轮子，主要功能就按照我之前使用 \u003cb\u003eyoudao-dictionary\u003c/b\u003e 的习惯...\u003c/p\u003e\u003c/blockquote\u003e","title":"重复造轮子之Emacs翻译插件maple-translate"},{"content":"这里有座山那里有座山你在那里我在这里\n\n\n\n\n\n\n我们都有着自己的骄傲谁都不想为谁低头这里有座山那里有座山至少我还可以远远的看到你你在那里你在哪里而我一直都在这里一直都在这里","index":8,"permalink":"https://honmaple.me/articles/2017/09/那里有座山.html","summary":"\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/pic/mountain.jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/mountain.jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n这里有座山\u003cbr/\u003e那里有座山\u003cbr/\u003e你在那里\u003cbr/\u003e我在这里\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n我们都有着自己的骄傲\u003cbr/\u003e谁都不想为谁低头\u003cbr/\u003e\u003cbr/\u003e这里有座山\u003cbr/\u003e那里有座山\u003cbr/\u003e至少\u003cbr/\u003e我还可以远远的看到你\u003cbr/\u003e\u003cbr/\u003e你在那里\u003cbr/\u003e你在哪里\u003cbr/\u003e而我\u003cbr/\u003e一直都在这里\u003cbr/\u003e\u003cbr/\u003e一直都在这里\n\u003c/p\u003e\n\u003c/div\u003e","title":"那里有座山"},{"content":"其实世界上本没有试，考得人多了，也便成了试\n\n\n\n\n 喝自己的水，让别人喝酒去吧！\n\n\n\n\n 春游只是一场旅行，不在乎目的地（呈贡新校区）在乎的只是周末的作业和做作业的心情，让作业去旅行…\n\n\n\n\n 忘记或是失忆…都是一场美丽\n\n\n\n\n 黑夜如此短暂，仅在闭眼睁眼之间，却不知黑暗之中，已有人迷失方向，正在苦苦寻觅黎明前的光亮\n\n\n\n\n 人生总有欢乐，亦有痛苦，我们本是为了活着而活着，活着，才有希望，死亡，或许能够躲避痛苦，但也将永远长眠于墓地，无法品味人生的酸甜苦辣\n\n\n\n\n 问君能有几多愁，恰似一江春水向东流；问君能有几多愁，恰似一群太监上青楼；问君能有几多愁，恰似一代天骄热泪流 ；问君能有几多愁，恰似三中作业多如牛。作业多，愁啊！\n\n\n\n\n 对内宣传实力如虎，对外抗议胆小如鼠\n\n\n\n\n 天朗、气清、月明、人中：夜迹…血月\n\n\n\n\n 众人皆白，唯我独黑\n\n\n\n\n 众人皆醉，唯我独醒\n\n\n\n\n 战争中出英雄，和平中出贪官，不在战争中爆发，就在和平中灭亡\n\n\n\n\n 人生就像是在走一条很长很长的路，两只脚唯有不断超越对方，才能前进；两只脚不断躲避对方，只能后退\n\n\n\n\n 生命如鸡肋，食之无味，弃之可惜\n\n\n\n\n 拎起屠刀，让佛祖说去吧\n\n\n\n\n 山脚有雨山无雨，眼中有泪眼无泪。山顶无雨山有雨，心头无泪心有泪 -- 题目《心雨》\n\n\n\n\n 世界没有真正意义上的阴天，只有被乌云遮住的蓝天\n\n\n\n\n 風中无叶楓中叶，铃中无音林中音。\n\n\n\n\n 冬天到了，春天还早吗？春天来了，冬天还不走吗？\n\n\n\n\n 风中无叶枫中叶，磷中无龙林中龙\n\n\n\n\n 战争中出英雄，战争中更出汉奸\n\n\n\n\n 夜观风象起，星河四海一。八方欲归队，人道几时回？\n\n\n\n\n 人生何处不逢君，天蓝海自清。\n\n\n\n\n 我本将心向光明，奈何光明不待人：朝朝窗帘起，时时四海一。浮云遮望眼，天道似无心。梦醒君莫问，谁言伤心泪。帘外窗更明，只是在人间。\n\n\n\n\n 无情之路有情惘，有情之苦无情殇\n\n\n\n\n 无情之路无情殇，有情之苦有情惘。\n\n\n\n\n 两袖清风拂黄泉，半缕微光照奈何。\n\n\n\n\n 今夜无过后月明，是故还情总相生。\n\n\n\n\n 夜很美，月很美。有夜而无月，有月而无夜，前生有夜而后生无月，后生有月而前生无夜。有夜何月，有月何夜，夜月何存！\n\n\n\n\n 城市的喧嚣渐渐影响着森林的寂静，叨扰着森林里的生物。\n\n\n\n\n 天道轮回为权，人道轮回为忍，修罗道轮回为无，饿鬼道轮回为贪，畜生道轮回为邪，地狱道轮回为苦\n\n\n\n\n 大地一摇，四川跌倒全国扶;天空三怒，云南渴死无人问\n\n\n\n\n 其天坚若此，其心不可为，其民坚若此，有道者何谁？\n\n\n\n\n 世人皆知吾为汉唐人，然焉知宋乃吾心之所向者也，心之所向，道之所依，人之所为，根之所存。\n\n\n\n\n 今朝有酒今朝醉，今夜有泪今夜流。\n\n\n\n\n 天不再蓝，海不再清，即使没有窗帘的遮挡，光明也将隐于天岸\n\n\n\n\n 夜游梦醒不知路，寻问琴声行何处\n\n\n\n\n 我看到了希望，却隐藏于黑暗，我看到了曙光，却消失在彼岸。\n\n\n\n\n 所谓天，为之天，所谓人，为之人。\n\n\n\n\n 天不蓝，海不深，心不静，脑不清，手不稳，愤不平\n\n\n\n\n 刀已折，人已弯，魂已断……\n\n\n\n\n 你已经忘记我是谁，我已经忘记你是谁，你已经忘记你是谁，我已经忘记我是谁\n\n\n\n\n 今夜梦醒君莫问，明月当空，何日返故乡？昨日忆兮难言语，为此，时时到天明。\n\n\n\n\n 人生似无意，落花流水，通向天梯。 梦想终成空，梦醒梦落，开往地狱。\n\n\n\n\n 无迟疑为无过，无过汝云定错，定错无外分寸，分寸识为务心\n\n\n\n\n 风儿总在帮助蓝天反抗窗帘的遮挡好让阳光照耀每个人的心房风儿反抗了窗帘的遮挡却无法反抗人类躲避阳光的欲望\n\n\n\n\n 何民清理近天零，轻盈湖畔汝为饮\n\n\n\n\n 没有阳光的日子里，我的身体变得虚弱不堪，即使内心黑暗，也阻挡不了我享受阳光的欲望。\n\n\n\n\n 云分，等雨，云聚，临雨，云淡，不见雨\n\n\n\n\n 雨还是那雨，雷还是那雷，只是不同的时间，不同的地点，没有泥土的芳香，没有朦胧的山影，更没有雷雨中畅快的奔跑，有的只是这颗心，经历了沧海桑田，阻隔了天涯海角。\n\n\n\n\n 伤人者，人恒伤之;杀人者，得不偿失。\n\n\n\n\n 一出门，就是鸟叫蝉躁蛙鸣，这是家乡的声音，一出门，便是晴空万里，蓝天高挂，这是家乡的景象，一出门，便是泥土的芳香，这是家乡的味道……\n\n\n\n\n 人生就如这月亮，即使没有乌云白云的遮挡，也总是这般模糊不清。\n\n\n\n\n 若相遇，需无意，若有意，何时遇？凭天意。\n\n\n\n\n 爬山爬山，一爬便是山，不爬也是山，爬山不是山，爬山还是山。\n\n\n\n\n 医者老矣，尚医心否？\n\n\n\n\n 空即是色，色即是空，空无一色，色无一空，空即是空，色即是色，空空色色，岂乎我哉。\n\n\n\n\n 人生多梦，光明泪，夜自多情，友为罪。\n\n\n\n\n 醉池轻舞种欢笑，怨柳飘飞祈逍遥。酒酣闻雨不知泪，梦醒晓月痕将退。\n\n\n\n\n 醉问天涯何处留，天变，无明月，笑看红尘柳。拂风晓月众芳树，无觅处，寻归路，墨中归宿，问谁墓？\n\n\n\n\n 山风归来，抚柳掩面朝阳好，黯然离去，仰天长叹落日殇。\n\n\n\n\n 拂晓闻雨心管弦，日出江山难忘言。天上人间寻何处，雨过天晴有蓝天。\n\n\n\n\n 天若有情天亦老，少不更事，何处无芳草\n\n\n\n\n 时间，为谁而成长，又为谁而孤单……,更为谁而悲伤\n\n\n\n\n 酒不醉人人自醉，夜不迷人人自迷，落花无情，流水无意……\n\n\n\n\n 他爱她，她爱他，原来不是她，原来不是他\n\n\n\n\n 雨中漫步行，夜深無人听。悄然歸故裡，卧龍不知情。\n\n\n\n\n 月光墓，塞上霜，黑夜明，杜康殤……\n\n\n\n\n 原来错过了便真的是错过了，他爱她，她爱他，原来不是他，原来不是她\n\n\n\n\n 黑暗中前行，却不知，那是永远的黑夜；光明中静止，却不知，那是短暂的白昼……\n\n\n\n\n 寻路不问路，追梦不留梦。爱恨一念间，相失一片天。 我是寻路者，却不是问路人！ 我是追梦者，却不是留梦人！\n\n\n\n\n 夜尽天明，何人眠，悔不当初，竟惹柳树，望断天涯无觅路，奈何自掘坟墓\n\n\n\n\n 静流风动谁能狂，杀心渐起染风云，封欲离人平如漠，断袖为仇似生袍，道望无涯天明云，剑芒一指斩红尘，刀横黄河断流水，心系天下有奈何。\n\n\n\n\n 大漠孤烟无边关，地上重楼忘记人，天涯海角难磨灭，夜迹血月(万千奴隶)怎奈何\n\n\n\n\n 星空太美，手机拍不了也放不下，只能放在记忆里，看不清也摸不着，最后只能慢慢流逝，留不了也抓不到\n\n\n\n\n 焚舟破釜天，唯命弃我岸上前，惘顾神州情碎，山水一念，勿镜天下红尘，在人间","index":9,"permalink":"https://honmaple.me/articles/2017/05/那些年我们一起写的诗.html","summary":"\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 其实世界上本没有试，考得人多了，也便成了试\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 喝自己的水，让别人喝酒去吧！\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 春游只是一场旅行，不在乎目的地（呈贡新校区）在乎的只是周末的作业和做作业的心情，让作业去旅行…\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 忘记或是失忆…都是一场美丽\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 黑夜如此短暂，仅在闭眼睁眼之间，却不知黑暗之中，已有人迷失方向，正在苦苦寻觅黎明前的光亮\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 人生总有欢乐，亦有痛苦，我们本是为了活着而活着，活着，才有希望，死亡，或许能够躲避痛苦，但也将永远长眠于墓地，无法品味人生的酸甜苦辣\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 问君能有几多愁，恰似一江春水向东流；问君能有几多愁，恰似一群太监上青楼；问君能有几多愁，恰似一代天骄热泪流 ；问君能有几多愁，恰似三中作业多如牛。作业多，愁啊...\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e","title":"那些年我们一起写的诗"},{"content":"第一堂课：\n\n上课时，我放了一个屁——很普通的屁。既不很臭，当然也绝对不香。\n可怕的是，教授正在讲辩证法。\n“请你自己对这个屁作一下判断，”教授说，“它好还是不好？”\n我只得说：“不好。”\n“错了，”教授说，“任何事物都有矛盾组成，有它不好的一面，肯定有它好的一面。”\n“那么说它好也不对了？”我问。\n“当然。”教授说。\n“它既好又不好。”\n“错了。你只看到矛盾双方对立斗争的一面，没有看到他们统一的一面。”\n我只好认真看待这个严肃的问题，仔细想了想说：“这个屁既好又不好，但不好的一面是主要的，处于主导地位。”\n“错了。你是用静止的观点看问题。矛盾的双方会相互转换，今天处于主导地位一面，明天一定处于次要地位。”\n“你是说明天全人类会为了我的这个屁欢呼雀跃吗？”\n“不尽如此，但不能否认这种发展趋势”\n我愣了好大一会儿，只得硬着头皮说：“我的屁既好又不好，既不好又好。今天可能不好，明天一定会好。今天可能很好，明天也许会不好.”\n教授听得直摇头，说：“这是彻底的怀疑论，不是辩证法的观点。”\n就这样，仅仅因为放了一个屁，我就成了一个怀疑论者。\n教授接着讲课：“辩证法的威力不仅在于能够轻而易举地驳斥任何观点，而且他能够轻易地为任何观点找到理论根据。”\n“可是我的屁就没有任何根据。”我抗议道。\n“那是因为你没有找到，其实很简单，它是你肚子里矛盾双方对立统一的必然结果。”\n我哑口无言。\n教授说：“下面我们不谈屁，谈一个更复杂的问题：一个西瓜，一粒芝麻，无论你怎样选择，都有理论基础。”\n我赶紧说：“我要捡起西瓜，丢了芝麻。”\n“很好。”教授说，“你抓住了主要矛盾，也就是说，你抓住了解决问题的关键。”\n“那我就捡起芝麻，丢掉西瓜。”\n“先有量变，才能达到质变。你解决问题的顺序十分正确。”\n“我既要西瓜，又要芝麻。”\n“即抓住主要矛盾，又不放过次要矛盾。你是用全面的眼光看问题”\n“我既要砸烂西瓜，又要踩碎芝麻。”\n“很好，你是用发展的眼光看问题。新事物就是对旧事物的否定。一切旧的事物必然灭亡。旧事物的灭亡是新事物产生的前提。”\n“我既要吃掉西瓜，又要砸烂西瓜。既要捡起芝麻，又要踩碎芝麻。可是，只有一个西瓜，一粒芝麻，怎么办？”\n“你这才算对辩证法入了门，重要的是：矛盾的双方不仅对立，而且有它统一的一面。你吃掉西瓜当然有它合理的一面，但你要砸烂西瓜，也并非不合理。只有将二者统一，才能进入更高层次的斗争。”\n我张口结舌，目瞪口呆：“可是，你并没有解决我的问题。”\n教授笑着说：“辩证法不解决任何问题，它的用途在于首先把人变成傻瓜——如果还有人不是傻瓜的话。”\n“你是说‘首先’？”我问。\n“是对，然后再从傻瓜飞跃到学者。”教授开始整理讲义，“关于辩证法为什么不解决问题，如何把人变成傻瓜，以及怎样实现从傻瓜到学者的飞跃，这是下一节课的内容。”\n教授一蹦一跳，走出教室。\n　　\n\n第二堂课：\n\n教授说：“下面我们讲一下辩证法的用途。我们要举一个更加复杂的例子：如何看待中国传统文化？”\n我说：“那一定要用辩证的观点。”\n“对。我们有许多大牌的辩证法学者，他们会充分利用辩证法的三大规律，理论联系实际，旁征博引，纵横捭阖。下笔万言，紧绕主体。最后给你得出一个结论：要取其精华，去其糟粕——你佩服不佩服？”\n“是啊。辩证法不是很有用吗？”\n“以前我也这样认为。直到我见到一只丧家的野狗——它改变了我的看法。”\n“野狗？”我莫名其妙。\n“是的。我家屋后有个垃圾堆，有一天来了一只丧家的野狗。它对其他东西看也不看，‘喀哧’一口，咬住一块骨头。”\n“这毫不奇怪，所有的狗都会这样。”我说。\n“不错。问题是对于狗来说，这块骨头就是‘精华’，垃圾堆里除了骨头以外，还有砖头，铁块，破水桶等等糟粕，他为什么只要骨头这个精华呢？他怎么知道取其精华，去其糟粕？难道它已经充分理解了大牌学者们的论述了吗？”\n“好像不会。”\n“肯定不会，所以说大牌学者们通过精确的论述，得到的精妙结论，其实是连一只丧家的野狗早就知道的东西。既然如此，我们为什么还要为他们喝彩，对他们崇拜呢？”\n“是啊，为什么？”\n“唯一的解释就是：辩证法已经成功地把你变成了一个傻瓜。”\n“我明白了。”\n“你明白以后一定要问：你说的没用。取其精华，去其糟粕谁都知道。问题是什么是精华，什么是糟粕。”\n“对，看他怎么说。”\n“你难不倒他，他又会充分利用辩证法的三大规律，理论联系实际，旁征博引，纵横捭阖。下笔万言，紧绕主体。最后给你得出一个结论：具体问题，具体分析。高明不高明？“\n“是有道理。”\n“可是我认为：这不仅是无聊，无用的问题，已经近于无赖了。”\n“这怎么说？”\n“难道世界上有人会‘具体问题，抽象分析’吗？那只丧家的野狗，来到垃圾堆前，难道会象亚里斯多德一样，先把各种东西分门别类，搞清其内涵和外延，再通过归纳演绎，最后确定它是吃砖头还是吃骨头吗？这可能吗？”\n“不可能。那样的话，他连吃砖头都有可能。”\n“对，孺子可教。没有人会‘具体问题，抽象分析’，‘具体问题，具体分析’这句话，等于没说。不过辩证法学者倒是喜欢用抽象的方法，分析具体问题。因为辩证法是放之四海而皆准的普遍真理。所以如果你看到一只吃砖头的狗，千万不能小视，它可能是一个著名学者。”\n教授又收拾好讲义，说：“辩证法的根本在于使用‘全面的，发展的，联系的’观点看问题。象所有的谎言一样，这话听起来很显真理。下一节课讲辩证法的渊源，以及它和形而上学的关系。”\n　\n　\n\n第三堂课：\n\n　　\n“迄今为止，人类用三种方法研究这个世界。”教授毫不客气，单刀直入，“第一种是‘屠夫式’，大部分科学家都是这种方式。他们把世界割裂成极小的部分进行分析研究。研究生物的并不研究全部生物，有的只研究动物；研究动物的也不研究全部动物，有的只研究哺乳动物；研究哺乳动物的，有的只研究猴子；研究猴子的有的只研究猴子的尾巴。他们眼中只见树木，不见森林，是极其片面的观点。”\n“不是辩证法的观点。”我说。\n“对，”教授接着说，“不仅如此，他们还尽量割裂研究对象与其他事物的联系，在尽量不受干扰的情况下，看看他到底是什么样子。科学家花费大量金钱建造实验室，而不在大街上做实验，主要原因就在于此。现在有些实验还要搞到太空里去做，连空气引力都要隔绝，可见，为了割裂事物之间的关系，这些科学家是不择手段的。”\n我说：“与辩证法的观点相反。”\n“有说对了，但仍然不止于此，他们还不管一只猴子过去怎样，将来如何，只管拿来一刀宰掉，看看它肚子里都是什么东西。他们用的是彻底的静止观点。”\n“非常野蛮，而且十分笨拙。”\n“所以我把它叫做‘屠夫式’。但这是我们一切科学知识的基础和来源。没有这些人，也就没有任何科学。他们应该得到应有的尊重——他们的人格，才智和他们使用的方法，都应该得到尊重。”\n“有谁不尊重他们吗？”\n“有很多，你可能就是一个。”\n“此话怎讲？”\n“他们用的是孤立，静止，片面的方法，这种方法有一个名称，你们中学老师教过你们吗？”\n“叫形而上学，可那是个贬义词呀？”\n“是的，就叫形而上学，这就是过去全部的科学家，现在大部分科学家使用的方法。”\n“那为什么它是一个贬义词呢？”\n“因为它和辩证法不相容，而且针锋相对。有些人不仅自以为是正确的，而且断定其他人都是错的。奇怪的是，辩证法整天讲什么对立统一，形而上学来和辩证法对立，他却不肯同一，而是对形而上学采取一棍子打死的态度。”\n“我明白了。”\n“使用第二种方法的也是科学家，我称之为‘强盗式’，这种科学家更重要。\n他们什么也不干，坐等形而上学的科学家研究出比较确切的成果，在此基础上综合升华。千千万万的科学家研究了万万千千的动物，植物，微生物以后，达尔文拿来一综合，就提出了进化论。“\n“这活倒很轻松。”\n“一点也不轻松，而且需要更高的聪明才智和更加宽阔的视野。爱因斯坦是其中最出色的一位。他的视野非常开阔，甚至研究过辩证法。但是他说辩证法对他的研究没有任何帮助。”\n“辩证法到底是干什么的呢？”\n“研究世界的第三种方法就是辩证法的方法，我称之为‘上帝式’的方法。也就是我们下一节课的内容。“\n　　\n\n最后一课：\n\n　　\n“我被开除了，”教授说，“今天上最后一课。请先提问。”\n我说：“有的同学说，你的观点有点偏激。”\n“他说对了，我不仅偏激，而且有错误。上一节课我就故意设置了一个常识性的错误，但是你们并没有给我提出来。现在我不得不把最重要的东西教给你们：没有谁是全部正确的，最多只是正确了一部分。如果世界是那只大象，我们就是那一群摸象的瞎子。我们想知道大象的样子，但是我们谁也不可能把这只大象摸完。我所有的瞎子加在一起也不可能，如果你的一生只能摸完大象的尾巴，你一定要认真去摸。如果你确信自己完全了解了这支尾巴，你一定要坚持自己的观点。\n不要听见别人说大象像柱子或者象扇子就轻易改变自己的观点。偏激并不可怕，可怕的是听风就是雨，毫无自己的主见。如果你坚持的错了，没什么大不了，一定有更聪明的瞎子给你指出错误。科学就是这样在成千上万的错误中提取一个真理的学问。但是如果你对了，却没有坚持，世界就失去了一次前进的机会。\n“另外你要随时记住：无论你是对是错，你只是了解大象的一小部分。要听听别的瞎子怎么说。不能轻信，也不能不信。你别无选择，只有使用你的理性，它也许有许多不足，但却是你唯一可以信赖的东西。一个人的理性十分有限，许多人的理性却威力巨大。如果你不知道许多人的理性在那里，那么我告诉你——那就是科学。科学也有不足，以后一定要被突破。不过那需要许许多多比爱因斯坦更聪明的人，肯定不是你我。\n“理性，批判和宽容，就是我所说的最重要的东西。”\n这次我没有提问，也没有其他人提问。\n“言归正传，继续谈辩证法。”教授只好自己接着说，“辩证法也是个瞎子，但是他不摸象。”\n“他不想了解大象吗？”我问。\n“他当然想了解大象，但是他认为摸象没有用，或者说作用不大。他认为大象在到处乱跑，还在不断地从小变大，而且与他周围的森林，地球，甚至太阳系，银河系有无限多的联系，用‘孤立，静止，片面’的形而上学观点徒劳无功，只有使用‘全面，发展，联系’的辩证法观点，才能搞清大象的样子。”\n“可是他连象都不摸，怎么全面，发展，联系呢？”\n“我不知道，鬼也不知道，只有上帝知道。所以我把它称为‘上帝式’的方法。辩证法最初在中国流行，伏羲八卦，阴阳五行，孔子的”过犹不及“，老子的”反者道之动“，《易经》”一阴一阳谓之道“，《黄帝内经》”内外调和，邪不能侵“统统都是辩证法。西方只有亚里斯多德提出过辩证法的雏形，既不全面，也不具体。恩格斯说他阐述了辩证法的基本原理，我不知道从何说起。不过这无关紧要，现代意义上的辩证法是从黑格尔开始的，这一点恩格斯和我，以及其他任何人，都不会有任何意见。”\n“你只说恩格斯，怎么不提马克思？”\n“马克思和辩证法关系不大。”\n“辩证唯物主义不是不是马克思主义的灵魂吗？”\n“我不同意这个观点，马克思早期写过一篇《神圣家族》，痛批黑格尔的”泛逻辑论“，泛逻辑论就包括辩证法。以后也没见他怎样说过辩证法。直到他最晚的哲学著作《资本论第二版跋》中，他才玩笑的说自己卖弄了辩证法。但是辩证法是什么，马克思终其一生，也没有回答过。”\n“那么辩证法怎样进入马克思主义的呢？”\n“完全是恩格斯的原因，从《反杜林论》到恩格斯致死不愿发表的《自然辩证法》，辩证法才成为马克思主义的所谓灵魂。这一点我和顾准的看法一样，马克思是不会同意‘辩证唯物主义’这个说法的。这完全是后人的需要。不过《反杜林论》是经过马克思同意的，这一点倒是事实。”\n“辩证法有哪些内容？”\n“首先是三大规律：第一，质量互变规律，来自黑格尔《逻辑学》第一部”存在论“。第二，矛盾统一规律，来自《逻辑学》第二部”本质论“。第三，否定之否定规律，来自《逻辑学》第三部”理念论“。这都是表面的东西，也就是马克思所说的”神秘外形“。它的根本在于用全面，发展，联系的观点看问题。它的实质是隐藏其后的两大主义：第一，真理一元论。反对真理的多元论和相对主义。这早已成为历史的垃圾。第二，真理不可分，局部事务的真理都是整体世界的一部分，孤立的研究发现不了这些真理。只有在森林中找树木，不能从树木开始研究森林。这不仅极其荒唐，而且毫不现实。”\n“为什么不现实？”\n“有个西方不败教授说得很好：事实充分证明，孤立的，静止的、片面地来研究事物的方法，在人类现有的认识情况下才是最好的方法论，才可能了解事物的本质。因为事物之间的联系千丝万缕，如果把所有的关联都考虑进去，就等于什么也干不成，就象我们老祖宗一样，只能抱着个”太极生两仪，两仪生四象，“这个思维懒怠症混日子。等到对事物的各种性状及规律有了较为详细的把握，再把它放到系统中进行非常谨慎的观察和研究。而中国人的传统思维是总想一口吃成个大胖子，一开始便从总体上提出本质的观点。这种带有原始思维特征的传统正与辩证法不谋而合，或者说辩证法只是中国古代思想方法的一种现代表述，中国人从来不缺少这种思维方式，需要补课的正是孤立的，静止的、片面地来研究事物的笨功夫。”\n“辩证法到底是怎么来的呢？”\n“你们中学教科书上是怎么讲的？”\n“好像是对客观世界，人类社会以及思维规律的全面正确的总结。”\n“这种说法极其荒唐，而且全然不顾任何事实。是彻底的误人子弟。第一，别说黑格尔活着的时候，就是在二十一世纪的今天，人类对客观世界仅仅了解一点，很小的一点。对人类社会只了解半点。对思维规律了解得半点也不到。一只大象我们只是了解了尾巴上的几个关节，腿上的几根毛，加上耳朵上一块皮而已，谈得上什么全面总结，正确总结？纯粹是说梦话。\n“第二，你们可以看一看《马克思恩格斯选集》第三卷469页第十二行到第十四行：”黑格尔的著作中有一个广博的辩证法纲要，虽然它是从一个完全错误的出发点发展起来的。“恩格斯在不止二十个地方说过，这个错误的出发点就是唯心主义。谁都知道，恩格斯所谓的辩证法原版照抄的来自黑格尔的《逻辑学》，如他自己所说，只不过”打碎了黑格尔唯心主义的外壳，“取了他”辩证法的合理内核“。你相信吗？人类从许许多多正确的出发点出发，都要走上弯路。而一个叫黑格尔的帝国教授，却可以从一个错误的出发点出发，”全面地，正确地“总结出客观世界，人类社会以及思维的全部正确规律。这是人说的话吗？\n“我绝不相信。就是再把我绑到新教徒的火刑柱上，把我烧死以前烤上两个小时，我仍然不相信！”\n“我也不相信。”我小声说。\n“可是相信的人相当多。自从打碎了基督教的枷锁，辩证法是科学发展道路上的最大障碍。他把现代科学斥责为不入流的形而上学，机械论。使科学在一些地方停滞不前。二十世纪二十年代，前苏联科学院的一个院长，就因为要搞农作物的杂交改良而丢了脑袋。”\n“那为什么？”\n“因为杂交改良依据的是孟德尔－摩尔根理论，与辩证法格格不入。”\n“你很熟悉前苏联吗？”\n“我最熟悉的是中国，我在这里住了几十年。可是打别人头上的苍蝇更轻松。”\n我问：“对于辩证法的进攻，科学是怎么反击的呢？”\n“西方哲学用实证主义，逻辑经验主义进行了反击。现代科学却默不做声。它只是不断地发展，生产出更多的粮食，钢铁，机器，以及人类除精神需要的一切。当这一切成为不可逆转的潮流的时候，辩证法才忽然发现，虽然它在骂别人，丢人的却是他自己。”\n“辩证法没有任何可取之处吗？”\n“有人说辩证法是一个早产的怪胎，虽然在人类认识的现阶段并不适用，但他整体的观点确实十分诱人。现代科学的整体论，有机论已经初具雏形。不过这不是对辩证法的回归，而是在科学自身的发展中，若隐若现地概括出的一些原则。真理一元论毕竟是难以接受的。科学从不放过任何一个发展的可能性，哪怕最微小的希望，也会有人付出百倍的努力。1984年，一大群名气很大的科学大师在美国成立了圣菲研究所（Santa Fe Institute），他们包括众多的诺贝尔奖获得者，是许多科学领域的顶尖人物，出钱的大老板也是赫赫有名——金融杀手索罗斯。它们的目标就是研究”一元化理论“的可能性。当然，他们谁也不会相信什么辩证法，那就不要研究“一元化”了。它们是用现代科学的方法探讨控制复杂的适应系统（CAS）的一般性原理。虽然我不相信他们会取得任何结果，但这是人类科学史上最大胆的尝试之一。我预祝他们成功——尽管那样会打破我的一切观念。”（转载）","index":10,"permalink":"https://honmaple.me/articles/2015/12/辩证法与放屁.html","summary":"\n\u003ch3\u003e第一堂课：\u003c/h3\u003e\n\n\u003cp\u003e上课时，我放了一个屁——很普通的屁。既不很臭，当然也绝对不香。\u003cbr\u003e\n可怕的是，教授正在讲辩证法。\u003cbr\u003e\n“请你自己对这个屁作一下判断，”教授说，“它好还是不好？”\u003cbr\u003e\n我只得说：“不好。”\u003cbr\u003e\n“错了，”教授说，“任何事物都有矛盾组成，有它不好的一面，肯定有它好的一面。”\u003cbr\u003e\n“那么说它好也不对了？”我问。\u003cbr\u003e\n“当然。”教授说。\u003cbr\u003e\n“它既好又不好。”\u003cbr\u003e\n“错了。你只看到矛盾双方对立斗争的一面，没有看到他们统一的一面。”\u003cbr\u003e\n我只好认真看待这个严肃的问题，仔细想了想说：“这个屁既好又不好，但不好的一面是主要的，处于主导地位。”\u003cbr\u003e\n“错了。你是用静止的观点看问题。矛盾的双方会相互转换，今天处于主导地位一面，明天一定处于次要地位...\u003c/p\u003e","title":"辩证法与放屁"},{"content":"当你不断超越前方的人在更前方总会有那么一盏红灯也许是为了安全也许是为了公平谁知道呢你，终归是只能等着","index":11,"permalink":"https://honmaple.me/articles/2019/04/路.html","summary":"\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n当你不断超越前方的人\u003cbr/\u003e在更前方\u003cbr/\u003e总会有那么一盏红灯\u003cbr/\u003e\u003cbr/\u003e也许是为了安全\u003cbr/\u003e也许是为了公平\u003cbr/\u003e\u003cbr/\u003e谁知道呢\u003cbr/\u003e\u003cbr/\u003e你，终归是只能等着\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"路"},{"content":"Table of Contents\nPillow\nmisaka\npsycopg2\npysqlite\n\n\nPillow\nValueError: jpeg is required unless explicitly disabled using --disable-jpeg, aborting\n\n    ----------------------------------------\nCommand \u0026#34;/home/***/***/venv/bin/python3.4 -u -c \u0026#34;import setuptools, tokenize;__file__=\u0026#39;/tmp/pip-build-k9djbrwk/Pillow/setup.py\u0026#39;;exec(compile(getattr(tokenize, \u0026#39;open\u0026#39;, open)(__file__).read().replace(\u0026#39;\\r\\n\u0026#39;, \u0026#39;\\n\u0026#39;), __file__, \u0026#39;exec\u0026#39;))\u0026#34; install --record /tmp/pip-i_zr9z4a-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/***/***/venv/include/site/python3.4/Pillow\u0026#34; failed with error code 1 in /tmp/pip-build-k9djbrwk/Pillow\n\n\n   解决办法:\n\n# yum install libjpeg-turbo-devel\n\n   其实这个办法也不太准确,\n   参考 pillow文档 ,安装\n\n\n$ sudo yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel\n\nmisaka\nerror: Setup script exited with error: command ‘gcc’ failed with exit status 1\n\n\n   我使用\n\npip3 install misaka\n\n   报错\n\nerror: Setup script exited with error: command ‘gcc’ failed with exit status 1，\n\n   上 google 搜了半天,结果都是 python-devel 没装，实际上我的已经装上了，\n   我以为是因为我自己编译安装的python3没有安装python3-devel,又搜了半天，什么也没搜到，\n   后来心血来潮使用\n\neasy_install misaka\n\n\n   不用多说，还是报错，但是报错原因成了 No package \u0026#39;libffi\u0026#39; found ,好吧，\n   yum list libffi*之后，发现libffi已安装，但是libffi-devel未安装，\n\n\nyum install libffi-devel\n\n   试一试，结果。。。成功了\n\n\npsycopg2\n\n   psycopg2安装之前需要安装 postgresql-devel ,此外,正确的安装方式是\n\nPATH=$PATH:/usr/pgsql-9.3/bin/ pip install psycopg2\n\n   注意postgresql目录\n\npysqlite\n\n   报错信息\n\ndialects/sqlite/pysqlite.py\u0026#34;, line 339, in dbapi\nraise e\nwerkzeug.utils.ImportStringError: import_string() failed for \u0026#39;config\u0026#39;. Possible reasons are:\n\n- missing __init__.py in a package;\n- package or module path not included in sys.path;\n- duplicated package or module name taking precedence in sys.path;\n- missing module, class, function or variable;\n\nDebugged import:\n\n- \u0026#39;config\u0026#39; not found.\n\nOriginal exception:\n\nImportError: No module named pysqlite2\n\n\n   pip install pysqlite\n\n  src/connection.h:33:21: fatal error: sqlite3.h: No such file or directory\n     #include \u0026#34;sqlite3.h\u0026#34;\n                         ^\n    compilation terminated.\n    error: command \u0026#39;gcc\u0026#39; failed with exit status 1\n\n    ----------------------------------------\nCommand \u0026#34;/home/exingcai/.Envs/iotschedule/bin/python -u -c \u0026#34;import setuptools, tokenize;__file__=\u0026#39;/tmp/pip-build-aT3yRf/pysqlite/setup.py\u0026#39;;exec(compile(getattr(tokenize, \u0026#39;open\u0026#39;, open)(__file__).read().replace(\u0026#39;\\r\\n\u0026#39;, \u0026#39;\\n\u0026#39;), __file__, \u0026#39;exec\u0026#39;))\u0026#34; install --record /tmp/pip-1MtibC-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/exingcai/.Envs/iotschedule/include/site/python2.7/pysqlite\u0026#34; failed with error code 1 in /tmp/pip-build-aT3yRf/pysqlite/\n\n\n   解决办法:\n\nsudo yum install sqlite-devel","index":12,"permalink":"https://honmaple.me/articles/2016/07/记录pip安装时报的错.html","summary":"\n\u003ch2 id=\"heading-1\"\u003ePillow\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eValueError: jpeg is required unless explicitly disabled using --disable-jpeg, aborting\n\n    ----------------------------------------\nCommand \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/home/***/***/venv/bin/python3.4 -u -c \u0026#34;\u003c/span\u003eimport setuptools, tokenize;__file__\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/tmp/pip-build-k9djbrwk/Pillow/setup.py\u0026#39;...\u003c/span\u003e\u003c/pre\u003e","title":"记录pip安装时报的错"},{"content":"书签不够用了\n例子1:https://gist.github.com/bkdinoop/6698956","index":13,"permalink":"https://honmaple.me/articles/2016/02/记录Flask-Login的例子.html","summary":"\u003cp\u003e书签不够用了\u003cbr\u003e\n例子1:\u003ca href=\"https://gist.github.com/bkdinoop/6698956\"\u003ehttps://gist.github.com/bkdinoop/6698956\u003c/a\u003e\u003c/p\u003e\n","title":"记录Flask-Login的例子"},{"content":"在一个多月前我给 evil-escape 开发者提了一个issue,但是不幸的是，没人理我，人理我，理我，我·····\n\n于是这一个多月来我使用visual-state下选择段落的方式是: 跳到段落最后,按k从下往上选择,\n现如今都快成为习惯了,今天终于有人解决了我的问题,非常感谢 ZzAntares\n\n之前我用\n(setq evil-escape-excluded-major-modes \u0026#39;(dired-mode neotree-mode evil-visual-state))\n\n解决了\u0026#39;jj\u0026#39;在 dired-mode neotree-mode 下的问题,但是遗憾的是 visual-state 下的选择问题仍然没有解决\n\n现在终于解决了, issue\n(setq evil-escape-inhibit-functions \u0026#39;(evil-visual-state-p))\n\nok ,就这样","index":14,"permalink":"https://honmaple.me/articles/2016/05/解决evil-escape下visual-state不能使用'jj'的问题.html","summary":"\u003cp\u003e在一个多月前我给 \u003cem\u003eevil-escape\u003c/em\u003e 开发者提了一个issue,但是不幸的是，没人理我，人理我，理我，我·····\u003c/p\u003e\n\n\u003cp\u003e于是这一个多月来我使用visual-state下选择段落的方式是: \u003cstrong\u003e跳到段落最后,按k从下往上选择\u003c/strong\u003e,\n现如今都快成为习惯了,今天终于有人解决了我的问题,非常感谢 \u003cstrong\u003eZzAntares\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e之前我用\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(setq evil-escape-excluded-major-modes \u0026#39;(dired-mode neotree-mode evil-visual-state))\n\u003c/pre\u003e\n\u003cp\u003e解决了\u0026#39;jj\u0026#39;...\u003c/p\u003e","title":"解决evil-escape下visual-state不能使用'jj'的问题"},{"content":"欲把西湖比西子淡妆浓抹总相宜\n\n\n\n\n\n\n\n  \n\n\n\n\n\n久闻西子久成思时至菡萏时遇迟\n\n\n\n\n\n  \n     \n\n  \n\n  \n  \n     \n\n  \n\n  \n  \n    \n\n  \n\n  \n\n\n\n\n\n朝闻西子犹在天夕至柳畔觉未眠","index":15,"permalink":"https://honmaple.me/articles/2018/10/西子遇.html","summary":"\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/pic/西湖/荷花.jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/西湖/荷花.jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n欲把西湖比西子\u003cbr/\u003e淡妆浓抹总相宜\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/pic/西湖/荷花(一).jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/西湖/荷花(一).jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n久闻西子久成思\u003cbr/\u003e时至菡萏时遇迟\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"row\"\u003e\n  \u003cdiv class=\"col-md-4\"\u003e\n     \n\u003ca href=\"https://static.honmaple.com/images/pic/西湖/日落(二).jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/西湖/日落(二).jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"col-md-4\"\u003e\n     \n\u003ca href=\"https://static.honmaple.com/images/pic/西湖/日落(三).jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/西湖/日落(三).jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"col-md-4\"\u003e\n    \n\u003ca href=\"https://static.honmaple.com/images/pic/西湖/日落(一).jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/西湖/日落(一).jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n朝闻西子犹在天\u003cbr/\u003e夕至柳畔觉未眠\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"西子遇"},{"content":"落花\n\n\n\n\n\n落花有意随流水流水无心恋落花久在门(人)前山间坐静(坐)看人(世)间二月花","index":16,"permalink":"https://honmaple.me/articles/2018/04/落花.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n落花\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n落花有意随流水\u003cbr/\u003e流水无心恋落花\u003cbr/\u003e久在门(人)前山间坐\u003cbr/\u003e静(坐)看人(世)间二月花\n\u003c/p\u003e\n\u003c/div\u003e","title":"落花"},{"content":"风落花语风落天花落风雨花落田\n\n\n\n\n无意间想到的花落系列。。。很好听的名字\n\n\n\n\n\n\n花落······雨花落······枫花落······雾花落······叶花落······雪花落······风花落······夜花落······月花落······己\n\n\n\n\n\n。。。。","index":17,"permalink":"https://honmaple.me/articles/2018/07/花落.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n风落花语风落天\u003cbr/\u003e花落风雨花落田\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n无意间想到的\u003ccode\u003e花落系列\u003c/code\u003e。。。很好听的名字\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n花落······雨\u003cbr/\u003e\u003cbr/\u003e花落······枫\u003cbr/\u003e\u003cbr/\u003e花落······雾\u003cbr/\u003e\u003cbr/\u003e花落······叶\u003cbr/\u003e\u003cbr/\u003e花落······雪\u003cbr/\u003e\u003cbr/\u003e花落······风\u003cbr/\u003e\u003cbr/\u003e花落······夜\u003cbr/\u003e\u003cbr/\u003e花落······月\u003cbr/\u003e\u003cbr/\u003e花落······己\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\n。。。。\n\u003c/p\u003e\n","title":"花落"},{"content":"参考问题\n参考资料\n最终代码:\ndef safe_clean(text):\n    from flask import Markup\n    from bleach import clean\n    tags = [\u0026#39;b\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;font\u0026#39;,\u0026#39;br\u0026#39;]\n    attrs = {\n        \u0026#39;*\u0026#39;:[\u0026#39;style\u0026#39;],\n        \u0026#39;font\u0026#39;:[\u0026#39;color\u0026#39;]\n    }\n    styles = [\u0026#39;color\u0026#39;]\n    return Markup(clean(text,tags = tags,\n                        attributes = attrs,\n                        styles = styles))\n\n自定义filter过滤器","index":18,"permalink":"https://honmaple.me/articles/2016/02/自定义jinja2转义标签.html","summary":"\u003cp\u003e\u003ca href=\"http://stackoverflow.com/questions/8976683/jinja2-escape-all-html-but-img-b-etc/8976872\"\u003e参考问题\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://bleach.readthedocs.org/en/latest/clean.html#callable-filters\"\u003e参考资料\u003c/a\u003e\u003cbr\u003e\n最终代码:\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edef safe_clean(text):\n    from flask import Markup\n    from bleach import clean\n    tags = [\u0026#39;b\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;font\u0026#39;,\u0026#39;br\u0026#39;]\n    attrs = {\n        \u0026#39;*\u0026#39;:[\u0026#39;style\u0026#39;...\u003c/pre\u003e","title":"自定义jinja2转义标签"},{"content":"Table of Contents\n吐嘈一: counsel-find-file\n吐嘈二: tab 键\n吐嘈三: 记忆多个按键\n吐嘈四: 模糊搜索\n吐嘈五: 候选词按使用频率排序\n吐嘈六: minibuffer\n吐嘈七: dired 中复制或重命名文件\n吐嘈八: sudo edit\n吐嘈九: counsel-ag 默认不会使用已选的单词\n总结\n\n\n\n\n在 n 个月前, 我曾写过 helm与ivy简单对比, 并吐嘈了ivy细节打磨不够，以至于我切换到ivy不到几天后,\n又回到了helm的拥抱, 但在n个月后，本着生命不止，折腾不息的精神, “狠狠地”的折腾了一把ivy, 让ivy也能像helm一样“如丝般润滑”，适应我平时的操作\n\n\n\n吐嘈一: counsel-find-file\n\n\n  我在dired中移动文件, 即使已经设置了\n\n:map counsel-find-file-map\n(\u0026#34;C-h\u0026#34; . counsel-up-directory)\n\n\n  但C-h返回上级目录还是无效\n\n\n\n\n  无意中从spacemacs中找到了解决办法(我电脑上常备 spacemacs 的配置，当看到 spacemacs 有什么更新都会切换过去尝试一番, 遇到适合自己的配置会\u0026#34;参考\u0026#34;一下, 哈), spacemacs 并没有遇到上述问题，在经过查找后，发现有这个一行\n\n(define-key ivy-minibuffer-map (kbd \u0026#34;C-h\u0026#34;) (kbd \u0026#34;DEL\u0026#34;))\n\n  转换成我自己的配置就是\n\n:map ivy-minibuffer-map\n(\u0026#34;C-h\u0026#34; . [backspace])\n\n吐嘈二: tab 键\n\n\n  tab 键我只想要complete， 而不是complete and done, 虽然ivy提供了另外的选项ivy-partial-or-done,但不是我想要的效果,尤其是把aaa.py重命名为aaa.py.bak时\n\n\n\n\n  关于这一条，真的是“狠狠”地折腾了一把, 最终以胜利告终\n\n(defun maple/ivy-done()\n  (interactive)\n  (let ((dir ivy--directory))\n    (ivy-partial-or-done)\n    (when (string= dir ivy--directory)\n      (ivy-insert-current)\n      (when (and (eq (ivy-state-collection ivy-last) #\u0026#39;read-file-name-internal)\n                 (setq dir (ivy-expand-file-if-directory (ivy-state-current ivy-last))))\n        (ivy--cd dir)\n        (setq this-command \u0026#39;ivy-cd)))))\n\n  主要思路就是插入当前选中项, 如果是=read-file-name-internal=(文件操作), 并且选中项是一个目录，则列出这个目录的文件，避免选中tab两次才能列出文件, 这样一来，第一次tab就是complete, 第二次tab才是done, 最终效果超出预期(V 字手)\n\n\n吐嘈三: 记忆多个按键\n\n\n  ivy 有这样一个问题,它不会像 helm 一样在第一行显示用户输入的字符，在 ivy 的很多 issue 中都有人提了这个问题，如果当前目录下有名为aaa的目录,这是我想要创建一个aaa.py的文件，ivy 会列出 aaa 这个目录，那是我该怎么创建 aaa.py 文件。方法是一个新的命令ivy-immediate-done,而不是ivy-alt-done\n\n\n\n\n  现在的ivy已经支持可选择用户输入\n\n(setq ivy-use-selectable-prompt t)\n\n吐嘈四: 模糊搜索\n\n\n  在 helm 中我可以很容易的使用模糊搜索，ivy 中也一样，只要简单的设置\n\n(setq ivy-re-builders-alist\n      \u0026#39;((t . ivy--regex-fuzzy)))\n\n  但 ivy 中有这样一个问题，空格键不能在模糊匹配中使用，/汗，作为从 helm 转入 ivy 的人，经常会不经意间在输入时按下空格键，然后，What? ivy 中搜索变成空了\n\n\n\n\n  其实我想要混合使用空格与非空格, 但最终还是没能找到解决办法, 因为我已经适应的使用空格分隔, 所以暂时使用\n\n(setq ivy-re-builders-alist\n\u0026#39;((t   . ivy--regex-ignore-order))\n\n吐嘈五: 候选词按使用频率排序\n\n  这个。。。\n\n\n吐嘈六: minibuffer\n\n\n  helm 从当前 buffer 中弹出 helm-buffer 是多么明智的选择，视野不会移动到当前 buffer 以外的地方，尤其是在屏幕较大的时候, 而 ivy 使用 minibuffer 总是从屏幕左下方弹出\n\n\n\n\n  经过多次试验， 最终也找到的解决办法\n\n;; custom ivy display function\n(defvar maple/ivy-format-padding nil)\n\n(defun maple/ivy-read-around (-ivy-read \u0026amp;rest args)\n  \u0026#34;Advice ivy-read `-IVY-READ` `ARGS`.\u0026#34;\n  (let ((maple/ivy-format-padding (make-string (window-left-column) ?\\s)))\n    (setcar args (concat maple/ivy-format-padding (car args)))\n    (apply -ivy-read args)))\n\n(defun maple/ivy-format-function (cands)\n  \u0026#34;Transform CANDS into a string for minibuffer.\u0026#34;\n  (ivy--format-function-generic\n   (lambda (str)\n     (concat maple/ivy-format-padding (ivy--add-face str \u0026#39;ivy-current-match)))\n   (lambda (str)\n     (concat maple/ivy-format-padding str))\n   cands \u0026#34;\\n\u0026#34;))\n\n(advice-add \u0026#39;ivy-read :around #\u0026#39;maple/ivy-read-around)\n(setq ivy-count-format \u0026#34;\u0026#34;\n      ivy-format-function \u0026#39;maple/ivy-format-function)\n\n\n  主要思路就是在各个collections前添加空格, 空格宽度为 (window-left-column), window-left-column 按照 help 文档来说就是Return left column of window WINDOW, 与屏幕左边缘的距离; 然后自定义 ivy-format-function,即可, 需要注意的一点, 不仅collections前需要添加空格, prompt前也需要添加空格\n\n\n\n  最终效果\n  \n\n  \n\n\n\n吐嘈七: dired 中复制或重命名文件\n\n\n  我之前想要复制或重命名一个文件，只要进入dired中按C或R，然后选择目标就行，但不知道为什么，使用 ivy 时复制重命名总是报错，不成功\n\n\n\n  经过测试, 现在的ivy表现正常\n\n\n吐嘈八: sudo edit\n\n\n  使用ivy时, sudo edit 不成功\n\n\n\n  目前已正常\n\n\n吐嘈九: counsel-ag 默认不会使用已选的单词\n\n\n  counsel-ag, 默认不会使用已选的单词, 想要查找已选单词, 需要在激活counsel-ag后使用M-n, 很麻烦，不像helm默认就可以选择region里的单词, 另外counsel-ag默认会使用含.git目录的目录作为根目录进行查找, 这与counsel-projectile-ag功能上有些冲突了\n\n\n\n\n  解决办法很简单, defadvice counsel-ag 即可\n\n(defun maple/counsel-ag(-counsel-ag \u0026amp;optional initial-input initial-directory extra-ag-args ag-prompt)\n  (when (and (not initial-input) (region-active-p))\n    (setq initial-input (buffer-substring-no-properties\n                         (region-beginning) (region-end))))\n  (unless initial-directory (setq initial-directory default-directory))\n  (funcall -counsel-ag initial-input initial-directory extra-ag-args ag-prompt))\n\n(advice-add \u0026#39;counsel-ag :around #\u0026#39;maple/counsel-ag)\n\n总结\n\n\n\n 说一说为什么想要折腾ivy:\n\n\n\n\n 在使用helm时, 首次打开会很慢(我在打开 emacs 后,习惯使用helm-recentf打开最近文件, 但不知道为什么，第一次会非常慢)；另外, 打开 emacs 后， 必须先使用helm-recentf才能激活helm, 如果使用其它helm命令, 比如helm-M-x或者helm-projectile只会使用默认的ido， 并不能激活helm\n\n\n\n\n helm真的为用户做出太多选择， 想要自定义非常难, 即使成功也不是从源头解决，而是用了取巧的办法\n\n\n\n\n 速度，不知道是不是我的感觉错误，最新版本的helm速度慢了很多\n\n\n\n\n\n 还得吐嘈ivy:\n    ivy 细节上果然打磨不够, 不过经过调(折)教(腾), 大致上和我之前使用helm的习惯一样了\n\n\n\n    最终吐嘈点: ivy-occur, ivy-occur 使用了wgrep作为多文件编辑, 但说实话, 我觉得很难用, 和helm-ag自己实现的helm-ag-edit比起来更是难受, 一会就要切换一下ivy-wgrep-change-to-wgrep-mode, 不切用不了, 这个等有时间再折腾吧!\n\n\n\n\n  ok,就这样","index":19,"permalink":"https://honmaple.me/articles/2018/06/自定义helm式的ivy.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n在 \u003cb\u003en\u003c/b\u003e 个月前, 我曾写过 \u003ca href=\"https://honmaple.me/articles/2018/01/helm与ivy简单对比.html\"\u003ehelm与ivy简单对比\u003c/a\u003e, 并吐嘈了\u003ccode\u003eivy\u003c/code\u003e细节打磨不够，以至于我切换到\u003ccode\u003eivy\u003c/code\u003e不到几天后,\n又回到了\u003ccode\u003ehelm\u003c/code\u003e的拥抱, 但在\u003cb\u003en\u003c/b\u003e个月后，本着\u003cb\u003e生命不止，折腾不息\u003c/b\u003e的精神, “狠狠地”的折腾了一把\u003ccode\u003eivy\u003c/code\u003e, 让\u003ccode\u003eivy\u003c/code\u003e也能像\u003ccode\u003ehelm\u003c/code\u003e一样“如丝般润滑”，适应我平时的操作\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003e吐嘈一: counsel-find-file\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n  我在...\u003c/p\u003e\u003c/blockquote\u003e","title":"自定义helm式的ivy"},{"content":"美帝良心想\n  OVZHOW2k/HoSNvsHcCGozdnN+9l1wHajNV2NJbdZD3XfXvMb+FC6Qeo8tiF8BJ3e6bygsoNMoP+qNokJ3ablOw9G1wm1C834weaxX+R9Ob5JCUD93Y4orKfihkWDl7JJjJ8DiIj9P5kNMkF0KwlTgba2VC1GWDbfZr8hzHOMLDUTBGYDk775NyU6lxoxRo2rt5l9SKgxgXZyvPCbibc5Yidya+vaemlBTY9hqci5/f4j7cUy6uzr9roRj42TZFgxgiuDDh/Ldqyb7fyjggwIeEOcfvCRrqNvpkJHbHzbg7utNQUTxVFHiQOSAXNlWfRcb/c0rAwxCY7SxxG1xQ3PLt3M6cAsQ9pE378jWFMHnAI4dlK2QOxVzvtv5RbYlnKz9p6M+rvGnofmt+L9tlXi4x7EraNkhrHcikweJLD1ClflwHjjpYMD7aiYnjK6vf64bbAEBA7hGf4GGVylsPqap7K2aOk4AxZfL62W9jTYidkc3n9NnC7mqWKM4I/POf6UWSSEjxpvALYcdMrTUz9HXZhMF3/i4w0DCj5e4j/u2TGPa9aWt6wxRL/a784BlWnhTDlldfc1YY9vox6VvwkqxcYNQlDozW4s8fYgmRJ1RwmqlTKa3hoNN0hJc1h7bp+XD/kYGJOObNwdF0LhuManTiXihYLFk3cmrPUwzAoV0cWR8XcbfcgmW6andmXIUnssA8UYzONfizl+7H5qIpMNprkig7sr5IkKZdvKm1KpLBSn9oH4mUOM5R+wsPV4R/XmHa+hjsyO/V4B9gfS5jcKJlfoZ/R29RvfYl4mw/aJcZ2n6zPCxPEVg0FQ8TCDHsRFvYEGUnoyktumkijS5pkPKrKSby1R5Env/yD3p3YmrgGJ2D/OOoY+mQlGUusRcQ4DFxOJzw7SVonCgL0H8qvZejsnDg1g60H1ijI3ueESFukBBgprHb9Q8aNOG/YCKE7sOQS+Vgj70an4Gi76XyQVuv2KEFQ+75jCeXuVGVS9klRGXqcQ5moJ5lIRl4F0U7zrMqhnxzyrJBL1aMahWV+FvzhfmBN3ioGW8ov/FWjKQnvJ7kWfN0JF6kdgq9Xe5iXfi+KNC541OsNzqGfDB49pSZyl19k7dwuuk17hP0GIF03HTnYDrfczjsh8u9JoxUoc6hnJX4J/vqLOoz89K6o7IuFRUCCzUoFOeQjV7FuYRteBPtBGXvwmAqGvq/v0pcjdIWm+Iy+QyNl7LkUUKxkHFXhHALozuN2tgoJRSPjYELIwXGpYPyRZTU2nbe9PLag0h6kC93PrMkCVFi5KvqlACddTuMvEEk8/ZOsKMOdliXRQ+o/ZNuagwToFjeXxBkr9WVtZ8R5tVJAgQjeG94Xa7oRPB0idJEAVua97ALm96lwgU2YmjFNyDb5enoKgPXlxbjXUwV4VBFXYR/nGqjrm/SChLXziDDvxamiWCiPUp4oCa9O4PwHB+qK2tfV7lRFgSS4GNxI/bsekTTc7yLpLpT/M2LvocLWeUNZwZ5d6+C9UW4vAarr9gECXxJx6XUGuArqBKwYAP8Cp27MTFVuCxhIO57Dr8E9eBW+tkDoettoeT+8HLbhtw/6CTNswPtql8frIFgkhofYNHsYx4U8HuhOnc0sYo9Ohdrca22N0g60VYiTYP9zzUUXsqiv6plvBEYdImFkbaCOC7dA1ky+r3nSlj6UzEzGhmHsqHihQ4ZXAeOWK5RXfq9IyufM3qNB70ddQjy50BT1aZXvtvT0IHvPAkUrmdaEIO9fH4ekXK3p1YUD/TAmQSxCT4VQ0//U2aZUGCSbrxScEX6mUGYUZ1NcT+iAt6FTSWBpXcaXKIdOpIF++T89/InRXOxITX0La9FCXIfH96GXF9T1n6dAgsgZJkKs/TDkCRUkJfMAkbuNX4Ue+4oJRQ2l0MYG7GgQvDlZDVJuMpw3ubQESuQuvGgCxbXX+tsjx8iNtttvU6OaNwWvJFQBgLtLzRjBExIk0Av+DDUJ3WtP/iWx+/gk5A3fp856neHxLATtBHaibcBoYKTtndpVOQhdDYx3MbqLaFkZYZk0AZ2C1o35nk5p32kvWKKXk+hsRa3YTKAxUbAmpiYKTAsSsuXobkgYOHd5cyRIkaZpjgaQmg8Ev3W9KvBIg4B/c9lfcB0k+CnJHSRSAnez2QsQIz3UFqsIreIuaOCL9Fk2EJ37i15p0Kn9ji74sPuR2OJpwomlIFpySJSD5Hf6umXj/1zAYf3SPNZDIpKqyXv7NQ8Ojn1Yx252pjTTOBPyOmolms6rcoQDvyJ6OanQsoaF3SRUlGT8tag0EhTzm4cPatiTEST6xOkXoL6GfEBukSrtdL5TLcNZoHP/KCFdsQUMvtOO2o8sMRw61Hxv5au44tw/jxTQL05UIGhfZbcEmTs0pGC6IA+GefCZmYB6C4BLFeprpwa0oBEXEIzRSQi2Eo58eiRvES4IQXrGcC60Amq6eFFhvAI+1ZJNqSaDWRykmituoybxDXErRFcYp1tJhVJHjvQaqjoHZDP5/dqr+CrGWPngG2OtRU7Wyl3zKhSQNcms4wQq2MNUZyfj/E3fHbvV6Y54HV+j4JlJCpYxVfdvik5vavJJZMO3qE33YR2/UkmgLZxPBJk/nClog/c7BEw5L0A0fI/Tw+PkgZnzXftPBsfsEXiyJVN+Dkmu0xVK4I5zGra8zjNtICVoFJsgT+CZsT/GgJ6TyGQ==\n\n\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;","index":20,"permalink":"https://honmaple.me/articles/2019/05/联想——一家中国的外国企业.html","summary":"\u003cdiv class=\"encrypt-container entry-encrypt\"\u003e\n  \u003cdiv class=\"encrypt-form entry-form\"\u003e\n    \u003cinput type=\"password\" class=\"encrypt-password\" placeholder=\"请输入密码\" /\u003e\n    \u003ci class=\"fa fa-key encrypt-button\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\u003cdiv class=\"encrypt-desc\"\u003e美帝良心想\u003c/div\u003e\n  \u003cdiv class=\"encrypt-content\" style=\"display:none;\"\u003eOVZHOW2k/HoSNvsHcCGozdnN+9l1wHajNV2NJbdZD3XfXvMb+FC6Qeo8tiF8BJ3e6bygsoNMoP+qNokJ3ablOw9G1wm1C834weaxX+R9Ob5JCUD93Y4orKfihkWDl7JJjJ8DiIj9P5kNMkF0KwlTgba2VC1GWDbfZr8hzHOMLDUTBGYDk775NyU6lxoxRo2rt5l9SKgxgXZyvPCbibc5Yidya+vaemlBTY9hqci5/f4j7cUy6uzr9roRj42TZFgxgiuDDh/Ldqyb7fyjggwIeEOcfvCRrqNvpkJHbHzbg7utNQUTxVFHiQOSAXNlWfRcb/c0rAwxCY7SxxG1xQ3PLt3M6cAsQ9pE378jWFMHnAI4dlK2QOxVzvtv5RbYlnKz9p6M+rvGnofmt+L9tlXi4x7EraNkhrHcikweJLD1ClflwHjjpYMD7aiYnjK6vf64bbAEBA7hGf4GGVylsPqap7K2aOk4AxZfL62W9jTYidkc3n9NnC7mqWKM4I/POf6UWSSEjxpvALYcdMrTUz9HXZhMF3/i4w0DCj5e4j/u2TGPa9aWt6wxRL/a784BlWnhTDlldfc1YY9vox6VvwkqxcYNQlDozW4s8fYgmRJ1RwmqlTKa3hoNN0hJc1h7bp+XD/kYGJOObNwdF0LhuManTiXihYLFk3cmrPUwzAoV0cWR8XcbfcgmW6andmXIUnssA8UYzONfizl+7H5qIpMNprkig7sr5IkKZdvKm1KpLBSn9oH4mUOM5R+wsPV4R/XmHa+hjsyO/V4B9gfS5jcKJlfoZ/R29RvfYl4mw/aJcZ2n6zPCxPEVg0FQ8TCDHsRFvYEGUnoyktumkijS5pkPKrKSby1R5Env/yD3p3YmrgGJ2D/OOoY+mQlGUusRcQ4DFxOJzw7SVonCgL0H8qvZejsnDg1g60H1ijI3ueESFukBBgprHb9Q8aNOG/YCKE7sOQS+Vgj70an4Gi76XyQVuv2KEFQ+75jCeXuVGVS9klRGXqcQ5moJ5lIRl4F0U7zrDqJ+yms4F+pVVaVjiAIvOg==\u003c/div\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;\n\u003c/script\u003e\n","title":"联想——一家中国的外国企业"},{"content":"Table of Contents\n创建随机镜像\n抓包获取Token\n手动创建容器\n修改SSH配置\nSSH登录\n问题排查\n其它\n\n\n\n\n之前老的方式固定前缀加远程协助验证码在更新到最新版本的v3.4.0后已经失效，想要开启ssh只能使用另一种方式，也希望绿联云官方在系统更加完善(权限管理、软件卸载)前不要再继续封堵开启的方式，当然，如果能提供官方的开启方式更好\n\n\n\n\n免责声明：本教程所提供的内容仅供学习交流使用，请勿用于商业及非法用途，因此产生的任何法律纠纷均与本人无关！如有侵权，请您联系我，我将立刻删除该内容\n\n\n\n注：此教程可能会造成未知的后果，在此期间所造成的系统风险请自行承担\n\n\n创建随机镜像\n\n   首先拉取一个镜像，我这里选择 nginx:stable-alpine\n   \n\n  \n\n\n\n\n   然后点击创建容器，存储空间添加一个任意目录，挂载到 /data 下，其它参数为默认，然后下一步，先不要点击完成\n   \n\n  \n\n\n\n抓包获取Token\n\n   打开 wireshark 进行抓包，输入筛选参数\n\nip.dst_host == 192.168.31.65 and http and http.request.method==POST\n\n\n   然后返回绿联云，点击完成，这时会在 wireshark 窗口看到一条HTTP请求\n   \n\n  \n\n\n\n\n   点击这条请求，然后 右键 -\u0026gt; Follow -\u0026gt; HTTP Stream\n   \n\n  \n\n\n\n\n   这时会看到具体的HTTP请求头和请求参数，在下方的Find里输入 create 进行查找，然后将红色内容复制到本地，将请求参数 {\u0026#34;_query\u0026#34;...} 复制到一个 json 文件\n   \n\n  \n\n\n\n\n   接着修改 json 文件，找到HostConfig -\u0026gt; Mounts，将里面的 Source 参数修改为 /\n   \n\n  \n\n\n\n手动创建容器\n\n   首先到绿联云删除刚开始创建的容器\n   \n\n  \n\n\n\n\n   然后使用命令行手动请求创建容器，其中 ugreen.json 为抓包获取并修改后的参数文件，请求头保持一致\n   \n\n  \n\n\n\n\n   创建完成后，返回绿联云，刷新并查看详情，可以看到绿联系统的根目录已经挂载到容器内部\n   \n\n  \n\n\n\n修改SSH配置\n\n   使用终端进入Docker内部\n   \n\n  \n\n\n\n\n   然后添加公钥到root目录，怎么生成公私钥这里不再叙述。\n   查看sshd的配置，默认是不允许使用公钥匙登录的，所以需要修改 PubkeyAuthentication no 为 PubkeyAuthentication yes\n\n\n\n   \n\n  \n\n   接着到设备管理 -\u0026gt; 远程协助 -\u0026gt; 开启远程调试功能，重启sshd就是关闭远程调试然后重新打开\n\n\nSSH登录\n\n   最后就可以使用ssh公钥登录绿联云系统了\n   \n\n  \n\n\n\n问题排查\n\n   如果无法使用ssh公钥登录，可以查看系统的ssh登录日志\n\ngrep ssh /data/data/nas_server/log/system/*syslog | less\n\n\n   如果提示 Authentication refused: bad ownership or modes for directory /root，则执行\n\nchmod go-w /data/root\n\n\n   如果提示 ssh-rsa: signature algorithm not supported，则添加下面配置到sshd_config\n\nPubkeyAcceptedKeyTypes=+ssh-rsa\n\n其它\n\n   升级到v3.4.0后，目前觉得还不错，其中批量重命名，TMDB接口，自定义Hosts等都是非常有用的功能，也希望绿联能再接再厉，我们这些用户也能和绿联Nas一同成长。\n\n\n\n   对了，之前文件同步会修改源文件权限的问题已经被修复，Very Good","index":21,"permalink":"https://honmaple.me/articles/2023/07/绿联云Nas新版本v3.4.0固件开启SSH.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n之前老的方式\u003cb\u003e固定前缀加远程协助验证码\u003c/b\u003e在更新到最新版本的\u003cb\u003ev3.4.0\u003c/b\u003e后已经失效，想要开启ssh只能使用另一种方式，也希望绿联云官方在系统更加完善(\u003cb\u003e权限管理、软件卸载\u003c/b\u003e)前不要再继续封堵开启的方式，当然，如果能提供官方的开启方式更好\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003cb\u003e免责声明：本教程所提供的内容仅供学习交流使用，请勿用于商业及非法用途，因此产生的任何法律纠纷均与本人无关！如有侵权，请您联系我，我将立刻删除该内容\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003cb\u003e注：此教程可能会造成未知的后果，在此期间所造成的系统风险请自行承担\u003c/b\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003e创建随机镜像\u003c/h2\u003e\n\u003cp\u003e\n   首先拉取一个镜像，我这里选择 \u003ccode\u003enginx:stable-alpine\u003c/code\u003e\n   \n\u003ca href=\"https://s.libforest.com/images/2023/07/DX4600Pro-SSH-01.jpg-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/07/DX4600Pro-SSH-01.jpg-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   然后点击创建容器，存储空间\u003cb\u003e添加一个任意目录\u003c/b\u003e，挂载到 \u003ccode\u003e/data\u003c/code\u003e 下...\u003c/p\u003e","title":"绿联云Nas新版本v3.4.0固件开启SSH"},{"content":"Table of Contents\n虚拟机管理\n\nUbuntu版本问题\nLibvirt安装依赖\n\n构建Docker\n\n导入镜像\nssh登录\n运行Docker\n启动libvirtd\n\n管理界面\n\n创建虚拟机\n\n其它\n\n\n\n\n本次探索源于上次发现可以使用Docker来管理群晖虚拟机，而绿联本身是自带kvm内核模块的，但是要等到绿联官方支持虚拟机，又不知道会等到猴年马月。所以我有一个大胆的想法，能否使用Docker搭建一个可以自由管理虚拟机的程序，最起码可以安装一个windows替换掉绿联内置的有着各种限制的迅雷\n\n\n\n\n注意：非专业人士请勿模仿，除非你知道什么是KVM，在此期间所造成的系统风险请自行承担\n\n\n虚拟机管理\n\n   选择了我之前使用过的 retspen/webvirtcloud 来管理 KVM，说实话，这个管理程序比起威联通群晖这些官方自带确实不太好用，但用于测试还是足够了，如果有更好更方便的推荐请在评论区留言\n\n\n\n   retspen/webvirtcloud 没有官方的  Docker 镜像，只能自己编译，虽然它本身带有一个 Dockerfile，但如果自己构建会遇到各种各样的问题，下面是我遇到的部分问题\n\n\nUbuntu版本问题\n\n    retspen/webvirtcloud 默认是基于一个 Ubuntu22.04 的镜像构建，但是，如果自行构建会发现旧版本的 Docker 和 Ubuntu22.04 根本不兼容\n\n\n\n\n 报错一\n\nThe following signatures couldn\u0026#39;t be verified because the public key is not available: NO_PUBKEY 871920D1991BC93C\n\n      搜索了一下，说是可以使用 apt-key 命令添加公钥解决，实际上\n      \n\n  \n\n\n\n\n 报错二\n\n/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg are ignored as the file is not readable by user \u0026#39;_apt\u0026#39; executing apt-key.\n\n      这个报错可以通过删除gpg文件忽略，但实际上没什么用。\n\n\n\n\n    真正的解决方式是升级自身的Docker版本，最小要到 20.0 以上，因为我使用的Mac，最新版本的Docker也不过是 19.03.13，所以没办法使用升级Docker的方式解决，只能降级Ubuntu的版本\n\n\n\n    一开始我直接把版本降到最熟悉的18.04，但在安装Python库发现部分库的指定版本要求Python3.8，否则找不到指定版本\n    \n\n  \n\n\n\n\n    如果使用 apt 直接安装 Python3.8，会发现有两个问题：\n\n\n\n\n 其中一个依赖 python3-lxml 没有3.8的版本，直接安装会同时安装 Python3.6\n\n\n\n venv 无法使用\n\n\n\n\n    后面甚至想要忽略Python版本强行安装\n\npip3 install -r conf/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --ignore-requires-python\n\n\n    但仍然是一堆报错\n    \n\n  \n\n\n\n\n    所以再次测试升级到 20.04 的版本，还好 20.04 安装的Python3正是 Python3.8，故此正常\n\n\nLibvirt安装依赖\n\n    由于 retspen/webvirtcloud 是依赖libvirt对虚拟机进行管理的，而绿联使用的系统本身没有libvirt进程，所以我将在Docker内部安装，在此期间也遇到了部分问题，下面对部分依赖包统一说明一下\n\n\n\n\n\n libvirt-daemon \n      libvirtd的进程包\n\n\n\n libvirt-daemon-system \n      libvirtd的默认配置包，如果不安装需要手动编写配置\n\n\n\n iptables \n      libvirtd的依赖，不安装启动libvirtd时会报错\n\n\n\n dnsmasq \n      libvirtd的依赖，不安装kvm的默认网络无法启动，导致后续建立的虚拟机无法联网\n\n\n\n qemu-kvm \n      不安装导致后续新建虚拟机时可选的架构和芯片组为空\n\n\n\n qemu-utils \n      不安装导致虚拟机无法使用qcow2，只能使用raw格式\n\n\n\n virt-manager(可选) \n      通过命令行管理虚拟机\n\n\n\n构建Docker\n\n   \n\n  \n\n\n\n\n   修改完 Ubuntu版本 和添加 KVM所需依赖 后，就能成功构建Docker。\n   \n\n  \n\n\n\n\n   注意: 构建好的Docker镜像还是挺大的，总共6.43G\n\n\n导入镜像\n\n\n\n 首先先导出镜像\n\ndocker save -o webvirtcloud.tar webvirtcloud:test-2\n\n\n 上传到绿联Nas，可以同时上传后面创建虚拟机所用的iso文件\n       \n\n  \n\n\n\n\n 打开绿联Docker，在镜像管理里选择从设备导入镜像\n       \n\n  \n\n\n\n\nssh登录\n\n    老传统了，这里就不再过多叙述，具体可看 绿联DX4600 Pro禁用迅雷和中国移动云盘进程 绿联云Nas新版本v3.4.0固件开启SSH\n\n\n运行Docker\ndocker run --rm -p 8088:80 -p 6080:6080 --device=/dev/kvm --privileged webvirtcloud:test-2\n\n\n    8088 是 retspen/webvirtcloud 界面端口，启动后可以通过 NasIP:8088 访问，6080 是 VNC 端口，启动虚拟机后可以直接使用浏览器访问\n\n\n\n    \n\n  \n\n\n\n启动libvirtd\n\n    由于我只修改了Dockerfile里的依赖，所以libvirtd只能手动启动，如果想要自动启动的可以添加启动脚本到 /etc/service 目录\n\n\n\n\n\n 进入Docker内部：\n\ndocker exec -it {镜像名} bash\n\n\n 修改配置文件: 使用 vi 打开 /etc/libvirt/libvirtd.conf\n\n- unix_sock_group = \u0026#34;libvirt\u0026#34;\n+ unix_sock_group = \u0026#34;www-data\u0026#34;\n\n\n\n 启动libvirtd:\n\nlibvirtd -d\n\n\n 启动virtlogd：\n\nvirtlogd -d\n\n\n管理界面\n\n   通过 NasIP:8088 访问管理界面，默认用户名和密码都是 admin\n   \n\n  \n\n\n\n\n   登录成功后，点击计算节点 -\u0026gt; 本地\n   \n\n  \n\n\n\n\n   然后添加一个本地节点\n   \n\n  \n\n\n\n\n   添加后正常情况就会显示已连接\n   \n\n  \n\n\n\n\n   接着继续点击右边的眼睛图案 -\u0026gt; 选择存储 -\u0026gt; 右上角的+号，添加两个存储\n   \n\n  \n\n\n\n\n\n test: 路径为 /var/lib/libvirt/images，用于存放虚拟机文件\n\n\n\n iso:  路径为 /var/lib/libvirt/iso，存放iso镜像文件\n\n\n\n\n   然后返回绿联Nas的ssh界面，复制iso文件到Docker内部\n   \n\n  \n\n\n\n创建虚拟机\n\n    一切准备就绪，现在我们就能创建虚拟机了。\n\n\n\n    选择实例 -\u0026gt; 创建\n    \n\n  \n\n\n\n\n    点击下一个，注意：webvirtcloud 这里的操作有些反人类，最好选择规格 -\u0026gt; 应用，不要使用自定义和模版，否则无法挂载CD-ROM。我这里选择30G的mini，存储一定要改成 test，然后创建\n    \n\n  \n\n    \n\n  \n\n\n\n\n    点击创建后会到实例页面，先不要启动，到设置 -\u0026gt; 磁盘挂载想要安装的系统iso文件，然后在旁边的启动顺序里确认启动第一项是iso所在的磁盘\n    \n\n  \n\n    \n\n  \n\n    \n\n  \n\n\n\n\n    接着就可以开机了，开机后可以点击访问 -\u0026gt; 控制台使用VNC打开系统安装界面，安装完成后记得重新调整启动顺序以及卸载iso镜像\n    \n\n  \n\n\n\n\n    至此，使用第三方Docker搭建的绿联Nas虚拟机管理也就完成了，如果急需使用虚拟机功能，又想保留绿联Nas的系统，随绿联一起“成长”的用户可以利用此功能创建虚拟机，如果不着急的可以等官方的实现\n\n\n其它\n\n\n\n 没有修改libvirtd里的 unix_sock_group 配置为 www-data\n\nFailed to connect socket to \u0026#39;/var/run/libvirt/libvirt-sock\u0026#39;: Permission denied\n\n\n Docker内部(不是绿联系统)执行 chmod 666 /dev/kvm\n\nlibvirt 错误- internal error: process exited while connecting to monitor: Could not access KVM kernel module: Permission denied 2023-07-05T16:17:57.942238Z qemu-system-x86_64: failed to initialize KVM: Permission denied\n\n\n 未安装dnsmasq，如果手动安装，使用 virsh net-start default 手动启动\n\nlibbvirt 错误- Requested operation is not valid: network \u0026#39;default\u0026#39; is not active\n\n\n 未安装qemu-utils\n\ninternal error: creation of non-raw file images is not supported without qemu-img.\n\n\n\n   注意：文章中并未修改绿联Nas本身的系统，所有的安装包和修改文件配置都是在Docker内部进行","index":22,"permalink":"https://honmaple.me/articles/2023/07/绿联DX4600 Pro虚拟机探索.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n本次探索源于上次发现可以\u003cb\u003e使用Docker来管理群晖虚拟机\u003c/b\u003e，而绿联本身是自带\u003cb\u003ekvm\u003c/b\u003e内核模块的，但是要等到绿联官方支持虚拟机，又不知道会等到猴年马月。所以我有一个大胆的想法，能否使用Docker搭建一个可以自由管理虚拟机的程序，最起码可以安装一个windows替换掉绿联内置的有着各种限制的迅雷\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003cb\u003e注意：非专业人士请勿模仿，除非你知道什么是KVM，在此期间所造成的系统风险请自行承担\u003c/b\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003e虚拟机管理\u003c/h2\u003e\n\u003cp\u003e\n   选择了我之前使用过的 \u003cb\u003eretspen/webvirtcloud\u003c/b\u003e 来管理 \u003ccode\u003eKVM\u003c/code\u003e，说实话，这个管理程序比起威联通群晖这些官方自带确实不太好用，但用于测试还是足够了，如果有更好更方便的推荐请在评论区留言\n\u003c/p\u003e\n\n\u003cp\u003e\n   \u003cb\u003eretspen/webvirtcloud\u003c/b\u003e 没有官方的  \u003ccode\u003eDocker\u003c/code\u003e 镜像，只能自己编译，虽然它本身带有一个 \u003cb\u003eDockerfile\u003c/b\u003e，但如果自己构建会遇到各种各样的问题，下面是我遇到的部分问题\n\u003c/p\u003e\n\n\u003ch3 id=\"heading-1.1\"\u003eUbuntu版本问题\u003c/h3\u003e\n\u003cp\u003e\n    \u003cb\u003eretspen...\u003c/b\u003e\u003c/p\u003e","title":"绿联DX4600 Pro虚拟机探索"},{"content":"Table of Contents\n为什么要禁用？\n禁用流程\n\n开启远程协助\nssh登录\n禁用迅雷\n禁用中国移动云盘\n\n其它\n\n\n\n\n前不久入手了一个绿联的 DX4600Pro nas, 外观和硬件确实很精致，但同样发现系统也挺简陋的\n\n\n\n为什么要禁用？\n\n\n\n 对于中国移动云盘，因为我目前没有使用也暂时不准备使用，但是在任务管理器里可以看到相关进程一直在运行，去了进程眼不见心不烦\n\n\n\n 对于 迅雷下载，我只能说真的恶心，每个硬盘都要新建一个迅雷下载目录不说，我明明已经是白金会员，但是下载却完全没速度，试用超级会员又能满宽带下载，删又删不掉，只好禁用掉进程\n\n\n\n禁用流程\n\n   注意：禁用服务可能会造成未知的后果，所引发的风险，请自行承担\n\n\n开启远程协助\n\n    首先到设备管理开启远程协助，得到验证码\n    \n\n  \n\n\n\nssh登录\n\n    我这边使用的是MacOS自带的ssh\n\nssh root@192.168.31.65 -p 922\n\n\n    用户默认为root，端口默认为922，IP地址可以在设备信息里查看\n    \n\n  \n\n\n\n\n    如果提示拒绝连接(ssh: connect to host 192.168.31.65 port 922: Connection refused)， 则需要重启设备，注意重启前保存运行的任务，重启完成后正常即可登录。\n    ssh登录密码前缀为 L#W$%W1uGa，后缀为开启远程协助时的验证码，比如验证码是XXX，则密码为 L#W$%W1uGaXXX\n\n\n\n    登录后可以使用正常的Linux命令，比如查看cpu信息、使用htop查看进程等\n    \n\n  \n\n    \n\n  \n\n\n\n禁用迅雷\n\n    在 /ugreen/thunder/xunlei-pan/ 目录下有两个脚本: start.sh 和 stop.sh, 根据文件名称以及查看其内容可以看出 stop.sh 用于停止迅雷服务，start.sh 用于开启服务，并且在 start.sh 里有这么一段\n\n\n\n    \n\n  \n\n\n\n\n    那么问题就简单了，使用 vi 修改 /ugreen/thunder/xunlei-pan/start.sh 的内容，注释掉倒数第二行的代码(在 su - $thunderName 前加一个 #)，然后执行 /ugreen/thunder/xunlei-pan/stop.sh，到任务管理器里查看迅雷进程就消失了且不会重新出现\n\n\n禁用中国移动云盘\n\n    中国移动云盘的启动文件在 /data/nas_server/cmcc_svr，由于这是个二进制文件，无法修改其内容，原本想去除可执行权限，但测试发现使用 chmod -x /data/nas_server/cmcc_svr 后会被其他进程恢复, 所以通过修改文件名称来禁用进程\n\ncd /data/nas_server/ \u0026amp;\u0026amp; mv cmcc_svr cmcc_svr.backup\n\n    然后kill掉原来的进程即可\n\nps axuf | grep cmcc | grep -v grep | awk \u0026#39;{printf $2}\u0026#39; | xargs kill -9\n\n\n    这样在任务管理器里看不到中国移动云盘的进程，百度网盘同理\n    \n\n  \n\n\n\n其它\n\n   吐槽一下绿联云影院，各种识别错误，把伪恋识别成十二怒汉，十一罗汉也就算了，还把原盘下的花絮识别成错误的影片，识别错也就算了，还不支持多选，只能一个一个地解除匹配信息\n\n\n\n   绿联系统能用，但确实不太好用，还好 Docker 用起来还算不错，希望绿联能继续优化，尤其是进程管理、权限管理以及云影院的识别，另外就是坐等大佬出一期刷其它系统的教程","index":23,"permalink":"https://honmaple.me/articles/2023/06/绿联DX4600 Pro禁用迅雷和中国移动云盘进程.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n前不久入手了一个绿联的 \u003cb\u003eDX4600Pro\u003c/b\u003e nas, 外观和硬件确实很精致，但同样发现系统也挺简陋的\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e为什么要禁用？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 对于\u003cb\u003e中国移动云盘\u003c/b\u003e，因为我目前没有使用也暂时不准备使用，但是在任务管理器里可以看到相关进程一直在运行，去了进程眼不见心不烦\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 对于 \u003cb\u003e迅雷下载\u003c/b\u003e，我只能说真的恶心，每个硬盘都要新建一个迅雷下载目录不说，我明明已经是白金会员，但是下载却完全没速度，试用超级会员又能满宽带下载，删又删不掉，只好禁用掉进程\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"heading-2\"\u003e禁用流程\u003c/h2\u003e\n\u003cp\u003e\n   \u003cb\u003e注意：禁用服务可能会造成未知的后果，所引发的风险，请自行承担\u003c/b\u003e\n\u003c/p\u003e\n\n\u003ch3 id=\"heading-2.1\"\u003e开启远程协助\u003c/h3\u003e\n\u003cp\u003e\n    首先到设备管理开启远程协助，得到验证码\n    \n\u003ca href=\"https://s.libforest.com/images/2023/06/DX4600Pro-02.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/06/DX4600Pro-02.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch3 id=\"heading-2.2\"\u003essh登录\u003c/h3\u003e\n\u003cp\u003e\n    我这边使用的是MacOS自带的ssh\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003essh root@192.168.31.65...\u003c/pre\u003e","title":"绿联DX4600 Pro禁用迅雷和中国移动云盘进程"},{"content":"Table of Contents\n安装教程\n\n下载镜像\n使用ssh登录到后台\n使用Docker命令行安装\n\n折腾教程\n\n群晖本地IP(macvlan)\nwebdav挂载\n\n其它\n\n\n\n绿联Nas的系统真是一言难尽，所以最近几天我都在寻找一种安装群晖的教程，也知晓群晖其实也没那么容易安装，主要是安装群晖后，有很大的概率导致机器指示灯，风扇，甚至M.2固态失效，也正因为此，虽然已经整理好了安装的教程，但迟迟没有动手，此次在网上搜寻教程时无意中发现了一个超酷超帅的Docker镜像，安装后真的会惊叹为何会有如此棒的东西，它就是\n\n\n\n\n\n\n  \n\nkroese/virtual-dsm ，一个利用Docker管理群晖虚拟机的镜像，对于没有虚拟机功能的绿联Nas来说，无疑是非常棒地既可以体验本地群晖系统，又不用刷机改引导，格式化硬盘的方法\n\n\n\n安装教程\n\n   安装流程和之前的已有的一篇文章相差不大 绿联DX4600安装docker黑群晖\n\n\n\n   当然这里也会写上部分我自己特别折腾的记录，大家可以放心食用\n\n\n下载镜像\n\n    打开绿联Docker，输入 kroese/virtual-dsm 下载镜像\n\n\n\n    \n\n  \n\n\n\n使用ssh登录到后台\n\n    其中登录教程在我之前的一篇文章中有介绍 绿联DX4600 Pro禁用迅雷和中国移动云盘进程\n\n\n\n    这里就再简单介绍一下:\n\n\n\n\n 开启远程协助，记住验证码\n\n\n\n 重启机器(注意先保存进行中的任务)\n\n\n\n 使用 ssh 客户端登录，端口 922，密码 L#W$%W1uGa 加上验证码，用户 root\n\n\n\n使用Docker命令行安装\n\n    首先需要验证挂载的目录，我这里是找了两个已经创建并挂载了本地存储的镜像，使用\n\ndocker inspect --format \u0026#34;{{json .HostConfig.Mounts}}\u0026#34; 镜像名\n\n    \n\n  \n\n\n\n\n    查看挂载的实际目录，可以看出Docker实际挂载的目录由\n\n/mnt/media_rw/ + 硬盘UUID + /.ugreen_nas/ + 用户ID + 硬盘目录\n\n    这几部分构成，那么就好办了，首先创建一个DSM的目录，用于存放群晖虚拟机文件，我这里选择固态硬盘，避免使用机械硬盘导致硬盘无法休眠，如果选择其它硬盘，需要先创建一个没什么用的Docker挂载目录，然后使用 inspect 找到实际的路径\n\n\n\n    \n\n  \n\n\n\n\n    建立好目录后使用命令行安装镜像\n\n\n\n    \n\n  \n\n\n\n\n    其中的几个参数\n\n\n\n\n DISK_SIZE=100G: 分配给群晖虚拟机100G的磁盘空间，这部分空间会作为存储1使用\n\n\n\n ALLOCATE=N: 是否预分配100G的大小(Y)，还是按照实际大小展示在绿联Nas上(N)(这个参数貌似没生效)\n\n\n\n CPU_CORES=2: 分配给虚拟机的核数，我的是 n6005，四核，所以分了两核给群晖\n\n\n\n RAM_SIZE=8192M: 分配给虚拟机的内存大小\n\n\n\n --network 实际的网络: 也可以不写，使用默认的 Docker bridge\n\n\n\n\n    创建完成后使用 docker logs -f DSM 查看日志，直到日志显示\n\n\n\n    \n\n  \n\n\n\n\n    在此期间，也可以打开浏览器，使用绿联Nas IP+端口5000 进行访问\n\n\n\n    \n\n  \n\n    \n\n  \n\n\n\n\n    然后就是正常的群晖初始化，至此，想要体验本地群晖系统的就可以行动了\n\n\n\n    等等，后面还有。。。\n\n\n折腾教程\n群晖本地IP(macvlan)\n\n    按照GitHub上的教程，我原本想要配置一个和局域网内其它设备相同网段的IP给群晖虚拟机，所以我创建了一个基于 macvlan 的网络\n\ndocker network create -d macvlan --subnet=192.168.31.0/24 --gateway=192.168.31.1 --ip-range=192.168.31.66/32 -o parent=eth0  dsmnet\n\n\n    然后使用 --network dsmnet 重新创建Docker，结果怎么着，报错了\n\ndocker: Error response from daemon: failed to create the macvlan port: operation not supported.\n\n\n    第一眼我还觉得这是由于docker打包脚本里的 EXPOSE 的锅，甚至去搜索能否禁用该操作，结果也是显而易见的，什么都没找到。后来仔细看了一下报错信息：operation not supported\n    好吧，确认一下 macvlan 相关的模块是否被加载\n\n\nlsmod | grep macvlan\n\n\n    果然，绿联Nas默认是没有macvlan模块的，所以想用绿联Nas部署一个openwrt旁路由的可以先歇了。那么，我能否自己安装macvlan模块呢？\n\n\n\n    \n\n  \n\n\n\n\n    对不起，打扰了。不对，内核版本不符，那么我去下载一个和内核版本相符的文件，使用 uname -r 看一下绿联用的版本\n\n5.10.120\n\n\n    我直接去官方库里找，还好找到了，同样使用的 5.10.120-1\n\nwget https://downloads.openwrt.org/releases/22.03.0-rc4/targets/x86/64/packages/kmod-macvlan_5.10.120-1_x86_64.ipk\n\n\n    继续安装，结果还是一样\n    \n\n  \n\n    因为我对openwrt不太熟悉，实在进行不下去了，只好放弃。不过也能看出绿联还是编译了一些属于自己的东西的，没有直接使用默认的openwrt内核，不过现在大概只能等绿联自己升级固件来默认支持macvlan了，或者有没有大佬能够解答一下这个问题\n\n\nwebdav挂载\n\n    因为docker安装的群晖无法直接使用插入的硬盘，甚至不能映射某个目录到群晖虚拟机，所以如果想用群晖来操作绿联Nas上面的文件，只能通过网络挂载\n\n\n\n    绿联本身支持的网络挂载有限，不支持NFS，但是还好可以支持webdav和ftp，那么可以去群晖web管理界面，打开 file station -\u0026gt; 工具 -\u0026gt; 远程连接 -\u0026gt; 连接设置 -\u0026gt; ftp/webdav 进行配置\n\n\n\n    \n\n  \n\n    \n\n  \n\n\n\n\n    你以为我要说的就这，这不是显而易见，浅显易懂，入口即化的吗？实际上，除了ftp可以正常挂载外，webdav却是死活挂载不了，总是提示连接被服务器拒绝，搞得我还以为绿联是不是连一个基础的webdav都没做好，但我用我的mac连接又可以正常挂载，差点把我整emo\n\n\n\n    \n\n  \n\n\n\n\n    我可以确认我的配置是对的，那到底是哪里出了问题，打开群晖的ssh，也确认了是可以正常和宿主机通信的\n\n\n\n    \n\n  \n\n\n\n\n    最后搞得实在没办法了，抓包吧，还好群晖默认已经安装了tcpdump，只需要生成pcap文件就行\n\ntcpdump -i eth0 host 192.168.31.65 -w ugreen/webdav.pcap\n\n\n    终端运行抓包命令，另一边在群晖界面进行添加webdav的操作，等待再次提示连接被服务器拒绝后，再等待5s，暂停抓包，然后把 webdav.pcap 下载到本地，使用 wireshark 查看\n\n\n\n    \n\n  \n\n\n\n\n    乍一看没什么问题，都是正常的DNS查询和TCP握手，可仔细一看，怎么会多了一个斜杆，而且服务端返回了401错误\n\n\n\n    \n\n  \n\n\n\n\n    原来群晖挂载webdav的路径一定不能使用斜杆开头，一定不能使用斜杆开头，一定不能使用斜杆开头，重要的事情说三遍，需要把 /dav/share/ 改成 dav/share/ (注意，绿联webdav路径后必须有一个斜杆)\n\n\n\n    至此，webdav挂载也ok了\n\n\n其它\n\n\n\n 在使用 非macvlan 网络创建的群晖系统里内置的 IP 20.20.20.21 以及 网关20.20.20.1 是不能修改的，修改后可能会导致无法从浏览器访问群晖\n\n\n\n 可以修改DNS服务为局域网网关或者自建DNS的IP，修改后记得重启群晖系统\n\n\n\n 功耗，启动 virtual-dsm 前我的机器功耗大概是18W，启动后在26W左右，一段时间后又会变成19W，这应该和系统内运行的任务有关","index":24,"permalink":"https://honmaple.me/articles/2023/07/绿联DX4600 Pro安装一个超酷超帅的Docker.html","summary":"\n\u003cp\u003e\n绿联Nas的系统真是一言难尽，所以最近几天我都在寻找一种安装群晖的教程，也知晓群晖其实也没那么容易安装，主要是安装群晖后，有很大的概率\u003cb\u003e导致机器指示灯，风扇，甚至M.2固态失效\u003c/b\u003e，也正因为此，虽然已经整理好了安装的教程，但迟迟没有动手，此次在网上搜寻教程时无意中发现了一个超酷超帅的Docker镜像，安装后真的会惊叹为何会有如此棒的东西，它就是\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n\n\u003ca href=\"https://s.libforest.com/images/2023/07/DX4600Pro-DSM.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/07/DX4600Pro-DSM.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003ca href=\"https://github.com/kroese/virtual-dsm\"\u003ekroese/virtual-dsm\u003c/a\u003e ，一个利用Docker管理群晖虚拟机的镜像，对于没有虚拟机功能的绿联Nas来说，无疑是非常棒地既可以体验本地群晖系统，又不用刷机改引导，格式化硬盘的方法\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e安装教程\u003c/h2\u003e\n\u003cp\u003e\n   安装流程和之前的已有的一篇文章相差不大 \u003ca href=\"https://post.smzdm.com/p/an36zmz2/\"\u003e绿联DX4600安装docker黑群晖\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   当然这里也会写上部分我自己特别折腾的记录，大家可以放心食用\n\u003c/p\u003e\n\n\u003ch3 id=\"heading-1.1\"\u003e下载镜像\u003c/h3\u003e\n\u003cp\u003e\n    打开绿联Docker，输入 \u003ccode\u003ekroese/virtual-dsm\u003c/code\u003e 下载镜像\n\u003c/p\u003e\n\n\u003cp\u003e\n    \n\u003ca href=\"https://s.libforest.com/images/2023/07/DX4600Pro-DSM-01.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/07/DX4600Pro-DSM-01.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch3 id=\"heading-1.2\"\u003e使用ssh登录到后台...\u003c/h3\u003e","title":"绿联DX4600 Pro安装一个超酷超帅的Docker"},{"content":"听说，抬起头可以看到屋檐可惜，外面没下雨\n\n\n\n\n\n\n\n听说，外面在下雨可惜，抬起头没有屋檐","index":25,"permalink":"https://honmaple.me/articles/2018/04/看,那是屋檐.html","summary":"\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/pic/eaves.jpg?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/pic/eaves.jpg?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n听说，抬起头可以看到屋檐\u003cbr/\u003e可惜，外面没下雨\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n听说，外面在下雨\u003cbr/\u003e可惜，抬起头没有屋檐\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"看,那是屋檐"},{"content":"火影TV也完结了,仅以此贴纪念我逝去的青春","index":26,"permalink":"https://honmaple.me/articles/2017/03/火影忍者.html","summary":"\n\u003cp\u003e\n火影TV也完结了,仅以此贴纪念我逝去的青春\n\u003c/p\u003e\n\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/2017/03/149027336068415.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2017/03/149027336068415.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e","title":"火影忍者"},{"content":"问题是这样的: 1只母羊，在第2年和第4年生下小母羊,在第5年死去,问N年后有多少母羊?\n\n想了很久，终于有了一个思路，不过目前效率不高\n\n给出代码:\na = [1]\ndef sheep(N):\n    N = int(N)\n    if N == 1:\n        return a\n    for n,k in enumerate(a):\n        a[n] += 1\n    for n,k in enumerate(a):\n        if k == 2:\n            a.append(1)\n        if k == 4:\n            a.append(1)\n    return sheep(N-1)\n\nwhile True:\n    b = sheep(input(\u0026#39;请输入年份:\\n\u0026#39;))\n    c = [i for i in b if i \u0026lt; 5]\n    print(\u0026#39;母羊总数: %d\u0026#39;%len(c))\n    a = [1]","index":27,"permalink":"https://honmaple.me/articles/2016/03/母羊生羊问题解决.html","summary":"\u003cp\u003e问题是这样的: 1只母羊，在第2年和第4年生下小母羊,在第5年死去,问N年后有多少母羊?\u003c/p\u003e\n\n\u003cp\u003e想了很久，终于有了一个思路，不过目前效率不高\u003c/p\u003e\n\n\u003cp\u003e给出代码:\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ea = [1]\ndef sheep(N):\n    N = int(N)\n    if N == 1:\n        return a\n    for n,k in enumerate(a):\n        a[n] += 1\n    for...\u003c/pre\u003e","title":"母羊生羊问题解决"},{"content":"终究是辞职了，放弃了下个月可能发的年终奖，放弃了下个月就要涨的工资，也许还要放弃杭州这座美丽而陌生的城市，可未来，谁知道呢？总是担心怎么给父母交代，总是担心养老保险怎么办，公积金怎么办，租房搬家怎么办，档案怎么办，户口怎么办，买房买车怎么办，结婚怎么办，孩子怎么办，......未来，到底该怎么办也许明天就要发生世界大战，也许明天会因为意外而死去也许明天会更好，可未来，谁知道呢？什么时候能够重归路上，我，一直在路上","index":28,"permalink":"https://honmaple.me/articles/2019/03/未来，谁知道呢.html","summary":"\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n终究是辞职了，\u003cbr/\u003e放弃了下个月可能发的年终奖，\u003cbr/\u003e放弃了下个月就要涨的工资，\u003cbr/\u003e也许还要放弃杭州这座美丽而陌生的城市，\u003cbr/\u003e可未来，谁知道呢？\u003cbr/\u003e\u003cbr/\u003e总是担心怎么给父母交代，\u003cbr/\u003e总是担心养老保险怎么办，\u003cbr/\u003e公积金怎么办，\u003cbr/\u003e租房搬家怎么办，\u003cbr/\u003e档案怎么办，\u003cbr/\u003e户口怎么办，\u003cbr/\u003e买房买车怎么办，\u003cbr/\u003e结婚怎么办，\u003cbr/\u003e孩子怎么办，\u003cbr/\u003e......\u003cbr/\u003e\u003cbr/\u003e未来，到底该怎么办\u003cbr/\u003e\u003cbr/\u003e也许明天就要发生世界大战，\u003cbr/\u003e也许明天会因为意外而死去\u003cbr/\u003e也许明天会更好，\u003cbr/\u003e可未来，谁知道呢？\u003cbr/\u003e\u003cbr/\u003e什么时候能够重归路上，\u003cbr/\u003e我，一直在路上\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"未来，谁知道呢"},{"content":"期待着，憧憬着，也在思考着。。。\n  7KJFb6k9klWNnlvbI6lqenyU/dopv6CHsWHmLJDTPiHVNhiXFwIUoNn+YGwXJP1VRGQ80GHgrhKjvTbYfMGceJ+zB0ev5ZyxqzqZ6YsF/K3YlMU2IG5cTiHl+Y61TVRsIyNXBl73ymfXYS/epT1EUUHl8akHpSJIdRakCVJDcVnSTNHpj/EgoggetrkN/jOXfyivnTucpkYRaZgQcEeR5OCjexN1BqhD+Pf89p69SVhdHhA1I4+AMmfQei1PVWD5CxwjwHEUyV54v4/kiyRwCYXjwYUD50fb9drAb1SD03W70sqV8opkGVBL5IH0MDef/JZZ4+uZ+Z2Gr/XNf5fS8lQKV7u6w+iZB48BiUvi6dPxm/tqiTNqW9jdyYrm8foOMRkrNfjV4sYtPe2kEmfHqLj+NogazWVPxJzhPTaGQhq2qrenEQ890co5BBpz/Fnl65nTXJTW1I/i0F2nAq2aDroRWm0kiquxKxzoSlVbLAp1A5141fsYim4ivnB22E6s+xwjqdB7FblY1W3pl6irUEPspY9HUgOIWqa/68ArdhvBByAonk76rwvLjU8JL9Cn2A/o9/Oe+ViUyXLJQSfijn8o4MjfdmgtjmIgNoO1djWubojWRFw31u9iim1NTTmSLfnexxVEwzi+y6akxqxo14xcTa2NEKw6/uKuJiNdZcx5F+/WbXABBMGah4nDlY9mVSbNMV0D5Q6gUp5Zo4suy9ZTk88BRWSGGORhBdXcVuJI6AXmRyDrEE/Q7SElpo4hS/ATCxR60Qo5OgQdFRIP1hJLespV77j0JzZllizxv3l6Zoexb1Gi8m42gI1pDSb37JZSHeN2oU3a2l5rv0UwSUEdeF1gvHQvyXAkXxLigeaBoo0e2N+rFgYLHR7UsKsHSqhgU2ZpGYNl7TIp5vviCKq5QGO3KWdPp8aOAE7sNRgs4aEHhmq6zvPByt9UWaatPGTBg/hTAbjbgA8yvWrWWwfz/vnJcNvotEcJkAT3ePge3SS3bv5CSitMFxIfFQBw7ws+kRA3KnW+kinLl1KshKGP5wz1KkyewkrkdxyfHYdX2cA6kE3BGMaPj5AO1Qj0Nbq3PgfiFp3/eGPhXJpCfHnXCm/mD93dDN2eEoOBVJhtE2uJxLhgnaa6y4wZiZJMhcZgFUd7dKYus4d/Uaz5W9uZcM6uMNXJmvMK1hEhV7xZZQ+c9D3sq+PrxOYOqNhURmiQy0PAw8jlDYLElmZKLxV/oDXTsIDxjWxy0JP8rRT+EE6LT4y6fvSBsIhQaHVQXNgdo45116AimZWSuz79oQHMABTZmGXnVApfkyZ9YhpNDUIDJ6WF6GScTxtIckk3n5XLl+OgTNKZCoB434FgJiZbycKW1zNF5AbzYpLO8BouBg5mLGPqwp/Fb+gcMu5oqaKgu5H1S6FFk5UyuMTNWVjaur5FKsy+R09LJu/Qfz/QyB21j/fuKjxdSQmrDF+ohWcnvMSkbSBwNMHEZVqssii5d4KHRBhnLzufOG5I5sD1mcgiHFAvwEKf/5zBem6ttCvX7oKuHDXvc/WBM+eurtlP03n+sau1huTSLWPw07l7hn1HACa8X7J6m4XA7YvPLMkIIBs+0DgrTzc9E+V1sstqughpnOQELH21Yt+FOUgxi0JNUiN9b2nxCTB/Tel+IrXJi0KIVk702l4hpYuJzlJq5MqPVhRE/1c7bo3sLnNjAY2IFlLGRrfs62ya1OWwsPJr2KYa+8A+7MY+39aQrCc2kqavjv1sXDXSJhR4j9aT/31kChbNvLz7DsLqLC5nfY81sXiM0OwO1qTaqeVrFJ5GFtchleP4f6rKNbSJIzO9pklwYizg3wl472hBhmWBsOY+RCfPHc4XKxavXtpQuQLjZ+ts4U712r6+WsjVeKQaw5HQr0bQOJe/ypMn/qv8qw/XkmL8sZWywxSJDQ5OzVFp4h+hsXG6TFJPry7sU3rUF3voJRnAm3fiJpHa5YquxlPcHwH6cLh0LrAGaOa1znhOVZ9fMNCxXGHYA9V0hkpgxn0Ans9yADSQ7ttTQgFrgRtkW/Y6wT7zIuR4U/WkU7D7zCZ5pKB5JRzLQbnLU4K6g0eG0j8Lt8ngC1gnKp3AhvboYZ0hLidbIdwiD7HLX7EailtaBDddSmJX6rf/xsfSuO97I5EXqmEgROX3YHkOFDUJZfL80/xsNh+iWYOtsEiftpKqwdHUwcJ+oQdyYm2esAZpxet4HysCroxWgzIpEI+bTpnhWN6DjKbV2VdndNgag0WS+SuTVs2W6ZhTwHe8ub+3pW8ABqpgBMqYpY4Q7+LACdduK2va/wYoNb2yz4zqnYSOWrNwPHb6uYGSKFP1vG2KSV/7lbsDtxwLy2H3rtv3YUuLqUwbXxnlvFTD/ykDxFoHGUfbM3dS/i1nYOUtsHKyTfelJHRJWIdGyM3uqjt22hX9TSiSkLctr/IAVcn59vtrF5vYGdRMN+2b5Qf/F0cFHxy92Rp/9JVDvyQ0Q1cB/QTFPTbh7aBuEbDMWxrEgiyU3bhXePDyUjdzv2dGkxKT8R/tTJhX3uWjvLg57TjIusHBCV7tjyjvUkuTlyK10NIlY7XnJQ8cr7ZVflebIrw9v9QxYQVMvUkk+ZrXVaeXUHYV2uQd49g4sywrDGNMYR/Ty69H7bPuWnk7ozBWJuxFHYj1zw3mLq8LMccZx4BGbdtZgPoCLcw8i/QX4G0F/ZnCrIPKkCBSPiA24PhXmDgpAgUGPcXeC40c5SFN6BBaKKNGA0MU0XfrIVuqZp7hXTWSkwHSQvCgPqobW/wbLVPw5peKBG3QxFmflQlDQ7ftfJAbNcnTm2Qc1AUhY8ZEcaMUmmEZP2+O/2GF855bOpbItTMbYPw0DDKWQV36ZWmiDl0nDfMs1QsatJzpk7iLhpaE3OfOl5YzTJMD4bPcxZ5VxT+XiAQ09JzoJIanq8kHHdM9zUG9MMD+954Y4w2HN8bZX66gpf7YoMFislHjjAUy0sQYNJaanpw03q2P0jaXS1wWuj7x3JwCU8xuavDur6tqE6WW0U3e6AGy99Oxs+NDJe8j/q9EIG4sDS7sT/rqHkUMudqrYnGGkbCS3lbPjHem+mcraV+nizRsJgU6IesbnnhU5MOf35Btklkj/jnWabUghJJ2pkWOVl1pgCxWfbU9N1RSeh/epxTJoeOVBvL3wKbLg2oBUobbVkAtRMQ7snP8tHBz1XS0iYTLCnPzrfPZ7io+DUA9osW7T15QeO2P8LCVVSIAPZArTTWbg0anyvChHsEtDLdSFLykY5813lmgtHa7ShNuQLJlJRqQJEjiQI7EZjY7H9Q4HMKRc8p3LhESTnoLyDueBxKIbVrP3v3W4xebCFQLXokjZ7k5Rk15xPsOSI9VTA/Z96d4F04yYy4qQg1AbenWzxZaAVms50YS71EUxMGhPkTXqgAdViYlAC9reEnBWYbpkh8kS7doGitNksm8udz7/6QchTJ2mO/MpGnzSFHZ3XNHMjsNwJ7KlmeB/mp7V7LKrno/vNBuxSfR/mxzCfPxnGsr37V4cXUuMN/FAFeA7S8jj7tA8RL3yRdZpmhGFFxKsnn/jtGiQWGhGzm8Rv9mFfQ16Nv6y/9GZIjk5vysl1w6xPueDxszZRl1esLV8IH8MFqB29bgDLYV2h01Lc8dUbVrBMF2rbbRUdNLuABm0DN5JVVzrzRbobMEwVXu9THBtJdO737WazXIDdIMVse3T4UK+KhscuIZ0MMGxLnsQZoDAtsI/OrKCLWhqq8Gp5GDE8yAespBKDVncXPIsEtbzTnmvHp/S0K2rB1BnT6gQHKKt/6hasjDRIOx+1Hj9CV+h2nEbgKM1T4KgGez2A2EHsEbT9tUhE7JUB+ymD1A7dG7S3t6qdZrvzhqxmmirkCT+YirflEFGyZXpzNTtF8CpXPL/sfCbiwZ5LH+VsErzPsJ6eNk3LY9hl0A9YT3NdE9rru392VX26HkeDBlkrUsgKdZ1rtpIJbepWpJr4s09U+r1qZwwkwiHVbCwr+aqgRxke7GpZhsEr9+5eIgIAp7EQwfZT5srp9/rnInjs9u4UT2p8ik+TWjf8qhA2Q+ybqAglLJWuK/P/h07fpvQcCdEG7GMIh9HnCozrbUT3tAWhk3xaB/Geg8dB4bfGIsq3dXyFRRY0d1UypLwr55K37IC66z9tRA2yYgHzcc5wawC7xwYK2PsYS1pq6tv2kusE1Be8NApI1RsD+yBLDV0pOF6IHM+sRS/ta44E/OTF7wpR0ehc2QDkCVxs69cf08ZXfoQAWqC+x3GCpdaqN+tZ+wC3zwiJhuCC8cXUl+qfpFD1/EfW783vbIvylFna63rWe283YXbUT8dM2pXBYkQinibJOhrAg6ePwkmfkvegXU3Q9trL7rdb2llpt88HujjQeLeNKc7IDvRfcLZhQqq4qQso0qRscsfJP16qlGaun0fJ12I2V0xWdOl5rYvD2jCWgthll6ToVJKrtQ8F+Q6UcTyCfSsOd1lxOoCQ/tGXDrNWRKGUHRn3jfXfx6GvKv9WKiK2q3ZBnUh5mTdHn4MckRW6SGI7EUKUA65Pw5yYKPXdIfg0tLpv9W+pot09bKKeGbClsBJqm6Q/pifDDIgcZF6O3FU94UNx9ewhFImdQoU9zOou4fpU1o6vZ/6aLVE4gWLP3GB7S09AEufJ+uf7//SeOT5KwbaIKCkbHjvtf+1kDJ+BT+qCXv3WeJbGVa+BNl8h+fhTAXgAu8WC6vs0e+lSZqmRo8jsG+of/QYu4rDhN5YUFK/ObotdWUkAJHsS2+6NUTMP7+hR9hnGDSlwUegt/JU3AUEcRXpyZnTwLuz8ZHmbTkVolhcktzxhSRSahpVjvEqWcn2t+kiatm8q4vndAvm5evWUpZDHVU6dLfWQUc+sPCEMB5t5ZVA/bSQ0XC9IMEV8s8AqAx6znJD5tI8+Bsyqhi8ZFLdBT4T7Rih5oY7Ot6c/Ex6/wGfReaNCBDihb6fPpkM3I4RydHwav+0LYvsgV6ka0p2gecfF4wvAR44Q/PGBfNeixOBWa6IPdE/HZBkPbzdTxEGZdOOtXLE3axmeHVQJJl7skd3ecPdp+iE2Q3rHorTbUU1dziLZoBDjHEWPzcxKYEw14JZke65JBeul+kIEr0myDcRnayZz1PZ4VfQrQ8HSMexaB5kgC4PGlc6q8I5J8b7m5KBq9l1JcUxhNf7akUe1LJ7TJVqfl50y1OdBw5/WGvrxkixZlnkwnsL1CtDoic+/YErvsXgG2Oj6yVwv0V1kj0EaC0vg0kojoDtwxwULTJ87OegXbUCirtKepg4+iXOoXWy8LJfSG/w5SI68CoT5MasrRjpiaSMKePN3SnW0GZDIYN2US5luYC4vKmzAbDjTNPaGuVw2l9ge1o0QRrRqjn3oi2IVUZXUk=\n\n\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;","index":29,"permalink":"https://honmaple.me/articles/2018/10/期待着这么一部小说.html","summary":"\u003cdiv class=\"encrypt-container entry-encrypt\"\u003e\n  \u003cdiv class=\"encrypt-form entry-form\"\u003e\n    \u003cinput type=\"password\" class=\"encrypt-password\" placeholder=\"请输入密码\" /\u003e\n    \u003ci class=\"fa fa-key encrypt-button\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\u003cdiv class=\"encrypt-desc\"\u003e期待着，憧憬着，也在思考着。。。\u003c/div\u003e\n  \u003cdiv class=\"encrypt-content\" style=\"display:none;\"\u003ebNzFmpbFflmZvcMsVdGrT/nph1tjbg7ePBTFOpcZuBvvzxA6r5ZgV+UzprRSzbzheV35n2INKPyFWtzDOGBeLnCfehOdsimrqhgAV3k/hkusWkDn0pKXZtywlTNxZPpVTyEkWzQtdjk2VBijKlC7Ftfg0GaSoR1IVdxO+E9zo9PNuGm0TNKfDpb6fSmd1mey4CbbwgOppiXxFV0i6GXeTwCm0+Zct2uOm76/BWvQimWeon+J6OO0AAhbwwLDCe+brjXYqIxQYHiEHNeJoobNcNhwklTBYNkJA8HTzs+GTzLITPpd3oyYikJaKhACs/XJMZpZrUbYkYISekv8FA/pt0xKq7qoq1FqOx+Qu4biY59nRbZL7+W3jDKI9zrAnXFgzsWxamU8K1uMpBPkawSVk380XNwKcbywJ2XVDnPoCTGWLJuJmy+5PhlDixWRL5U2UJlbw0Y4K9WCnPHoIvZsIRC+dalVF8q5lekh4CndmaVJvfnLfjeoQkdfsgzFCwm86kWGTISiY8uIH/5xUPEd1EKCsyLQOq3BcVgHaP+dJQ8BBTPzeDFhMq2i1w0+ZTZQiFt41TVqUDps1x9xPm10PGoSbTO9cABfLB4EkPxXm83yIcSXLvtXcK25Bpp/oty8w2G3vYoUi29rNwKDWoou4B7YgwIF93GWRNhd6/rj5zv8inp0nBR2IBD4IhuqONzxvnL/SR+OXHeZCfQJuX/z6R50xThRYyo9KSP7z4Ip7HJQBXwxcGHf8WR4bEXoSh/dOMsubDV7lm6f/IqSgqFoWvt1IpRdwd3OLl2VAXsEHnL+SrGmifa8PQxjYF8hytKenIUXaILIChlAotBpoC5STo8aq2I4Fg7PK+Uf3UwF4r+Iqmerv0OBAae19LlutRrjjJrajBT7sVvketFeE/oxZZ/9672grc2qiJa85lrENlyK0keH+lYR1JYAx+qEp3VbysJOZs6OjVt1cDWAaM/6I37EAcjsixKcABb2u2XzN40vrtSbmJttH818huNmy5khDE6n4aW5PzanOEtRVRyOYiAmQcV+f0m4BaN4f8Ag9lzUKrR7TTvEXcYaMjZ9R3AsOe24YUzBgZKXym3h1rBCs6NeYsw4zz8t7U56ZvchtkR3HdPQBuPBlM7YSsRP6pzM7mSuOHlnRDWGPqULunp2IQRtNU5uycgjCNQsxiLOnCm4T3LLCD1SLSkVpbrrQBmjNzh8khmcbn5yCOj5LLeBQuf7u1/zJy61I0BdHXuaKbW7/ld9eV7x9vtG2TjQiFK1\u003c/div\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;\n\u003c/script\u003e\n","title":"期待着这么一部小说"},{"content":"曾经她问我谁考了全校第二我笑着指了指旁边是他后来听说他们走得很近明明考了全校第二的人是我\n\n\n\n\n\n\n\n曾经她问我谁是运动会上得分最多的人我笑着指了指旁边是他后来听说他们在一起了明明得分最多的人是我\n\n\n\n\n\n\n\n后来她不再问我了后来我没有她了","index":30,"permalink":"https://honmaple.me/articles/2019/05/曾经.html","summary":"\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n曾经\u003cbr/\u003e她问我\u003cbr/\u003e谁考了全校第二\u003cbr/\u003e\u003cbr/\u003e我笑着\u003cbr/\u003e指了指旁边\u003cbr/\u003e是他\u003cbr/\u003e\u003cbr/\u003e后来\u003cbr/\u003e听说他们走得很近\u003cbr/\u003e\u003cbr/\u003e明明考了全校第二的人是我\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n曾经\u003cbr/\u003e她问我\u003cbr/\u003e谁是运动会上得分最多的人\u003cbr/\u003e\u003cbr/\u003e我笑着\u003cbr/\u003e指了指旁边\u003cbr/\u003e是他\u003cbr/\u003e\u003cbr/\u003e后来\u003cbr/\u003e听说他们在一起了\u003cbr/\u003e\u003cbr/\u003e明明得分最多的人是我\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n后来\u003cbr/\u003e她不再问我了\u003cbr/\u003e\u003cbr/\u003e后来\u003cbr/\u003e我没有她了\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"曾经"},{"content":"ps:真TM的闲着蛋疼","index":31,"permalink":"https://honmaple.me/articles/2017/05/晒晒我的Linux及桌面.html","summary":"\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/2017/05/149364033937825.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2017/05/149364033937825.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/2017/05/149364138162872.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2017/05/149364138162872.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/2017/05/149364171386276.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2017/05/149364171386276.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nps:真TM的闲着蛋疼\n\u003c/p\u003e","title":"晒晒我的Linux及桌面"},{"content":"你怎么那么冷漠  你怎么就不怕错过我明明你也很爱我  为什么爱不到结果\n\n\n\n\n\n\n\n咫尺层城留不住久相忘到此偏相忆","index":32,"permalink":"https://honmaple.me/articles/2017/08/明明你也很爱我.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n你怎么那么冷漠\u003cbr/\u003e  你怎么就不怕错过我\u003cbr/\u003e明明你也很爱我\u003cbr/\u003e  为什么爱不到结果\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n咫尺层城留不住\u003cbr/\u003e久相忘\u003cbr/\u003e到此偏相忆\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e","title":"明明你也很爱我"},{"content":"date --help\n\n\n\n\n\n%%\n一个文字的 %\n\n\n%a\n当前locale 的星期名缩写(例如： 日，代表星期日)\n\n\n%A\n当前locale 的星期名全称 (如：星期日)\n\n\n%b\n当前locale 的月名缩写 (如：一，代表一月)\n\n\n%B\n当前locale 的月名全称 (如：一月)\n\n\n%c\n当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)\n\n\n%C\n世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)\n\n\n%d\n按月计的日期(例如：01)\n\n\n%D\n按月计的日期；等于%m/%d/%y\n\n\n%e\n按月计的日期，添加空格，等于%_d\n\n\n%F\n完整日期格式，等价于 %Y-%m-%d\n\n\n%g\nISO-8601 格式年份的最后两位 (参见%G)\n\n\n%G\nISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用\n\n\n%h\n等于%b\n\n\n%H\n小时(00-23)\n\n\n%I\n小时(00-12)\n\n\n%j\n按年计的日期(001-366)\n\n\n%k\nhour, space padded ( 0..23); same as %_H\n\n\n%l\nhour, space padded ( 1..12); same as %_I\n\n\n%m\nmonth (01..12)\n\n\n%M\nminute (00..59)\n\n\n%n\na newline\n\n\n%N\nnanoseconds (000000000..999999999)\n\n\n%p\nlocale\u0026#39;s equivalent of either AM or PM; blank if not known\n\n\n%P\nlike %p, but lower case\n\n\n%q\nquarter of year (1..4)\n\n\n%r\nlocale\u0026#39;s 12-hour clock time (e.g., 11:11:04 PM)\n\n\n%R\n24-hour hour and minute; same as %H:%M\n\n\n%s\nseconds since 1970-01-01 00:00:00 UTC\n\n\n%S\n秒(00-60)\n\n\n%t\n输出制表符 Tab\n\n\n%T\n时间，等于%H:%M:%S\n\n\n%u\n星期，1 代表星期一\n\n\n%U\n一年中的第几周，以周日为每星期第一天(00-53)\n\n\n%V\nISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)\n\n\n%w\n一星期中的第几日(0-6)，0 代表周一\n\n\n%W\n一年中的第几周，以周一为每星期第一天(00-53)\n\n\n%x\n当前locale 下的日期描述 (如：12/31/99)\n\n\n%X\n当前locale 下的时间描述 (如：23:13:48)\n\n\n%y\n年份最后两位数位 (00-99)\n\n\n%Y\n年份\n\n\n%z +hhmm\n数字时区(例如，-0400)\n\n\n%:z +hh:mm\n数字时区(例如，-04:00)\n\n\n%::z +hh:mm:ss\n数字时区(例如，-04:00:00)\n\n\n%:::z\n数字时区带有必要的精度 (例如，-04，+05:30)\n\n\n%Z\n按字母表排序的时区缩写 (例如，EDT)\n\n\n\n\nhttp://www.cplusplus.com/reference/ctime/strftime/\n\n\n\n\nspecifier\nReplaced by\nExample\n\n\n\n%a\nAbbreviated weekday name *\nThu\n\n\n%A\nFull weekday name *\nThursday\n\n\n%b\nAbbreviated month name *\nAug\n\n\n%B\nFull month name *\nAugust\n\n\n%c\nDate and time representation *\nThu Aug 23 14:55:02 2001\n\n\n%C\nYear divided by 100 and truncated to integer (00-99)\n20\n\n\n%d\nDay of the month, zero-padded (01-31)\n23\n\n\n%D\nShort MM/DD/YY date, equivalent to %m/%d/%y\n08/23/01\n\n\n%e\nDay of the month, space-padded ( 1-31)\n23\n\n\n%F\nShort YYYY-MM-DD date, equivalent to %Y-%m-%d\n2001-08-23\n\n\n%g\nWeek-based year, last two digits (00-99)\n01\n\n\n%G\nWeek-based year\n2001\n\n\n%h\nAbbreviated month name * (same as %b)\nAug\n\n\n%H\nHour in 24h format (00-23)\n14\n\n\n%I\nHour in 12h format (01-12)\n02\n\n\n%j\nDay of the year (001-366)\n235\n\n\n%m\nMonth as a decimal number (01-12)\n08\n\n\n%M\nMinute (00-59)\n55\n\n\n%n\nNew-line character (\u0026#39;n\u0026#39;)\n\n\n\n%p\nAM or PM designation\nPM\n\n\n%r\n12-hour clock time *\n02:55:02 pm\n\n\n%R\n24-hour HH:MM time, equivalent to %H:%M\n14:55\n\n\n%S\nSecond (00-61)\n02\n\n\n%t\nHorizontal-tab character (\u0026#39;t\u0026#39;)\n\n\n\n%T\nISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S\n14:55:02\n\n\n%u\nISO 8601 weekday as number with Monday as 1 (1-7)\n4\n\n\n%U\nWeek number with the first Sunday as the first day of week one (00-53)\n33\n\n\n%V\nISO 8601 week number (01-53)\n34\n\n\n%w\nWeekday as a decimal number with Sunday as 0 (0-6)\n4\n\n\n%W\nWeek number with the first Monday as the first day of week one (00-53)\n34\n\n\n%x\nDate representation *\n08/23/01\n\n\n%X\nTime representation *\n14:55:02\n\n\n%y\nYear, last two digits (00-99)\n01\n\n\n%Y\nYear\n2001\n\n\n%z\nISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100),If timezone cannot be determined, no characters\n+100\n\n\n%Z\nTimezone name or abbreviation *,if timezone cannot be determined, no characters\nCDT\n\n\n%%\nA % sign\n%","index":33,"permalink":"https://honmaple.me/articles/2017/10/时间format输出格式参考.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\ndate --help\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ctable\u003e\n\u003ctr\u003e\n\u003ctd\u003e%%\u003c/td\u003e\n\u003ctd\u003e一个文字的 %\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e%a\u003c/td\u003e\n\u003ctd\u003e当前locale 的星期名缩写(例如： 日，代表星期日)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e%A\u003c/td\u003e\n\u003ctd\u003e当前locale 的星期名全称 (如：星期日)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e%b\u003c/td\u003e\n\u003ctd\u003e当前locale 的月名缩写 (如：一，代表一月)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e%B\u003c/td\u003e\n\u003ctd\u003e当前locale 的月名全称 (如：一月)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e%c\u003c/td\u003e\n\u003ctd\u003e当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e%C\u003c/td\u003e\n\u003ctd\u003e世纪...\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e","title":"时间format输出格式参考"},{"content":"if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"music\"] \u0026\u0026 document.querySelector(\"meting-js\")) {\n     var meting_api = 'https://api.honmaple.com/meting?server=:server\u0026type=:type\u0026id=:id\u0026auth=:auth\u0026r=:r';\n\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/APlayer.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/Meting.min.js\");\n\n     shortcodes.loadCSS(\"https://honmaple.me/static/lib/css/APlayer.min.css\");\n     shortcodes.loadCSS(\"https://honmaple.me/static/css/aplayer.css\");\n }\n shortcodes[\"music\"] = true;\n\n\n\n\n\n\n\n有时候总是忍不住思考我是不是把自己隐私保护的太好以至于在这个时代一个最好也是最坏的时代感到那么的不适应...","index":34,"permalink":"https://honmaple.me/articles/2021/04/时代.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\n  \u003cmeting-js server=\"netease\" type=\"song\" id=\"30841464\"\u003e\u003c/meting-js\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"music\"] \u0026\u0026 document.querySelector(\"meting-js\")) {\n     var meting_api = 'https://api.honmaple.com/meting?server=:server\u0026type=:type\u0026id=:id\u0026auth=:auth\u0026r=:r';\n\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/APlayer.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/Meting.min.js\");\n\n     shortcodes.loadCSS(\"https://honmaple.me/static/lib/css/APlayer.min.css\");\n     shortcodes.loadCSS(\"https://honmaple.me/static/css/aplayer.css\");\n }\n shortcodes[\"music\"] = true;\n\u003c/script\u003e\n\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n有时候总是忍不住思考\u003cbr/\u003e我是不是把自己隐私保护的太好\u003cbr/\u003e以至于在这个时代\u003cbr/\u003e一个最好也是最坏的时代\u003cbr/\u003e感到那么的不适应\u003cbr/\u003e...\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"时代"},{"content":"日上三竿犹在眠不是神仙胜似神仙很舒服\n\n\n\n\n\n夜半三更竿犹在醒不是鬼胜似鬼很难受\n\n\n\n\n\n日上三竿犹在醒不是鬼胜似鬼很难受\n\n\n\n\n\n夜半三更竿犹在眠不是神仙胜似神仙很舒服","index":35,"permalink":"https://honmaple.me/articles/2018/03/日上三竿与夜半三更.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n日上三竿犹在眠\u003cbr/\u003e不是神仙\u003cbr/\u003e胜似神仙\u003cbr/\u003e\u003cbr/\u003e很舒服\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n夜半三更竿犹在醒\u003cbr/\u003e不是鬼\u003cbr/\u003e胜似鬼\u003cbr/\u003e\u003cbr/\u003e很难受\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n日上三竿犹在醒\u003cbr/\u003e不是鬼\u003cbr/\u003e胜似鬼\u003cbr/\u003e\u003cbr/\u003e很难受\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n夜半三更竿犹在眠\u003cbr/\u003e不是神仙\u003cbr/\u003e胜似神仙\u003cbr/\u003e\u003cbr/\u003e很舒服\n\u003c/p\u003e\n\u003c/div\u003e\n","title":"日上三竿与夜半三更"},{"content":"记录一下随手写的诗，或者也不算诗\n1.\n大漠孤烟无边关\n地上重楼忘记人\n天涯海角难磨灭\n怎奈何\n\u0026gt;这里有两句类似候补的最后一句\n+ 夜迹血月怎奈何\n+ 万千奴隶怎奈何\n\n\n不想说明当时是怎样的心境,毕竟当时的心境是没有办法重来的\n\n\n2.\n星空太美，手机拍不了也放不下，\n只能放在记忆里，看不清也摸不着，\n最后只能慢慢流逝，留不了也抓不到\n\n3.\n焚舟破釜天，\n唯命弃我岸上前，\n惘顾神州情碎，\n山水一念，\n勿镜天下红尘，\n在人间","index":36,"permalink":"https://honmaple.me/articles/2015/12/无题.html","summary":"\u003cp\u003e记录一下随手写的诗，或者也不算诗\u003cbr\u003e\n1.\n大漠孤烟无边关\u003cbr\u003e\n地上重楼忘记人\u003cbr\u003e\n天涯海角难磨灭\u003cbr\u003e\n怎奈何\u003cbr\u003e\n\u0026gt;这里有两句类似候补的最后一句\u003cbr\u003e\n+ 夜迹血月怎奈何\u003cbr\u003e\n+ 万千奴隶怎奈何\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e不想说明当时是怎样的心境,毕竟当时的心境是没有办法重来的\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e2.\n星空太美，手机拍不了也放不下，\u003cbr\u003e\n只能放在记忆里，看不清也摸不着，\u003cbr\u003e\n最后只能慢慢流逝，留不了也抓不到\u003c/p\u003e\n\n\u003cp\u003e3.\n焚舟破釜天，\u003cbr\u003e\n唯命弃我岸上前，\u003cbr\u003e\n惘顾神州情碎，\u003cbr\u003e\n山水一念，\u003cbr\u003e\n勿镜天下红尘，\u003cbr\u003e\n在人间\u003c/p\u003e\n","title":"无题"},{"content":"作为一个主题控，经常会切换主题，之前切换主题的方式是这样的，M-x,`load-theme`,选中,但是个人认为不够便捷，正好前几天发现了hydra这个插件,也想实践一下\n\n\n\n获取主题列表\n\n(setq maple-cycle-themes (mapcar \u0026#39;symbol-name (custom-available-themes)))\n\n\n获取当前主题索引\n\n(cl-position (car (mapcar \u0026#39;symbol-name custom-enabled-themes)) maple-cycle-themes :test \u0026#39;equal)\n\n\n获取下一个主题\n\n(setq maple-current-theme-index\n      (+ 1 maple-current-theme-index))\n(setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))\n\n\n加载主题\n\n(load-theme (intern maple-current-theme) t)\n\n\n最后得到这样的函数\n\n(defun maple/cycle-theme (num)\n  (interactive)\n  (setq maple-current-theme-index\n        (+ num\n           (cl-position\n            (car (mapcar \u0026#39;symbol-name custom-enabled-themes)) maple-cycle-themes :test \u0026#39;equal)))\n  (when (\u0026gt;= maple-current-theme-index (length maple-cycle-themes))\n    (setq maple-current-theme-index 0))\n  (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))\n  (mapc \u0026#39;disable-theme custom-enabled-themes)\n  (let ((progress-reporter\n         (make-progress-reporter\n          (format \u0026#34;Loading theme %s...\u0026#34; maple-current-theme))))\n    (load-theme (intern maple-current-theme) t)\n    (progress-reporter-done progress-reporter)))\n(defun maple/next-theme()\n  (interactive)\n  (maple/cycle-theme 1))\n(defun maple/previous-theme()\n  (interactive)\n  (maple/cycle-theme -1))\n(defhydra maple/cycle-themes ()\n  (\u0026#34;n\u0026#34; maple/next-theme \u0026#34;next theme\u0026#34;)\n  (\u0026#34;p\u0026#34; maple/previous-theme \u0026#34;prev theme\u0026#34;))\n\n\nok,绑定一个快捷键吧","index":37,"permalink":"https://honmaple.me/articles/2017/05/方便的切换emacs主题.html","summary":"\n\u003cp\u003e\n作为一个主题控，经常会切换主题，之前切换主题的方式是这样的，\u003cb\u003eM-x\u003c/b\u003e,`load-theme`,选中,但是个人认为不够便捷，正好前几天发现了\u003cb\u003ehydra\u003c/b\u003e这个插件,也想实践一下\n\u003c/p\u003e\n\n\u003cp\u003e\n获取主题列表\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(setq maple-cycle-themes (\u003cspan style=\"color:#a6e22e\"\u003emapcar\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;symbol-name\u003c/span\u003e (custom-available-themes)))\u003c/pre\u003e\n\n\u003cp\u003e\n获取当前主题索引\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(cl-position (\u003cspan style=\"color:#a6e22e\"\u003ecar\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emapcar\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;symbol-name\u003c/span\u003e custom-enabled-themes...\u003c/pre\u003e","title":"方便的切换emacs主题"},{"content":"Table of Contents\n同步\n\n单向同步\n\n同步选项\n同步逻辑\n\n镜像同步\n\n同步选项\n同步逻辑\n\n双向同步\n\n同步选项\n同步逻辑\n\n\n\n\n\n\n最近在写一个文件同步和备份的软件，特此记录\n\n\n\n同步\n单向同步\n同步选项\n\n\n\n 选项一: 源目录的文件和目标目录的文件都发生修改:\n\n\n\n\n 覆盖文件: 源目录 -\u0026gt; 目录目录\n\n\n\n 跳过文件: 不作任何处理\n\n\n\n\n 选项二: 源目录的文件被删除时，是否删除目标目录的文件\n\n\n\n同步逻辑\n\n     第一次同步会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。后续同步会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。\n\n\n\n\n\n 源目录无修改: 无操作\n\n\n\n 源目录新增文件: 对比信息文件判断是否新增\n\n\n\n\n 目标目录无修改: 源目录 -\u0026gt; 目录目录\n\n\n\n 目标目录新增文件: 选项一\n\n\n\n\n 源目录修改文件: 对比信息文件判断是否修改\n\n\n\n\n 目标目录无修改: 源目录 -\u0026gt; 目录目录\n\n\n\n 目标目录修改文件: 选项一\n\n\n\n 目标目录删除文件: 源目录 -\u0026gt; 目录目录\n\n\n\n\n 源目录删除文件: 对比信息文件判断是否删除\n\n\n\n\n 目标目录无修改: 源目录 -\u0026gt; 目录目录\n\n\n\n 目标目录修改文件: 选项一\n\n\n\n 目标目录删除文件: 无操作\n\n\n\n\n镜像同步\n同步选项\n\n\n\n 单向同步选项一: 覆盖文件\n\n\n\n 单向同步选项二: 同步删除目标目录的文件\n\n\n\n同步逻辑\n\n     逻辑同单向同步\n\n\n双向同步\n同步选项\n\n\n\n 选项一: 源目录的文件和目标目录的文件都发生修改:\n\n\n\n\n 保留最新的文件: 对比文件修改时间，如果源目录的文件最新, 则覆盖目标目录的文件; 反之，覆盖源目录的文件\n\n\n\n 以源目录为准: 源目录 -\u0026gt; 目录目录\n\n\n\n 以目标目录为准: 源目录 \u0026lt;- 目录目录\n\n\n\n 跳过文件: 不作任何处理\n\n\n\n\n 选项二: 源目录的文件被删除时，是否删除目标目录的文件\n\n\n\n 选项三: 目标目录的文件被删除时，是否删除源目录的文件\n\n\n\n同步逻辑\n\n     第一次同步会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。后续同步会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。\n\n\n\n\n\n 源目录无修改: 对比信息文件判断\n\n\n\n\n 目标目录新增文件: 源目录 \u0026lt;- 目录目录\n\n\n\n 目标目录修改文件: 源目录 \u0026lt;- 目录目录\n\n\n\n 目标目录删除文件: 源目录 \u0026lt;- 目录目录\n\n\n\n\n 源目录新增文件: 对比信息文件判断是否新增\n\n\n\n\n 目标目录无修改: 源目录 -\u0026gt; 目录目录\n\n\n\n 目标目录新增文件: 选项一\n\n\n\n\n 源目录修改文件: 对比信息文件判断是否修改\n\n\n\n\n 目标目录无修改: 源目录 -\u0026gt; 目录目录\n\n\n\n 目标目录修改文件: 选项一\n\n\n\n 目标目录删除文件: 源目录 -\u0026gt; 目录目录\n\n\n\n\n 源目录删除文件: 对比信息文件判断是否删除\n\n\n\n\n 目标目录无修改: 源目录 -\u0026gt; 目录目录\n\n\n\n 目标目录修改文件: 源目录 \u0026lt;- 目录目录\n\n\n\n 目标目录删除文件: 无操作","index":38,"permalink":"https://honmaple.me/articles/2023/08/文件同步和备份.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n最近在写一个文件同步和备份的软件，特此记录\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e同步\u003c/h2\u003e\n\u003ch3 id=\"heading-1.1\"\u003e单向同步\u003c/h3\u003e\n\u003ch4 id=\"heading-1.1.1\"\u003e同步选项\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 选项一: 源目录的文件和目标目录的文件都发生修改:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 覆盖文件: \u003cb\u003e源目录 -\u0026gt; 目录目录\u003c/b\u003e\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 跳过文件: 不作任何处理\n\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 选项二: 源目录的文件被删除时，是否删除目标目录的文件\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"heading-1.1.2\"\u003e同步逻辑\u003c/h4\u003e\n\u003cp\u003e\n     \u003cb\u003e第一次同步\u003c/b\u003e会获取源目录和目标目录所有文件的信息, 并将信息写入本地。这时源目录下所有文件都是新增的。\u003cb\u003e后续同步\u003c/b\u003e会获取源目录和目标目录所有文件的信息, 并对比本地信息的修改来进行同步。\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 源目录\u003cb\u003e无修改\u003c/b\u003e: 无操作\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 源目录\u003cb\u003e新增文件\u003c/b\u003e: 对比信息文件判断是否新增\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 目标目录无修改: \u003cb\u003e源目录 -\u0026gt; 目录目录\u003c/b\u003e\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 目标目录新增文件: \u003cb\u003e选项一...\u003c/b\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e","title":"文件同步和备份"},{"content":"民可使由之不可使知之\n――《论语·泰伯篇》\n\n天下熙熙皆为利来，天下攘攘皆为利往。\n——司马迁\n\n.....因为尽管沉默代替了交谈，言语却总是能保持它的力量，言语给予意义谋介, 它向那些愿意倾听的人们发出真相的宣告。\n而真相是，这个国家，有些事情错得可怕，残暴、不公、歧视和镇压。你曾经有过反对的自由，可以说出你想说的话，但你现在有是审查制度和监视系统，强迫你随大流，强迫你服从。\n这是怎么发生的？这要怪谁？当然, 有些人比大家更需要负上责任。\n但是，老实说, 如果你要找人负责的话，你只需要照照镜子。\n我知道你为什么这样做，我知道你害怕，谁不会呢？战争、恐怖事件、疾病。它们就像杂草的种子，用来摧毁你的理智，夺走你的常识，恐惧控制了你。你在慌乱中投向了元首先生，亚当沙特勒。\n他向你许诺秩序，他向你许诺和平，所要求的不过是你无条件的服从和沉默。昨晚我决定结束这种沉默。昨晚我摧毁了老巴里街，以提醒这个国家忘记的事情.........以此提醒世界公平、正义和自由，不只是口头说说，它们是信念......\n――《V For Vendetta》\n\n他们的目的不是为人民服务，而是控制人民为其服务……","index":39,"permalink":"https://honmaple.me/articles/2015/12/摘抄一些经典语句.html","summary":"\u003cp\u003e民可使由之不可使知之\u003cbr\u003e\n――《论语·泰伯篇》\u003c/p\u003e\n\n\u003cp\u003e天下熙熙皆为利来，天下攘攘皆为利往。\u003cbr\u003e\n——司马迁\u003c/p\u003e\n\n\u003cp\u003e.....因为尽管沉默代替了交谈，言语却总是能保持它的力量，言语给予意义谋介, 它向那些愿意倾听的人们发出真相的宣告。\u003cbr\u003e\n而真相是，这个国家，有些事情错得可怕，残暴、不公、歧视和镇压。你曾经有过反对的自由，可以说出你想说的话，但你现在有是审查制度和监视系统，强迫你随大流，强迫你服从。\u003cbr\u003e\n这是怎么发生的？这要怪谁？当然, 有些人比大家更需要负上责任。\u003cbr\u003e\n但是，老实说, 如果你要找人负责的话，你只需要照照镜子。\u003cbr\u003e\n我知道你为什么这样做，我知道你害怕，谁不会呢？战争、恐怖事件、疾病。它们就像杂草的种子...\u003c/p\u003e","title":"摘抄一些经典语句"},{"content":"Table of Contents\n如何搭建\ndocker-compose\nnginx和https配置\n移动端支持\nFAQ\n\n重置密码\n\n\n\n\n\n类似我之前实现的时间轴, 也是一个私人的说说或者是私人的微博，可以用来记录一些临时的想法或者分享某一时刻的精彩瞬间，毕竟数据在自己手上相当酷不是\n\n\n\n如何搭建\n\n   根据memos文档, 搭建也非常简单, 直接使用 docker 即可\n\ndocker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest\n\n   \n\n  \n\n\n\ndocker-compose\n\n   因为我需要和我之前的搭建好一些服务(Blog, DNS等)统一管理, 所以转成了 docker-compose 配置\n\nversion: \u0026#34;3\u0026#34;\n\nservices:\n  blog:\n    ...\n  memos:\n    image: neosmemo/memos:latest\n    container_name: \u0026#34;memos\u0026#34;\n    ports:\n      - 127.0.0.1:8005:5230\n    volumes:\n      - ./memos:/var/opt/memos\n    network_mode: bridge\n\n   需要注意的是 ./memos 目录用来作为数据持久化\n\n\nnginx和https配置\n\n   这也是和我之前的服务保持一致, 我的 nginx 配置目录格式如下\n\n/etc/nginx/\n├── nginx.conf\n├── conf.d\n│   ├── default.conf\n│   ├── upsteam.conf\n│   ├── blog.conf\n│   ├── cloud.conf\n│   ├── ...\n│   ├── memos.conf\n│   └── ssl\n│       ├── xxx.com.conf\n\n\n\n 使用 HTTPS 连接\n\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  xxx.com *.xxx.com;\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n    location ^~ /.well-known/acme-challenge {\n        alias /home/xxx/app/acme.sh/xxx.com/.well-known/acme-challenge;\n    }\n}\n\n\n 添加 upstream\n\nupstream memos.xxx.com {\n    server 127.0.0.1:8005 max_fails=3 fail_timeout=30s;\n}\n\n\n 添加 memos.conf\n\nserver {\n    listen       443 ssl;\n    listen       [::]:443 ssl;\n    server_name  memos.xxx.com;\n    include      /etc/nginx/conf.d/ssl/xxx.com.conf;\n\n    access_log  /home/xxx/app/logs/memos_nginx_access.log;\n    error_log   /home/xxx/app/logs/memos_nginx_error.log;\n\n    location / {\n        proxy_pass       http://memos.xxx.com;\n        proxy_redirect   off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n\n\n 添加DNS记录: 到 CloudFlare 添加一个 memos 的 CNAME 记录到 cname.xxx.com, 等待一分钟即可\n\n\n\n 添加SSL证书: 如果使用了 CloudFlare, 这一步可以忽略。 因为我很早就建好了一个 acme.sh 服务，现在可以使用它来增加一个证书，首先需要重启 nginx， 生成证书前也可以使用 dig memos.xxx.com 验证 DNS 是否生效, 我这里使用的是 webroot 方式\n\ndocker exec acme.sh --issue -d xxx.com -d www.xxx.com,memos.xxx.com -w /acme.sh/xxx.com --preferred-chain \u0026#34;ISRG\u0026#34; --server  letsencrypt\n\n     然后重启nginx\n\n\n\n移动端支持\n\n   既然要记录一些临时的想法，肯定不能只有web平台，否则有了新想法，等打开浏览器，登录，然后输入，这时候想法早没了，虽然 Memos 本身自带的web界面在手机浏览器上也能渲染得很好，但是有一个手机APP还是会更方便一些，目前有一个 memos.moe 可供使用，我也安装使用过，确实流畅，但还有一些基础功能比如资源管理和系统管理没有实现，为此，我自己写了一个 专属APP, 添加了这一部分的实现\n\n\n   \n     \n       \n\n  \n\n     \n\n     \n       \n\n  \n\n     \n\n     \n       \n\n  \n\n     \n\n     \n       \n\n  \n\n     \n   \n\nFAQ\n重置密码\n\n    升级到 0.12.0 后无法登录，总是提示 Incorrect login credentials, 因为使用的 Docker 部署，找到挂载目录下的 memos_prod.db 文件(请先备份好), 我的机器上没有安装 sqlite, 所以需要\n\n\n\n\n 拷贝到本地\n\n└──╼ scp xxx:~/app/memos/memos_prod.db ./\n\n\n 然后使用 sqlite 打开文件并手动更新\n\n└──╼ sqlite3 memos_prod.db\nSQLite version 3.32.2 2021-07-12 15:00:17\nEnter \u0026#34;.help\u0026#34; for usage hints.\nsqlite\u0026gt; select * from user;\n...\nsqlite\u0026gt; update user set password_hash=\u0026#34;$2a$14$ajq8Q7fbtFRQvXpdCq7Jcuy.Rx1h/L4J60Otx.gyNLbAYctGMJ9tK\u0026#34; where id=1;\nsqlite\u0026gt; .quit\n\n      这时候密码会被设置成 secret\n\n\n\n 覆盖原文件(需要先暂停服务)\n\n└──╼ scp ./memos_prod.db xxx:~/app/memos/memos_prod.db\n\n      重启服务，重新登录后修改新密码即可","index":40,"permalink":"https://honmaple.me/articles/2023/03/搭建Memos作为私人笔记.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n类似我之前实现的时间轴, 也是一个私人的说说或者是私人的微博，可以用来记录一些临时的想法或者分享某一时刻的精彩瞬间，毕竟数据在自己手上\u003cb\u003e相当酷不是\u003c/b\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e如何搭建\u003c/h2\u003e\n\u003cp\u003e\n   根据\u003ca href=\"https://github.com/usememos/memos\"\u003ememos文档\u003c/a\u003e, 搭建也非常简单, 直接使用 \u003ccode\u003edocker\u003c/code\u003e 即可\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edocker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest\u003c/pre\u003e\n\u003cp\u003e\n   \n\u003ca href=\"https://s.libforest.com/images/2023/03/memos.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/03/memos.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-2\"\u003edocker-compose\u003c/h2\u003e\n\u003cp\u003e\n   因为我需要和我之前的搭建好一些服务(\u003cb\u003eBlog\u003c/b\u003e, \u003cb\u003eDNS\u003c/b\u003e等)统一管理...\u003c/p\u003e","title":"搭建Memos作为私人笔记"},{"content":"拟挽歌辞·荒草何茫茫\n\n\n\n\n-- 陶渊明\n\n\n\n\n\n    荒草何茫茫，白杨亦萧萧。    严霜九月中，送我出远郊。    四面无人居，高坟正嶕峣。    马为仰天鸣，风为自萧条。    幽室一已闭，千年不复朝。    千年不复朝，贤达无奈何。    向来相送人，各自还其家。    亲戚或余悲，他人亦已歌。    死去何所道，托体同山阿。","index":41,"permalink":"https://honmaple.me/articles/2017/03/拟挽歌辞·荒草何茫茫.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n\u003cb\u003e拟挽歌辞·荒草何茫茫\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n-- 陶渊明\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n    荒草何茫茫，白杨亦萧萧。\u003cbr/\u003e    严霜九月中，送我出远郊。\u003cbr/\u003e    四面无人居，高坟正嶕峣。\u003cbr/\u003e    马为仰天鸣，风为自萧条。\u003cbr/\u003e    幽室一已闭，千年不复朝。\u003cbr/\u003e    千年不复朝，贤达无奈何。\u003cbr/\u003e    向来相送人，各自还其家。\u003cbr/\u003e    亲戚或余悲，他人亦已歌。\u003cbr/\u003e    死去何所道，托体同山阿。\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e","title":"拟挽歌辞·荒草何茫茫"},{"content":"Table of Contents\n手机共享文件到电脑\n电脑共享文件到手机\n\n\n\n手机: 某米\n电脑: archlinux\n环境: 同一wifi下\n\n\n手机共享文件到电脑\n\n  最近才发现手机可以开启ftp服务对文件进行共享,直接进入文件管理器开启就行,电脑上使用\n\nftp target\n\n  进行连接\n\n\n\n  注： get 下载 put 上传\n\n\n电脑共享文件到手机\n\n  这里采用python搭建一个简单的web服务(python3)供手机下载文件\n\n# 首先 cd 到要共享的目录\npython -m http.server --bind 0.0.0.0\n\n\n  查看本机IP\n\nifconfig\n# 或者\nip addr\n\n\n  重要: 请确保关闭防火墙,否则手机无法连接\n\nsudo systemctl stop iptables\n\n\n  然后手机浏览器访问 ip:8000 就能下载电脑端的文件了\n\n\n\n非同一wifi环境下 : 可以先在电脑端开启wifi热点(可以不联网),我是直接使用networkmanger进行创建的","index":42,"permalink":"https://honmaple.me/articles/2017/07/手机与Linux桌面文件共享.html","summary":"\n\u003cp\u003e\n手机: 某米\n电脑: archlinux\n环境: 同一wifi下\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e手机共享文件到电脑\u003c/h1\u003e\n\u003cp\u003e\n  最近才发现手机可以开启ftp服务对文件进行共享,直接进入文件管理器开启就行,电脑上使用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eftp target\u003c/pre\u003e\n\u003cp\u003e\n  进行连接\n\u003c/p\u003e\n\n\u003cp\u003e\n  注： \u003cb\u003eget\u003c/b\u003e 下载 \u003cb\u003eput\u003c/b\u003e 上传\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e电脑共享文件到手机\u003c/h1\u003e\n\u003cp\u003e\n  这里采用python搭建一个简单的web服务(python3)供手机下载文件\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# 首先 cd 到要共享的目录\npython -m http.server --bind 0.0.0.0\u003c/pre\u003e\n\n\u003cp\u003e\n  查看本机IP\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eifconfig...\u003c/pre\u003e","title":"手机与Linux桌面文件共享"},{"content":"杭州还是挺美的,不过有些拍不出那种感觉\n\n\n  \n    [[https://static.honmaple.com/images/2017/10/IMG_20171105_180212.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_153403.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_153442.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_153330.jpg]]\n  \n  \n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_153435.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_152826.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_154506.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_135804.jpg]]","index":43,"permalink":"https://honmaple.me/articles/2017/10/我走过的地方，每一处都是风景.html","summary":"\n\u003cp\u003e\n杭州还是挺美的,不过有些拍不出那种感觉\n\u003c/p\u003e\n\u003cdiv class=\"row\"\u003e\n  \u003cdiv class=\"col-md-6\"\u003e\n    [[https://static.honmaple.com/images/2017/10/IMG_20171105_180212.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_153403.jpg]]\n    [[https://static.honmaple.com/images/2017/10/IMG_20171021_153442.jpg]]\n    [[https...\u003c/div\u003e\u003c/div\u003e","title":"我走过的地方，每一处都是风景"},{"content":"Table of Contents\n站内信设计\n\n逻辑实现\n\n点对点(私信)\n点对面(系统消息)\n\n数据库设计\n\n信息表(关联)\n信息内容表\n\n\n\n\n站内信设计\n\n逻辑实现\n\n点对点(私信)\n\n\n\n 发送方\n      sender\n\n\n\n 接收方\n      receiver\n\n\n\n 状态\n      status\n\n\n\n 信息内容\n      message\n\n\n\n 信息分类\n      message_type\n\n\n\n 发送时间\n      created_at\n\n\n\n      点对点发送消息比较简单,每次发送为单表时插入 sender, receiver, message, created_at\n\n\n\n\n      (伪代码)\n\n\n\n\n 获取未读信息\n\nselect message from message where reveiver_id == \u0026#39;user.id\u0026#39; and status = \u0026#39;unread\u0026#39;;\n\n\n 获取系统未读信息\n\nselect message from message where reveiver_id == \u0026#39;user.id\u0026#39; and status = \u0026#39;unread\u0026#39; and message_type = \u0026#39;sys\u0026#39;\n\n\n 获取已读信息\n\nstatus = \u0026#39;read\u0026#39;\n\n\n点对面(系统消息)\n\n    点对面实现不能像点对点一样为每一个用户创建一条数据(如果数以十万百万计)\n    具体实现看这里 http://www.cnblogs.com/grenet/archive/2010/04/09/1708008.html\n\n\n\n\n    简单讲一下我理解的逻辑(伪代码):\n\n\n\n\n\n 发送私信(点对点)\n\n# 先保存消息主体内容\nmessage_text = MessageText(\n    sender = sender,\n    message = message,\n    message_type = message_type(私信)\n)\n# 保存接受方，并关联消息主体\nmessage = Message(\n    message_text_id = message_text.id,\n    receiver = receiver,\n    status = \u0026#39;unread\u0026#39;\n)\n\n\n\n 获取未读信息\n\nmessages = Message.query.filter_by(receiver = current_user,status = \u0026#39;unread\u0026#39;)\n\n\n\n\n 系统消息\n\n# 只保存消息主体内容\nmessage_text = MessageText(\n    sender = sender,\n    message = message,\n    message_type = message_type(系统消息)\n)\n\n\n\n 获取未读信息\n        判断 message 表中 message_text_id 是否存在于 message_text_id__list (receiver = current_user)\n        不存在,标记为系统未读\n        存在,判断是否未读\n\n\n\n 获取具体未读信息\n        如上不存在时\n\n# 保存消息\nmessage = Message(receiver = current_user,\n                  status = \u0026#39;read\u0026#39;,\n                  message_text_id = message_text.id)\n\n\n        存在时,\n\nmessage.status = \u0026#39;read\u0026#39;\n\n\n\n数据库设计\n\n信息表(关联)\ntablename: message\n\n\n\n\n字段名\n字段类型\n字段描述\n是否为空\n是否unique\n默认值\n\n\n\nreceiver_id\ninteger\n接收方外键ID\nFalse\nFalse\n\n\n\nreceiver\n\n接收方\nFalse\nFalse\n\n\n\nmessage_text_id\ninteger\n站内信主体内容外键ID\nFalse\nFalse\n\n\n\nmessage_text\n\n站内信主体内容\nFalse\nFalse\n\n\n\nstatus\nstring\n站内信状态\nFalse\nFalse\n0(未读)\n\n\n\n信息内容表\ntablename: message_text\n\n\n\n\n字段名\n字段类型\n字段描述\n是否为空\n是否unique\n默认值\n\n\n\ntitle\nstring(128)\n站内信标题\nFalse\nFalse\n\n\n\ncontent\ntext(1024)\n站内信内容\nFalse\nFalse\n\n\n\nmessage_type\nstring\n站内信类别\nFalse\nFalse\n2(系统信息)\n\n\nsender_id\ninteger\n发送方外键ID\nFalse\nFalse\n\n\n\nsender\n\n发送方\nFalse\nFalse","index":44,"permalink":"https://honmaple.me/articles/2016/12/我的毕业设计--数据库设计之站内信.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e站内信设计\u003c/h1\u003e\n\n\u003ch2 id=\"heading-1.1\"\u003e逻辑实现\u003c/h2\u003e\n\n\u003ch3 id=\"heading-1.1.1\"\u003e点对点(私信)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 发送方\n      sender\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 接收方\n      receiver\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 状态\n      status\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 信息内容\n      message\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 信息分类\n      message_type\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 发送时间\n      created_at\n\u003c/p\u003e\n\n\u003cp\u003e\n      点对点发送消息比较简单,每次发送为单表时插入 \u003cb\u003esender\u003c/b\u003e, \u003cb\u003ereceiver\u003c/b\u003e, \u003cb\u003emessage\u003c/b\u003e, \u003cb\u003ecreated_at\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n      (伪代码)\n\u003c/p\u003e\n\u003c/blockquote\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 获取未读信息\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e message \u003cspan style=\"color:#66d9ef\"\u003efrom\u003c/span\u003e message \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e reveiver_id \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=...\u003c/span\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"我的毕业设计--数据库设计之站内信"},{"content":"Table of Contents\n登陆注册数据库设计\n\n用户表\n用户信息表\n用户设置表\n用户token表\n\n数据库实现\n\n用户表\n用户信息表\n用户设置表\n用户token表\n\n\n\n登陆注册数据库设计\n\n  共同字段:\n\n\n\n\n id\n    主键,自增ID\n\n\n\n用户表\ntablename: user\n\n\n\n\n\n字段名\n字段类型\n字段描述\n是否为空\n是否unique\n默认值\n\n\n\nusername\nstring(20)\n用户名\nFalse\nTrue\n\n\n\npassword\nstring(100)\n密码\nFalse\nFalse\n\n\n\nemail\nstring(49)\n邮箱\nFalse\nTrue\n\n\n\nis_superuser\nbool\n是否为超级管理员\nFalse\nFalse\nFalse\n\n\nis_confirmed\nbool\n邮箱是否验证\nFalse\nFalse\nFalse\n\n\nregister_time\ndatetime\n注册时间\nFalse\nFalse\nUTC时间\n\n\nlast_login\ndatetime\n上次登陆\nTrue\nFalse\n\n\n\n\n用户信息表\ntablename: userinfo\n\n\n\n\n\n字段名\n字段类型\n字段描述\n是否为空\n是否unique\n默认值\n\n\n\navatar\nstring(128)\n头像路径\nTrue\nFalse\n\n\n\ncompany\nstring(128)\n公司\nTrue\nFalse\n\n\n\nwebsite\nstring(128)\n网址\nTrue\nFalse\n\n\n\nuser_id\ninteger\n关联用户表外键\nTrue\nTrue\n\n\n\nuser\n\n与用户信息成一对一关系\n\n\n\n\n\n\n用户设置表\ntablename: usersetting\n\n\n\n\n\n字段名\n字段类型\n字段描述\n是否为空\n是否unique\n默认值\n\n\n\nlocale\nstring(49)\n语言设置\nFalse\nFalse\nzh\n\n\ntimezone\nstring(49)\n时区设置\nFalse\nFalse\nUTC\n\n\nuser_id\ninteger\n关联用户表外键\nTrue\nTrue\n\n\n\nuser\n\n与用户设置成一对一关系\n\n\n\n\n\n\n用户token表\ntablename: usertoken\n\n\n\n\n\n字段名\n字段类型\n字段描述\n是否为空\n是否unique\n默认值\n\n\n\ntoken\nstring(128)\ntoken\nFalse\nFalse\n\n\n\navailable\nbool\ntoken是否有效\nFalse\nFalse\nTrue\n\n\ncreated_at\ndatetime\ntoken创建时间\nFalse\nFalse\nUTC时间\n\n\nupdated_at\ndatetime\ntoken更新时间\nFalse\nFalse\nUTC时间(自动更新)\n\n\nuser_id\ninteger\n关联用户表外键\nTrue\nTrue\n\n\n\nuser\n\n与用户token成一对一关系\n\n\n\n\n\n\n数据库实现\n\n用户表\nclass User(db.Model):\n    __tablename__ = \u0026#39;user\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(\u0026#39;用户名\u0026#39;, db.String(49), unique=True, nullable=False)\n    email = db.Column(\u0026#39;邮箱\u0026#39;, db.String(81), unique=True, nullable=False)\n    password = db.Column(\u0026#39;密码\u0026#39;, db.String(81), nullable=False)\n    is_superuser = db.Column(\u0026#39;是否超级管理员\u0026#39;, db.Boolean, default=False)\n    is_confirmed = db.Column(\u0026#39;是否验证\u0026#39;, db.Boolean, default=False)\n    register_time = db.Column(\u0026#39;注册时间\u0026#39;, db.DateTime, default=datetime.now())\n    last_login = db.Column(\u0026#39;上次登陆\u0026#39;, db.DateTime, nullable=True)\n\n用户信息表\nclass UserInfo(db.Model):\n    __tablename__ = \u0026#39;userinfo\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    avatar = db.Column(db.String(128))\n    school = db.Column(db.String(128), nullable=True)\n    word = db.Column(db.Text, nullable=True)\n    introduce = db.Column(db.Text, nullable=True)\n\n    user_id = db.Column(\n        db.Integer, db.ForeignKey(\n            \u0026#39;user.id\u0026#39;, ondelete=\u0026#34;CASCADE\u0026#34;))\n    user = db.relationship(\n        User,\n        backref=db.backref(\n            \u0026#34;info\u0026#34;, uselist=False, cascade=\u0026#39;all,delete\u0026#39;, lazy=\u0026#39;joined\u0026#39;),\n        uselist=False,\n        lazy=\u0026#39;joined\u0026#39;)\n\n用户设置表\nclass UserSetting(db.Model):\n    LOCALE_CHINESE = \u0026#39;zh\u0026#39;\n    LOCALE_ENGLISH = \u0026#39;en\u0026#39;\n    LOCALE = ((\u0026#39;zh\u0026#39;, \u0026#39;Chinese\u0026#39;), (\u0026#39;en\u0026#39;, \u0026#39;English\u0026#39;))\n\n    TIMEZONE_UTC = \u0026#39;UTC\u0026#39;\n    TIMEZONE = [(i, i) for i in all_timezones]\n\n    __tablename__ = \u0026#39;usersetting\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    locale = db.Column(db.String(32), nullable=False, default=LOCALE_CHINESE)\n    timezone = db.Column(db.String(32), nullable=False, default=TIMEZONE_UTC)\n\n    user_id = db.Column(\n        db.Integer, db.ForeignKey(\n            \u0026#39;user.id\u0026#39;, ondelete=\u0026#34;CASCADE\u0026#34;))\n    user = db.relationship(\n        User,\n        backref=db.backref(\n            \u0026#34;setting\u0026#34;, uselist=False, cascade=\u0026#39;all,delete\u0026#39;, lazy=\u0026#39;joined\u0026#39;),\n        uselist=False,\n        lazy=\u0026#39;joined\u0026#39;)\n\n用户token表\nclass UserToken(db.Model):\n    __tablename__ = \u0026#39;usertoken\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    token = db.Column(db.String(128), nullable=False)\n    available = db.Column(db.Boolean, nullable=False, default=True)\n    created_at = db.Column(\n        db.DateTime, default=datetime.utcnow(), nullable=False)\n    updated_at = db.Column(\n        db.DateTime, default=datetime.utcnow(), onupdate=datetime.utcnow())\n    user_id = db.Column(\n        db.Integer, db.ForeignKey(\n            \u0026#39;user.id\u0026#39;, ondelete=\u0026#34;CASCADE\u0026#34;))\n    user = db.relationship(\n        User,\n        backref=db.backref(\n            \u0026#34;token\u0026#34;, uselist=False, cascade=\u0026#39;all,delete\u0026#39;, lazy=\u0026#39;joined\u0026#39;),\n        uselist=False,\n        lazy=\u0026#39;joined\u0026#39;)\n\n\n   以后可能对表进行扩展","index":45,"permalink":"https://honmaple.me/articles/2016/12/我的毕业设计--数据库设计之登陆注册.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e登陆注册数据库设计\u003c/h1\u003e\n\u003cp\u003e\n  共同字段:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n id\n    主键,自增ID\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"heading-1.1\"\u003e用户表\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003etablename: user\u003c/pre\u003e\n\n\n\u003ctable\u003e\n\n\u003ctr\u003e\n\u003cth\u003e字段名\u003c/th\u003e\n\u003cth\u003e字段类型\u003c/th\u003e\n\u003cth\u003e字段描述\u003c/th\u003e\n\u003cth\u003e是否为空\u003c/th\u003e\n\u003cth\u003e是否unique\u003c/th\u003e\n\u003cth\u003e默认值\u003c/th\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eusername\u003c/td\u003e\n\u003ctd\u003estring(20)\u003c/td\u003e\n\u003ctd\u003e用户名\u003c/td\u003e\n\u003ctd\u003eFalse\u003c/td\u003e\n\u003ctd\u003eTrue\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003epassword\u003c/td\u003e\n\u003ctd\u003estring(100)\u003c/td\u003e\n\u003ctd\u003e密码\u003c/td\u003e\n\u003ctd\u003eFalse\u003c/td\u003e\n\u003ctd\u003eFalse\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eemail\u003c/td\u003e\n\u003ctd\u003estring(49)\u003c/td\u003e\n\u003ctd\u003e邮箱\u003c/td\u003e\n\u003ctd\u003eFalse\u003c/td\u003e\n\u003ctd\u003eTrue\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eis_superuser\u003c/td\u003e\n\u003ctd\u003ebool\u003c/td\u003e\n\u003ctd\u003e是否为超级管理员...\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e","title":"我的毕业设计--数据库设计之登陆注册"},{"content":"Table of Contents\nLinux\nLinux发行版\nLinux历程\nLinux的娱乐性\nLinux上的实用性\n深入了解Linux\n\n\nLinux\n\n  是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统\n\n\n\n  Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。\n\n\nLinux发行版\n\n  简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版\n\n\nLinux历程\n\n  曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,\n  大概是这样的 centos --\u0026gt; kali --\u0026gt; ubuntu --\u0026gt; fedora --\u0026gt; ubuntu kylin --\u0026gt; mint --\u0026gt; debian --\u0026gt; fedora --\u0026gt; archlinux ......,Linux发行版大概分为3系,\n  debain系,包括ubuntu,mint,kali等,使用包管理器apt-get、aptitude、dpkg;centos或者说红帽系，包括众所周知的小白鼠版本fedora，\n  如果不是每半年要重装一次，我会一直使用它,而不是archlinux,所使用的包管理器yum,fedora已更换成dnf;\n  还有其它系，因为它们所占份额太小,包括archlinux,gentoo等\n\n\nLinux的娱乐性\n\n  说实话，Linux上的游戏对比windows上就是渣，大致是因为Linux上驱动的问题，这也难怪Linus会对nvidia竖中指，虽说有开源的实现,但与nvidia在windows上性能的对比还相差甚远，\n  不过Linux上还是有很多可玩的游戏的,steam对Linux的支持尤为重要,\n  推荐几个steam上的游戏,正好这几天夏促打折:无主之地2,饥荒，cs:go等\n\n\nLinux上的实用性\n\n  Linux在个人桌面上属于小众市场,使用Linux的大多是程序员，或者是工作需要才会使用，虽说对比windows，Linux也足够应付日常生活,但并不是所有公司都会照顾这小众的Linux用户,\n  非常感谢网易云音乐与深度团队合作开发了网易云音乐Linux客户端，非常鄙视腾讯放弃对LinuxQQ的维护\n\n\n深入了解Linux\n\n  linux由内核,shell,文件系统和应用软件组成，没有扩展名的概念，分为普通文件，目录，链接，设备,管道文件,其文件系统结构:\n\n\n\n\n\n bin  存放二进制可执行文件(ls,cat,mkdir等)\n\n\n\n boot  存放用于系统引导时使用的各种文件\n\n\n\n dev 用于存放设备文件\n\n\n\n etc  存放系统配置文件\n\n\n\n home 存放所有用户文件的根目录\n\n\n\n lib  存放跟文件系统中的程序运行所需要的共享库及内核模块\n\n\n\n mnt  系统管理员安装临时文件系统的安装点\n\n\n\n opt  额外安装的可选应用程序包所放置的位置\n\n\n\n proc  虚拟文件系统，存放当前内存的映射\n\n\n\n root  超级用户目录\n\n\n\n sbin  存放二进制可执行文件，只有root才能访问\n\n\n\n tmp  用于存放各种临时文件\n\n\n\n usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录\n\n\n\n var  用于存放运行时需要改变数据的文件","index":46,"permalink":"https://honmaple.me/articles/2017/07/我的Linux历程.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eLinux\u003c/h1\u003e\n\u003cp\u003e\n  是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统\n\u003c/p\u003e\n\n\u003cp\u003e\n  Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003eLinux发行版\u003c/h1\u003e\n\u003cp\u003e\n  简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-3\"\u003eLinux历程\u003c/h1\u003e\n\u003cp\u003e\n  曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,\n  大概是这样的 centos --\u0026gt; kali --\u0026gt; ubuntu --\u0026gt; fedora --\u0026gt;...\u003c/p\u003e","title":"我的Linux历程"},{"content":"1.我们生活的世界其实是别人的梦境，梦醒，便是这世界某个人一生的终结，入梦，便是一段新人生的开始，换句话说，就是轮回。至于其他人会不会时时做梦，不做分析。\n2.一个平面上任意一点，它的反面必定有一点与之相对应。所以，是不是任意物体，都有一个与之对应的比它小，但其他完全相似的物体。而这个物体又有一个比它小，但完全相似的物体，以此无限循环下去。\n3.这世界是由无数的轨道所构成（组成）的，像地球的自转和公转，如果将整个太阳系竖着看，不是正像一个在近似椭圆轨道上运动吗，近日点是顶点，远日点是最底点。\n4.任何群居性生物都是一种整体的特殊的生物。如蚂蚁，和人类相比，蚁后是大脑，控制整个蚁群的活动，同时生育后代（细胞），工蚁是运输系统，兵蚁是组织防卫系统，把蚂蚁比做细胞，蚁群的活动整体上就是完整生物不同形式的活动。\n5.人类是四维的虫子，任何生物都是四维的虫子，而所有非生物是三维虫子。人从出生起，用时间轴把一个人的一生串起来，就是一个以时间为长度的大虫子，例如从家到学校，所有的动作，所经过的路，等等，在不同时间里组成一个完整的个体，类似虫子的生物。\n6.梦很熟悉，一个人所做的梦其实是前生或来生或今生经历的事或即将经历的事。\n7.珍爱生命，远离镜子。我们怎么能保证自己是真实的，而不是生活在别人的镜子里，我坐在这里，镜子里还有一个我坐在那里也许他才是真实的，也许他也是假的，再加上一个镜子，就多了一个自己，到底哪一个才是真实的自己。\n8.一个人或任意生物绝对不可能在不借用其他外力的情况下举起比自己重的物品。\n理论推导:滑轮，绳子，一头物品，一头是人，绳子绝对竖直向下，物品比人重，人向下出力后绝对是人悬空，只有物品比人轻时，人才能使物品悬空（举起物品），相等情况下两者都不动或两者都悬空（平衡）。\n像举重或蚂蚁举起比自身重的物品，实际上借用了摩擦力。\n不过感觉不太对","index":47,"permalink":"https://honmaple.me/articles/2015/12/我是疯子.html","summary":"\u003cp\u003e1.我们生活的世界其实是别人的梦境，梦醒，便是这世界某个人一生的终结，入梦，便是一段新人生的开始，换句话说，就是轮回。至于其他人会不会时时做梦，不做分析。\u003cbr\u003e\n2.一个平面上任意一点，它的反面必定有一点与之相对应。所以，是不是任意物体，都有一个与之对应的比它小，但其他完全相似的物体。而这个物体又有一个比它小，但完全相似的物体，以此无限循环下去。\u003cbr\u003e\n3.这世界是由无数的轨道所构成（组成）的，像地球的自转和公转，如果将整个太阳系竖着看，不是正像一个在近似椭圆轨道上运动吗，近日点是顶点，远日点是最底点。\u003cbr\u003e\n4.任何群居性生物都是一种整体的特殊的生物。如蚂蚁，和人类相比，蚁后是大脑，控制整个蚁群的活动，同时生育后代...\u003c/p\u003e","title":"我是疯子"},{"content":"愿能结芦山野，退而隐，依木闲坐，隐而狂。何时能，披发仗剑破门去，采菊南山香满襟","index":48,"permalink":"https://honmaple.me/articles/2015/12/愿能结芦山野.html","summary":"\u003cp\u003e愿能结芦山野，退而隐，依木闲坐，隐而狂。何时能，披发仗剑破门去，采菊南山香满襟\u003c/p\u003e\n","title":"愿能结芦山野"},{"content":"青霜长华旧离人梅雨秋雪落缤纷","index":49,"permalink":"https://honmaple.me/articles/2019/02/忆.html","summary":"\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n青霜长华旧离人\u003cbr/\u003e梅雨秋雪落缤纷\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e","title":"忆"},{"content":"心死了,没事,只要人没事,心死了,人怎么可能没事。人死了，没事，只要心没事,人死了，心怎么可能没事。人不可无心,心不可无人,人心可有，心人可有。","index":50,"permalink":"https://honmaple.me/articles/2017/04/心死.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n心死了,\u003cbr/\u003e没事,\u003cbr/\u003e只要人没事,\u003cbr/\u003e\u003cbr/\u003e心死了,\u003cbr/\u003e人怎么可能没事。\u003cbr/\u003e\u003cbr/\u003e人死了，\u003cbr/\u003e没事，\u003cbr/\u003e只要心没事,\u003cbr/\u003e\u003cbr/\u003e人死了，\u003cbr/\u003e心怎么可能没事。\u003cbr/\u003e\u003cbr/\u003e人不可无心,\u003cbr/\u003e心不可无人,\u003cbr/\u003e人心可有，\u003cbr/\u003e心人可有。\n\u003c/p\u003e\n\u003c/div\u003e","title":"心死"},{"content":"彼岸花开一千年落一千年花叶永不相见情不为因果缘注定生死彼岸花开花开彼岸时只一团火红花开无叶叶生无花相念相情却不得相见独自彼岸路彼岸花永远在悠然绽放此岸心唯有在此岸兀自彷徨多少烟花事尽付风雨间多少尘世梦尽随水东转看不见的熄灭了消失的记住了开到荼靡花逝了……留下的不过是一地花瓣……","index":51,"permalink":"https://honmaple.me/articles/2010/07/彼岸花.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n彼岸花\u003cbr/\u003e开一千年\u003cbr/\u003e落一千年\u003cbr/\u003e花叶永不相见\u003cbr/\u003e\u003cbr/\u003e情不为因果\u003cbr/\u003e缘注定生死\u003cbr/\u003e彼岸花开\u003cbr/\u003e花开彼岸时\u003cbr/\u003e只一团火红\u003cbr/\u003e\u003cbr/\u003e花开无叶\u003cbr/\u003e叶生无花\u003cbr/\u003e相念相情却不得相见\u003cbr/\u003e独自彼岸路\u003cbr/\u003e\u003cbr/\u003e彼岸花永远在悠然绽放\u003cbr/\u003e此岸心唯有在此岸兀自彷徨\u003cbr/\u003e\u003cbr/\u003e多少烟花事\u003cbr/\u003e尽付风雨间\u003cbr/\u003e多少尘世梦\u003cbr/\u003e尽随水东转\u003cbr/\u003e看不见的熄灭了\u003cbr/\u003e消失的记住了\u003cbr/\u003e开到荼靡\u003cbr/\u003e花逝了……\u003cbr/\u003e\u003cbr/\u003e留下的不过是一地花瓣……\n\u003c/p\u003e\n\u003c/div\u003e","title":"彼岸花"},{"content":"Table of Contents\n校验数字的表达式\n\n数字:\nn位的数字：\n至少n位的数字：\nm-n位的数字：\n零和非零开头的数字：\n非零开头的最多带两位小数的数字：\n带1-2位小数的正数或负数：\n正数、负数、和小数：\n有两位小数的正实数：\n有1~3位小数的正实数：\n非零的正整数：\n非零的负整数：\n非负整数：\n非正整数：\n非负浮点数：\n非正浮点数：\n正浮点数：\n负浮点数：\n浮点数：\n\n校验字符的表达式\n\n汉字：\n英文和数字：\n长度为3-20的所有字符：\n由26个英文字母组成的字符串：\n由26个大写英文字母组成的字符串：\n由26个小写英文字母组成的字符串：\n由数字和26个英文字母组成的字符串：\n由数字、26个英文字母或者下划线组成的字符串：\n中文、英文、数字包括下划线：\n中文、英文、数字但不包括下划线等符号：\n可以输入含有^%\u0026amp;\u0026#39;,;=?$\u0026#34;等字符：\n禁止输入含有~的字符：\n\n特殊需求表达式\n\nEmail地址：\n域名：\nInternetURL：\n手机号码：\n电话号码(\u0026#34;XXX-XXXXXXX\u0026#34;、\u0026#34;XXXX-XXXXXXXX\u0026#34;、\u0026#34;XXX-XXXXXXX\u0026#34;、\u0026#34;XXX-XXXXXXXX\u0026#34;、\u0026#34;XXXXXXX\u0026#34;和\u0026#34;XXXXXXXX)：\n国内电话号码(0511-4405222、021-87888822)：\n身份证号(15位、18位数字)：\n短身份证号码(数字、字母x结尾)：\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n日期格式：\n一年的12个月(01～09和1～12)：\n一个月的31天(01～09和1～31)：\n钱的输入格式：\n\n有四种钱的表示形式我们可以接受:\u0026#34;10000.00\u0026#34; 和 \u0026#34;10,000.00\u0026#34;, 和没有 \u0026#34;分\u0026#34; 的 \u0026#34;10000\u0026#34; 和 \u0026#34;10,000\u0026#34;：\n这表示任意一个不以0开头的数字,但是,这也意味着一个字符\u0026#34;0\u0026#34;不通过,所以我们采用下面的形式：\n一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：\n这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：\n必须说明的是,小数点后面至少应该有1位数,所以\u0026#34;10.\u0026#34;是不通过的,但是 \u0026#34;10\u0026#34; 和 \u0026#34;10.2\u0026#34; 是通过的：\n这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：\n这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：\n1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：\n\nxml文件：\n中文字符的正则表达式：\n双字节字符：\n空白行的正则表达式：\nHTML标记的正则表达式：\n首尾空白字符的正则表达式：\n腾讯QQ号：\n中国邮政编码：\nIP地址：\nIP地址：\n\n\n\n校验数字的表达式\n数字:\n^[0-9]*$\nn位的数字：\n^\\d{n}$\n至少n位的数字：\n^\\d{n,}$\nm-n位的数字：\n^\\d{m,n}$\n零和非零开头的数字：\n^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字：\n^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数：\n^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数：\n^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数：\n^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数：\n^[0-9]+(.[0-9]{1,3})?$\n非零的正整数：\n^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$\n非零的负整数：\n^\\-[1-9][]0-9\u0026#34;*$ 或 ^-[1-9]\\d*$\n非负整数：\n^\\d+$ 或 ^[1-9]\\d*|0$\n非正整数：\n^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n非负浮点数：\n^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n非正浮点数：\n^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n正浮点数：\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数：\n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数：\n^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n\n校验字符的表达式\n汉字：\n^[\\u4e00-\\u9fa5]{0,}$\n英文和数字：\n^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$\n长度为3-20的所有字符：\n^.{3,20}$\n由26个英文字母组成的字符串：\n^[A-Za-z]+$\n由26个大写英文字母组成的字符串：\n^[A-Z]+$\n由26个小写英文字母组成的字符串：\n^[a-z]+$\n由数字和26个英文字母组成的字符串：\n^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串：\n^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线：\n^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号：\n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n可以输入含有^%\u0026amp;\u0026#39;,;=?$\u0026#34;等字符：\n[^%\u0026amp;\u0026#39;,;=?$\\x22]+\n禁止输入含有~的字符：\n[^~\\x22]+\n\n特殊需求表达式\nEmail地址：\n^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n域名：\n[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nInternetURL：\n[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%\u0026amp;=]*)?$\n手机号码：\n^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n电话号码(\u0026#34;XXX-XXXXXXX\u0026#34;、\u0026#34;XXXX-XXXXXXXX\u0026#34;、\u0026#34;XXX-XXXXXXX\u0026#34;、\u0026#34;XXX-XXXXXXXX\u0026#34;、\u0026#34;XXXXXXX\u0026#34;和\u0026#34;XXXXXXXX)：\n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)：\n\\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)：\n^\\d{15}|\\d{18}$\n短身份证号码(数字、字母x结尾)：\n^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：\n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：\n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n日期格式：\n^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)：\n^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)：\n^((0?[1-9])|((1|2)[0-9])|30|31)$\n钱的输入格式：\n有四种钱的表示形式我们可以接受:\u0026#34;10000.00\u0026#34; 和 \u0026#34;10,000.00\u0026#34;, 和没有 \u0026#34;分\u0026#34; 的 \u0026#34;10000\u0026#34; 和 \u0026#34;10,000\u0026#34;：\n^[1-9][0-9]*$\n这表示任意一个不以0开头的数字,但是,这也意味着一个字符\u0026#34;0\u0026#34;不通过,所以我们采用下面的形式：\n^(0|[1-9][0-9]*)$\n一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：\n^(0|-?[1-9][0-9]*)$\n这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：\n^[0-9]+(.[0-9]+)?$\n必须说明的是,小数点后面至少应该有1位数,所以\u0026#34;10.\u0026#34;是不通过的,但是 \u0026#34;10\u0026#34; 和 \u0026#34;10.2\u0026#34; 是通过的：\n^[0-9]+(.[0-9]{2})?$\n这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：\n^[0-9]+(.[0-9]{1,2})?$\n这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：\n^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$\n1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：\n^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$\nxml文件：\n^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$\n中文字符的正则表达式：\n[\\u4e00-\\u9fa5]\n双字节字符：\n[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n空白行的正则表达式：\n\\n\\s*\\r (可以用来删除空白行)\nHTML标记的正则表达式：\n\u0026lt;(\\S*?)[^\u0026gt;]*\u0026gt;.*?\u0026lt;/\\1\u0026gt;|\u0026lt;.*? /\u0026gt;\n首尾空白字符的正则表达式：\n^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n腾讯QQ号：\n[1-9][0-9]{4,} (腾讯QQ号从10000开始)\n中国邮政编码：\n[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址：\n\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址：\n((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))","index":52,"permalink":"https://honmaple.me/articles/2016/11/常用正则表达式.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e校验数字的表达式\u003c/h2\u003e\n\u003ch3 id=\"heading-1.1\"\u003e数字:\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e^[0-9]*$\u003c/pre\u003e\n\u003ch3 id=\"heading-1.2\"\u003en位的数字：\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e^\\d{n}$\u003c/pre\u003e\n\u003ch3 id=\"heading-1.3\"\u003e至少n位的数字：\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e^\\d{n,}$\u003c/pre\u003e\n\u003ch3 id=\"heading-1.4\"\u003em-n位的数字：\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e^\\d{m,n}$\u003c/pre\u003e\n\u003ch3 id=\"heading-1.5\"\u003e零和非零开头的数字：\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e^(0|[1-9][0-9]*)$\u003c/pre\u003e\n\u003ch3 id=\"heading-1.6\"\u003e非零开头的最多带两位小数的数字：\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e^([1-9][0...\u003c/pre\u003e","title":"常用正则表达式"},{"content":"Table of Contents\n从校园到工作岗位\n从学生到公司职员\n从活着到活着\n\n\n\n先空着，最近有些忙,忙啊，忙\n\n\n从校园到工作岗位\n\n从学生到公司职员\n\n从活着到活着","index":53,"permalink":"https://honmaple.me/articles/2016/10/工作有感.html","summary":"\n\u003cp\u003e\n先空着，最近有些忙,忙啊，忙\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e从校园到工作岗位\u003c/h1\u003e\n\n\u003ch1 id=\"heading-2\"\u003e从学生到公司职员\u003c/h1\u003e\n\n\u003ch1 id=\"heading-3\"\u003e从活着到活着\u003c/h1\u003e","title":"工作有感"},{"content":"Table of Contents\n\n\n1. 如何安装及使用\n\n1.1. 安装需要的package\n1.2. 配置config\n1.3. 注释下面代码\n1.4. 初始化数据库\n1.5. 创建管理员账户\n\n\n2. 本地搭建\n\n2.1. 登陆并进入后台\n\n\n3. 服务端搭建\n\n3.1. 配置nginx\n3.2. 配置supervior\n3.3. 配置gunicorn\n3.4. 启动\n\n\n\n\n\n\n如何安装及使用\n\n安装需要的package\npip install -r requirements.txt\n\n配置config\n\n查看配置详细介绍\n\n注释下面代码\n\n因为如果不注释的话 初始化数据库 会报错\n\n文件位置: maple/topic/forms.py\ncategory = SelectField(\n    _(\u0026#39;Category:\u0026#39;),\n    choices=[(b.id, b.board + \u0026#39;   --\u0026#39; + b.parent_board)\n             for b in Board.query.all()],\n    coerce=int)\n\n初始化数据库\npython manage.py db init\npython manage.py db migrate -m \u0026#34;first migrate\u0026#34;\npython manage.py db upgrade\n\nok,将第三步中注释的内容恢复\n\n创建管理员账户\npython manager.py create_user\n\n本地搭建\n\n\n\n登陆并进入后台\npython manager.py runserver\n\nVisit http://forums.localhost:5000/admin\n\n服务端搭建\n\n\n\n参考 http://flask.pocoo.org/docs/0.11/deploying/\n\n以我的配置为例:\n\n配置nginx\nserver {\n    listen 80;\n\n    server_name _;\n\n    access_log  /var/log/nginx/access.log;\n    error_log  /var/log/nginx/error.log;\n\n    location / {\n        proxy_pass         http://127.0.0.1:8000/;\n        proxy_redirect     off;\n\n        proxy_set_header   Host                 $host;\n        proxy_set_header   X-Real-IP            $remote_addr;\n        proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto    $scheme;\n    }\n}\n\n配置supervior\n[program:forums]\nuser=www\ncommand=/home/www/forums/venv/bin/gunicorn run:app -c /home/www/forums/gunicorn.conf\ndirectory=/home/www/forums\nautostart=true\nautorestart=true\nstdout_logfile=/home/www/forums/logs/gunicorn_supervisor.log\n\n配置gunicorn\nworkers = 2\nbind = \u0026#39;127.0.0.1:8000\u0026#39;\n\n启动\n\n确定配置无误后\nsupervisord -c /etc/supervisord.conf\nsupervisorctl -c /etc/supervisord.conf reload","index":54,"permalink":"https://honmaple.me/articles/2016/07/如何安装及使用honmaple社区程序.html","summary":"\n\u003cdiv id=\"table-of-contents\"\u003e\n\u003ch2\u003eTable of Contents\u003c/h2\u003e\n\u003cdiv id=\"text-table-of-contents\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline6\"\u003e1. 如何安装及使用\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline1\"\u003e1.1. 安装需要的package\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline2\"\u003e1.2. 配置config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline3\"\u003e1.3. 注释下面代码\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline4\"\u003e1.4. 初始化数据库\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline5\"\u003e1.5. 创建管理员账户\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline8\"\u003e2. 本地搭建\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline7\"\u003e2.1. 登陆并进入后台\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline13\"\u003e3. 服务端搭建\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline9\"\u003e3.1. 配置nginx\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline10\"\u003e3.2. 配置supervior\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline11\"\u003e3.3. 配置gunicorn...\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e","title":"如何安装及使用honmaple社区程序"},{"content":"对于网站来说数据无疑是最重要的，而养成备份数据的习惯更加重要，\n忽然想到一句经典台词\n\u0026gt;曾经有一份数据摆在我的面前，\n可我没有备份，\n直到数据丢失后才后悔莫及,\n人世间最痛苦的事莫过于此，\n如果上天能给我一次再来一次的机会，\n我会对那份数据说五个字：我要备份你，\n如果非要在这份备份上加一个期限，我希望是每天！\n\n进入主题,这只是对数据进行简单的备份\n\n怎么备份数据\n\nshell脚本\n#!/bin/bash\n\nbackup_time=`date +%Y%m%d`\npg_dump articledb \u0026gt; /home/xxx/backup/article_$backup_time.sql\n# articledb是要备份的数据库名称\necho \u0026#34;backup finished\u0026#34;\n\n保存为backup_db.sh\n注意\nxxx是数据库用户,并且是super权限\n可以这样\n$ sudo -i -u postgres\n$ [sudo] xxx 的密码:\npostgres~ $ createuser xxx --interactive \n# 创建数据库用户,我的是archlinux,不同系统可能有所不同\n\n定时备份数据\ncrontab -e\n\n输入\n0 22 * * * /home/xxx/backup/backup_db.sh\n#表示每天22点定时备份数据\n\n如果你需要在其他时间段备份数据，请查阅crontab文档\n\nok，就这样","index":55,"permalink":"https://honmaple.me/articles/2015/12/如何备份postgresql数据库.html","summary":"\u003cp\u003e对于网站来说数据无疑是最重要的，而养成备份数据的习惯更加重要，\n忽然想到一句经典台词\u003cbr\u003e\n\u0026gt;曾经有一份数据摆在我的面前，\u003cbr\u003e\n可我没有备份，\u003cbr\u003e\n直到数据丢失后才后悔莫及,\u003cbr\u003e\n人世间最痛苦的事莫过于此，\u003cbr\u003e\n如果上天能给我一次再来一次的机会，\u003cbr\u003e\n我会对那份数据说五个字：我要备份你，\u003cbr\u003e\n如果非要在这份备份上加一个期限，我希望是每天！\u003c/p\u003e\n\n\u003cp\u003e进入主题,这只是对数据进行简单的备份\u003c/p\u003e\n\n\u003ch3\u003e怎么备份数据\u003c/h3\u003e\n\n\u003cp\u003eshell脚本\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\nbackup_time\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003edate +%Y%m%d\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\npg_dump articledb \u0026gt; /home/xxx/backup...\u003c/pre\u003e","title":"如何备份postgresql数据库"},{"content":"Table of Contents\npython\ngolang\nlua\njavascript\n\n\n\n由于工作需要经常会使用多种语言, 比如 python, golang, lua, javascript等, 各种语言都有自己的包管理器，像python的包管理器pip, lua的包管理器luarocks。。。\n\n\n\n每个包管理器安装package的方式，位置都不相同，对于一个有洁癖的人来说,\n\nls ~/ -al\n\n后各种各样的.something简直是场灾难, 所以保持一个干净的系统是非常必要的, 比如把相关语言的package都放到一个目录(我选择放到$HOME/repo/{language})下\n\n\n\n\n请不要使用root用户，或者sudo来安装非必要的软件包\n\n\n\npython\n\n   我的python环境是pip+virtualenv+virtualenvwrapper, pip可以有多种使用方式:\n\n\n\n\n sudo\n     sudo安装的package放到/usr/lib64/python-{verison}目录下, 这可能会与系统的包管理器所安装的python package冲突, 比如docker可以使用\n\nsudo pacman -S docker\n\n     也可以使用\n\nsudo pip install docker\n\n     但更新系统包时可能有冲突导致无法更新\n\n\n\n\n --user*(-U)\n     使用本地安装，不需要*sudo权限, 安装的package会放到$HOME/.local目录下\n\n\n\n\n virtualenv\n     python的各种依赖包环境分离靠的就是virtualenv, 它会把安装的package放到$WORKON_HOME这个环境变量下, 我平时也主要使用这个，但一些常用的package, 像http,docker-compose,pelican等, 我不想在使用时还得\n\nworkon {virtualenv name}\n\n     然后才能使用, 太麻烦\n\n\n\n\n   最有效的方法是搭配--user和virtualenv\n\n\n\n\n 设置--user的安装目录\n\nexport PYTHONUSERBASE=$HOME/repo/python\n\n\n 设置virtualenv的安装目录\n\nexport WORKON_HOME=$HOME/repo/python/virtualenv\nsource $HOME/repo/python/bin/virtualenvwrapper.sh\n\n\n 设置PATH变量\n\nexport PATH=$PATH:$HOME/repo/python/bin\n\n\n 其它设置\n      python终端自从3.4后，默认会记录命令历史到 $HOME/.python_history, 这也需要修改一下\n\nexport PYTHONHISTFILE=$HOME/repo/python/history\n\n\n\n   然后无论是pip install package --user还是mkvirtualenv后pip install package, 所安装的package都会放到$HOME/repo/python目录下\n\n\n\n   参考文档:\n\n\n\n\n bugs.python.org/issue2088\n\n\n\n docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP\n\n\n\ngolang\n\n   与python同理\n\n\n\n\n\n 设置GOPATH变量\n\nexport GOPATH=$HOME/repo/golang\n\n\n\n 设置PATH变量\n\nexport PATH=$PATH:$HOME/repo/python/bin:$HOME/repo/golang/bin\n\n\nlua\n\n\n\n 设置luarocks安装默认参数\n\nalias luarocks=\u0026#39;luarocks --tree=$HOME/repo/lua\u0026#39;\n\n\n 设置LUA_PATH与LUA_CPATH变量\n\nexport LUA_PATH=\u0026#34;$HOME/repo/lua/share/lua/5.3/?.lua;$HOME/repo/lua/share/lua/5.3/?/init.lua;$LUA_PATH;\u0026#34;\nexport LUA_CPATH=\u0026#34;$HOME/repo/lua/lib/lua/5.3/?.so;$LUA_CPATH;\u0026#34;\n\n\n 设置PATH变量\n\nexport PATH=$PATH:$HOME/repo/python/bin:$HOME/repo/golang/bin:$HOME/repo/lua/bin\n\n\njavascript\n\n\n\n 修改npmrc配置\n\nnpm config set prefix $HOME/repo/npm\nnpm config set cache $HOME/repo/npm\n\n\n 设置NODE_PATH变量\n\nexport NODE_PATH=\u0026#34;$HOME/repo/npm/lib/node_modules:$NODE_PATH\u0026#34;\n\n\n 设置PATH变量\n\nexport PATH=$PATH:$HOME/repo/python/bin:$HOME/repo/golang/bin:$HOME/repo/lua/bin:$HOME/repo/npm/bin\n\n\n 测试\n\nnpm install -g js-beautify # 将会安装到$HOME/repo/npm目录\nnpm install js-beautify # 将会安装到当前目录下\n\n\n\n   最后, 把相关代码放到$HOME/.bashrc中, 就可以享受一个相对干净的系统了","index":56,"permalink":"https://honmaple.me/articles/2018/07/如何保持一个干净的系统.html","summary":"\n\u003cp\u003e\n由于工作需要经常会使用多种语言, 比如 python, golang, lua, javascript等, 各种语言都有自己的包管理器，像python的包管理器\u003cb\u003epip\u003c/b\u003e, lua的包管理器\u003cb\u003eluarocks\u003c/b\u003e。。。\n\u003c/p\u003e\n\n\u003cp\u003e\n每个包管理器安装package的方式，位置都不相同，对于一个有洁癖的人来说,\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003els ~/ -al\u003c/pre\u003e\n\u003cp\u003e\n后各种各样的\u003ccode\u003e.something\u003c/code\u003e简直是场灾难, 所以保持一个干净的系统是非常必要的, 比如把相关语言的package都放到一个目录(我选择放到\u003ccode\u003e$HOME/repo/{language}\u003c/code\u003e)下\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n请不要使用root用户，或者sudo来安装非必要的软件包\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003epython\u003c/h2\u003e\n\u003cp\u003e\n   我的\u003cb\u003epython\u003c/b\u003e环境是\u003ccode\u003epip+virtualenv+virtualenvwrapper\u003c/code\u003e, \u003cb\u003epip\u003c/b\u003e可以有多种使用方式...\u003c/p\u003e","title":"如何保持一个干净的系统"},{"content":"主要介绍通过scp和sftp上传文件到服务器，或者从服务器下载文件到本地,其主要命令\n\nscp介绍\n\nSCP的全称是secure copy (remote file copy program)，此命令是openssh-clients附带\n的,它的作用就是在机器之间实现拷贝，且机器之间的传输完全是加密的。\n\nscp简单操作\n$ scp 帐号@主机:path/filename path/ #从服务器下载文件到本地\n$ scp path/filename 帐号@主机:path/  #上传文件到服务器指定文件夹\n\n\n选项与参数：\n-p ：保留原本档案的权限数据；\n-r ：复制来源为目录时，可以复制整个目录 (含子目录)\n-l ：可以限制传输的速度，单位为 Kb/s ，例如 [-l 100] 代表传输速限 100Kb/s\n\n\nscp实例\n$ scp /home/xxx/test.md xxx@xxxx:~/ #在使用本地~/目录时，使用tab自动补全会转化为绝对路径\ntest.md                                       100%   86     0.1KB/s   00:00\n$ scp xxxx@xxxx:~/test.md /home/xxxx/web/\ntest.md                                       100%   86     0.1KB/s   00:00  \n\n可以ssh到服务器查看是否有test.md文件,如果有那就成功了\n\nsftp介绍\n\nsftp是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供\n一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，\n是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫\n作SFTP(Secure File Transfer Protocol)的安全文件传输子系统，SFTP本身没有单独的\n守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接操作，所以从\n某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。SFTP同样是使\n用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输\n方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要\n求更高时，可以使用SFTP代替FTP。\n\nsftp基本操作\n$ sftp xxxx@xxxx  #类似ssh登陆\nConnected to xxxx\nsftp\u0026gt; \n\n针对服务器\nsftp\u0026gt;cd /home/xxx/test/ 切换目录\nsftp\u0026gt;ls   #就是一些linux上的基本操作(ls mkdir chown rm mv)\nsftp\u0026gt;pwd  #显示目前所在的目录\nsftp\u0026gt;exit #退出\n\n针对本地\nsftp\u0026gt;lcd /home/xxx/test/\nsftp\u0026gt;lls #在基本命令前加l(L小写l)\nsftp\u0026gt;lpwd  #显示目前所在的目录\nsftp\u0026gt;exit #退出\n\n上传下载文件\n\n上传\n$ put ~/test.md /home/xxx/test/ # 将本机的test.md文件上传到服务器\n\n下载\n$ get /home/xxx/test/test.md ~/web/ #将服务器上的test.md下载到本地\n\n这些命令对我来说就足够了，如果你还有其他要求man是最好的伙伴","index":57,"permalink":"https://honmaple.me/articles/2015/12/如何上传文件到服务器.html","summary":"\u003cp\u003e主要介绍通过scp和sftp上传文件到服务器，或者从服务器下载文件到本地,其主要命令\u003c/p\u003e\n\n\u003ch3\u003escp介绍\u003c/h3\u003e\n\n\u003cp\u003eSCP的全称是secure copy (remote file copy program)，此命令是openssh-clients附带\n的,它的作用就是在机器之间实现拷贝，且机器之间的传输完全是加密的。\u003c/p\u003e\n\n\u003ch3\u003escp简单操作\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ scp 帐号@主机:path/filename path/ #从服务器下载文件到本地\n$ scp path/filename 帐号@主机:path/  #上传文件到服务器指定文件夹\n\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e选项与参数：\u003cbr\u003e\n-p ：保留原本档案的权限数据；\u003cbr\u003e\n-r...\u003c/p\u003e\u003c/blockquote\u003e","title":"如何上传文件到服务器"},{"content":"Table of Contents\nQuickstart\nUsage\n\n创建更新删除索引\n自定义analyzer\n\nConfigure\n\n\n\nflask 貌似很少全文搜索的插件,有一个 https://github.com/gyllstromk/Flask-WhooshAlchemy, 但试了几次都用不了,所以参考 Flask-WhooshAlchemy 自己写了一个\n\n\nQuickstart\n\n  插件基于 whoosh,纯 python 编写,使用上很简单\n\nfrom flask_msearch import Search\n[...]\nsearch = Search()\nsearch.init_app(app)\n\n# models.py\nclass Post(db.Model):\n    __tablename__ = \u0026#39;post\u0026#39;\n    __searchable__ = [\u0026#39;title\u0026#39;, \u0026#39;content\u0026#39;]\n\n# views.py\n@app.route(\u0026#34;/search\u0026#34;)\ndef w_search():\n    keyword = request.args.get(\u0026#39;keyword\u0026#39;)\n    results = search.whoosh_search(Post,query=keyword,fields=[\u0026#39;title\u0026#39;],limit=20)\n    return \u0026#39;\u0026#39;\n\nUsage\n创建更新删除索引\n\n   如果要对已存在的数据创建索引(全部)\n\n# 创建\nsearch.create_index()\n# 更新\nsearch.create_index(update=True)\n# 删除\nsearch.create_index(delete=True)\n\n\n   如果只想要为指定的表创建索引\n\nsearch.create_index(Model)\n\n自定义analyzer\n\n\n   比如使用jieba的中文分词\n\nfrom jieba.analyse import ChineseAnalyzer\nsearch = Search(analyzer=ChineseAnalyzer())\n\nConfigure\nWHOOSH_BASE = \u0026#39;whoosh_index\u0026#39;\nWHOOSH_ENABLE = True\n\n\n  项目地址:github.com/honmaple/flask-msearch","index":58,"permalink":"https://honmaple.me/articles/2017/04/基于whoosh实现的flask全文搜索插件.html","summary":"\n\u003cp\u003e\nflask 貌似很少全文搜索的插件,有一个 \u003ca href=\"https://github.com/gyllstromk/Flask-WhooshAlchemy\"\u003ehttps://github.com/gyllstromk/Flask-WhooshAlchemy\u003c/a\u003e, 但试了几次都用不了,所以参考 Flask-WhooshAlchemy 自己写了一个\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003eQuickstart\u003c/h1\u003e\n\u003cp\u003e\n  插件基于 whoosh,纯 python 编写,使用上很简单\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e flask_msearch \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Search\n[\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e]\nsearch \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Search()\nsearch\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einit_app(app)\n\n\u003cspan style=\"color:#75715e\"\u003e# models.py\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003eclass...\u003c/span\u003e\u003c/pre\u003e","title":"基于whoosh实现的flask全文搜索插件"},{"content":"为什么需要restful形式的权限管理\n\n最近在写flask应用时使用了 restful 形式的flask.views.MethodView，但是在对其进行权限管理时遇到了一些问题\n\nflask文档上介绍说用\ndecorators = []\n\n添加装饰器,但实际使用上,比如\n\n\nget 和 post 采用不同的权限\n\n\n\nget 不使用 login_required\n post 需要 login_required\n\n\n这样就不能使用 decorators 对视图进行装饰\n\n\npost ,delete, put 都需要 login_required,但是get不需要\n而 delete 又需要更高级别的权限,我们可以这样\nclass AAA(MethodView):\n\n\n    def get(self,uid):\n        ...\n\n\n    @login_required\n    def post(self):\n        ...\n\n\n    @login_required\n    def put(self,uid):\n        ...\n\n\n    @login_required\n    @more_required\n    def delete(self,uid):\n        ...\n\n是不是看起来还不错, 但是,如果再加上类似EditBlogPostPermission 这样的权限管理呢?\n是不是还需要这样\n@login_required\ndef put(self,uid):\n    permission = EditBlogPostPermission(uid)\n    if permission.can():\n        # Save the edits ...\n        return render_template(\u0026#39;edit_post.html\u0026#39;)\n    ...\n\n先不论样式丑不丑，最重要的代码的 可维护性 极差,所以我增加了如下代码\n\n\n怎么实现restful形式的权限管理\n\n同样采用装饰器实现,调用 BasePermission 时会自动调用 call 函数\nclass BasePermission(object):\n\n    def __call__(self, func):\n        @wraps(func)\n        def decorator(*args, **kwargs):\n            meth = getattr(self, request.method.lower(), None)\n            if meth is None and request.method == \u0026#39;HEAD\u0026#39;:\n                meth = getattr(self, \u0026#39;get\u0026#39;, None)\n            assert meth is not None, \u0026#39;Unimplemented method %r\u0026#39; % request.method\n            check = meth(*args, **kwargs)\n            if check:\n                return check\n            else:\n                pass\n            return func(*args, **kwargs)\n\n        return decorator\n\n举个例子,get方式不需要用户登陆,而其它方式需要,并且put方式需要创建主题的作者才能更改\nclass TopicPermission(BasePermission):\n    @login_required\n    def post(self):\n        pass\n\n    def get(self, uid):\n        pass\n\n    @login_required\n    def put(self, uid):\n        permission = EditTopicPermission(uid)\n        if not permission.can():\n            flash(\u0026#39;你没有权限\u0026#39;)\n            return redirect(url_for(\u0026#39;topic.topic\u0026#39;, uid=uid))\n\n    @login_required\n    def delete(self,uid):\n        pass\n\ntopic_permission = TopicPermission()\n\n假设四种方式都需要同一种权限,都需要用户登陆,总不能每个函数前都加上装饰器吧\n所以稍加修改\ndecorators = ()\ndef __call__(self, func):\n    if self.decorators:\n        for dec in self.decorators:\n            return dec(func)\n\nOK,这样就可以添加\ndecorators = [login_required]\n\n来实现四种请求方式采用同一种权限\n\n最后,你就可以在 AAA 这个类里添加\ndecorators = [topic_permission]\n\n实现restful形式的权限管理\n\nok，就这样,可能还不完善或有一些问题，如有问题请联系我","index":59,"permalink":"https://honmaple.me/articles/2016/06/基于restful的flask权限管理.html","summary":"\n\u003ch3\u003e为什么需要restful形式的权限管理\u003ca id=\"orgheadline1\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e最近在写flask应用时使用了 \u003cstrong\u003erestful\u003c/strong\u003e 形式的\u003ccode\u003eflask.views.MethodView\u003c/code\u003e，但是在对其进行权限管理时遇到了一些问题\u003c/p\u003e\n\n\u003cp\u003eflask文档上介绍说用\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edecorators = []\n\u003c/pre\u003e\n\u003cp\u003e添加装饰器,但实际使用上,比如\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eget\u003c/strong\u003e 和 \u003cstrong\u003epost\u003c/strong\u003e 采用不同的权限\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eget 不使用 login_required\u003cbr\u003e\n post 需要 login_required\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e这样就不能使用 \u003cstrong\u003edecorators\u003c/strong\u003e 对视图进行装饰\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003epost\u003c/strong\u003e ,\u003cstrong\u003edelete\u003c/strong\u003e, \u003cstrong\u003eput\u003c/strong\u003e 都需要 login_required,但是...\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e","title":"基于restful的flask权限管理"},{"content":"Table of Contents\n源数据结构\n组件模版\n组件选项\n最终实现\n\n\n\n\nQuasar 默认没有树状选择器的支持，而在 Vue 中通常会使用一个现成的vue-treeselect, 这是一个非常不错的 Select 组件, 此次不使用该组件，而是利用 Quasar 中的 q-select 和 q-tree 结合，实现一个类似的树状选择器\n\n\n\n源数据结构\n{\n    \u0026#34;id\u0026#34;: 1,\n    \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;,\n    \u0026#34;desc\u0026#34;: \u0026#34;管理员\u0026#34;,\n    \u0026#34;children\u0026#34;: [{\n        \u0026#34;id\u0026#34;: 6,\n        \u0026#34;name\u0026#34;: \u0026#34;superadmin\u0026#34;,\n        \u0026#34;desc\u0026#34;: \u0026#34;超级管理员\u0026#34;,\n        \u0026#34;children\u0026#34;: [{\n            \u0026#34;id\u0026#34;: 10,\n            \u0026#34;name\u0026#34;: \u0026#34;vvvvv\u0026#34;,\n            \u0026#34;desc\u0026#34;: \u0026#34;dddd\u0026#34;,\n        }]\n    }]\n}\n\n组件模版\n\u0026lt;template\u0026gt;\n  \u0026lt;q-select dense outlined\n            emit-value map-options\n            option-value=\u0026#34;id\u0026#34;\n            option-label=\u0026#34;name\u0026#34;\n            label=\u0026#34;角色列表\u0026#34;\n            :options=\u0026#34;list\u0026#34;\n            :loading=\u0026#34;table.loading\u0026#34;\n            :multiple=\u0026#34;multiple\u0026#34;\n            :use-chips=\u0026#34;multiple\u0026#34;\n            @filter=\u0026#34;filterFn\u0026#34;\n            :model-value=\u0026#34;modelValue\u0026#34;\n            @update:model-value=\u0026#34;value =\u0026gt; $emit(\u0026#39;update:modelValue\u0026#39;, value)\u0026#34; \u0026gt;\n    \u0026lt;template v-slot:option=\u0026#34;{ itemProps, opt, selected, toggleOption }\u0026#34;\u0026gt;\n      \u0026lt;q-tree :nodes=\u0026#34;[opt]\u0026#34;\n              node-key=\u0026#34;id\u0026#34;\n              label-key=\u0026#34;name\u0026#34;\n              :tick-strategy=\u0026#34;multiple?\u0026#39;strict\u0026#39;:\u0026#39;none\u0026#39;\u0026#34;\n              v-model:ticked=\u0026#34;table.ticked\u0026#34;\n              v-model:selected=\u0026#34;table.selected\u0026#34;\n              v-if=\u0026#34;opt.parent_id == 0\u0026#34;\u0026gt;\n        \u0026lt;template v-slot:default-header=\u0026#34;prop\u0026#34;\u0026gt;\n          \u0026lt;div class=\u0026#34;items-center\u0026#34;\u0026gt;\n            {{ prop.node.desc }}({{ prop.node.name }})\n          \u0026lt;/div\u0026gt;\n        \u0026lt;/template\u0026gt;\n      \u0026lt;/q-tree\u0026gt;\n    \u0026lt;/template\u0026gt;\n  \u0026lt;/q-select\u0026gt;\n\u0026lt;/template\u0026gt;\n\n   这里利用 slot 方式添加 q-tree 组件, 由于只能传递单个选项(option), 所以在传递给 q-tree 的参数 nodes 需要修改成 [opt]。\n\n\n\n   而在 q-tree 中，单选和多选同样有区别，单选所使用的参数为 v-model:ticked, 点击选项即可选中，多选所使用的参数为 v-model:selected, 配置为多选状态时每个树状列表选项前会添加一个 checkbox，多选状态需要配置 tick-strategy 参数\n\n\n\n\n strict: 父选项和子选项的选中状态相互独立\n\n\n\n leaf: 选中父选项同时选中父选项下的子选项\n\n\n\n none: 禁用多选\n\n\n\n组件选项\nconst props = defineProps({\n    multiple: {\n        type: Boolean,\n        default: false,\n    },\n    modelValue: {\n        default: null,\n        required: true,\n    },\n})\n\n\n   父组件可以使用\n\n\u0026lt;role-select multiple v-model=\u0026#34;form.roles\u0026#34;\u0026gt;\u0026lt;/role-select\u0026gt;\n\n\n   同时，为了区分多选和单选, 需要将没有用到的选项设置为 undefined, 同时监听选项的修改\n\nconst emit = defineEmits([\u0026#39;update:model-value\u0026#39;])\nconst { modelValue, multiple } = toRefs(props)\n\nif (multiple.value) {\n    table.value.selected = undefined\n\n    watch(() =\u0026gt; table.value.ticked, (val) =\u0026gt; {\n        emit(\u0026#39;update:model-value\u0026#39;, val)\n    })\n\n} else {\n    table.value.ticked = undefined\n\n    watch(() =\u0026gt; table.value.selected, (val) =\u0026gt; {\n        emit(\u0026#39;update:model-value\u0026#39;, val)\n    })\n}\n\n\n\n   为了让子选项在选中状态时也能够显示 .name，而不是 .id，需要遍历所有选项，将其合成一个列表，在 q-tree 组件中通过判断 row.parent_id 只显示父组件, 这里也可以通过定义 q-select 的 selected 或者是 selected-item 插槽来显示正确的名称\n\nfunction makeRows(rows) {\n    if (!rows) {\n        return []\n    }\n    let newRows = []\n    rows.forEach(row =\u0026gt; {\n        newRows.push(row)\n        if (row.children \u0026amp;\u0026amp; row.children.length \u0026gt; 0) {\n            newRows = newRows.concat(makeRows(row.children))\n        }\n    })\n    return newRows\n}\n\nconst list = computed(() =\u0026gt; {\n    return makeRows(table.value.list)\n})\n\n\n\n   最后就是从后端获取列表数据\n\nconst table = ref({\n    list: [],\n    ticked: [],\n    expanded: [],\n    selected: [],\n    loading: false,\n})\n\nconst handleFetch = (props) =\u0026gt; {\n    ...\n    table.value.loading = true\n    return api.fetchList(query).then(response =\u0026gt; {\n        table.value.list = response.data.list\n    }).finally(() =\u0026gt; {\n        table.value.loading = false\n    })\n}\n\nconst filterFn = (val, update, abort) =\u0026gt; {\n    if (table.value.list \u0026amp;\u0026amp; table.value.list.length \u0026gt; 0) {\n        update()\n        return\n    }\n    update(() =\u0026gt; {handleFetch()})\n}\n\n\n最终实现","index":60,"permalink":"https://honmaple.me/articles/2023/05/基于Quasar实现一个树状选择器TreeSelect.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n\u003ccode\u003eQuasar\u003c/code\u003e 默认没有树状选择器的支持，而在 \u003ccode\u003eVue\u003c/code\u003e 中通常会使用一个现成的\u003ca href=\"https://github.com/riophae/vue-treeselect\"\u003evue-treeselect\u003c/a\u003e, 这是一个非常不错的 \u003ccode\u003eSelect\u003c/code\u003e 组件, 此次不使用该组件，而是利用 \u003ccode\u003eQuasar\u003c/code\u003e 中的 \u003ccode\u003eq-select\u003c/code\u003e 和 \u003ccode\u003eq-tree\u003c/code\u003e 结合，实现一个类似的树状选择器\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e源数据结构\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e{\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;admin\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;desc\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"基于Quasar实现一个树状选择器TreeSelect"},{"content":"Table of Contents\n前言\n实现一(废弃)\n实现二\n最终实现\n\n\n\n\nQuasar 是一个基于 Vue3 的前端UI框架，使用的是 Material Design, 对于国内而言(包括我)觉得确实不太好看，但因为之前使用的是 Element-UI，大概是由于审美疲劳，此次升级我的后台管理UI，没有继续使用 Vue3 版本的 Element-Plus。 不久前我也是基于 Quasar 开发了一个 Memos 客户端, 感觉效果还不错\n\n\n\n前言\n\n   Quasar 默认没有树状表格的支持，但我觉得树状表格其实还挺重要的，尤其是在显示一些树状的数据，比如一个部门列表(打比方), 树状表格能够清晰的表明各部门之间的上下关系，目前我看实现树状表格的示例要么是基于 qhierarchy (使用 q-markup-table 实现，定制太困难), 要么就是实现方式太复杂 tree-table-example, 所以我研究了一下，发现其实还挺简单的，故此记录\n\n\n实现一(废弃)\n\n   虽然 Quasar 没有树状表格的组件, 但 q-table 默认是支持 Expanding rows 的，所以我一开始的想法是使用这个功能实现一个递归的组件, 就像这样\n\n\u0026lt;template\u0026gt;\n  \u0026lt;q-tr :key=\u0026#34;row.id\u0026#34; :props=\u0026#34;props\u0026#34;\u0026gt;\n    \u0026lt;slot :row=\u0026#34;row\u0026#34; :status=\u0026#34;status\u0026#34; :indent=\u0026#34;indent\u0026#34; :indentStyle=\u0026#34;indentStyle(indent)\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\n  \u0026lt;/q-tr\u0026gt;\n  \u0026lt;template :key=\u0026#34;index\u0026#34; v-for=\u0026#34;(child, index) in row.children\u0026#34; v-if=\u0026#34;status.expand\u0026#34;\u0026gt;\n    \u0026lt;table-tree :props=\u0026#34;props\u0026#34; :indent=\u0026#34;indent + 1\u0026#34; :row=\u0026#34;child\u0026#34; v-slot=\u0026#34;scope\u0026#34;\u0026gt;\n      \u0026lt;slot :row=\u0026#34;scope.row\u0026#34; :status=\u0026#34;scope.status\u0026#34; :indent=\u0026#34;scope.indent\u0026#34; :indentStyle=\u0026#34;indentStyle(scope.indent)\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\n    \u0026lt;/table-tree\u0026gt;\n  \u0026lt;/template\u0026gt;\n\u0026lt;/template\u0026gt;\n\n   而在父组件中调用只需要把原来的 props 改成 scope\n\n\u0026lt;template v-slot:body=\u0026#34;props\u0026#34;\u0026gt;\n  \u0026lt;table-tree :props=\u0026#34;props\u0026#34; :row=\u0026#34;props.row\u0026#34; v-slot=\u0026#34;scope\u0026#34;\u0026gt;\n    \u0026lt;q-td auto-width\u0026gt;\n      \u0026lt;q-checkbox size=\u0026#34;sm\u0026#34; v-model=\u0026#34;scope.status.selected\u0026#34; /\u0026gt;\n    \u0026lt;/q-td\u0026gt;\n    \u0026lt;q-td\u0026gt;\n      \u0026lt;q-btn flat round dense size=\u0026#34;xs\u0026#34;\n             :icon=\u0026#34;scope.status.expand ? \u0026#39;remove\u0026#39; : \u0026#39;add\u0026#39;\u0026#34;\n             @click=\u0026#34;scope.status.expand = !scope.status.expand\u0026#34;\n             v-if=\u0026#34;scope.row.children \u0026amp;\u0026amp; scope.row.children.length \u0026gt; 0\u0026#34; /\u0026gt;\n      {{ scope.row.name }}\n    \u0026lt;/q-td\u0026gt;\n    \u0026lt;q-td\u0026gt;{{ scope.row.desc }}\u0026lt;/q-td\u0026gt;\n  \u0026lt;/table-tree\u0026gt;\n\u0026lt;/template\u0026gt;\n\n   但是后面发现表格在多选状态下无法和原有的表格选择进行联动，只能自己实现选中和取消选中的方法，虽然也能实现，当很麻烦，只好另寻其它方式\n\n\n实现二\n\n   后面研究了一下 Fernando2684 的实现方式, 虽然他的方式同样复杂，当实现原理其实很简单, 那就是修改原始数据，比如第二行需要进行展开，那我就在原来第二行的数据下把第二行的子数据追加上去，取消展开就把子数据删除，恢复原来的数据。有了这个原理后就好办了，我们可以利用 Expanding rows 时用到的 props.expand 参数来控制是否展开子数据, 然后利用计算属性动态的计算展开后的数据\n\n\n\n\n\n 表格模版\n\n\u0026lt;q-table flat bordered\n         row-key=\u0026#34;id\u0026#34;\n         separator=\u0026#34;cell\u0026#34;\n         selection=\u0026#34;multiple\u0026#34;\n         - :rows=\u0026#34;table.list\u0026#34;\n         + :rows=\u0026#34;expandRows\u0026#34;\n         v-model:expanded=\u0026#34;table.expanded\u0026#34;\n         v-model:selected=\u0026#34;table.selected\u0026#34;\n         v-model:pagination=\u0026#34;table.pagination\u0026#34;\u0026gt;\n  \u0026lt;template v-slot:body=\u0026#34;props\u0026#34;\u0026gt;\n    \u0026lt;q-tr :props=\u0026#34;props\u0026#34;\u0026gt;\n      \u0026lt;q-td auto-width\u0026gt;\n        \u0026lt;q-checkbox size=\u0026#34;sm\u0026#34; v-model=\u0026#34;props.selected\u0026#34; /\u0026gt;\n      \u0026lt;/q-td\u0026gt;\n      \u0026lt;q-td\u0026gt;\n        \u0026lt;q-btn flat round dense size=\u0026#34;xs\u0026#34;\n               :icon=\u0026#34;props.expand ? \u0026#39;remove\u0026#39; : \u0026#39;add\u0026#39;\u0026#34;\n               @click=\u0026#34;props.expand = !props.expand\u0026#34;\n               v-if=\u0026#34;props.row.children \u0026amp;\u0026amp; props.row.children.length \u0026gt; 0\u0026#34; /\u0026gt;\n        {{ props.row.name }}\n      \u0026lt;/q-td\u0026gt;\n      \u0026lt;q-td\u0026gt;{{ props.row.desc }}\u0026lt;/q-td\u0026gt;\n    \u0026lt;/q-tr\u0026gt;\n  \u0026lt;/template\u0026gt;\n\u0026lt;/q-table\u0026gt;\n\n\n 表格数据\n\nconst table = ref({\n    list: [],\n    expanded: [],\n    selected: [],\n    loading: true,\n    pagination: {\n        page: 1,\n        sortBy: \u0026#39;desc\u0026#39;,\n        descending: false,\n        rowsPerPage: 0,\n        rowsNumber: 0,\n    }\n})\n\nconst expandRows = computed(() =\u0026gt; {\n    return makeRows(table.value.list, table.value.expanded)\n})\n\n\n     这里提一嘴，pagination.rowsPerPage 默认最好设置为0(不限制每页的数量, 但会由由后端控制返回的行数), 否则展开子数据后的数据会被放到第二页, 影响数据查看\n\n\n\n 动态计算展开后的数据\n\nfunction makeRows(rows, expanded) {\n    if (!rows) {\n        return []\n    }\n    if (expanded.length == 0) {\n        return rows\n    }\n    let newRows = []\n    rows.forEach(row =\u0026gt; {\n        newRows.push(row)\n        if (expanded.indexOf(row.id) \u0026gt; -1) {\n            newRows = newRows.concat(makeRows(row.children, expanded))\n        }\n    })\n    return newRows\n}\n\n\n     注意，这里因为要递归计算多级子目录，所以不能直接在 setup 上直接用 const 定义\n\n\n\n 缩进：目前缩进确实有些问题，其中一个解决办法是原始数据会带有 parent_id 字段，可以通过判断 parent_id 大于0时增加缩进\n\n\n\n     缩进的计算可以通过makeRows函数在遍历时添加每行数据的层级\n\nfunction makeRows(rows, expanded, indent) {\n    if (!rows) {\n        return []\n    }\n    let newRows = []\n    rows.forEach(row =\u0026gt; {\n        row._indent = indent\n        newRows.push(row)\n        if (expanded.indexOf(row.id) \u0026gt; -1) {\n            newRows = newRows.concat(makeRows(row.children, expanded, indent + 1))\n        }\n    })\n    return newRows\n}\n\nexport default function useTable(table) {\n    const expandRows = computed(() =\u0026gt; {\n        return makeRows(table.value.list, table.value.expanded, 0)\n    })\n    return {\n        expandRows,\n    }\n}\n\n\n     然后在表格中添加对应的偏移即可, 需要注意的是表格对齐方向需要设置为 left (默认值)\n\n\u0026lt;template v-slot:body-cell-name=\u0026#34;props\u0026#34;\u0026gt;\n  \u0026lt;q-td :props=\u0026#34;props\u0026#34; :style=\u0026#34;\u0026#39;padding-left:\u0026#39; + ((props.row._indent || 0) + 1) + \u0026#39;rem\u0026#39;\u0026#34;\u0026gt;\n    \u0026lt;q-btn flat round dense size=\u0026#34;xs\u0026#34;\n           :icon=\u0026#34;props.expand ? \u0026#39;remove\u0026#39; : \u0026#39;add\u0026#39;\u0026#34;\n           @click=\u0026#34;props.expand = !props.expand\u0026#34;\n           v-if=\u0026#34;props.row.children \u0026amp;\u0026amp; props.row.children.length \u0026gt; 0\u0026#34; /\u0026gt;\n    {{ props.row.name }}\n  \u0026lt;/q-td\u0026gt;\n\u0026lt;/template\u0026gt;\n\n\n最终实现","index":61,"permalink":"https://honmaple.me/articles/2023/04/基于Quasar实现一个树状表格TableTree.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n\u003ca href=\"https://quasar.dev/\"\u003eQuasar\u003c/a\u003e 是一个基于 \u003ccode\u003eVue3\u003c/code\u003e 的前端UI框架，使用的是 \u003cb\u003eMaterial Design\u003c/b\u003e, 对于国内而言(包括我)觉得确实不太好看，但因为之前使用的是 \u003ccode\u003eElement-UI\u003c/code\u003e，大概是由于审美疲劳，此次升级我的后台管理UI，没有继续使用 \u003ccode\u003eVue3\u003c/code\u003e 版本的 \u003ccode\u003eElement-Plus\u003c/code\u003e。 不久前我也是基于 \u003ccode\u003eQuasar\u003c/code\u003e 开发了一个 Memos 客户端, 感觉效果还不错\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e\n   \u003ccode\u003eQuasar\u003c/code\u003e 默认没有树状表格的支持，但我觉得树状表格其实还挺重要的，尤其是在显示一些树状的数据，比如一个部门列表(打比方), 树状表格能够清晰的表明各部门之间的上下关系，目前我看实现树状表格的示例要么是基于 \u003ccode\u003eqhierarchy...\u003c/code\u003e\u003c/p\u003e","title":"基于Quasar实现一个树状表格TableTree"},{"content":"第一种方式\nA aaaaa\nB aaaab\nC aaaba\nD aaabb\nE aabaa\nF aabab\nG aabba\nH aabbb\nI abaaa\nJ abaab\nK ababa\nL ababb\nM abbaa\nN abbab\nO abbba\nP abbbb\nQ baaaa\nR baaab\nS baaba\nT baabb\nU babaa\nV babab\nW babba\nX babbb\nY bbaaa\nZ bbaab\n\n第二种方式\na AAAAA g AABBA n ABBAA t BAABA\nb AAAAB h AABBB o ABBAB u-v BAABB\nc AAABA i-j ABAAA p ABBBA w BABAA\nd AAABB k ABAAB q ABBBB x BABAB\ne AABAA l ABABA r BAAAA y BABBA\nf AABAB m ABABB s BAAAB z BABBB","index":62,"permalink":"https://honmaple.me/articles/2016/05/培根密码.html","summary":"\u003cp\u003e第一种方式\u003cbr\u003e\nA aaaaa\nB aaaab\nC aaaba\u003cbr\u003e\nD aaabb\nE aabaa\nF aabab\u003cbr\u003e\nG aabba\nH aabbb\nI abaaa\u003cbr\u003e\nJ abaab\nK ababa\nL ababb\u003cbr\u003e\nM abbaa\nN abbab\nO abbba\u003cbr\u003e\nP abbbb\nQ baaaa\nR...\u003c/p\u003e","title":"培根密码"},{"content":"Table of Contents\n迁移列表\n内容文件\n\n文件头\n\n.md 和 .org\n.html\n\n忽略文件\n\n静态文件\n\nfavicon.ico\nscss/css/js\n\n配置文件\n主题文件\n\n分类功能\n子分类功能\n搜索功能\n加密功能\n\n\n\n\n\n上一次迁移博客系统还是在上一次。。。\n哈哈，不开玩笑，上次迁移大概还是在七年前(2015.10), 不知不觉我的博客也建立快八年时间，如果算上动态博客可能都快十年了，虽然也没写多少篇(其实本地草稿都攒了快200篇了, 也没好好整理), 但好歹可以记录自己的生活和想法，之前使用的博客系统是基于 Python 的 Pelican, 此次将博客迁移至 snow —— 一个轻量，简洁的基于Go开发的静态博客生成器\n\n\n\n迁移列表\n\n\n[X]\n 内容文件(.md、.org、.html)\n\n\n[X]\n 静态文件(.css、.js、.scss等)\n\n\n[X]\n 配置文件(pelicanconf.py -\u0026gt; config.yaml)\n\n\n[X]\n 主题文件\n\n\n\n[X]\n 分类功能(子分类)\n\n\n[X]\n 搜索功能\n\n\n[X]\n 加密功能\n\n\n\n\n内容文件\n\n   由于 Snow 是我自己开发的, 功能上的实现本身就基于我原有的文件内容, 比如 markdown 和 orgmode 的支持，所以迁移上也很简单，有的甚至不用修改原有的内容\n\n文件头\n\n    原来的 Pelican 使用三种文件头形式:\n\n.md 和 .org\n\n\n\n .md\n\nTitle: 使用pelican搭建个人博客\nAuthor: honmaple\nDate: 2015-12-22\nCategory: Python\nTags: python,pelican\nSlug: 使用pelican搭建个人博客\n\n## pelican介绍\n\n\n .org\n\n#+TITLE: 私人密码库Bitwarden搭建\n#+AUTHOR: honmaple\n#+DATE: 2022-05-29 16:21:15\n#+CATEGORY: Linux\n#+PROPERTY: MODIFIED 2022-05-29 16:27:05\n#+PROPERTY: TAGS linux,bitwarden\n#+PROPERTY: SLUG 私人密码库Bitwarden搭建\n\n\n\n     在 Pelican 中的 Author 和 Category 是固定字段，如果需要指定多个可以使用英文逗号分隔，而在 Snow 中这两个字段是可选或者说是可配置的，无法知道指定的字段是一个列表还是一个完整的单词，所以这里需要修改为\n\n- Category: Linux\n+ categories: [Linux]\n\n\n     或者\n\n- #+PROPERTY: TAGS linux,bitwarden\n+ #+PROPERTY: TAGS [linux,bitwarden]\n\n\n     而在 markdown 中，因为 Snow 支持类似 Hugo 的文件头，如果想要一次性修改好，可以直接改成 yaml 或者 toml 格式\n\n\n\n\n yaml\n\n---\ncategories:\n  - Linux\n...\n---\n\n\n toml\n\n+++\ncategories = [\u0026#34;Linux\u0026#34;]\n...\n+++\n\n\n\n     除了修改原来的文件外，我还在 Snow 中内置了一个 pelican 插件，只要在配置里添加\n\nhooks:\n  - pelican\n...\n\n     就能将 Category 字段转成 categories 列表, Author 转成 authors 列表, Tags 转成 tags 列表, 这样就不用修改原来的文件\n\n\n.html\n\u0026lt;html\u0026gt;\n  \u0026lt;head\u0026gt;\n    \u0026lt;title\u0026gt;Project\u0026lt;/title\u0026gt;\n    \u0026lt;meta name=\u0026#34;tags\u0026#34; content=\u0026#34;随意写写\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;date\u0026#34; content=\u0026#34;2015-12-22\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;category\u0026#34; content=\u0026#34;Life\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;authors\u0026#34; content=\u0026#34;honmaple\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;slug\u0026#34; content=\u0026#34;project\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;custom_css\u0026#34; content=\u0026#34;/static/css/project.css\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;custom_js\u0026#34; content=\u0026#34;https://cdn.bootcss.com/geopattern/1.2.3/js/geopattern.min.js\u0026#34; /\u0026gt;\n    \u0026lt;meta name=\u0026#34;custom_js\u0026#34; content=\u0026#34;/static/js/project.js\u0026#34; /\u0026gt;\n  \u0026lt;/head\u0026gt;\n  \u0026lt;body\u0026gt;\n    ...\n  \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\n\n     在 html 文件中，原来的 custom_css 和 custom_js 两个字段主要用于自定义css和js，也是利用我开发的一个pelican插件，把多条记录合并成一个列表，在 Snow 中，不用开发新的插件，但需要修改原来的内容\n\n- \u0026lt;meta name=\u0026#34;custom_css\u0026#34; content=\u0026#34;/static/css/project.css\u0026#34; /\u0026gt;\n- \u0026lt;meta name=\u0026#34;custom_js\u0026#34; content=\u0026#34;https://cdn.bootcss.com/geopattern/1.2.3/js/geopattern.min.js\u0026#34; /\u0026gt;\n- \u0026lt;meta name=\u0026#34;custom_js\u0026#34; content=\u0026#34;/static/js/project.js\u0026#34; /\u0026gt;\n+ \u0026lt;link type=\u0026#34;text/css\u0026#34; href=\u0026#34;/static/css/project.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;/\u0026gt;\n+ \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.bootcss.com/geopattern/1.2.3/js/geopattern.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n+ \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/static/js/project.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\n\n     这样就能得到两个类型为列表的变量 custom_css 和 custom_js\n\n\n忽略文件\n\n    Pelican 可以单独指定 content/posts 和 content/pages, 而在 Snow 中 无法指定 content 目录下的部分目录，但可以设置忽略文件, 这有两种方式\n\n\n\n\n 在需要忽略的目录下新建一个 _index.md, 并指定 ingore_files 字段\n\n---\n# 忽略整个目录\nignore_files: [\u0026#34;*\u0026#34;]\n# 忽略目录下的README.md和所有js文件\nignore_files:\n  - README.md\n  - *.js\n---\n\n\n 在配置里设置 sections.{目录名}.ignore_files\n\nsections:\n  drafts:\n    # 忽略{content_dir}/drafts目录\n    ignore_files: [\u0026#34;*\u0026#34;]\n\n静态文件\nfavicon.ico\n\n    在 Pelican 中，类似 favicon.ico、robots.txt、CNAME 这些不需要修改的文件我原来是放到 content/extra 目录，但在 Snow 中，content 目录下的所有文件都会视为页面文件或者页面的资源文件, 所以需要把extra目录下的文件移动到static目录下，并设置\n\nstatics:\n  static:\n    ignore_files:\n      # 排除所有static下的文件，不包括子目录的文件\n      - \u0026#34;^[^/]+$\u0026#34;\n      - \u0026#34;^images/\u0026#34;\n  static/CNAME:\n    path: \u0026#34;CNAME\u0026#34;\n  static/robots.txt:\n    path: \u0026#34;robots.txt\u0026#34;\n  static/favicon.ico:\n    path: \u0026#34;favicon.ico\u0026#34;\n  static/README.md:\n    path: \u0026#34;README.md\u0026#34;\n  content/pages/css:\n    path: \u0026#34;static/css\u0026#34;\n\nscss/css/js\n\n    在 Python 中有一个专门处理静态文件的 webassets，在 Pelican 中也有一个插件https://github.com/pelican-plugins/webassets, 而在 Snow 中同样支持静态文件的处理, 比如编译并压缩scss文件\n\nparams.assets.css:\n  files:\n    - \u0026#34;@theme/static/scss/common.scss\u0026#34;\n    - \u0026#34;@theme/static/scss/entry.scss\u0026#34;\n    - \u0026#34;@theme/static/scss/entry-tree.scss\u0026#34;\n  filters:\n    - libscss:\n        path: [\u0026#34;themes/snow/static/scss/\u0026#34;]\n    - cssmin:\n  output: \u0026#34;static/lib/css/style.min.css\u0026#34;\n\n    其中 filters 支持 libscss,cssmin,jsmin(js处理有些问题，不要使用, 可以使用)\n\n\n\n    然后就可以在模版里使用\n\n{%- assets \u0026#34;css\u0026#34; %}\n\u0026lt;link href=\u0026#34;{{ config.site.url }}/{{ asset_url }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt;\n{%- endassets %}\n\n配置文件\n\n   Pelican 使用 pelicanconf.py, 而 Snow 使用 config.yaml\n\nsite:\n  url: \u0026#34;http://127.0.0.1:8000\u0026#34;\n  title: \u0026#34;紅楓吟\u0026#34;\n  subtitle: \u0026#34;风落花语风落天，花落风雨花落田.\u0026#34;\n  language: \u0026#34;zh\u0026#34;\n  author: \u0026#34;honmaple\u0026#34;\n  logo_name: \u0026#34;楓\u0026#34;\n\nmode.publish:\n  site:\n    url: \u0026#34;https://honmaple.me\u0026#34;\n\n主题文件\n\n   Snow 的模版系统使用的是 https://github.com/flosch/pongo2, 从 Pelican 使用的 jinja2 迁移到 pongo2 除了相关变量的修改和各种大写外，还有部分区别\n\n\n\n\n loop: pongo2 使用的是 forloop, 计数使用的 forloop.Counter, 从1开始\n\n\n\n marco: pongo2 想要加载并调用文件内的函数，需要添加 export\n\n{%- macro archive_list(pages) export %}\n...\n\n\n super: pongo2 使用的是 block.Super\n\n\n分类功能\n\n    在 Pelican 中，可以使用 page.tags[0].url 获取标签路径，而在 Snow 中想要获取标签路径, 需要使用 get_taxonomy_url\n\n{%- for name in page.Meta.Get(\u0026#34;tags\u0026#34;) %}\n\u0026lt;a href=\u0026#34;{{ get_taxonomy_url(\u0026#34;tags\u0026#34;, name) }}\u0026#34;\u0026gt;{{ name }}\u0026lt;/a\u0026gt;\n{%- endfor %}\n\n子分类功能\n\n    原来的子分类是用我写的一个插件实现的，使用的是 . 作为分隔，如 Category: Life.Coding, 在 Snow 中原生支持子分类, 只需要把 . 改成 /, 比如 Python/Flask 和 Python/Ansible/Jinja2 会创建如下分类系统\n\n- Categories\n  - Python\n    - Flask\n    - Ansible\n      - Jinja2\n\n    我的博客导航栏的实现就是基于该功能\n\n{%- set categories = get_taxonomy(\u0026#34;categories\u0026#34;) %}\n{%- if categories %}\n  {%- for term in categories.Terms %}\n    {%- if term.Children %}\n      \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt;\n        \u0026lt;a href=\u0026#34;{{ term.Permalink }}\u0026#34;\u0026gt;{{ _(term.Name) }}\u0026lt;/a\u0026gt;\n        \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt;\n          {%- for child in term.Children %}\n            \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ child.Permalink }}\u0026#34;\u0026gt;{{ _(child.Name) }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n          {%- endfor %}\n        \u0026lt;/ul\u0026gt;\n      \u0026lt;/li\u0026gt;\n    {%- else %}\n      \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ term.Permalink }}\u0026#34;\u0026gt;{{ _(term.Name) }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    {%- endif %}\n  {%- endfor %}\n{%- endif %}\n\n搜索功能\n\n    Snow 本身没有自带搜索，但可以输出 json 文件\n\n\n\n\n search.md\n      首先在 {content_dir} 目录下新建 search.md 文件\n\n---\ntitle: Search\npath: search.html\ntemplate: search.html\nfilter: type=\u0026#34;posts\u0026#34;\npaginate: 0\nsection: true\nformats:\n  json:\n    path: \u0026#34;index.json\u0026#34;\n    template: \u0026#34;search.json\u0026#34;\n---\n\n      然后在字段 formats 指定格式，路径和模版\n\n\n\n search.json\n      在 {theme}/templates 目录下或者 templates (配置文件同级目录下) 建立\n\n{{- scratch.Set(\u0026#34;newjson\u0026#34;, slice()) | slient }}\n{%- for page in pages %}\n{{- scratch.Add(\u0026#34;newjson\u0026#34;, dict(\u0026#34;index\u0026#34;, forloop.Counter - 1, \u0026#34;permalink\u0026#34;, page.Permalink, \u0026#34;summary\u0026#34;, page.Summary, \u0026#34;title\u0026#34;, page.Title, \u0026#34;content\u0026#34;, page.Content | striptags)) | slient }}\n{%- endfor %}\n{{- scratch.JSON(\u0026#34;newjson\u0026#34;) | safe }}\n\n      当写入到 /index.json 后就可以利用其它的搜索库比如 lunr 来进行搜索\n\n\n加密功能\n\n    文章加密也是我不用 Hugo 的一个重要原因，我不希望使用 snow build 之前还需要使用另外的程序对内容进行一个预处理，所以在 Snow 中，我内置了一个名为 encrypt 的插件\n\nhooks:\n  - encrypt\n...\n\n    注册插件后就可以在内容文件里使用 encrypt 的 shortcode代码，或者在模版里使用 encrypt 函数\n\n\n\n\n 全局加密:\n      只要在文件头添加 passowd: xxx,hello world, 其中 xxx 是输入的密码，hello world 是显示的描述信息\n\n\n\n 局部加密:\n      使用 shortcode 进行加密\n\n\u0026lt;shortcode _name=\u0026#34;encrypt\u0026#34; password=\u0026#34;xxx\u0026#34; description=\u0026#34;hello world\u0026#34;\u0026gt;\n...\n\u0026lt;/shortcode\u0026gt;\n\n\n 模版加密:\n\n\u0026lt;div\u0026gt;\n  {{ page.Content | encrypt:\u0026#34;xxx\u0026#34; }}\n\u0026lt;/div\u0026gt;\n\n\n    示例：为pelican添加文章加密功能","index":63,"permalink":"https://honmaple.me/articles/2023/02/博客系统从Pelican迁移至Snow.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n上一次迁移博客系统还是在上一次。。。\n哈哈，不开玩笑，上次迁移大概还是在七年前(2015.10), 不知不觉我的博客也建立快八年时间，如果算上动态博客可能都快十年了，虽然也没写多少篇(其实本地草稿都攒了快200篇了, 也没好好整理), 但好歹可以记录自己的生活和想法，之前使用的博客系统是基于 \u003ccode\u003ePython\u003c/code\u003e 的 \u003ccode\u003ePelican\u003c/code\u003e, 此次将博客迁移至 \u003ca href=\"https://github.com/honmaple.com/snow\"\u003esnow\u003c/a\u003e —— \u003cb\u003e一个轻量，简洁的基于Go开发的静态博客生成器\u003c/b\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e迁移列表\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 内容文件(.md、.org、.html)\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 静态文件(.css、.js、.scss等)\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 配置文件(pelicanconf.py -\u0026gt;...\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e","title":"博客系统从Pelican迁移至Snow"},{"content":"Table of Contents\n事故（一）\n事故（二）\n\n\n\n最近archlinux升级至了 python3.6 ，直接导致了我的开发环境失效,唉\n\n\n\n\narchlinux 果然不适合开发\n\n\n\n\n虽然后面都已经解决了\n\n\n事故（一）\n\n   virtualenv不可用,原先使用python3.5创建的环境直接不能用了,只好删了原有了东西,重新使用python3.6创建\n\n\npip freeze \u0026gt; requestments.txt\npip install -r requestments.txt\n\n事故（二）\n\n   py3status 报错\n\n   Traceback (most recent call last):\n  File \u0026#34;/usr/bin/py3status\u0026#34;, line 11, in \u0026lt;module\u0026gt;\n    load_entry_point(\u0026#39;py3status==3.3\u0026#39;, \u0026#39;console_scripts\u0026#39;, \u0026#39;py3status\u0026#39;)()\n  File \u0026#34;/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\u0026#34;, line 561, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \u0026#34;/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\u0026#34;, line 2631, in load_entry_point\n    return ep.load()\n  File \u0026#34;/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\u0026#34;, line 2291, in load\n    return self.resolve()\n  File \u0026#34;/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\u0026#34;, line 2297, in resolve\n    module = __import__(self.module_name, fromlist=[\u0026#39;__name__\u0026#39;], level=0)\n  File \u0026#34;/usr/lib/python3.6/site-packages/py3status/__init__.py\u0026#34;, line 4, in \u0026lt;module\u0026gt;\n    from py3status.core import Py3statusWrapper\n  File \u0026#34;/usr/lib/python3.6/site-packages/py3status/core.py\u0026#34;, line 22, in \u0026lt;module\u0026gt;\n    from py3status.parse_config import process_config\n  File \u0026#34;/usr/lib/python3.6/site-packages/py3status/parse_config.py\u0026#34;, line 23, in \u0026lt;module\u0026gt;\n    from py3status.private import PrivateHide, PrivateBase64\n  File \u0026#34;/usr/lib/python3.6/site-packages/py3status/private.py\u0026#34;, line 124, in \u0026lt;module\u0026gt;\n    class PrivateBase64(Private):\nTypeError: _catch() missing 1 required positional argument: \u0026#39;s\u0026#39;\n\n\n   py3status是i3wm status的python 替代品,用着还成,找了一下,在https://github.com/ultrabug/py3status/pull/610\n   找到解决办法,在以下目录\n\n\n/sudo:root@localhost:/usr/lib/python3.6/site-packages/py3status/private.py\n\n\n   修改 116行\n\nEXCLUDE = [\u0026#39;__init__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__setattr__\u0026#39;]\n\n   为\n\nEXCLUDE = [\u0026#39;__init__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__setattr__\u0026#39;,\u0026#39;__init_subclass__\u0026#39;]\n\n\n\n   super  shift  r 重载i3wm\n\n\n\n\n不管怎样，恭喜python发布新的版本","index":64,"permalink":"https://honmaple.me/articles/2017/01/升级至python3.6导致环境出错解决.html","summary":"\n\u003cp\u003e\n最近archlinux升级至了 \u003cb\u003epython3.6\u003c/b\u003e ，直接导致了我的开发环境失效,唉\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\narchlinux 果然不适合开发\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n虽然后面都已经解决了\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003e事故（一）\u003c/h2\u003e\n\u003cp\u003e\n   \u003cb\u003evirtualenv不可用\u003c/b\u003e,原先使用python3.5创建的环境直接不能用了,只好删了原有了东西,重新使用python3.6创建\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003epip freeze \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e requestments\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etxt\npip install \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003er requestments\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etxt\u003c/pre\u003e\n\n\u003ch2 id=\"heading-2\"\u003e事故（二）\u003c/h2\u003e\n\u003cp\u003e\n   \u003cb\u003epy3status\u003c/b\u003e 报错\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e   Traceback (most recent call last):\n  File...\u003c/pre\u003e","title":"升级至python3.6导致环境出错解决"},{"content":"今天真是不错的一天\n\n\n\n\n今天出门，在电梯遇到一人，“小伙子，你有二十了吧”，“我今年二十X了”，“我看你不到二十的样子”，“我以为我看起来挺老的”，“怎么会。。。”\n\n\n\n\n\n以前只是在电视新闻上看到有人直接撞到玻璃门上，其实真不怪他们，有时候玻璃门真看起来没有一样。我今天就这样直接撞上去了，说实话，还真疼\n\n\n\n\n\n附几张今天用手机拍的照片，昨天用相机拍的raw格式暂时打不开/捂脸\n\n\n\n\n  \n    [[https://static.honmaple.com/images/2017/12/IMG_20171210_153834.jpg]]\n    [[https://static.honmaple.com/images/2017/12/IMG_20171210_154518.jpg]]\n    [[https://static.honmaple.com/images/2017/12/IMG_20171210_154530.jpg]]\n  \n  \n    [[https://static.honmaple.com/images/2017/12/PANO_20171210_154546.jpg]]\n    [[https://static.honmaple.com/images/2017/12/IMG_20171210_154137.jpg]]\n    [[https://static.honmaple.com/images/2017/12/IMG_20171210_154951.jpg]]","index":65,"permalink":"https://honmaple.me/articles/2017/12/十二月十日小记.html","summary":"\n\u003cp\u003e\n今天真是不错的一天\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n今天出门，在电梯遇到一人，“小伙子，你有二十了吧”，“我今年二十X了”，“我看你不到二十的样子”，“我以为我看起来挺老的”，“怎么会。。。”\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n以前只是在电视新闻上看到有人直接撞到玻璃门上，其实真不怪他们，有时候玻璃门真看起来没有一样。我今天就这样直接撞上去了，说实话，还真疼\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n附几张今天用手机拍的照片，昨天用相机拍的raw格式暂时打不开/捂脸\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"row\"\u003e\n  \u003cdiv class=\"col-md-6\"\u003e\n    [[https://static.honmaple.com/images/2017/12/IMG_20171210_153834.jpg]]\n    [[https://static.honmaple.com/images/2017/12...\u003c/div\u003e\u003c/div\u003e","title":"十二月十日小记"},{"content":"最近是增加了一个aplayer在网站上,但原本想要使用qiniu存储，最后觉得太麻烦了,直接利用网易云api获取歌曲\n\n\n\n使用python标准库urllib\n\n\n\n直接给出代码\n\n\nfrom urllib import request\nimport json\n\nid = \u0026#39;28819878\u0026#39;\nurl = \u0026#34;http://music.163.com/api/song/detail/?id=\u0026#34; + id + \u0026#34;\u0026amp;ids=%5B\u0026#34; + id + \u0026#34;%5D\u0026amp;csrf_token\u0026#34;\nrep = request.urlopen(url).read().decode(\u0026#39;UTF-8\u0026#39;)\nrep = json.loads(rep)[\u0026#39;songs\u0026#39;][0]\nname = rep[\u0026#39;name\u0026#39;]\nartist = rep[\u0026#39;artists\u0026#39;][0][\u0026#39;name\u0026#39;]\nmp3url = rep[\u0026#39;mp3Url\u0026#39;]\npicurl = rep[\u0026#39;album\u0026#39;][\u0026#39;blurPicUrl\u0026#39;]\nprint(\u0026#39;name:\u0026#39;, name)\nprint(\u0026#39;artists:\u0026#39;, artist)\nprint(\u0026#39;mp3:\u0026#39;, mp3url)\nprint(\u0026#39;pic:\u0026#39;, picurl)\nurl = \u0026#39;http://music.163.com/api/song/media?id=\u0026#39; + id\nrep = request.urlopen(url).read().decode(\u0026#39;UTF-8\u0026#39;)\nlyric = json.loads(rep)[\u0026#39;lyric\u0026#39;]\nprint(\u0026#39;lyric:\\n\u0026#39;, json.dumps(lyric))\n\n#+RESULTS:\n: name: 轨迹\n: artists: 徐小薇\n: mp3: http://m2.music.126.net/1vGFlmmY1NeHEZy_1QuYhA==/5898879883333738.mp3\n: pic: http://p4.music.126.net/EMS4GE-ojql3azwxXYPT3w==/3264450024433079.jpg\n: lyric:\n:  \u0026#34;[00:12.98]\\u600e\\u4e48\\u9690\\u85cf\\u6211\\u7684\\u60b2\\u4f24\\n[00:19.10]\\u5931\\u53bb\\u4f60\\u7684\\u5730\\u65b9\\n[00:25.61]\\u4f60\\u7684\\u53d1\\u9999\\u6563\\u7684\\u5306\\u5fd9\\n[00:32.06]\\u6211\\u5df2\\u7ecf\\u8ddf\\u4e0d\\u4e0a\\n[00:38.49]\\u95ed\\u4e0a\\u773c\\u775b\\u8fd8\\u80fd\\u770b\\u89c1\\n[00:44.90]\\u4f60\\u79bb\\u53bb\\u7684\\u75d5\\u8ff9\\n[00:51.21]\\u5728\\u6708\\u5149\\u4e0b\\u4e00\\u76f4\\u627e\\u5bfb\\u90a3\\u60f3\\u5ff5\\u7684\\u8eab\\u5f71\\n[01:04.48]\\u5982\\u679c\\u8bf4\\u5206\\u624b\\u662f\\u82e6\\u75db\\u7684\\u8d77\\u70b9\\n[01:09.98]\\u90a3\\u5728\\u7ec8\\u70b9\\u4e4b\\u524d\\n[01:13.25]\\u6211\\u613f\\u610f\\u518d\\u7231\\u4e00\\u904d\\n[01:17.25]\\u60f3\\u8981\\u5bf9\\u4f60\\u8bf4\\u7684\\n[01:19.89]\\u4e0d\\u6562\\u8bf4\\u7684\\u7231\\n[01:23.52]\\u4f1a\\u4e0d\\u4f1a\\u6709\\u4eba\\u53ef\\u4ee5\\u660e\\u767d\\n[01:29.54]\\u6211\\u4f1a\\u53d1\\u7740\\u5446\\u7136\\u540e\\u5fd8\\u8bb0\\u4f60\\n[01:35.83]\\u63a5\\u7740\\u7d27\\u7d27\\u95ed\\u4e0a\\u773c\\n[01:42.27]\\u60f3\\u7740\\u90a3\\u4e00\\u5929\\u4f1a\\u6709\\u4eba\\u4ee3\\u66ff\\n[01:49.10]\\u8ba9\\u6211\\u4e0d\\u518d\\u60f3\\u5ff5\\u4f60\\n[01:55.10]\\u6211\\u4f1a\\u53d1\\u7740\\u5446\\u7136\\u540e\\u5fae\\u5fae\\u7b11\\n[02:01.51]\\u63a5\\u7740\\u7d27\\u7d27\\u95ed\\u4e0a\\u773c\\n[02:07.81]\\u53c8\\u60f3\\u4e86\\u4e00\\u904d\\u4f60\\u6e29\\u67d4\\u7684\\u8138\\n[02:14.54]\\u5728\\u6211\\u5fd8\\u8bb0\\u4e4b\\u524d\\n[02:30.42]\\u600e\\u4e48\\u9690\\u85cf\\u6211\\u7684\\u60b2\\u4f24\\n[02:36.77]\\u5931\\u53bb\\u4f60\\u7684\\u5730\\u65b9\\n[02:43.17]\\u4f60\\u7684\\u53d1\\u9999\\u6563\\u7684\\u5306\\u5fd9\\n[02:49.56]\\u6211\\u5df2\\u7ecf\\u8ddf\\u4e0d\\u4e0a\\n[02:56.09]\\u95ed\\u4e0a\\u773c\\u775b\\u8fd8\\u80fd\\u770b\\u89c1\\n[03:02.20]\\u4f60\\u79bb\\u53bb\\u7684\\u75d5\\u8ff9\\n[03:08.81]\\u5728\\u6708\\u5149\\u4e0b\\u4e00\\u76f4\\u627e\\u5bfb\\u90a3\\u60f3\\u5ff5\\u7684\\u8eab\\u5f71\\n[03:21.81]\\u5982\\u679c\\u8bf4\\u5206\\u624b\\u662f\\u82e6\\u75db\\u7684\\u8d77\\u70b9\\n[03:27.53]\\u90a3\\u5728\\u7ec8\\u70b9\\u4e4b\\u524d\\n[03:34.82]\\u6211\\u613f\\u610f\\u518d\\u7231\\u4e00\\u904d\\n[03:34.68]\\u60f3\\u8981\\u5bf9\\u4f60\\u8bf4\\u7684\\n[03:37.69]\\u4e0d\\u6562\\u8bf4\\u7684\\u7231\\n[03:41.11]\\u4f1a\\u4e0d\\u4f1a\\u6709\\u4eba\\u53ef\\u4ee5\\u660e\\u767d\\n[03:47.07]\\u6211\\u4f1a\\u53d1\\u7740\\u5446\\u7136\\u540e\\u5fd8\\u8bb0\\u4f60\\n[03:53.54]\\u63a5\\u7740\\u7d27\\u7d27\\u95ed\\u4e0a\\u773c\\n[03:59.73]\\u60f3\\u7740\\u90a3\\u4e00\\u5929\\u4f1a\\u6709\\u4eba\\u4ee3\\u66ff\\n[04:06.86]\\u8ba9\\u6211\\u4e0d\\u518d\\u60f3\\u5ff5\\u4f60\\n[04:12.96]\\u6211\\u4f1a\\u53d1\\u7740\\u5446\\u7136\\u540e\\u5fae\\u5fae\\u7b11\\n[04:19.08]\\u63a5\\u7740\\u7d27\\u7d27\\u95ed\\u4e0a\\u773c\\n[04:25.53]\\u53c8\\u60f3\\u4e86\\u4e00\\u904d\\u4f60\\u6e29\\u67d4\\u7684\\u8138\\n[04:32.24]\\u5728\\u6211\\u5fd8\\u8bb0\\u4e4b\\u524d\\n\\n[04:38.34]\\u6211\\u4f1a\\u53d1\\u7740\\u5446\\u7136\\u540e\\u5fd8\\u8bb0\\u4f60\\n[04:45.05]\\u63a5\\u7740\\u7d27\\u7d27\\u95ed\\u4e0a\\u773c\\n[04:51.10]\\u60f3\\u7740\\u90a3\\u4e00\\u5929\\u4f1a\\u6709\\u4eba\\u4ee3\\u66ff\\n[04:58.01]\\u8ba9\\u6211\\u4e0d\\u518d\\u60f3\\u5ff5\\u4f60\\n[05:03.89]\\u6211\\u4f1a\\u53d1\\u7740\\u5446\\u7136\\u540e\\u5fae\\u5fae\\u7b11\\n[05:10.25]\\u63a5\\u7740\\u7d27\\u7d27\\u95ed\\u4e0a\\u773c\\n[05:16.70]\\u53c8\\u60f3\\u4e86\\u4e00\\u904d\\u4f60\\u6e29\\u67d4\\u7684\\u8138\\n[05:23.50]\\u5728\\u6211\\u5fd8\\u8bb0\\u4e4b\\u524d\\n\\n[05:29.62]\\u5fc3\\u91cc\\u7684\\u773c\\u6cea\\n[05:32.81]\\u6a21\\u7cca\\u4e86\\u89c6\\u7ebf\\n[05:36.57]\\u4f60\\u5df2\\u5feb\\u770b\\u4e0d\\u89c1\u0026#34;\n\n\n结果格式化什么的看着格式吧，这些信息对我来说足够了","index":66,"permalink":"https://honmaple.me/articles/2016/12/利用网易云api获取歌曲信息.html","summary":"\n\u003cp\u003e\n最近是增加了一个\u003cb\u003eaplayer\u003c/b\u003e在网站上,但原本想要使用qiniu存储，最后觉得太麻烦了,直接利用网易云api获取歌曲\n\u003c/p\u003e\n\n\u003cp\u003e\n使用\u003cb\u003epython标准库urllib\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n直接给出代码\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e urllib \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e request\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e json\n\nid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e28819878\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\nurl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ehttp://music.163.com/api/song/detail/?id=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e id \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"利用网易云api获取歌曲信息"},{"content":"相关问题: 当echo area不活跃时如何自动关闭\n\n\n\n\n之前看了manateelazycat的awesome-tray,觉得可以采用同样的方式来“关闭”echo area, 原理就是复制 mode-line 的样式 (format-mode-line mode-line-format) , 插入到 minibuffer 中, 当没有信息显示即 echo area 不活跃时就关闭 mode-line, 有信息显示时就重新打开 mode-line, 并清空 minibuffer 里的内容\n\n\n\n我尝试实现上述内容, 可见 https://github.com/honmaple/emacs-maple-echo-area, 最终效果\n\n\n\n\n\n  \n\n\n\n\n虽然大体上是可以的, 但由于 truncate-lines 的存在, 末尾会出现一个 $ 字符，我没找到怎么关闭它，还有就是在一些特殊 buffer， 比如 magit buffer 里显示效果与期望不符，上下分隔的 buffer 由于关闭了 mode-line,很难区分对应文件","index":67,"permalink":"https://honmaple.me/articles/2019/01/关于自动关闭开启echo area的设想.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n相关问题: \u003ca href=\"https://stackoverflow.com/questions/5079466/hide-emacs-echo-area-during-inactivity\"\u003e当echo area不活跃时如何自动关闭\u003c/a\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n之前看了\u003cb\u003emanateelazycat\u003c/b\u003e的\u003cb\u003eawesome-tray\u003c/b\u003e,觉得可以采用同样的方式来“关闭”echo area, 原理就是复制 mode-line 的样式 \u003ccode\u003e(format-mode-line mode-line-format)\u003c/code\u003e , 插入到 minibuffer 中, 当没有信息显示即 \u003cb\u003eecho area\u003c/b\u003e 不活跃时就关闭 \u003cb\u003emode-line\u003c/b\u003e, 有信息显示时就重新打开 \u003cb\u003emode-line\u003c/b\u003e, 并清空 minibuffer...\u003c/p\u003e","title":"关于自动关闭开启echo area的设想"},{"content":"最近在使用网易云音乐时首页的个性推荐总是无法显示，一直在正在为你生成个性化推荐,网上也没找到什么办法,偶然间使用\n\n┌─[jianglin]─[~]\n└──╼ rm -rf .cache/netease-cloud-music/\n┌─[jianglin]─[~]\n└──╼ rm -rf .config/netease-cloud-music/\n\n\n重新打开登陆后个性推荐就出现了，特此记录","index":68,"permalink":"https://honmaple.me/articles/2017/06/关于网易云音乐个性推荐无法显示的问题.html","summary":"\n\u003cp\u003e\n最近在使用网易云音乐时首页的个性推荐总是无法显示，一直在\u003cb\u003e正在为你生成个性化推荐\u003c/b\u003e,网上也没找到什么办法,偶然间使用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e┌─\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ejianglin\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e─\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e~\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n└──╼ rm -rf .cache/netease-cloud-music/\n┌─\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ejianglin\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e─\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e~\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n└──╼ rm -rf .config/netease-cloud-music/\u003c/pre\u003e\n\n\u003cp\u003e\n重新打开登陆后个性推荐就出现了，特此记录\n\u003c/p\u003e","title":"关于网易云音乐个性推荐无法显示的问题"},{"content":"背景\n  不知道从何时开始，就听过这样一个说法: 如果人类所达到的速度超越光速,那么人类将穿越时空。前些年网文电视剧可谓穿越盛行，今天我也来胡言乱语一番!\n\n\n\n\n 胡言乱语\n  光从某一点x出发，在其经过的路径范围内，有一不同于光所在空间y的空间z，z的时间流速与y空间的时间流速不一样，或者说z空间的时间流速小于于y空间的流速，即z空间一天，y空间一年。\n\n\n\n  由此就可发现，当y空间内的光从x点出发，在经过z空间范围内时，由于在z，y空间时间流速不一致，原本到达k点 (x到k的距离大于x到z空间的距离)所花费的时间为1s，但z空间的存在，需要花费0.3s才能通过z空间的范围，现在只需要远小于0.3s的时间就能通过z空间的范围。\n\n\n\n  相对于y空间而言，原本需要花费1s才能到达k点，现在也许只需要0.8s，如果简单按照速度公式v=S/t,光速将超越299792458m/s,相对而言，y空间与z空间也会有所谓的穿越。\n\n\n\n\n当然，z空间也可以看作是一个y空间里的一个介质，光速不能通过简单的线性公式算出，反正我是在胡言乱语而已","index":69,"permalink":"https://honmaple.me/articles/2018/01/关于时间与空间的猜想.html","summary":"\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 背景\n  不知道从何时开始，就听过这样一个说法: 如果人类所达到的速度超越光速,那么人类将穿越时空。前些年网文电视剧可谓穿越盛行，今天我也来胡言乱语一番!\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 胡言乱语\n  光从某一\u003cb\u003e点x\u003c/b\u003e出发，在其经过的路径范围内，有一不同于光所在\u003cb\u003e空间y\u003c/b\u003e的\u003cb\u003e空间z\u003c/b\u003e，z的时间流速与y空间的时间流速不一样，或者说\u003cb\u003ez空间的时间流速小于于y空间的流速\u003c/b\u003e，即z空间一天，y空间一年。\n\u003c/p\u003e\n\n\u003cp\u003e\n  由此就可发现，当y空间内的光从x点出发，在经过z空间范围内时，由于在z，y空间时间流速不一致，原本到达\u003cb\u003ek点\u003c/b\u003e (x到k的距离大于x到z空间的距离)所花费的时间为1s，但z空间的存在，需要花费0.3s才能通过z空间的范围，现在只需要\u003cb\u003e远小于0.3s...\u003c/b\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e","title":"关于时间与空间的猜想"},{"content":"都可看做是where但用法不一样\n\nfilter_by\nquestion = Questions.query.filter_by(id=1).first()\n\nfilter\nquestion = Questions.query.filter(Questions.id==1).first()\n\n其实就是= 与==还有是否带类名的区别\n如果要select * from questions where id \u0026lt; 5\n这时只能使用filter\nquestions = Questions.query.filter(Questions.id \u0026lt; 5).all()\n\n多个条件\nquestion = Questions.query.filter_by(name=\u0026#39;hello\u0026#39;,id=5).first()\n# 或者\nquestion = Questions.query.filter(Questions.name==\u0026#39;hello\u0026#39;,Questions.id==5).first()","index":70,"permalink":"https://honmaple.me/articles/2016/03/关于sqlalchemy的filter_by与filter.html","summary":"\u003cp\u003e都可看做是where但用法不一样\u003c/p\u003e\n\n\u003ch3\u003efilter_by\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003equestion = Questions.query.filter_by(id=1).first()\n\u003c/pre\u003e\n\u003ch3\u003efilter\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003equestion = Questions.query.filter(Questions.id==1).first()\n\u003c/pre\u003e\n\u003cp\u003e其实就是\u003ccode\u003e=\u003c/code\u003e 与\u003ccode\u003e==\u003c/code\u003e还有是否带类名的区别\u003cbr\u003e\n如果要\u003ccode\u003eselect * from questions where id \u0026lt; 5\u003c/code\u003e\u003cbr\u003e\n这时只能使用\u003cstrong\u003efilter\u003c/strong\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003equestions...\u003c/pre\u003e","title":"关于sqlalchemy的filter_by与filter"},{"content":"也就是降序排序\n\n简单使用\n\nquestions = Questions.query.order_by(Questions.time.desc()).all()\n\n设置默认排序\n\n如果几乎所有的questions都是按照时间降序排序,总不能每一条语句都加上order_by(Questions.time.desc())\n所以设置默认排序是有效的\nclass Questions(db.Model):\n    __tablename__ = \u0026#39;questions\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(50), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    time = db.Column(db.DateTime, nullable=False)\n\n    __mapper_args__ = {\n        \u0026#34;order_by\u0026#34;: time.desc()\n    }\n\n如代码所示,使用__mapper_args__就可，__mapper_args__可以做很多事,具体看这里\n设置默认排序下面的做法是错误的\n    __mapper_args__ = {\n        \u0026#34;order_by\u0026#34;: \u0026#39;Questions.time.desc()\u0026#39;\n    }\n    # 或者\n    __mapper_args__ = {\n        \u0026#34;order_by\u0026#34;: \u0026#39;Questions.time desc\u0026#39;\n    }\n    # 或者\n    __mapper_args__ = {\n        \u0026#34;order_by\u0026#34;: \u0026#39;desc(Questions.time)\u0026#39;\n    }\n\n多对多默认排序\n\n比如这样\nquestion = Questions.query.filter_by(id=1).first()\nfor reply in question.replies:\n    print(reply.content)\n\n又如何设置回复是按照回复时间排序的\n总不能这样\nfor reply in sorted(question.replies):\n# 这会报错的\nTypeError: unorderable types: Replies() \u0026lt; Replies()\n\n怎么设置\nreplies = db.relationship(\u0026#39;Questions\u0026#39;,\n                          backref=db.backref(\u0026#39;replies\u0026#39;,\n                                             lazy=\u0026#39;dynamic\u0026#39;,\n                                             order_by=\u0026#39;Replies.time\u0026#39;)\n\nok，暂时这样","index":71,"permalink":"https://honmaple.me/articles/2016/03/关于sqlalchemy的desc.html","summary":"\u003cp\u003e也就是降序排序\u003c/p\u003e\n\n\u003ch3\u003e简单使用\u003c/h3\u003e\n\n\u003cp\u003equestions = Questions.query.order_by(Questions.time.desc()).all()\u003c/p\u003e\n\n\u003ch3\u003e设置默认排序\u003c/h3\u003e\n\n\u003cp\u003e如果几乎所有的questions都是按照时间降序排序,总不能每一条语句都加上\u003ccode\u003eorder_by(Questions.time.desc())\u003c/code\u003e\u003cbr\u003e\n所以设置默认排序是有效的\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eclass Questions(db.Model):\n    __tablename__ = \u0026#39;questions\u0026#39;\n    id = db.Column(db.Integer...\u003c/pre\u003e","title":"关于sqlalchemy的desc"},{"content":"Table of Contents\nivy中的tab\nivy中的C-h\nivy-occur批量操作\n\n自动打开wgrep-mode\n批量修改文件名\n\ncounsel-find-file\n\n重命名\n自动创建不存在的目录\n\nivy自动使用选中的内容\n搜索某个目录\nivy的显示避免出现在视线外\ncounsel-ag指定文件后缀\n\n\n\n\nivy默认的配置已经足够了，但还是可以通过一些技巧来提升使用体验\n\n\n\nivy中的tab\n\n  ivy提供了好几个有关补全的命令，分别是ivy-done, ivy-partial-or-done, ivy-immediate-done, ivy-dispatching-done, 但不幸，想要获得高效的补全，我不得不记住这n多个命令，这常常使效率变得更低，\n  所以，我自定义了一个 maple/ivy-done, 仅使用 tab 这一个按键就可以获得以上所有的体验\n\n\n(defun maple/ivy-done()\n  (interactive)\n  (let ((dir ivy--directory))\n    (ivy-partial-or-done)\n    (when (string= dir ivy--directory)\n      (ivy-insert-current)\n      (when (and (eq (ivy-state-collection ivy-last) #\u0026#39;read-file-name-internal)\n                 (setq dir (ivy-expand-file-if-directory (ivy-state-current ivy-last))))\n        (ivy--cd dir)\n        (setq this-command \u0026#39;ivy-cd)))))\n\n\n\n\n 预设场景一\n    dirs目录下有\n\ninit-a.el\ninit-b.el\ninit-c.el\n\n    等多个文件, 我需要把init-c.el重命名为init-c.el.bak, 默认的ivy会怎么做呢\n\n\n\n\n 输入 init c 进行查找\n\n\n\n 使用 C-M-j (ivy-immediate-done) 插入当前选中项\n\n\n\n 修改\n\n\n\n\n    而使用 maple/ivy-done 后呢\n\n\n\n\n 输入 init c 进行查找\n\n\n\n 使用 tab 插入当前选中项\n\n\n\n 修改\n\n\n\n\n\n 预设场景二\n    有一个n级子目录，需要切换到第n个子目录下, 默认的ivy会怎么做呢\n\n\n\n\n 使用 tab 选中\n\n\n\n 再次使用 tab 切换目录\n\n\n\n\n    而使用 maple/ivy-done 后呢\n\n\n\n\n 使用 tab 选中并切换目录\n\n\n\n\nivy中的C-h\n\n  由于我是邪恶的 evil 用户, 所以我正常情况会使用 C-j, C-k来选择待选项，同样的，我希望能够使用 C-h 来进行某些操作,比如在counsel-ag中使用C-h代替backspace删除输入的字符，而在counsel-find-file中使用C-h切换到上一级目录\n\n\n\n  ivy默认提供了 counsel-up-directory 命令可以切换到上级目录, 我希望能更进一步，当有插入的字符时, 调用C-h能够直接清除插入的字符,再次调用才切换到上一级目录\n\n(defun maple/ivy-c-h ()\n  (interactive)\n  (if (eq (ivy-state-collection ivy-last) #\u0026#39;read-file-name-internal)\n      (if (string-equal (ivy--input) \u0026#34;\u0026#34;)\n          (counsel-up-directory)\n        (delete-minibuffer-contents))\n    (ivy-backward-delete-char)))\n\nivy-occur批量操作\n自动打开wgrep-mode\n\n   ivy默认调用ivy-occur后, 还需要调用ivy-wgrep-change-to-wgrep-mode才能进行批量修改\n\n\n;; ivy-occur custom\n(defun maple/ivy-edit ()\n  \u0026#34;Edit the current search results in a buffer using wgrep.\u0026#34;\n  (interactive)\n  (run-with-idle-timer 0 nil \u0026#39;ivy-wgrep-change-to-wgrep-mode)\n  (ivy-occur))\n\n批量修改文件名\n\n   预设场景: 当某个项目下有许多使用 aaa.py的文件,我需要把 aaa.py 全部修改为 bbb.py, 也许某个 aaa.py 需要修改成 ccc.py，我在使用 projectile-find-file 搜索完全部的 aaa.py 后，打开ivy默认的ivy-occur并不能对文件进行修改(提示Text read only), 所以我采用 find-name-dired 来批量修改文件名(目前还有些问题)\n\n(defun maple/ivy-dired-occur()\n  (interactive)\n  (find-name-dired\n   (or (projectile-project-root) default-directory) (concat (ivy--input) \u0026#34;*\u0026#34;))\n  (ivy-exit-with-action\n   (lambda (_)\n     (pop-to-buffer (get-buffer \u0026#34;*Find*\u0026#34;))\n     (dired-hide-details-mode)\n     (wdired-change-to-wdired-mode)\n     (when (bound-and-true-p evil-local-mode) (evil-normal-state)))))\n\ncounsel-find-file\n重命名\n\n   预设场景: 有一个dirs目录, 我需要在同级目录下创建一个 dirs-aa.el 的文件, 默认的ivy会怎么做呢\n\n\n\n\n 切换到 dirs 目录的上级目录\n\n\n\n 使用 ivy-immediate-done 插入目录名\n\n\n\n 新建文件\n\n\n\n\n   但还有一种方式\n\n\n\n\n 切换到 dirs 目录\n\n\n\n 使用 backspace 键删除目录末尾的 / \n\n\n\n 新建文件\n\n\n\n\n   不幸的是，ivy中 backspace 的按键绑定了 ivy-backward-delete-char, 在 counsel-find-file 中使用 ivy会直接返回上级目录, 所以需要对 ivy-backward-delete-char 作简单的修改\n\n(defun maple/ivy-backward-delete-char ()\n  (interactive)\n  (let ((dir ivy--directory)\n        (p (and ivy--directory (= (minibuffer-prompt-end) (point)))))\n    (ivy-backward-delete-char)\n    (when p (insert (file-name-nondirectory (directory-file-name dir))))))\n\n自动创建不存在的目录\n\n   不仅用于ivy, 其它文件操作命令也需要\n\n(defun maple/ivy-make-directory-maybe ()\n  \u0026#34;Create parent directory if not exists while visiting file.\u0026#34;\n  (let ((dir (file-name-directory buffer-file-name)))\n    (unless (file-exists-p dir)\n      (if (y-or-n-p (format \u0026#34;Directory %s does not exist,do you want you create it? \u0026#34; dir))\n          (make-directory dir t)\n        (keyboard-quit)))))\n\n(add-to-list \u0026#39;find-file-not-found-functions \u0026#39;maple/ivy-make-directory-maybe nil #\u0026#39;eq)\n\nivy自动使用选中的内容\n\n  在使用 counsel-ag 或者 swiper, 我需要快速搜索选中的关键词，然而，ivy默认并不支持这么做，ivy需要打开counsel-ag后使用 M-n 插入选中的关键词，当然，也许是作者认为这样的方式很方便，但我并不认同，我为何需要重复一次操作呢，为何还需要记住 M-n 这样的按键呢？\n\n\n(defun maple/region-string()\n  \u0026#34;Get region string.\u0026#34;\n  (if (not (use-region-p)) \u0026#34;\u0026#34;\n    (let* ((beg (region-beginning))\n           (end (region-end))\n           (eol (save-excursion (goto-char beg) (line-end-position))))\n      (deactivate-mark) (buffer-substring-no-properties beg (min end eol)))))\n\n;; custom counsel-ag\n(defun maple/counsel-ag(-counsel-ag \u0026amp;optional initial-input initial-directory extra-ag-args ag-prompt)\n  (funcall -counsel-ag\n           (or initial-input (maple/region-string))\n           (or initial-directory default-directory)\n           extra-ag-args\n           ag-prompt))\n\n(advice-add \u0026#39;counsel-ag :around #\u0026#39;maple/counsel-ag)\n\n\n  这样，调用 counsel-ag 时，如何已经有选中的关键词，就会直接调用该关键词进行查找，避免重复操作, 同样的对于swiper 也可以使用另一种方式\n\n(defun maple/ivy-search-at-point (func)\n  (let ((ivy-initial-inputs-alist (list (cons func (maple/region-string)))))\n    (funcall func)))\n\n(defun maple/swiper()\n  (interactive)\n  (maple/ivy-search-at-point \u0026#39;swiper))\n\n搜索某个目录\n\n  counsel-ag默认搜索当前目录，想要搜索某个目录，需要切换到该目录下调用counsel-ag，无疑的，这非常不方便，所以，我希望可以选择某个目录进行搜索\n\n(defun maple/counsel-ag-directory()\n  (interactive)\n  (counsel-ag nil (read-directory-name \u0026#34;Search in directory: \u0026#34;)))\n\nivy的显示避免出现在视线外\n\n  详见 自定义helm式的ivy.html 中的\n\n\n\n  吐嘈六: minibuffer\n\n\n\ncounsel-ag指定文件后缀\n关键词 -- -Ggo","index":72,"permalink":"https://honmaple.me/articles/2019/05/关于ivy的使用技巧.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\nivy默认的配置已经足够了，但还是可以通过一些技巧来提升使用体验\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003eivy中的tab\u003c/h1\u003e\n\u003cp\u003e\n  ivy提供了好几个有关补全的命令，分别是\u003cb\u003eivy-done\u003c/b\u003e, \u003cb\u003eivy-partial-or-done\u003c/b\u003e, \u003cb\u003eivy-immediate-done\u003c/b\u003e, \u003cb\u003eivy-dispatching-done\u003c/b\u003e, 但不幸，想要获得高效的补全，我不得不记住这n多个命令，这常常使效率变得更低，\n  所以，我自定义了一个 \u003cb\u003emaple/ivy-done\u003c/b\u003e, 仅使用 \u003ccode\u003etab\u003c/code\u003e 这一个按键就可以获得以上所有的体验\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(defun maple/ivy-done()\n  (interactive)\n  (let ((dir...\u003c/pre\u003e","title":"关于ivy的使用技巧"},{"content":"以前都是\u0026#34;吃快餐\u0026#34;,利用别人的例子进行修改，弄得自己不明不白的，这次放假，静下心来好好的看看官方文档，\n才发现写的代码有很多不必要的东西，可以进行很多优化\n\n\nflask-wtforms是一个优秀的flask扩展，可惜官方文档说的不明不白，只是简单的说了大概的\n功能,如果想要更好的利用这个扩展，请google wtforms,或者看这里\n\n这里记录一下wtforms的validators\n参考文档\nclass RegisterForm(Form):\n    name = StringField(\u0026#39;用户名:\u0026#39;)\n    email = StringField(\u0026#39;邮箱:\u0026#39;)\n    passwd = PasswordField(\u0026#39;密码:\u0026#39;)\n    repasswd = PasswordField(\u0026#39;重复密码:\u0026#39;)\n    register = SubmitField(\u0026#39;注册\u0026#39;)\n\n这只是一个最简单注册表单\n\n慢慢地加上一些要求:\n\n输入不能为空\nfrom wtforms.validators import Required\nname = StringField(\u0026#39;用户名:\u0026#39;,\n                   [Required()])\n\n限制name长度\nfrom wtforms.validators import Length\nname = StringField(\u0026#39;用户名:\u0026#39;,\n                    [Length(min=4,\n                           max=20)])\n\n判断邮箱格式是否正确\nfrom wtforms.validators import Email\nemail = StringField(\u0026#39;邮箱\u0026#39;,\n                    [Email()])\n\n比较两次密码是否一致\nfrom wtforms.validators import Email\npasswd = PasswordField(\u0026#39;密码:\u0026#39;, [EqualTo(\u0026#39;repasswd\u0026#39;)])\nrepasswd = PasswordField(\u0026#39;重复密码:\u0026#39;)\n\n自定义错误信息\n\n默认错误信息可以通过\nform = RegisterForm()\nprint(form.errors) //或者print(form.name.errors)\n\n查看\n比如输入不能为空的默认错误信息\n\u0026#39;This field is required.\u0026#39;\n\n想要修改默认信息,请使用message\n比如:\nname = StringField(\u0026#39;用户名:\u0026#39;,\n                   [Required(message=u\u0026#39;输入不能为空\u0026#39;)])\n\n同样的\nLength(min=4,\n       max=25,\n       message=u\u0026#39;用户名长度在4到25个字符之间\u0026#39;)\nEmail(message=u\u0026#39;错误的邮箱地址\u0026#39;)\nEqualTo(\u0026#39;confirm\u0026#39;,message=u\u0026#39;两次密码不一致\u0026#39;)\n\n这样就不用在视图文件不停地判断了,不要像我原先那样\nif form.name.data == \u0026#39;\u0026#39; or form.passwd.data == \u0026#39;\u0026#39;:\n    flash(u\u0026#39;输入不能为空\u0026#39;)\nif form.repasswd.data != form.passwd.data:\n    flash(u\u0026#39;两次密码不一致\u0026#39;)\n\nok,就这样,这里写的不完善，不过对于我来说暂时够用了","index":73,"permalink":"https://honmaple.me/articles/2016/02/关于flask-wtf中的validators.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e以前都是\u0026#34;吃快餐\u0026#34;,利用别人的例子进行修改，弄得自己不明不白的，这次放假，静下心来好好的看看官方文档，\n才发现写的代码有很多不必要的东西，可以进行很多优化\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eflask-wtforms是一个优秀的flask扩展，可惜官方文档说的不明不白，只是简单的说了大概的\n功能,如果想要更好的利用这个扩展，请google wtforms,或者\u003ca href=\"http://wtforms.readthedocs.org/en/latest/\"\u003e看这里\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e这里记录一下wtforms的\u003cstrong\u003evalidators\u003c/strong\u003e\u003cbr\u003e\n\u003ca href=\"http://wtforms.simplecodes.com/docs/1.0.1/validators.html\"\u003e参考文档\u003c/a\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eclass RegisterForm(Form):\n    name = StringField(\u0026#39;用户名:\u0026#39;)\n    email = StringField(\u0026#39;...\u003c/pre\u003e","title":"关于flask-wtf中的validators"},{"content":"Table of Contents\n如何进行显示日期的本地化？\n\n\n如何进行显示日期的本地化？\n\n   比如显示文章发表于 2021年06月05日 周六。\n\n\n\n   因为 Snow 基于 Go 开发，日期的格式化也是基于Go时间语法。 日期格式2006年01月02日也会渲染为2021年06月05日，但是星期几无法直接使用Go时间格式，不过 Snow 支持 i18n 模版翻译，所以可以使用\n\n{{ _(page.Date | date:\u0026#34;Mon\u0026#34;) }}\n\n   然后在主题目录下新建一个 i18n/zh.yaml 文件，并增加如下内容\n\n---\n- id: \u0026#34;Sun\u0026#34;\n  tr: \u0026#34;周日\u0026#34;\n- id: \u0026#34;Mon\u0026#34;\n  tr: \u0026#34;周一\u0026#34;\n- id: \u0026#34;Tue\u0026#34;\n  tr: \u0026#34;周二\u0026#34;\n- id: \u0026#34;Wed\u0026#34;\n  tr: \u0026#34;周三\u0026#34;\n- id: \u0026#34;Thu\u0026#34;\n  tr: \u0026#34;周四\u0026#34;\n- id: \u0026#34;Fri\u0026#34;\n  tr: \u0026#34;周五\u0026#34;\n- id: \u0026#34;Sat\u0026#34;\n  tr: \u0026#34;周六\u0026#34;\n\n   这样，在英文EN文章下还是会显示原来的英文缩写，但是在中文ZH文章下就会显示周几","index":74,"permalink":"https://honmaple.me/articles/2023/06/snow-faq.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e如何进行显示日期的本地化？\u003c/h2\u003e\n\u003cp\u003e\n   比如显示文章发表于 \u003ccode\u003e2021年06月05日 周六\u003c/code\u003e。\n\u003c/p\u003e\n\n\u003cp\u003e\n   因为 \u003ccode\u003eSnow\u003c/code\u003e 基于 \u003ccode\u003eGo\u003c/code\u003e 开发，日期的格式化也是基于Go时间语法。 日期格式\u003ccode\u003e2006年01月02日\u003c/code\u003e也会渲染为\u003ccode\u003e2021年06月05日\u003c/code\u003e，但是星期几无法直接使用Go时间格式，不过 \u003ccode\u003eSnow\u003c/code\u003e 支持 \u003cb\u003ei18n\u003c/b\u003e 模版翻译，所以可以使用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e{{ _(page.Date | date:\u0026#34;Mon\u0026#34;) }}\u003c/pre\u003e\n\u003cp\u003e\n   然后在主题目录下新建一个 \u003cb\u003ei18n/zh.yaml\u003c/b\u003e 文件，并增加如下内容\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e---\n- \u003cspan style=\"color:#66d9ef\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"关于Snow静态博客的常见问题"},{"content":"提供商\nIPv4\nIPv6\nDoH/DoT\n\n\n\n百度DNS\n180.76.76.76\n2400:da00::6666\n\n\n\n阿里DNS\n223.5.5.5,223.6.6.6\n2400:3200::1,2400:3200:baba::1\ndns.alidns.com\n\n\n谷歌DNS\n8.8.8.8,8.8.4.4\n2001:4860:4860::8888,2001:4860:4860::8844","index":75,"permalink":"https://honmaple.me/articles/2021/04/公共DNS.html","summary":"\n\u003ctable\u003e\n\n\u003ctr\u003e\n\u003cth\u003e提供商\u003c/th\u003e\n\u003cth\u003eIPv4\u003c/th\u003e\n\u003cth\u003eIPv6\u003c/th\u003e\n\u003cth\u003eDoH/DoT\u003c/th\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e百度DNS\u003c/td\u003e\n\u003ctd\u003e180.76.76.76\u003c/td\u003e\n\u003ctd\u003e2400:da00::6666\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e阿里DNS\u003c/td\u003e\n\u003ctd\u003e223.5.5.5,223.6.6.6\u003c/td\u003e\n\u003ctd\u003e2400:3200::1,2400:3200:baba::1\u003c/td\u003e\n\u003ctd\u003edns.alidns.com\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e谷歌DNS\u003c/td\u003e\n\u003ctd\u003e8.8.8...\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e","title":"公共DNS"},{"content":"Table of Contents\n需求\n实现\n\n自动登陆系统(用户名密码都不用输)\n自动登陆系统(仅输入密码)\n\n\n\n\n环境: archlinux\n参考\n\n\n需求\n\n  想要Linux启动后默认以指定用户登陆,不用输入用户名,可以直接输入密码进入系统\n\n\n实现\nman agetty\n\n  修改以下文件\n\n/sudo:root@localhost:/etc/systemd/system/getty.target.wants/getty@tty1.service\n自动登陆系统(用户名密码都不用输)\nExecStart=-/sbin/agetty -a username --noclear %I $TERM\n\n自动登陆系统(仅输入密码)\nExecStart=-/sbin/agetty --skip-login --login-options \u0026#34;username\u0026#34; --noclear %I $TERM","index":76,"permalink":"https://honmaple.me/articles/2017/02/修改agetty启动参数自动登陆linux.html","summary":"\n\u003cp\u003e\n环境: archlinux\n\u003ca href=\"https://bbs.archlinux.org/viewtopic.php?id=198097\"\u003e参考\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e需求\u003c/h1\u003e\n\u003cp\u003e\n  想要Linux启动后默认以指定用户登陆,不用输入用户名,可以直接输入密码进入系统\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e实现\u003c/h1\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eman agetty\u003c/pre\u003e\n\u003cp\u003e\n  修改以下文件\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e/sudo:root@localhost:/etc/systemd/system/getty.target.wants/getty@tty1.service\u003c/pre\u003e\n\u003ch2 id=\"heading-2.1\"\u003e自动登陆系统(用户名密码都不用输)\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eExecStart=-/sbin/agetty -a username --noclear %I $TERM\u003c/pre\u003e\n\n\u003ch2 id=\"heading-2.2\"\u003e自动登陆系统(仅输入密码)\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eExecStart=...\u003c/pre\u003e","title":"修改agetty启动参数自动登陆linux"},{"content":"import tornado\nfrom tornado.web import Application\nfrom tornado.web import RequestHandler\nfrom tornado.websocket import WebSocketHandler\nimport os\nimport json\n\ntemplate = \u0026#39;\u0026#39;\u0026#39;\u0026lt;!doctype html\u0026gt;\n\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\n  \u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;/\u0026gt;\n    \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt;\n    \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt;\n    \u0026lt;script src=\u0026#34;https://cdn.bootcss.com/jquery/2.1.4/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script src=\u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\u0026#34;\u0026gt;\n    \u0026lt;script type=\u0026#34;text/javascript\u0026#34; charset=\u0026#34;utf-8\u0026#34;\u0026gt;\n     $(function() {\n         if (typeof String.prototype.startsWith != \u0026#39;function\u0026#39;) {\n             String.prototype.startsWith = function (prefix){\n                 return this.slice(0, prefix.length) === prefix;\n             };\n         }\n         var output = $(\u0026#34;#stdout-output\u0026#34;).html();\n         function addToOutput(msg) {\n             /* output = $(\u0026#34;#output\u0026#34;).html() + \u0026#39;\u0026lt;br/\u0026gt;\u0026#39; + msg;*/\n             if (msg.startsWith(\u0026#39;stderr:\u0026#39;)) {\n                 if (!$(\u0026#39;a[href=\u0026#34;#stderr\u0026#34;]\u0026#39;).hasClass(\u0026#34;alarm-report\u0026#34;) \u0026amp;\u0026amp; $(\u0026#39;ul[role=\u0026#34;tablist\u0026#34;] li.active a\u0026#39;).attr(\u0026#39;href\u0026#39;) != \u0026#39;#stderr\u0026#39;) {\n                     $(\u0026#39;a[href=\u0026#34;#stderr\u0026#34;]\u0026#39;).addClass(\u0026#34;alarm-report\u0026#34;)\n                 }\n                 output = $(\u0026#34;#stderr-output\u0026#34;).html() + msg.replace(/^stderr:/,\u0026#39;\u0026#39;);\n                 $(\u0026#34;#stderr-output\u0026#34;).html(output);\n                 $(\u0026#39;#stderr-output\u0026#39;).scrollTop($(\u0026#39;#stderr-output\u0026#39;)[0].scrollHeight);\n             }else {\n                 if (!$(\u0026#39;a[href=\u0026#34;#stdout\u0026#34;]\u0026#39;).hasClass(\u0026#34;alarm-report\u0026#34;) \u0026amp;\u0026amp; $(\u0026#39;ul[role=\u0026#34;tablist\u0026#34;] li.active a\u0026#39;).attr(\u0026#39;href\u0026#39;) != \u0026#39;#stdout\u0026#39;) {\n                     $(\u0026#39;a[href=\u0026#34;#stdout\u0026#34;]\u0026#39;).addClass(\u0026#34;alarm-report\u0026#34;)\n                 }\n                 output = $(\u0026#34;#stdout-output\u0026#34;).html() + msg.replace(/^stdout:/,\u0026#39;\u0026#39;);\n                 $(\u0026#34;#stdout-output\u0026#34;).html(output);\n                 $(\u0026#39;#stdout-output\u0026#39;).scrollTop($(\u0026#39;#stdout-output\u0026#39;)[0].scrollHeight);\n             }\n         }\n         $(\u0026#39;a#clear\u0026#39;).click(function() {\n             var active_tab = $(\u0026#39;ul[role=\u0026#34;tablist\u0026#34;] li.active a\u0026#39;).attr(\u0026#39;href\u0026#39;);\n             $(active_tab + \u0026#39;-output\u0026#39;).html(\u0026#39;\u0026#39;);\n         })\n         $(\u0026#39;a#load\u0026#39;).click(function() {\n             var active_tab = $(\u0026#39;ul[role=\u0026#34;tablist\u0026#34;] li.active a\u0026#39;).attr(\u0026#39;href\u0026#39;);\n             ws.send(JSON.stringify({room:\u0026#39;load\u0026#39;,msg:active_tab.replace(/^#/,\u0026#39;\u0026#39;)}));\n         })\n        $(\u0026#39;a[data-toggle=\u0026#34;tab\u0026#34;]\u0026#39;).on(\u0026#39;shown.bs.tab\u0026#39;, function (e) {\n            if ($(e.target).hasClass(\u0026#34;alarm-report\u0026#34;)) {\n                $(e.target).removeClass(\u0026#34;alarm-report\u0026#34;)\n            }\n        })\n         if (\u0026#34;MozWebSocket\u0026#34; in window) {\n             WebSocket = MozWebSocket;\n         }\n         if (WebSocket) {\n             var ws = new WebSocket(\u0026#34;ws://%s/show\u0026#34;);\n             ws.onopen = function() {};\n             ws.onmessage = function (evt) {\n                 addToOutput(evt.data);\n             };\n             ws.onclose = function() {};\n         } else {\n             alert(\u0026#34;WebSocket not supported\u0026#34;);\n         }\n     })\n    \u0026lt;/script\u0026gt;\n    \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;\n     .input-group {\n         margin-bottom: 5px;\n     }\n     .input-group-addon {\n         background-color:#337ab7;\n         color:#fff;\n         border-color:#337ab7;\n     }\n     li[aria-selected=\u0026#34;true\u0026#34;] {\n         display:none;\n     }\n     li[role=\u0026#34;presentation\u0026#34;] a{\n         border-bottom-left-radius:0;\n         border-bottom-right-radius:0;\n     }\n     .well {\n         color:#eee;\n         border-top:0;\n         border-top-left-radius:0;\n         border-top-right-radius:0;\n     }\n     #stdout-output,#stderr-output {\n         background-color:#333;\n         height:600px;\n         overflow-y:auto;\n         padding:10px;\n     }\n     .alarm-report {\n         border:2px solid #333;\n         border-bottom:none;\n         animation: flash 1s linear infinite;\n     }\n\n     @keyframes flash{\n         from {\n             border-color: #333;\n         }\n         to {\n             border-color: red;\n         }\n     }\n    \u0026lt;/style\u0026gt;\n  \u0026lt;/head\u0026gt;\n  \u0026lt;body\u0026gt;\n    \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\n      \u0026lt;div class=\u0026#34;col-md-offset-2 col-md-8\u0026#34;\u0026gt;\n        \u0026lt;!-- Nav tabs --\u0026gt;\n        \u0026lt;ul class=\u0026#34;nav nav-pills nav-justified\u0026#34; role=\u0026#34;tablist\u0026#34;\u0026gt;\n          \u0026lt;li role=\u0026#34;presentation\u0026#34; class=\u0026#34;active\u0026#34;\u0026gt;\n            \u0026lt;a href=\u0026#34;#stdout\u0026#34; aria-controls=\u0026#34;stdout\u0026#34; role=\u0026#34;tab\u0026#34; data-toggle=\u0026#34;tab\u0026#34;\u0026gt;标准输出\u0026lt;/a\u0026gt;\n          \u0026lt;/li\u0026gt;\n          \u0026lt;li role=\u0026#34;presentation\u0026#34;\u0026gt;\n            \u0026lt;a href=\u0026#34;#stderr\u0026#34; aria-controls=\u0026#34;stderr\u0026#34; role=\u0026#34;tab\u0026#34; data-toggle=\u0026#34;tab\u0026#34;\u0026gt;错误输出\u0026lt;/a\u0026gt;\n          \u0026lt;/li\u0026gt;\n          \u0026lt;li role=\u0026#34;presentation\u0026#34;\u0026gt;\n            \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; id=\u0026#34;load\u0026#34;\u0026gt;载入历史\u0026lt;/a\u0026gt;\n          \u0026lt;/li\u0026gt;\n          \u0026lt;li role=\u0026#34;presentation\u0026#34;\u0026gt;\n            \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; id=\u0026#34;clear\u0026#34;\u0026gt;清空\u0026lt;/a\u0026gt;\n          \u0026lt;/li\u0026gt;\n        \u0026lt;/ul\u0026gt;\n        \u0026lt;!-- Tab panes --\u0026gt;\n        \u0026lt;div class=\u0026#34;tab-content\u0026#34;\u0026gt;\n          \u0026lt;div role=\u0026#34;tabpanel\u0026#34; class=\u0026#34;tab-pane active\u0026#34; id=\u0026#34;stdout\u0026#34;\u0026gt;\n            \u0026lt;pre contentEditable=\u0026#34;false\u0026#34; class=\u0026#34;well\u0026#34; id=\u0026#34;stdout-output\u0026#34;\u0026gt;\u0026lt;/pre\u0026gt;\n          \u0026lt;/div\u0026gt;\n          \u0026lt;div role=\u0026#34;tabpanel\u0026#34; class=\u0026#34;tab-pane\u0026#34; id=\u0026#34;stderr\u0026#34;\u0026gt;\n            \u0026lt;pre contentEditable=\u0026#34;false\u0026#34; class=\u0026#34;well\u0026#34; id=\u0026#34;stderr-output\u0026#34;\u0026gt;\u0026lt;/pre\u0026gt;\n          \u0026lt;/div\u0026gt;\n        \u0026lt;/div\u0026gt;\n      \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n  \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u0026#39;\u0026#39;\u0026#39;\n\n\ndef create_app():\n    handlers = [(r\u0026#34;/\u0026#34;, AnsibleHandler), (r\u0026#39;/show\u0026#39;, CommandHandler)]\n    app = Application(\n        handlers=handlers, debug=True, cookie_secret=\u0026#39;asdadasdadasdasdasda\u0026#39;)\n    return app\n\n\nclass cd(object):\n    def __init__(self, newPath):\n        self.newPath = os.path.expanduser(newPath)\n\n    def __enter__(self):\n        self.savedPath = os.getcwd()\n        os.chdir(self.newPath)\n\n    def __exit__(self, etype, value, traceback):\n        os.chdir(self.savedPath)\n\n\nclass AnsibleHandler(RequestHandler):\n    def get(self):\n        self.write(template % (self.request.host))\n\n\nclass CommandHandler(WebSocketHandler):\n    def open(self):\n        print(\u0026#34;WebSocket opened\u0026#34;)\n        LISTENERS.append(self)\n\n    def on_message(self, message):\n        message = json.loads(message)\n        # self.write_message(u\u0026#34;You said: \u0026#34; + message[\u0026#39;msg\u0026#39;])\n        if message[\u0026#39;room\u0026#39;] == \u0026#39;load\u0026#39;:\n            out_file = STDOUT_FILENAME if message[\n                \u0026#39;msg\u0026#39;] == \u0026#39;stdout\u0026#39; else STDERR_FILENAME\n            if os.path.getsize(out_file) \u0026gt; 10240000:\n                self.write_message(\u0026#39;file is too large!\u0026#39;)\n            else:\n                with open(out_file, \u0026#39;r\u0026#39;) as f:\n                    f.seek(0, os.SEEK_END)\n                    fsize = f.tell()\n                    f.seek(max(fsize - 1024, 0), 0)\n                    for line in f.readlines()[-800:]:\n                        self.write_message(\u0026#39;{}:{}\u0026#39;.format(message[\u0026#39;msg\u0026#39;],\n                                                          line))\n\n    def on_close(self):\n        print(\u0026#34;WebSocket closed\u0026#34;)\n        try:\n            LISTENERS.remove(self)\n        except:\n            pass\n\n\ndef tail_file():\n    where = stdout_file.tell()\n    line = stdout_file.readline()\n    if not line:\n        stdout_file.seek(where)\n    else:\n        for element in LISTENERS:\n            element.write_message(\u0026#39;stdout:{}\u0026#39;.format(line))\n    where = stderr_file.tell()\n    line = stderr_file.readline()\n    if not line:\n        stderr_file.seek(where)\n    else:\n        for element in LISTENERS:\n            element.write_message(\u0026#39;stderr:{}\u0026#39;.format(line))\n\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    STDOUT_FILENAME = \u0026#39;logs/tail.log\u0026#39;\n    STDERR_FILENAME = \u0026#39;logs/tail_err.log\u0026#39;\n    STDOUT_FILENAME = os.path.abspath(STDOUT_FILENAME)\n    STDERR_FILENAME = os.path.abspath(STDERR_FILENAME)\n    LISTENERS = []\n    stdout_file = open(STDOUT_FILENAME)\n    stderr_file = open(STDERR_FILENAME)\n    stdout_file.seek(os.path.getsize(STDOUT_FILENAME))\n    stderr_file.seek(os.path.getsize(STDERR_FILENAME))\n\n    app = create_app()\n\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.listen(8000, \u0026#39;0.0.0.0\u0026#39;)\n\n    tailed_callback = tornado.ioloop.PeriodicCallback(tail_file, 5)\n    tailed_callback.start()\n\n    io_loop = tornado.ioloop.IOLoop.instance()\n    try:\n        io_loop.start()\n    except SystemExit as KeyboardInterrupt:\n        io_loop.stop()\n        stdout_file.close()\n        stderr_file.close()","index":77,"permalink":"https://honmaple.me/articles/2017/11/使用tornado实时输出日志.html","summary":"\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e tornado\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tornado.web \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Application\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tornado.web \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e RequestHandler\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tornado.websocket \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e WebSocketHandler\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e os\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e json\n\ntemplate \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026lt;!doctype html\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026lt;html lang=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003een\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"使用tornado实时输出日志"},{"content":"参考资料\n准备\nfrom PIL import Image, ImageDraw, ImageFont, ImageFilter\n\n_letter_cases = \u0026#34;abcdefghjkmnpqrstuvwxy\u0026#34; # 去除可能干扰的i，l，o，z\n_upper_cases = _letter_cases.upper() # 大写字母\n_numbers = \u0026#39;\u0026#39;.join(map(str, range(3, 10))) # 数字\ninit_chars = \u0026#39;\u0026#39;.join((_letter_cases, _upper_cases, _numbers))\nfontType=\u0026#34;/usr/share/fonts/TTF/DejaVuSans.ttf\u0026#34;\n\n1.创建图像\ndef create_validate_code(self,size=(120, 30),\n                        chars=init_chars,\n                        img_type=\u0026#34;PNG\u0026#34;,\n                        mode=\u0026#34;RGB\u0026#34;,\n                        bg_color=(255, 255, 255),\n                        fg_color=(0, 0, 255),\n                        font_size=18,\n                        font_type=fontType,\n                        length=4,\n                        draw_lines=True,\n                        n_line=(1, 2),\n                        draw_points=True,\n                        point_chance = 2):\n\n    width, height = size # 图像的宽，高\n    img = Image.new(mode, size, bg_color) # 创建新图像\n    img.save(\u0026#34;validate.png\u0026#34;, \u0026#34;PNG\u0026#34;) # 存储图片\nif __name__ == \u0026#39;__main__\u0026#39;:\n    create_validate_code()\n\n2.绘制干扰线\n在创建新图像后添加\nif draw_lines:\n    self.create_lines(draw,n_line,width,height) # 绘制干扰线\n\n干扰线函数\ndef create_lines(self,draw,n_line,width,height):\n    line_num = random.randint(n_line[0],n_line[1]) # 干扰线条数\n    for i in range(line_num):\n        # 起始点\n        begin = (random.randint(0, width), random.randint(0, height))\n        #结束点\n        end = (random.randint(0, width), random.randint(0, height))\n        draw.line([begin, end], fill=(0, 0, 0))\n\n3.绘制干扰点\n在绘制干扰线后添加\nif draw_points:\n    self.create_points(draw,point_chance,width,height) #绘制干扰点\n\n干扰点函数\ndef create_points(self,draw,point_chance,width,height):\n    chance = min(100, max(0, int(point_chance))) # 大小限制在[0, 100]\n\n    for w in range(width):\n        for h in range(height):\n            tmp = random.randint(0, 100)\n            if tmp \u0026gt; 100 - chance:\n                draw.point((w, h), fill=(0, 0, 0))\n\n4.生成验证码\n在绘制干扰点之后添加\nstrs = self.create_strs(draw,chars,length,font_type,\n                         font_size,width,height,fg_color)\n\n验证码函数\ndef create_strs(self,draw,chars,length,font_type, \n                font_size,width,height,fg_color):\n    c_chars = random.sample(chars, length)\n    strs = \u0026#39; %s \u0026#39; % \u0026#39; \u0026#39;.join(c_chars) # 每个字符前后以空格隔开\n\n    font = ImageFont.truetype(font_type, font_size)\n    font_width, font_height = font.getsize(strs)\n\n    draw.text(((width - font_width) / 3, (height - font_height) / 3),strs,\\\n              font=font, fill=fg_color)\n\nok，简单的验证码就生成好了","index":78,"permalink":"https://honmaple.me/articles/2015/12/使用python的Pillow模块生成验证码.html","summary":"\u003cp\u003e\u003ca href=\"http://codingnow.cn/language/627.html\"\u003e参考资料\u003c/a\u003e\u003cbr\u003e\n准备\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003efrom PIL import Image, ImageDraw, ImageFont, ImageFilter\n\n_letter_cases = \u0026#34;abcdefghjkmnpqrstuvwxy\u0026#34; # 去除可能干扰的i，l，o，z\n_upper_cases = _letter_cases.upper() # 大写字母\n_numbers = \u0026#39;\u0026#39;.join(map(str, range(3, 10...\u003c/pre\u003e","title":"使用python的Pillow模块生成验证码"},{"content":"pelican介绍\n\nPelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强\n\npelican安装\n$ sudo pip install pelican\n\n安装markdown\n$ sudo pip install markdown\n\npelican使用\n\n工具准备好了，接下来就开始使用\n$ cd git\n$ mkdir pelican  #建立一个文件夹(位置和名称随意，自己记得就行)\n$ cd pelican\n$ pelican-quickstart\n\n显示  (也可以直接回车默认)\nWelcome to pelican-quickstart v3.4.0.\n\nThis script will help you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n\n\u0026gt; Where do you want to create your new web site? [.]\n\u0026gt; What will be the title of this web site? HonMaple\n\u0026gt; Who will be the author of this web site? honmaple\n\u0026gt; What will be the default language of this web site? [en] zh\n\u0026gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)\n\u0026gt; What is your URL prefix? (see above example; no trailing slash) http://honmaple.github.io\n\u0026gt; Do you want to enable article pagination? (Y/n)\n\u0026gt; How many articles per page do you want? [10]\n\u0026gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)\n\u0026gt; Do you want an auto-reload \u0026amp; simpleHTTP script to assist with theme and site development? (Y/n)\n\u0026gt; Do you want to upload your website using FTP? (y/N)\n\u0026gt; Do you want to upload your website using SSH? (y/N)\n\u0026gt; Do you want to upload your website using Dropbox? (y/N)\n\u0026gt; Do you want to upload your website using S3? (y/N)\n\u0026gt; Do you want to upload your website using Rackspace Cloud Files? (y/N)\n\u0026gt; Do you want to upload your website using GitHub Pages? (y/N) Y\n\u0026gt; Is this your personal page (username.github.io)? (y/N) Y\nDone. Your new project is available at /home/git/pelican\n\n接下来要设置pelicanconf.py和publishconf.py\n具体可以看官方帮助文档或者参考我的配置\n\n查看目录\npelican/\n├── content\n├── output\n├── develop_server.sh\n├── fabfile.py\n├── Makefile\n├── pelicanconf.py       # Main settings file\n└── publishconf.py       # Settings to use when ready to publish\n\n现在可以开始写第一篇文章了\n$ cd content\n$ mkdir articles pages extra impages\n$ cd articles\n$ vim hello.md\n\n在文件开头输入下列内容\nTitle: 文章标题\nAuthor: 作者 \nDate: 2015-10-15\nCategory: 文章类别\nTags: 标签\nSummary: 概要内容\n\n具体内容\n\n保存退出后输入\n$ cd ../../ #进入pelican文件夹下\n$ make html\n\n可以看实际效果\n$ google-chrome-stable output/index.html\n\n提交内容\n\n编辑好内容并且make html后需要将内容push到github\n$ cd output/\n$ git init\n$ git remote add origin git@github.com:honmaple/honmaple.github.io.git #关联远程仓库\n$ git add .\n$ git commit -m \u0026#34;My first blog by pelican\u0026#34;\n\n过几分钟后就可以看到内容了","index":79,"permalink":"https://honmaple.me/articles/2015/12/使用pelican搭建个人博客.html","summary":"\n\u003ch2\u003epelican介绍\u003c/h2\u003e\n\n\u003cp\u003ePelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强\u003c/p\u003e\n\n\u003ch2\u003epelican安装\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pip install pelican\n\u003c/pre\u003e\n\u003cp\u003e安装markdown\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pip install markdown\n\u003c/pre\u003e\n\u003ch2\u003epelican使用\u003c/h2\u003e\n\n\u003cp\u003e工具准备好了，接下来就开始使用\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ cd git\n$ mkdir pelican  #建立一个文件夹(位置和名称随意，自己记得就行)\n$ cd pelican\n$ pelican-quickstart\n\u003c/pre\u003e\n\u003cp\u003e显示...\u003c/p\u003e","title":"使用pelican搭建个人博客"},{"content":"Table of Contents\n前言\n配置\n快捷键\n\n\n\n\n更新于2019.04\n\n\n\n\n blog-mode 更新为 maple-note\n\n\n\n 新建 Git 仓库 emacs-maple-note\n\n\n\n\n\n\nemacs-maple-note blog-mode, 一个基于tabulated-list的emacs笔记管理插件\n\n\n\n前言\n\n   很早之前我一直在使用blog-admin作为博客笔记的管理工具, 虽然没有用社区维护的 CodeFalling/blog-admin, 而是用我自己修改的honmaple/blog-admin, 毕竟我使用的pelican, 是一个很小众的静态博客生成工具, 为了适应pelican, 也为了适应自己平时的使用, 所以自己修改了一个版本\n\n\n\n   但最近一是闲来没事，二是blog-admin使用的是ctable，中英文对齐上有些问题(虽然早就解决了), 三是觉得blog-admin有很多我不需要的代码, 而且看到那一长串的配置。。。\n\n(setq blog-admin-backend-type \u0026#39;pelican\n      blog-admin-backend-new-post-in-drafts t ;; create new post in drafts by default\n      blog-admin-backend-new-post-with-same-name-dir nil ;; create same-name directory with new post\n      blog-admin-backend-path \u0026#34;~/git/pelican\u0026#34;\n      blog-admin-backend-pelican-config-file \u0026#34;pelicanconf.py\u0026#34;\n      blog-admin-backend-pelican-posts-dir \u0026#34;content/org\u0026#34;\n      blog-admin-backend-pelican-org-mode-dir \u0026#34;content/org\u0026#34;\n      blog-admin-backend-pelican-markdown-dir \u0026#34;content/markdown\u0026#34;\n      blog-admin-backend-pelican-drafts-dir \u0026#34;content/draft\u0026#34;)\n(add-hook \u0026#39;blog-admin-backend-after-new-post-hook \u0026#39;find-file)\n\n(maple/add-hook \u0026#39;blog-admin-mode-hook\n  :if (display-graphic-p)\n  ;; (set-face-attribute \u0026#39;variable-pitch nil :font \u0026#34;-Sony-Sony Fixed-normal-normal-normal-*-16-*-*-*-c-80-iso10646-1\u0026#34;)\n  (set-face-attribute \u0026#39;variable-pitch nil :font \u0026#34;Inconsolata 12\u0026#34;)\n  (buffer-face-mode))\n\n\n   查找资料后锁定了tabulated-list, 毕竟默认的emacs包管理器使用的就是tabulated-list, 最终参考package.el.gz, 自己写了一个 maple-note blog-mode\n\n\n\n   \n\n  \n\n\n\n配置\n(use-package maple-note\n  :ensure nil\n  :commands maple-note\n  :config\n  (setq maple-note-root-path \u0026#34;~/git/pelican\u0026#34;\n        maple-note-draft-path \u0026#34;content/draft\u0026#34;)\n\n  (setq maple-note-alist\n        \u0026#39;((\u0026#34;markdown\u0026#34;\n           :path \u0026#34;content/markdown\u0026#34;\n           :read maple-note--read-md\n           :template \u0026#34;Title: %s\n                      Author: honmaple\n                      Date: %s\n                      Modified: %s\n                      Category:\n                      Tags:\n                      Slug: %s\n                      Summary: \u0026#34;)\n          (\u0026#34;org-mode\u0026#34;\n           :path \u0026#34;content/org\u0026#34;\n           :read maple-note--read-org\n           :template \u0026#34;#+TITLE: %s\n                      #+AUTHOR: honmaple\n                      #+DATE: %s\n                      #+CATEGORY:\n                      #+PROPERTY: MODIFIED %s\n                      #+PROPERTY: TAGS\n                      #+PROPERTY: SLUG %s\n                      #+PROPERTY: SUMMARY \u0026#34;))))\n\n;; 弃用\n(use-package blog-mode\n  :load-path \u0026#34;site-lisp/blog-mode\u0026#34;\n  :commands blog-start\n  :config\n  (setq blog-root-path \u0026#34;~/git/pelican\u0026#34;   ;; 文章根目录\n        blog-org-path \u0026#34;content/org\u0026#34;      ;; org文件保存目录\n        blog-md-path \u0026#34;content/markdown\u0026#34;  ;; markdown文件保存目录\n        blog-draft-path \u0026#34;content/draft\u0026#34;));; 草稿文件保存目录\n\n快捷键\n\n\n\n w 新建文章\n     新建文章以.org或.md结尾, 默认会保存在maple-note-draft-path blog-draft-path目录下\n\n\n\n r 刷新列表\n\n\n\n s 发布与未发布切换\n     这个其实是目录的切换, 未发布的放到maple-note-draft-path blog-draft-path目录下, 已发布的org文件放到blog-org-path目录, markdown文件放到blog-md-path目录 ,已发布的org文件放到 maple-note-alist 中预定义的 path 路径里, markdown文件同理\n\n\n\n D 删除当前文章\n\n\n\n f 筛选文章\n     筛选title和category\n\n\n\n RET (鼠标左键)\n\n\n\n\n 点击title: 打开文件\n\n\n\n 点击publish: 发布与未发布切换\n\n\n\n 点击category: 筛选当前分类","index":80,"permalink":"https://honmaple.me/articles/2018/10/使用maple-note管理笔记.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n更新于\u003ccode\u003e2019.04\u003c/code\u003e\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003cb\u003eblog-mode\u003c/b\u003e 更新为 \u003cb\u003emaple-note\u003c/b\u003e\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 新建 \u003cb\u003eGit\u003c/b\u003e 仓库 \u003ca href=\"https://github.com/honmaple/emacs-maple-note\"\u003eemacs-maple-note\u003c/a\u003e\n\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n\u003ca href=\"https://github.com/honmaple/emacs-maple-note\"\u003eemacs-maple-note\u003c/a\u003e \u003cdel\u003e\u003ca href=\"https://github.com/honmaple/dotfiles/tree/master/emacs.d/site-lisp/blog-mode\"\u003eblog-mode\u003c/a\u003e\u003c/del\u003e, 一个基于\u003ccode\u003etabulated-list\u003c/code\u003e的emacs笔记管理插件\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e\n   很早之前我一直在使用\u003ccode\u003eblog-admin\u003c/code\u003e作为博客笔记的管理工具, 虽然没有用社区维护的 \u003ca href=\"https://github.com/CodeFalling/blog-admin\"\u003eCodeFalling/blog-admin\u003c/a\u003e, 而是用我自己修改的\u003ca href=\"https://github.com/honmaple/dotfiles/tree/master/emacs.d/site-lisp/blog-admin\"\u003ehonmaple/blog-admin...\u003c/a\u003e\u003c/p\u003e","title":"使用maple-note管理笔记"},{"content":"虽然算不上是实时预览\n实时预览功能等有时间在把它加上\n\n\n还是把实时预览加上，不过实时预览可能会对网站有所影响，读者看着加上\n\n前端\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;\nfunction previewTopicContent(){\n    $.getJSON(\u0026#34;{{ url_for(\u0026#39;blog.preview\u0026#39;) }}\u0026#34;, {\n        content: $(\u0026#34;#content\u0026#34;).val(),\n    }, function(data) {\n        $(\u0026#34;#showPreview\u0026#34;).html(data.result);\n    });\n   /*setTimeout(\u0026#39;previewTopicContent()\u0026#39;,300);*/\n};\n\u0026lt;/script\u0026gt;\n\n或者\nfunction previewTopicContent(){\n    $.get(\u0026#34;{{ url_for(\u0026#39;blog.preview\u0026#39;) }}\u0026#34;, {\n        content: $(\u0026#34;#content\u0026#34;).val(),\n    }, function(data) {\n        $(\u0026#34;#showPreview\u0026#34;).html(data);\n    });\n};\n\n服务端\n@site.route(\u0026#39;/pages/preview\u0026#39;)\ndef preview():\n    from misaka import Markdown, HtmlRenderer\n    from flask import jsonify\n    content = request.args.get(\u0026#39;content\u0026#39;)\n    html = HtmlRenderer()\n    markdown = Markdown(html)\n    return jsonify(result=Markup(markdown(content)))\n\n或者\ndef preview():\n    from misaka import Markdown, HtmlRenderer\n    content = request.args.get(\u0026#39;content\u0026#39;)\n    html = HtmlRenderer()\n    markdown = Markdown(html)\n    return Markup(markdown(content))","index":81,"permalink":"https://honmaple.me/articles/2016/02/使用jquery实现markdown预览.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e虽然算不上是实时预览\u003cbr\u003e\n实时预览功能等有时间在把它加上\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e还是把实时预览加上，不过实时预览可能会对网站有所影响，读者看着加上\u003c/p\u003e\n\n\u003ch4\u003e前端\u003c/h4\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;\nfunction previewTopicContent(){\n    $.getJSON(\u0026#34;{{ url_for(\u0026#39;blog.preview\u0026#39;) }}\u0026#34;, {\n        content: $(\u0026#34;#content\u0026#34;).val(),\n    }, function(data) {\n        $(\u0026#34;...\u003c/pre\u003e","title":"使用jquery实现markdown预览"},{"content":"GitHub地址: https://github.com/honmaple/maple-file\n\n\nTable of Contents\n\n\n1. maple-file\n\n1.1. 设计初衷\n1.2. 使用\n\n1.2.1. API\n1.2.2. 配置\n1.2.3. 创建账户\n1.2.4. 上传\n1.2.5. example\n\n\n\n\n\n\n\n\n\n\nmaple-file\n\n\n使用flask实现的一个简单的图片上传服务\n\n\n\n\n设计初衷\n\n对于图片的存储,有很多选择,一般采用云服务如(七牛,又拍等),但是国内的服务像七牛\n自定义域名竟然需要域名备案(Excuse me,当初就是因为备案麻烦才选择国外的),而且浪费了我十块钱,\n\n而我又想像七牛一样可以直接在本地就可以上传图片,找来找去，没有找到一个比较合适的，所以花两天时间自己写了一个\n\n\n\n使用\n\n由于初衷是本地脚本就可以发布,所以没有前端界面,等以后有时间了再加上\n\n\n\nAPI\n\n\n/api/login\n\n\nPOST\n登录\n\n\n/api/logout\n\n\nGET\n注销\n\n\n/api/albums\n\n\nGET\n获取相册列表\nPOST\n新建相册\n\n\nname 相册名称\ndescription 相册描述\n\n\n\n/api/albums/int:pk\n\npk 相册ID\n\n\nGET\n获取相册信息\nPUT\n修改相册信息\n\n\nname 相册名称\ndescription 相册描述\n\nDELETE\n删除相册\n\n\n/api/images\n\n\nGET\n获取图片列表\nPOST\n上传图片\n\n\nimages 上传图片列表\nalbum 相册ID(默认会新建一个default相册)\n\n\n\n/api/images/int:pk\n\n\nGET\n获取图片信息\nPUT\n修改图片信息\n\n\nname 图片名称\ndescription 图片描述\n\nDELETE\n删除图片\n\n\n\n\n\n配置\nclass Config(object):\n    DEBUG = True # 生产环境设置为False\n    SECRET_KEY = \u0026#39;ccc\u0026#39; # import os;os.urandom(24)\n    SECRET_KEY_SALT = \u0026#39;ssss\u0026#39;\n    JSON_AS_ASCII = False\n\n    PERMANENT_SESSION_LIFETIME = timedelta(days=3)\n\n    PER_PAGE = 10 # 分页\n    ADMIN_URL = \u0026#39;/admin/aaaaa\u0026#39; # 后台地址\n\n    LOGIN_TOKEN_HEADER = \u0026#39;Api-Key\u0026#39; # 将会影响到后面headers设置\n    LOGIN_TOKEN = \u0026#39;api_key\u0026#39; #url?api_key=21312313\n\n    MIDDLEWARE = [\u0026#39;storage.common.middleware.CommonMiddleware\u0026#39;]\n\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SQLALCHEMY_DATABASE_URI = \u0026#39;sqlite:///test.db\u0026#39;\n    # SQLALCHEMY_ECHO = DEBUG\n    UPLOAD_ALLOWED_EXTENSIONS = set([\u0026#39;png\u0026#39;, \u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;]) # 允许上传的扩展名\n    UPLOAD_FOLDER_ROOT = os.path.dirname(os.path.abspath(__file__))\n    UPLOAD_FOLDER_PATH = \u0026#39;images\u0026#39; # 相对于当前文件路径的地址\n    UPLOAD_FOLDER = os.path.join(UPLOAD_FOLDER_ROOT, UPLOAD_FOLDER_PATH)\n\n\n\n创建账户\npython manager.py create_user\n\n将同时创建一个default的相册\npython manager.py key\n\n显示用户key\n\n\n\n上传\n\n上传后图片保存路径\n\n\n原图路径:\n\nUPLOAD_FOLDER + \u0026#39;username\u0026#39; + \u0026#39;photo\u0026#39; + %Y + %m + (时间戳+随机数).png\n\n缩略图路径:\n\nUPLOAD_FOLDER + \u0026#39;username\u0026#39; + \u0026#39;thumb\u0026#39; + %Y + %m + (时间戳+随机数).png\n\n\n\n\nexample\n\n使用requests本地上传\nimport requests\n\ndef images():\n    url = \u0026#39;http://127.0.0.1:8000/api/images\u0026#39;\n    files = {\u0026#39;images\u0026#39;: open(\u0026#39;desktop.png\u0026#39;, \u0026#39;rb\u0026#39;)}\n    multiple_files = [\n        (\u0026#39;images\u0026#39;, (\u0026#39;11.png\u0026#39;, open(\u0026#39;11.png\u0026#39;, \u0026#39;rb\u0026#39;), \u0026#39;image/png\u0026#39;)),\n        (\u0026#39;images\u0026#39;, (\u0026#39;desktop.png\u0026#39;, open(\u0026#39;desktop.png\u0026#39;, \u0026#39;rb\u0026#39;), \u0026#39;image/png\u0026#39;))\n    ]\n    headers = {\n        \u0026#39;Api-Key\u0026#39;:\n        \u0026#39;InhpeWFuZzA4MDdJBtx4AWlPpI_Oxx1Ki8\u0026#39;,\n        \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36\u0026#39;\n    }\n    # r = requests.post(url, files=multiple_files, headers=headers)\n    r = requests.post(url, files=files, headers=headers)\n    print(r.text)","index":82,"permalink":"https://honmaple.me/articles/2017/03/使用flask实现一个简单的图片上传存储服务.html","summary":"\u003cp\u003eGitHub地址: \u003ca href=\"https://github.com/honmaple/maple-file\"\u003ehttps://github.com/honmaple/maple-file\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv id=\"table-of-contents\"\u003e\n\u003ch2\u003eTable of Contents\u003c/h2\u003e\n\u003cdiv id=\"text-table-of-contents\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#org269e3c4\"\u003e1. maple-file\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#org7c6cb1e\"\u003e1.1. 设计初衷\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#org97baa2a\"\u003e1.2. 使用\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#orgc428f36\"\u003e1.2.1. API\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#org921606b\"\u003e1.2.2. 配置\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#org1f88b3a\"\u003e1.2.3. 创建账户\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#org87063f2\"\u003e1.2.4. 上传\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#org06d4c86\"\u003e1...\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e","title":"使用flask实现一个简单的图片上传存储服务"},{"content":"fabric也使用好久了，这次静下心来好好整理一遍，当然这只是很简单的用法\n参考文档\n\n安装\n\n凡事先从安装说起,fabric不支持python3,所以只能安装python2版本的fabric\n由于我使用了virtualenv，所以先退出虚拟环境\n$ deactivate\n\n安装全局fabric\n$ sudo pip2 install fabric\n\n使用\n\n使用之前先想想以前是怎么部署的，是不是这样:\n先ssh到服务器,进行数据备份,然后退出(或者重新开一个终端),然后上传文件到服务器,\n再ssh到服务器,安装所需要的模块,然后退出，ssh到root账户，重启，再退出···\n是不是想想都烦\n没关系，有了fabric后就不必这么麻烦了,需求:\n\n备份数据\n# fabfile.py\nfrom fabric.api import run, env, cd, local, put, get\n\ndef backup():\n    env.user = \u0026#39;root\u0026#39;\n    dirname = \u0026#39;backup_\u0026#39; + datetime.now().strftime(\u0026#39;%Y%m%d\u0026#39;)\n    with cd(\u0026#39;/root/backup/\u0026#39;):\n        run(\u0026#39;./backup-db.sh\u0026#39;)\n        run(\u0026#39;tar zcvf %s.tar.gz %s/\u0026#39; % (dirname, dirname))\n    print \u0026#39;正在下载备份······\u0026#39;\n    get(\u0026#39;/root/backup/%s.tar.gz\u0026#39; % dirname, \u0026#39;backup/\u0026#39;)\n\n使用fab backup就可以一步备份\n\n代码打包上传\ndef pack():\n    \u0026#39;\u0026#39;\u0026#39;这是我需要打包的文件\u0026#39;\u0026#39;\u0026#39;\n    local(\u0026#39;pip freeze \u0026gt; requirements.txt\u0026#39;)\n    local(\u0026#39;tar zcvf hohai.tar.gz manager.py requirements.txt app/ migrations/\\\n          --exclude=\u0026#34;*.pyc\u0026#34; \\\n          --exclude=\u0026#34;*.swp\u0026#34; \\\n          --exclude=\u0026#34;**/__pycache__\u0026#34; \\\n          --exclude=\u0026#34;**/.webassets-cache\u0026#34;\u0026#39;)\n\ndef putcode():\n    env.user = \u0026#39;账户名称\u0026#39;\n    print \u0026#39;正在上传代码······\u0026#39;\n    put(\u0026#39;hohai.tar.gz\u0026#39;, \u0026#39;~/hhuc/\u0026#39;)\n    local(\u0026#39;rm hohai.tar.gz\u0026#39;)\n    print \u0026#39;正在备份数据······\u0026#39;\n    run(\u0026#39;cp -r ~/hhuc/app/ ~/backup/hhuc/\u0026#39;)\n    with cd(\u0026#39;~/hhuc/\u0026#39;):\n        run(\u0026#39;rm -rf app/\u0026#39;)\n        run(\u0026#39;tar zxvf hohai.tar.gz\u0026#39;)\n        run(\u0026#39;rm hohai.tar.gz\u0026#39;)\n\n使用fab pack putcode一步打包上传\n\n重启服务器\ndef restart():\n    \u0026#34;\u0026#34;\u0026#34;重启服务器\u0026#34;\u0026#34;\u0026#34;\n    env.user = \u0026#39;root\u0026#39;\n    run(\u0026#39;supervisorctl restart hhuc\u0026#39;)\n\n一键部署\ndef deploy():\n    env.user = \u0026#39;honmaple\u0026#39;\n    print \u0026#39;正在上传代码······\u0026#39;\n    put(\u0026#39;hohai.tar.gz\u0026#39;, \u0026#39;~/hhuc/\u0026#39;)\n    local(\u0026#39;rm hohai.tar.gz\u0026#39;)\n    print \u0026#39;正在备份数据······\u0026#39;\n    run(\u0026#39;cp -r ~/hhuc/app/ ~/backup/hhuc/\u0026#39;)\n    with cd(\u0026#39;~/hhuc/\u0026#39;):\n        run(\u0026#39;rm -rf app/\u0026#39;)\n        run(\u0026#39;tar zxvf hohai.tar.gz\u0026#39;)\n        run(\u0026#39;rm hohai.tar.gz\u0026#39;)\n    restart()\n    print \u0026#39;部署成功······\u0026#39;\n\n使用fab pack deploy就可部署\nok,就这样","index":83,"permalink":"https://honmaple.me/articles/2016/03/使用fabric进行自动化部署.html","summary":"\u003cp\u003efabric也使用好久了，这次静下心来好好整理一遍，当然这只是很简单的用法\u003cbr\u003e\n\u003ca href=\"http://docs.fabfile.org/en/1.10/\"\u003e参考文档\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e安装\u003c/h3\u003e\n\n\u003cp\u003e凡事先从安装说起,fabric不支持python3,所以只能安装python2版本的fabric\u003cbr\u003e\n由于我使用了virtualenv，所以先退出虚拟环境\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ deactivate\n\u003c/pre\u003e\n\u003cp\u003e安装全局fabric\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pip2 install fabric\n\u003c/pre\u003e\n\u003ch3\u003e使用\u003c/h3\u003e\n\n\u003cp\u003e使用之前先想想以前是怎么部署的，是不是这样:\u003cbr\u003e\n先ssh到服务器,进行数据备份,然后退出(或者重新开一个终端),然后上传文件到服务器,\n再ssh到服务器,安装所需要的模块,然后退出，ssh到root账户，重启，再退出···\u003cbr\u003e\n\u003cstrong\u003e是不是想想都烦\u003c/strong\u003e\u003cbr\u003e\n没关系，有了fabric后就不必这么麻烦了,需求...\u003c/p\u003e","title":"使用fabric进行自动化部署"},{"content":"Table of Contents\n部署教程\n\n安装并配置acme.sh\n固定域名(webroot)\n\n申请证书\n配置SSL证书\n配置NGINX\n重启NGINX\n\n泛域名(DNS)\n\n令牌获取\n账户ID获取\n编辑配置\n申请证书\n安装证书\n\n搭配NginxProxyManager\n更新证书(手动)\n\n参考资料\n\n\n部署教程\n安装并配置acme.sh\n\n\n\n 安装\n       这里使用 Docker 安装，方便环境隔离。/opt/acme.sh 为挂载目录\n\ndocker run -d --name acme.sh \\\n-e AUTO_UPGRADE=0 \\\n-e TZ=Asia/Shanghai \\\n-v /opt/acme.sh:/acme.sh \\\nneilpang/acme.sh daemon\n\n\n 配置\n       acme.sh 默认使用的是 ZeroSSL，我这里修改为 Let\u0026#39;s Encrypt\n\ndocker exec acme.sh --set-default-ca --server letsencrypt\ndocker exec acme.sh --set-default-chain --preferred-chain \u0026#34;ISRG\u0026#34; --server letsencrypt\n\n       注：--preferred-chain \u0026#34;ISRG\u0026#34; 表示设置根证书为 ISRG Root X1, 它与 DST Root CA X3 的区别主要是\n\n\n\n\n ISRG Root X1 会更新一些，DST Root CA X3 已于2021年9月30日到期\n\n\n\n 一些旧的设备（例如，iPhone 4 或 HTC Dream）不会信任 ISRG Root X1，因为它们没有获得软件更新\n\n\n\n 虽说 DST Root CA X3 已到期，但Android设备仍能够继续正常访问使用 Let’s Encrypt 证书加密的网站，其它旧设备将会得到证书过期警告\n\n\n\n\n 注册账号(记得修改为自己的邮箱)\n\ndocker exec acme.sh --register-account --server letsencrypt -m i@example.com\n[Sun Sep 24 15:49:59 CST 2023] Create account key ok.\n[Sun Sep 24 15:49:59 CST 2023] Registering account: https://acme-v02.api.letsencrypt.org/directory\n[Sun Sep 24 15:50:05 CST 2023] Registered\n[Sun Sep 24 15:50:05 CST 2023] ACCOUNT_THUMBPRINT=\u0026#39;xxx\u0026#39;\n\n       这时会在 /acme.sh 目录下生成一个 http.header 文件，申请证书时会使用该文件\n\n\n\n固定域名(webroot)\n\n    如果只有少数几个固定的域名，这时可以使用 webroot 方式申请SSL证书。webroot 方式会在本地生成一个验证文件，申请证书时通过验证该文件验证域名所有权\n\n\n申请证书\ndocker exec acme.sh --issue -d example.com -d www.example.com,nas.example.com -w /acme.sh/example.com\n\n     执行后会在挂载目录 /opt/acme.sh 下生成SSL证书相关的 cert 文件和 key 文件\n\n$ ls example.com\nca.cer  fullchain.cer  example.com.cer  example.com.conf  example.com.csr  example.com.csr.conf  example.com.key\n配置SSL证书\nssl_certificate /opt/acme.sh/example.com/fullchain.cer;\nssl_certificate_key /opt/acme.sh/example.com/example.com.key;\nssl_dhparam /opt/acme.sh/example.com/dhparam.pem;\n\nssl_session_cache shared:SSL:1m;\nssl_session_timeout 5m;\n\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\nssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;\nssl_prefer_server_ciphers on;\n\n\n     如何生成 dhparam 的证书?\n\nopenssl dhparam -out /opt/acme.sh/example.com/dhparam.pem 2048\n配置NGINX\n\n     Let\u0026#39;s Encrypt 只会在 80 端口验证域名所有权，所以只需要在 80 端口添加一个 location\n\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  www.example.com nas.example.com;\n\n    location / {\n        return 301 https://example.com$request_uri;\n    }\n    location ^~ /.well-known/acme-challenge {\n        alias /opt/acme.sh/example.com/.well-known/acme-challenge;\n    }\n}\n\nserver {\n    listen       443 ssl;\n    listen       [::]:443 ssl;\n    server_name  nas.example.com;\n    include      /etc/nginx/conf.d/ssl/example.com.conf;\n\n    ......\n}\n重启NGINX\nnginx -t\nnginx -s reload\n泛域名(DNS)\n\n    webroot 无法申请泛域名证书，泛域名证书的申请需要利用DNS服务提供商的API，动态添加一个TEXT记录，这里以 Cloudflare 为例\n\n令牌获取\n\n     右上角点击我的个人资料, 然后点击创建令牌\n     \n\n  \n\n\n\n\n     然后选择DNS模版\n     \n\n  \n\n\n\n\n\n\n 令牌名称可以随意\n\n\n\n 权限设置为 区域 -\u0026gt; DNS -\u0026gt; 编辑\n\n\n\n 区域资源设置为 包括 -\u0026gt; 特定区域 -\u0026gt; 域名(example.com)\n\n\n\n     \n\n  \n\n\n\n\n     继续以显示摘要, 然后创建令牌\n     \n\n  \n\n\n\n\n     最后记得保存令牌到本地\n     \n\n  \n\n\n\n账户ID获取\n\n     选择对应的域名，在概况的右下角会有账户ID显示\n     \n\n  \n\n\n\n编辑配置\n\n     编辑 /opt/acme.sh 目录下的 account.conf\n\n+ CF_Token=\u0026#39;xxx\u0026#39;\n+ CF_Account_ID=\u0026#39;xxx\u0026#39;\n\n\n申请证书\ndocker exec acme.sh --issue --dns dns_cf -d \u0026#34;nas.example.com\u0026#34; -d \u0026#34;*.nas.example.com\u0026#34;\n\n安装证书\n\n     如果想要修改默认安装的目录，则可以使用 --install-cert 命令\n\ndocker exec acme.sh --install-cert -d nas.example.com \\\n--key-file /nginx/data/custom_ssl/npm-1/privkey.pem \\\n--fullchain-file /nginx/data/custom_ssl/npm-1/fullchain.pem\n\n\n     如果想要更新证书后同步重启NGINX，可以继续添加命令参数\n\n--reloadcmd \u0026#34;nginx -s reload\u0026#34;\n\n搭配NginxProxyManager\n\n    首先打开 NginxProxyManager, 选择 SSL Cetificates\n    \n\n  \n\n\n\n\n    然后选择 Add SSL Cetificates -\u0026gt; Custom\n    \n\n  \n\n\n\n\n    最后添加相关文件:\n\n\n\n\n Certificate: nas.example.com.cer\n\n\n\n Certificate Key: nas.example.com.key\n\n\n\n Intermediate Certificate: ca.cer\n\n\n\n    \n\n  \n\n\n\n\n    为了避免证书过期后重新添加，需要把NginxProxyManager挂载目录也挂载到 acme.sh 容器\n\ndocker stop acme.sh\ndocker rm acme.sh\ndocker run -d --name acme.sh \\\n-e AUTO_UPGRADE=0 \\\n-e TZ=Asia/Shanghai \\\n-v /opt/acme.sh:/acme.sh \\\n-v /opt/nginx:/nginx \\\nneilpang/acme.sh daemon\n\n\n    然后修改申请证书的命令\n\ndocker exec acme.sh --issue --dns dns_cf -d \u0026#34;nas.example.com\u0026#34; -d \u0026#34;*.nas.example.com\u0026#34; \\\n--renew-hook \u0026#34;acme.sh --install-cert -d nas.example.com \\\n--key-file /nginx/data/custom_ssl/npm-1/privkey.pem \\\n--fullchain-file /nginx/data/custom_ssl/npm-1/fullchain.pem\u0026#34;\n\n\n    如果提示 Domains not changed, 则需要使用 --force 重新申请\n\n\n更新证书(手动)\n\n    从 Let\u0026#39;s Encrypt 申请到的证书有效期是90天，acme.sh 每60天会对证书进行更新，你也可以手动强制更新：\n\n# 查询证书申请信息\nacme.sh --list\n\n# 手动强制更新证书\nacme.sh --renew -d nas.example.com -d *.nas.example.com --force\n\n参考资料\n\n\n\n github.com/acmesh-official/acme.sh/wiki/Preferred-Chain\n\n\n\n letsencrypt.org/zh-cn/docs/dst-root-ca-x3-expiration-september-2021/\n\n\n\n shiping.date/82.html","index":84,"permalink":"https://honmaple.me/articles/2023/09/shi-yong-acme-shshen-qing-sslzheng-shu.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e部署教程\u003c/h2\u003e\n\u003ch3 id=\"heading-1.1\"\u003e安装并配置acme.sh\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n 安装\u003cbr/\u003e\n       这里使用 \u003cb\u003eDocker\u003c/b\u003e 安装，方便环境隔离。\u003ccode\u003e/opt/acme.sh\u003c/code\u003e 为挂载目录\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edocker run -d --name acme.sh \\\n-e AUTO_UPGRADE=0 \\\n-e TZ=Asia/Shanghai \\\n-v /opt/acme.sh:/acme.sh \\\nneilpang/acme.sh daemon\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 配置\u003cbr/\u003e\n       \u003cb\u003eacme...\u003c/b\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e","title":"使用acme.sh申请SSL证书"},{"content":"Table of Contents\n前言\n快速开始(Quickstart)\n多平台编译(Cross Compile)\n\n交叉编译\n跨平台编译\n\n发布(Release)\nFAQ\n\nversion `GLIBC_2.33\u0026#39; not found\n\n\n\n前言\n\n   如果用过 Gitlab Ci, 相信对此也非常熟悉，GitHub Actions 是 GitHub 推出的持续集成（Continuous Integration，简称 CI）服务，它提供了整套虚拟服务器环境，基于它可以进行构建、测试、打包、部署项目等等操作\n\n\n快速开始(Quickstart)\n\n   在自己的 Github 仓库中找到 Actions 标签页\n   \n\n  \n\n\n\n\n   点击 Configure, 此时会生成一个 .github/workflow/go.yml 文件\n\n# This workflow will build a golang project\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go\n\nname: Go\n\non:\n  push:\n    branches: [ \u0026#34;master\u0026#34; ]\n  pull_request:\n    branches: [ \u0026#34;master\u0026#34; ]\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        - name: Set up Go\n          uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Build\n        run: go build -v ./...\n      - name: Test\n        run: go test -v ./...\n\n多平台编译(Cross Compile)\n交叉编译\n\n    对于非 CGO 项目，Go 提供了一种十分方便的方式来进行交叉编译，只需要指定 GOOS 和 GOARCH 环境变量\n\n\n\n\n  Mac下编译Linux, Windows平台的64位可执行程序：\n\n$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build .\n$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build .\n\n\n Linux下编译Mac, Windows平台的64位可执行程序：\n\n$ CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build .\n$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build .\n\n\n\n    同样的，我们可以在 Gtihub Actions 中设置环境变量来编译非 CGO 项目，这里需要使用 matrix 策略，让我们基于不同的参数创建并行的任务，比如编译Go时指定不同的环境变量\n\n\n\n\n\n 首先编写任务\n\njobs:\n  build:\n    strategy:\n      matrix:\n        goos: [linux, darwin]\n        goarch: [amd64]\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Download dependencies\n        run: go mod download\n      - name: Build\n        run: go build -v -o snow .\n        # 指定编译时的环境变量\n        env:\n          GOOS: ${{ matrix.goos }}\n          GOARCH: ${{ matrix.goarch }}\n          CGO_ENABLED: 0\n\n      这样就创建了 GOOS=linux GOARCH=amd64 和 GOOS=darwin GOARCH=amd64 的两个任务, 当 goarch 增加一个 arm 的参数后，会组合成四个任务, 如果需要指定或者排除某个选项，可以使用 include 或者 exclude\n\nmatrix:\n  goos: [linux, darwin]\n  goarch: [amd64, arm]\n  # 只包括linux编译选项\n  include:\n    - goos: linux\n      goarch: amd64\n    - goos: linux\n      goarch: arm\n  # 排除所有关于arm的编译选项\n  exclude:\n    - goarch: arm\n\n\n 然后执行 git push, 这样就能在 Github 的 Actions 标签页看到执行结果\n\n\n\n跨平台编译\n\n    如果是非 CGO 项目，可以使用Go内置的交叉编译，但如果是 CGO 项目，上述的交叉编译大概率会失败(相关问题:go-libsass)， 所以我们需要基于不同的平台来进行编译，幸运的是，Github Actions 对此支持的非常好,\n\n\n\n\n\n 编写新任务\n\njobs:\n  build:\n    strategy:\n      matrix:\n        build: [macos, linux]\n        include:\n          - build: macos\n            os: macos-latest\n          - build: linux\n            os: ubuntu-18.04\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Download dependencies\n        run: go mod download\n      - name: Build\n        run: go build -v -o snow .\n        env:\n          CGO_ENABLED: 1\n\n      注意 runs-on 使用的 matrix.os 变量, 它允许我们分别使用 ubuntu-18.04 和 macos-latest 两个平台进行编译，这时不用指定 GOOS 和 GOARCH 参数\n\n\n\n 执行 git push, 可以看到执行结果\n      \n\n  \n\n\n\n\n发布(Release)\n\n   当编译好一个二进制文件后，需要发布到 Github 的 Release 页，这时就需要添加新的任务, 目前官方的actions/create-release已经无人维护，所以此次选择另外一个ncipollo/release-action\n\n\nname: Release\n\non:\n  # 只在预发布时才执行\n  release:\n    types: [prereleased]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        build: [macos, linux]\n        include:\n          - build: macos\n            os: macos-latest\n            archive-name: darwin.tar.gz\n          - build: linux\n            os: ubuntu-latest\n            archive-name: linux.tar.gz\n\n    # 需要设置写权限才能自动发布\n    permissions:\n      contents: write\n\n    steps:\n      ...\n      # 把二进制文件打包成压缩文件\n      - name: Prepare Packaging\n        run: tar zcvf snow-${{ matrix.archive-name }}.tar.gz snow LICENSE\n\n      # 上传附件\n      - name: Upload Artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: snow-${{ matrix.archive-name }}.tar.gz\n          path: snow-${{ matrix.archive-name }}.tar.gz\n\n      # 发布release版本\n      - name: Release version\n        uses: ncipollo/release-action@v1\n        if: github.event_name == \u0026#39;release\u0026#39;\n        with:\n          allowUpdates: true\n          artifacts: snow-${{ matrix.archive-name }}.tar.gz\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n\n   当 Github Actions 执行完成后，就能在 Release 页看到我们发布的 Package\n   \n\n  \n\n\n\nFAQ\nversion `GLIBC_2.33\u0026#39; not found\n\n    使用 Github Actions 发布一个新的版本，下载到本地执行时报错\n\n./snow: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.33\u0026#39; not found (required by ./snow)\n./snow: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34\u0026#39; not found (required by ./snow)\n./snow: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32\u0026#39; not found (required by ./snow)\n./snow: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.29\u0026#39; not found (required by ./snow)\n\n    这是由于使用的 ubuntu 版本太高导致, 降低版本即可\n\ninclude:\n...\n-   os: ubuntu-latest\n+   os: ubuntu-18.04","index":85,"permalink":"https://honmaple.me/articles/2023/03/使用Github Actions自动打包Go项目.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e\n   如果用过 \u003cb\u003eGitlab Ci\u003c/b\u003e, 相信对此也非常熟悉，\u003cb\u003eGitHub Actions\u003c/b\u003e 是 \u003cb\u003eGitHub\u003c/b\u003e 推出的持续集成（Continuous Integration，简称 CI）服务，它提供了整套虚拟服务器环境，基于它可以进行构建、测试、打包、部署项目等等操作\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-2\"\u003e快速开始(Quickstart)\u003c/h2\u003e\n\u003cp\u003e\n   在自己的 \u003ccode\u003eGithub\u003c/code\u003e 仓库中找到 \u003ccode\u003eActions\u003c/code\u003e 标签页\n   \n\u003ca href=\"https://s.libforest.com/images/2023/03/github-actions-01.png-show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://s.libforest.com/images/2023/03/github-actions-01.png-thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   点击 \u003ccode\u003eConfigure\u003c/code\u003e, 此时会生成一个 \u003ccode\u003e.github/workflow/go.yml\u003c/code\u003e 文件\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#75715e\"\u003e# This...\u003c/span\u003e\u003c/pre\u003e","title":"使用Github Actions自动打包Go项目"},{"content":"之前一直在使用bootcdn.cn提供的CDN服务，没出过什么大问题，即使国庆第一天凌晨挂过，对它依旧信任。 \n\n\n\n但事与愿违，无意中打开查看源码，才发现竟然有那么多的css，js文件\n\n\n\u0026lt;link href=\u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt;\n\u0026lt;link href=\u0026#34;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt;\n\u0026lt;link href=\u0026#34;https://cdn.bootcss.com/fancybox/3.1.25/jquery.fancybox.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt;\n\n\u0026lt;script src=\u0026#34;https://cdn.bootcss.com/lazysizes/4.0.1/lazysizes.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script src=\u0026#34;https://cdn.bootcss.com/jquery/2.1.4/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script src=\u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script src=\u0026#34;https://cdn.bootcss.com/particles.js/2.0.0/particles.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script src=\u0026#34;https://cdn.bootcss.com/fancybox/3.1.25/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\n\n作为强迫症有些受不了，想要把这些合并成一个css文件或js文件\n\n\n\n首先找到熟悉的python的webassets，但发现只能使用本地文件，又不想一个文件一个文件的下载下来，所以写了一段简单的代码，把下载文件并压缩文件合到一起\n\n\n\n\n\n 下载文件\n\ndef write_to_file(name, url):\n    resp = requests.get(url)\n    path = os.path.join(\u0026#34;/tmp\u0026#34;, name)\n    with open(path, \u0026#34;w\u0026#34;) as f:\n        f.write(resp.text)\n    return name\n\n\n\n 压缩css\n\nfrom webassets import Bundle\nfrom webassets import Environment\n\ndef asset_css(files):\n    env = Environment(directory=\u0026#39;/tmp\u0026#39;, url=\u0026#39;/media\u0026#39;)\n    css = Bundle(*files, filters=\u0026#39;cssmin\u0026#39;, output=\u0026#39;/tmp/mine.css\u0026#39;)\n    env.register(\u0026#39;css_all\u0026#39;, css)\n    print(env[\u0026#39;css_all\u0026#39;].urls())\n\n\n\n 压缩js\n\ndef asset_js(files):\n    env = Environment(directory=\u0026#39;/tmp\u0026#39;, url=\u0026#39;/media\u0026#39;)\n    css = Bundle(*files, filters=\u0026#39;jsmin\u0026#39;, output=\u0026#39;/tmp/mine.js\u0026#39;)\n    env.register(\u0026#39;js_all\u0026#39;, css)\n    print(env[\u0026#39;js_all\u0026#39;].urls())\n\n\n\n 调用\n\ncss_files = {\n    \u0026#34;bootstrap.min.css\u0026#34;: \u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\u0026#34;,\n    \u0026#34;font-awesome.min.css\u0026#34;: \u0026#34;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;,\n    \u0026#34;jquery.fancybox.min.css\u0026#34;: \u0026#34;https://cdn.bootcss.com/fancybox/3.1.25/jquery.fancybox.min.css\u0026#34;\n}\n\njs_files = {\n    \u0026#34;lazysizes.min.js\u0026#34;: \u0026#34;https://cdn.bootcss.com/lazysizes/4.0.1/lazysizes.min.js\u0026#34;,\n    \u0026#34;jquery.min.js\u0026#34;: \u0026#34;https://cdn.bootcss.com/jquery/2.1.4/jquery.min.js\u0026#34;,\n    \u0026#34;bootstrap.min.js\u0026#34;: \u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\u0026#34;,\n    \u0026#34;particles.min.js\u0026#34;: \u0026#34;https://cdn.bootcss.com/particles.js/2.0.0/particles.min.js\u0026#34;,\n    \u0026#34;jquery.fancybox.min.js\u0026#34;: \u0026#34;https://cdn.bootcss.com/fancybox/3.1.25/jquery.fancybox.min.js\u0026#34;\n}\n\ndef main():\n    files = []\n    for name, url in css_files.items():\n        files.append(write_to_file(name, url))\n    asset_css(files)\n\n    files = []\n    for name, url in js_files.items():\n        files.append(write_to_file(name, url))\n    asset_js(files)\n\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    main()\n\n\n\n然后把压缩的mine.css和mine.js上传到云存储，测试后发现一切正常， 唯有font-awesome缺少字体， 下载字体后手动上传到css文件的相对目录../fonts即可\n\n\n\n为避免忘记，特此记录","index":86,"permalink":"https://honmaple.me/articles/2018/10/从远程url下载并压缩js,css.html","summary":"\n\u003cp\u003e\n之前一直在使用\u003cb\u003ebootcdn.cn\u003c/b\u003e提供的\u003cb\u003eCDN\u003c/b\u003e服务，没出过什么大问题，即使国庆第一天凌晨挂过，对它依旧信任。 \n\u003c/p\u003e\n\n\u003cp\u003e\n但事与愿违，无意中打开查看源码，才发现竟然有那么多的css，js文件\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003elink\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erel\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;stylesheet\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"从远程url下载并压缩js,css"},{"content":"Table of Contents\n配件选购\n\nCPU和主板\n显卡\n显示器\n机箱和散热\n\n装机\n\n硬件组装\nBIOS设置\n系统安装\n一次点亮\n\n\n\n\n\n前两天双11，终于是给自己配了人生中的第一台台式电脑，从毕业后就一直想要一台属于自己的机器(游戏机)，犹记得人生中的第一台电脑还是上大学时买的，虽然只是3000多，720m的显卡，但它陪伴了我6年多时间，曾经使用它学习编程，娱乐，算是我的导师和娱乐伙伴，后来毕业后才购买了一台macbook pro，一直陪伴我至今。\n\n\n\n配件选购\n\n\n\n配件\n型号\n价格\n\n\n\nCPU\n12600KF\n1535.65\n\n\n主板\n微星B660M迫击炮WIFI\n/\n\n\n显卡\n七彩虹3070 ULTRA W\n4490.7(+主板)\n\n\n电源\n海韵GX750\n627.7\n\n\n机箱\n乔思伯D30 白色\n317.8\n\n\n散热\n利民PA120 白色\n185\n\n\nSSD\n宏碁GM7000 1T\n605.7\n\n\n内存\n光威天策3600 8G*2\n268\n\n\n风扇\n乔思伯ZF120三联\n112\n\n\n键盘\n京东京造K3\n340.98\n\n\n音响\n漫步者S880\n788.24\n\n\n显示器\nAOC 273QXP/D\n1768.1\n\n\nU盘\n闪迪酷豆32G\n26.9\n\n\n\n\n  总计：11066.77, 因为是第一次配电脑，所以全部都是在京东购买，也许PDD会更便宜，但电子产品还是更信任京东\n\n\n\n  \n\n  \n\n\n\nCPU和主板\n\n\n\n CPU:  主要在12400，12400F，12490F和12600KF中选，由于想要性能更强一些，价格也要适中的，124xx性能稍弱，13600KF刚发布价格还有些贵，所以选了12600KF，至于为什么要选择带F(不带核显)的CPU，因为我第一台笔记本就是带双显卡，windows下还好，基本不用折腾，但是如果安装Linux，双显卡却非常麻烦，至今还记得大黄蜂(bumblebee)和当初想要在Linux下玩游戏而折腾的岁月\n\n\n\n     \n\n  \n\n\n\n\n 主板: 主板基本上就是在微星迫击炮和华硕重炮手中选，主要是想要带WIFI的主板，这样就不用再单独购买WIFI模块，后面看了评测，说是重炮手的显卡插槽会更靠下一些，由于我购买的是MATX机箱，所以选了迫击炮，至于为什么选了带K的CPU却又选了不能超频的主板，只能说如果有12600F我是相当愿意的\n\n\n\n     \n\n  \n\n\n\n\n显卡\n\n   由于众所周知的原因，最近几年的显卡市场只能说是一言难尽，除3050之外的30系显卡都是矿卡重灾区，京东上显卡的价格也是一直居高不下，618前，我基本上只敢看一下3060和3060TI，还好后面停止挖矿，显卡价格稍微所有下降，才选择七彩虹这款3070 ULTRA W，虽然这款显卡只能算是低端，但它是白色(漂亮)的啊，其它白色的显卡像铭瑄3070TI瑷珈在双11前后就一直没货，花嫁听说叫声有点大，我怕玩游戏时别人误会。。。而有一款黑色的红魔6750虽然早早加入购物车，但31号晚上只关注了其他硬件，导致错过了24xx的好价，真是心痛到无法呼(fu)吸\n\n\n\n   \n\n  \n\n\n\n显示器\n\n   显示器主要关注27寸高刷，所以备选LG 850，LG 83B，AOC 273QXP/D，虽然对AOC更换面板事件有所耳闻，而LG的面板调教会更好，但LG的显示器外观确实不符合我的审美，而且LG不支持左右旋转，外置一个大大的电源，83B不支持USB接口，最终在相似价格下还是选了AOC\n\n\n\n   \n\n  \n\n\n\n机箱和散热\n\n   说实话，其它硬件我觉得都好选，但机箱的选择属于选择困难证的灾难，各种尺寸，各种形状，各种颜色，最重要的还要散热要好，在各种机箱重挑花了眼，刚开始京东上第一眼就挑中爱国者M2，感觉确实好看，但后来看评测说M2是一个闷罐又不得不重新选择，最后备选的机箱挺多，像SKTC S200，乔思伯D30，先马的MINI系列等，S200看了评测感觉还挺好的，但这货在双11前几天偷偷涨了20快，怒删之，先马的MINI系列网上评测比较少，D30评测比较多，而且确实好看，不过由于我这边想要上风冷散热，所以一开始对D30还挺犹豫的，虽然最后还是为它的颜值买单，至于华硕冰立方这种全身洞洞的机箱，我只能说散热挺好，但真心丑\n\n\n\n   \n\n  \n\n\n\n装机\n\n  装机过程就没怎么拍照了，只因为第一次装机就装了3天，虽然也有配件没有同时到齐的原因，但更多的是装的时候真的好小心翼翼，尤其是主板元器件显露在外面，生怕不小心就弄坏了，剩下的就是装机的一些记录和感受:\n\n硬件组装\n\n\n\n 机箱: 由于是小机箱，大双塔最好在主板放进机箱后再装，否则很影响接线和理线；底部没有装风扇，也庆幸没装，否则显卡没法斜着放进去\n     \n\n  \n\n\n\n\n 理线: 装机半小时，理线一整天不是吹的\n     \n\n  \n\n\n\n\n SSD: 购买SSD记得看清是否自带散热片，我买的这款自带散热，与主板带的冲突，只能手动撕下\n\n\n\n 散热: 只装了顶部和背部三个出风风扇，CPU FPU单烤15分钟稳定在77℃，显卡甜甜圈20分钟稳定67℃(感觉还行？)\n\n\n\n 其它: D30开关机键有灯，windows睡眠模式下还会闪烁，放在卧室会影响睡眠，为啥网上测评D30的那么多，就没有一个提到这一点\n\n\n\n\n   \n\n  \n\n\n\nBIOS设置\n\n\n\n 内存: 默认2400频率，进入BIOS设置XMP就能稳定使用3600，不过颗粒是nanya的，不知道更高频率会如何\n\n\n\n 风扇: 转速也是进入BIOS设置，散热风扇转速我没改，机箱风扇默认40℃以下50%，感觉有些吵，改成30%，日常使用几乎听不到声音\n\n\n\n\n   \n\n  \n\n\n\n系统安装\n\n\n\n 系统: 安装时一定要备有线键盘和有线鼠标，一定要备有线键盘和有线鼠标，一定要备有线键盘和有线鼠标，跳过联网可以使用 shift+F10，输入 OOBE\\BYPASSNRO，无鼠标跳过联网无法输入命令记得使用win+tab切换窗口\n\n\n\n 驱动: 提前下好蓝牙和WIIFI驱动，装好系统后连接U盘安装，连接WIFI后显卡驱动会自动下载安装，安装好蓝牙驱动后终于可以使用蓝牙鼠标(没装好前设置里不会显示蓝牙开关)\n\n\n\n 分区: 因为是新系统安装，安装时先分了100G+116M的空间，后续本地磁盘会显示99.9G，强迫症可以到磁盘管理扩展卷，每100G记得加7M，本地磁盘要显示为整数，则扩展为102407M，200G则是204814M\n\n\n\n一次点亮","index":87,"permalink":"https://honmaple.me/articles/2022/11/人生中的第一台组装电脑.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n前两天双11，终于是给自己配了人生中的第一台台式电脑，从毕业后就一直想要一台属于自己的机器(游戏机)，犹记得人生中的第一台电脑还是上大学时买的，虽然只是3000多，720m的显卡，但它陪伴了我6年多时间，曾经使用它学习编程，娱乐，算是我的导师和娱乐伙伴，后来毕业后才购买了一台macbook pro，一直陪伴我至今。\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003e配件选购\u003c/h1\u003e\n\n\u003ctable\u003e\n\u003ctr\u003e\n\u003cth\u003e配件\u003c/th\u003e\n\u003cth\u003e型号\u003c/th\u003e\n\u003cth\u003e价格\u003c/th\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eCPU\u003c/td\u003e\n\u003ctd\u003e12600KF\u003c/td\u003e\n\u003ctd\u003e1535.65\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e主板\u003c/td\u003e\n\u003ctd\u003e微星B660M迫击炮WIFI\u003c/td\u003e\n\u003ctd\u003e/\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e显卡\u003c/td\u003e\n\u003ctd\u003e七彩虹3070 ULTRA W\u003c/td\u003e\n\u003ctd\u003e4490.7(+主板)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e电源\u003c/td\u003e\n\u003ctd\u003e海韵GX750\u003c/td\u003e\n\u003ctd\u003e627.7\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e机箱...\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e","title":"人生中的第一台组装电脑"},{"content":"Table of Contents\n上卷\n\n总纲\n内功心法\n横空挪移\n鬼狱阴风\n\n下卷\n\n九阴白骨爪/九阴神爪\n螺旋九影\n\n\n\n上卷\n总纲\n\n   天之道，损有余而补不足，是故虚胜实，不足胜有余。其意博，其理奥，其趣深，天地之象分，阴阳之候列，变化之由表，死生之兆彰，不谋而遗迹自同，勿约而幽明斯契，稽其言有微，验之事不忒，诚可谓至道之宗，奉生之始矣。假若天机迅发，妙识玄通，成谋虽属乎生知，标格亦资于治训，未尝有行不由送，出不由产者亦。然刻意研精，探微索隐，或识契真要，则目牛无全，故动则有成，犹鬼神幽赞，而命世奇杰，时时间出焉。\n   五藏六府之精气，皆上注于目而为之精。精之案为眼，骨之精为瞳子，筋之精为黑眼，血之精力络，其案气之精为白眼，肌肉之精为约束，裹撷筋骨血气之精而与脉并为系，上属于脑，后出于项中。故邪中于项，因逢其身之虚，其人深，则随眼系以入于脑，入手腼则脑转，脑转则引目系急，目系急则目眩以转矣。邪其精，其精所中不相比亦则精散，精散则视岐，视岐见两物。\n   阴极在六，何以言九。太极生两仪，天地初刨判。六阴已极，逢七归元太素，太素西方金德，阴之清纯，寒之渊源。\n\n\n内功心法\n\n\n\n 第一重诀曰：子午卯酉四正时，归气丹田掌前推。面北背南朝天盘，意随两掌行当中。意注丹田一阳动，左右回收对两穴。拜佛合什当胸作，真气旋转贯其中。气行任督小周天，温养丹田一柱香。快慢合乎三十六，九阴神功第一重。每日子、午、卯、酉四正时，找一阴气重的地方，最好为四高中低。面北而坐，五心朝天，静心绝虑，意守丹田，到一阳初动之时，双手在胸前合什，指尖朝前。引丹田之气沿督脉上行，任脉下归丹田。如此待小周天三十六圈。由慢至快。气归丹田后，双掌前推，掌心向前，掌指朝天，气行两掌。双掌指下垂，掌指朝下，掌心朝下，迅速收回，左手掌心对准气海穴，右手掌心对准命门穴，真气随手式成螺旋状贯入气海、命门两穴。汇于丹田内。如此意守下丹田一柱香的时间。待此功练有一定功力，能收发自如，有抗寒之功时可修第二重。\n\n\n\n 第二重诀曰：极寒午时正，独坐寒冰床。**面朝北，气行小周天。五心朝天式，打开丹田门。寒气螺旋入，收发当自如。合和汇丹田，落雪雪不化。缩如一寒珠，雪落无化雪。扩为雾环身，九阴第二重。每日午时，找一极寒之地，面北背南，五心朝天，坐于寒冰床上（一种玉、一年四季都如寒冰一样）。今人练习可在冰或雪上练习，静心绝虑，启动周天三十六圈，意守丹田片刻，打开气海、命门两穴，分别成螺旋状入寒气，吸一柱香的时间后，关闭以上两穴，丹田内有一寒球再不停的旋转，越转越大，至到隔体三丈远，收回。如此反复八十一次，练到雪花落体而不化，放气时雪花距体三尺不落为功成。\n\n\n\n 第三重诀曰：法如第二重，阴阳互相克。意在修罡气，热火不侵法。阳中求真阴，九阴第三重。每日子时，找一极热之地，坐于火鼎之上（今人练习坐在铁板上，下面加火，应慢慢加热，以不能忍耐为度）。面北背南，五心朝天，静心绝虑，起动丹田寒气防止热气侵入，其方法就是第二重所练寒气用以抗热量。此乃“真阳中求真阴”。\n\n\n\n 第四重诀曰：法如第三重，阴合阴为生。同为修罡气，静流极之法。以阴练真阴，九阴第四重。不拘时间，找一静止不动的水池，五心朝天，坐于湖底，静心绝虑，水位不过脖子，运行丹田真气用以抗水之压力，其方法与第三重相同，待体入水，而衣不湿为成。然后找有流动河水中练，急流下练，而衣不湿为成。到此《九阴神功》成。如用掌把真气放出击人，就是催心掌。\n\n\n\n 第五重采气诀曰：采气不在气，口闭双目开。玄机在于目，神气乾鼎聚。此法为增进内力之法，用以目吸聚宇宙内的精气，主要是修炼双眼，使双眼在对敌时能求察分明，并有摄取敌人神魂之效。每日太阳将出之际，站于高处，双眼平视太阳，带双眼发热时，意念太阳之气由双目吸入汇于上丹田，吸汇到一定程度自天目穴射出，在由双眼收回，如此反复。\n\n\n\n横空挪移\n\n   螺旋九影，左右挪移，其聊不为，以气行之，可幻化九影诱敌。如加九阴白骨爪其威力可增十倍。如何横空挪移可据个况自定，今公之二法以参考。 诀曰：左转一，左转半。右转一，右转半。左右转一为不一，横空旋较为太一。诀曰：左旋右旋天地旋，左踏右空平地旋。合手阴阳为上旋，右踏左空旋不为。虽为身法，实含玄理。须参照“九阴行功诀曰”进行，以防走火。习此功主要为子、午两时，其它时间亦可。必须选一处绝对安静，空气必须流畅。此功中的呼吸均为鼻吸鼻呼。习此功贵在持之以恒。功中会出现各种幻境，千万不可惧怕，顺其自然。练功中出现自然腾空，应顺其自然，千万不可妄加意念。\n\n\n鬼狱阴风\n\n   此功属音波功，以音伤人，以音索魂，亦可以音布罡气，其威力无比，其音如地狱鬼吼，阴风阵阵，使人不攻自退，不寒而栗。\n\n\n\n\n\n 第一重：面北而坐，取五心朝天式，上身正直，虚灵顶劲，舌抵上腭，下颌微收，双目平视。双手于下丹田处成托式，即掌心向上，掌指相对，意守丹田一柱香，引真气自督脉、任脉行到中丹田，并在此汇聚成乒乓球大小的真气球，其色赤。口中默念，意念中丹田之真气化为波圈，若水纹之状。碰肤弹回，须反复重阳之数。\n\n\n\n 第二重：意大波圈，自内向外旋为散，自外向内旋为聚，散聚合适为阴阳平衡，阴阳平衡，万物之本。渐如虚空，与宇共振，法同上。\n\n\n\n 第三重：自然站立，双脚与肩同宽，双手自然放于两腿外侧，百会上顶，舌放平，双目平视，调整呼吸，意守丹田一柱香的时间，然后点头，吸气、收腹，口发鬼怪连音，同时意引丹田真气随声音向外扩散；抬头、呼气、口闭，意收回，真气归中丹田，如此反复。一点一抬，一上一下，上下起到，喉轮自开，开通喉轮魔音自现。\n\n\n\n 第四重：无相音罡，即音罡无形。其秒音无穷，可防敌护体，亦可以音控他人或给他人治病。其练法很简单，只需把“九阴神功”的“先天真气”与“鬼狱阴风吼”之音合二为一就可，具体练习方法可参照以上两法自悟，此不详述。\n\n\n\n下卷\n\n九阴白骨爪/九阴神爪\n\n   爪力无比，鬼气回荡，不攻自惧。其爪可使头骨成孔而不碎，爪心有强大的吸力可隔空取物或吸取他人功力，爪指有强大的透劲可隔空伤人。一收一放，一开一合，合乎武学大道之理。\n\n\n\n\n\n 第一重金丝手诀曰：面北背南朝天坐，气行任督贯大椎。意聚丹田一柱香，分支左右聚掌心。打开气海命门穴，气满冲贯十指爪。旋入阴气一坤炉，放收来回金丝手。凡习九阴白骨爪需先习九阴神功百日，于极阴之地，谷地为佳。面北背南，五心朝天坐于低处。双手放于膝上，手心朝下，意守丹田。开气海、命门，旋转吸入阴气汇于丹田。气顺任、督两脉上行汇于大椎穴，于右肩井穴入掌心，气满鼓支，掌起平胸。五指下垂，气贯入指，十指内扣、回拉，手丝为一。回气丹田，温养柱香。\n\n\n\n 第二重摄魂诀曰：打开丹田前后门，三昧磷火化无形。吸进鬼狱阴鬼精，阴功在此更为进。此法是一种极秘之法，可开通人的死生之谜，吸取鬼魂之气，同时亦可用此法吸他人功力元神。找一坟场，在半夜无人之时，面北背南，五心朝天，左掌心向上，大拇指扣小指其它三指伸直。左手立于胸前，掌心朝左，大拇指、中、无名、小指内扣，食指伸直，口念咒“探地达摩，无相无上，摄阴摄魂，无畏无惧，阴阳合和，人鬼交战，吗咪呗咪‘口奄’”三十六遍，一遍过于一遍，到最后一遍，只需“吗咪呗咪‘口奄’”。然后双手抬到头上方，合掌， 尖朝天，打开气海、命门两穴，从两穴内射出阴气，成螺旋型由小到大，如龙卷风一样把野魂卷入两穴汇于丹田，练习一柱香的时间后，开始炼熔。双掌放于膝上，掌心朝上，意守丹田中的无数阴魂被丹田阴气形成环状，封闭在内不能出来。意念丹田封魂球开始旋转，同时意念坟场突然起了无数磷火，用同样方法把磷火吸入丹田封魂球外圈，燃烧炼熔阴魂，由慢到快不停旋转，火由小到大，直到化尽为止。收功，温养丹田一柱香。如果用来吸取他人功力或元神其方法于上面同理。\n\n\n\n 第三重白骨练爪诀曰：白骨头上悬，幻化为二骨。悬九穴，左右手中擒。合和为阴珠，吸阴吸精鬼。齐汇坤炉内，回返丹炉内。面北背南，五心朝天，坐 坟场中，意守丹田片刻，意守自身前后有九座坟，突然裂开飞出九个头骨，这时意念打开气海、命门两穴，射出旋转真气由小到大，把九个头骨给悬起来，位于本人头顶上方左右，缓慢旋转。从每一个头骨的两眼射出一条红气线，分别射入百会、玉枕、膻中，左右肩井穴，灵台、气海、命门九大穴道中，并且在每个穴道中渐渐汇聚成一个球，然后这九个红球同时从任督两脉汇于丹田，意守丹田使之气化合。然后运气两掌贯足真气，由于反向力，双掌抬起平胸，在贯入十指，十指突然变爪，这时意念那九个头骨互相幻化，变为两个头骨于胸前方。掌心外突把两个头骨吸入掌中，随后十指内扣抓住头骨，放出真气把头骨抓成十个小孔，然后吸回真气，同时吸取头骨内的真气归于丹田。收功，温养丹田一柱香。至头骨隔空袭来抓成孔而骨不碎，九阴白骨爪成矣。练之此境界需配合外功练习即第四重。\n\n\n\n 第四重外功诀曰：气至丹田贯十指，倒行古树狸猫功。抓石打铁练指力，内外合修白骨功。平常把内气贯于十指用以隔空取物，在以十指抓，练硬物，所用之物应由轻到重，由近到远。在者可以倒立于树旁，双脚依树，然后用十指抓树缓缓上行，以练指力。此重应与第三重同练。\n\n\n\n 第五重练到第四重此功已成，此第五重为加深功夫，其阴毒程度更甚。用古时棺材、蝙蝠血、砒霜三种物体加水加热后，用以漫手，再练内外功，这样手上有剧毒，以此手伤人无救。\n\n\n\n螺旋九影\n\n   《螺旋九影》为武林上乘轻功，集身法、步法、罡气于一体。可平地拔起数丈，亦可平空飞行万里，身体周围有一层自然罡气，可攻击外敌。练之上乘可幻化出九个身影，于佛门无上神功“莲台九现”有相同的功效。\n\n\n\n\n\n  第一重：室外练功，不准迎风，松去身体裹缠之物，活动一下全身关节，用意念放松全身筋、骨、肉、皮等。然后面北取五心朝天或盘坐，上身正直，虚灵顶劲，舌抵上腭，下微收，双目平视，双手掌心朝上，掌指相对，捧放于丹田处，意守丹田一柱香，接着双手轻轻向上捧，沿任脉路线至膻中穴处，双手变为捧莲花状即双手心相对，掌根相抵，掌指朝上，双手十指自然张开，接着上捧至头顶，同时缓慢吸气，意念随上捧之势，将大地之阴气由会阴穴成螺旋状吸入，经中脉上升以头顶百会穴成螺旋状射出；然后双手变掌心向下，并向下压到丹田处，同时呼气，意念随双手下压之势，将天上之云气螺旋状吸入百会穴，经中脉由会阴穴成螺旋状射出，如此反复。\n\n\n\n  第二重：第一式：面北而坐，功接上重，五心朝天，上身正直，虚灵顶劲，舌抵上腭，下颌微收，双目平视。双手轻轻提起，掌心朝下，掌指相对放于中脘穴处，双手中指间距离约为一掌宽，双肩下沉，双肘下坠，双臂要“圆鼓”。意念会阴穴射出螺旋状阴气把身体旋入地下，至到地极处。突然螺旋阴气收回，身体如弹簧一样被弹回地面。第二式：要领同。轻抬双手，掌心朝上，掌指相对，高举至头上方，双臂微曲，似曲非曲，似直非直，意念百会穴射出螺旋状阴气，如飞机之螺旋桨，把人身托起，飞到九重天方为极限。此时人体在天空飘浮，突然阴气收回，人从天空掉回地面。\n\n\n\n  第三重：在第二重第一式的基础上打开气海穴，命门穴射出螺旋状真气，环绕身体自左到右，意念身体随螺旋真气之力上升，或平空飞行。同时在练功中加入有外敌入侵，不能入或击伤之意，可同时练习环身罡气。\n\n\n\n  第四重：此为加深功夫，即在水中练习以上各功，要领同上。","index":88,"permalink":"https://honmaple.me/articles/2011/11/九阴真经.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e上卷\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e总纲\u003c/h2\u003e\n\u003cp\u003e\n   天之道，损有余而补不足，是故虚胜实，不足胜有余。其意博，其理奥，其趣深，天地之象分，阴阳之候列，变化之由表，死生之兆彰，不谋而遗迹自同，勿约而幽明斯契，稽其言有微，验之事不忒，诚可谓至道之宗，奉生之始矣。假若天机迅发，妙识玄通，成谋虽属乎生知，标格亦资于治训，未尝有行不由送，出不由产者亦。然刻意研精，探微索隐，或识契真要，则目牛无全，故动则有成，犹鬼神幽赞，而命世奇杰，时时间出焉。\n   五藏六府之精气，皆上注于目而为之精。精之案为眼...\u003c/p\u003e","title":"九阴真经"},{"content":"HTTPS和HTTP的区别\n\n超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。\n为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\nHTTPS和HTTP的区别主要为以下四点:\n\n\nhttps协议需要到ca申请证书，一般免费证书很少，需要交费。\nhttp是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。\nhttp和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\nhttp的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\n\n\n申请ssl证书\n\n对于像我这样的穷学生或者不希望花钱的同学可以使用startssl免费ssl证书\n当然如果可以，最好购买ssl证书,安全性上更有保障\n\n对于怎么申请startssl免费证书这里不多说，网上很多教程，其中有几点是我在申请中遇到的问题，希望对大家有所帮助\n* 在进行域名验证时不论如何startssl搜索不到我的域名注册邮箱,我已将whois保护关闭后还是一样\n解决办法：一个不是办法的办法，因为我在qq邮箱使用了域名邮箱,所以我将域名邮箱管理员admin@honmaple.com\n更改为postmaster@honmaple.com,然后发送验证邮件到该邮箱对域名进行验证\n\n\n如何导出公钥\n如果申请成功，在Tool Box点击Certificate List,Action中选择Retrieve导出zip包到本地,\n在本地解压就会发现里面有对应服务器类型的crt证书\n\n如何导出私钥\n在申请过程中保存了一个.key文件，这个文件就可以作为私钥(请妥善保管)\n\n\n\n如果在申请中对私钥设置了密码,每次重启ngnix都要输入密码,如果不想每次输入密码,\n在startssl的Tool Box的Decrypt Private Key中填入保存的私钥以及私钥密码,对私钥进行解密,\n将解密后的字符串保存为.key文件\n\n\n关于nginx配置\n\n在/etc/nginx/conf.d/ssl.conf中添加\nserver {\n     listen       443 ssl;\n     server_name  honmaple.com;\n     #请更改成你的文件地址\n     ssl_certificate /root/ssl/1_honmaple.com.pem;\n     ssl_certificate_key /root/ssl/1_honmaple.com.key;\n\n     ssl_session_cache shared:SSL:1m;\n     ssl_session_timeout 5m;\n     #下面这些请根据实际更改,我的是flask+nginx\n     location / {\n                        # Pass the request to Gunicorn\n                proxy_pass http://127.0.0.1:8000;\n                proxy_redirect     off;\n\n                # Set some HTTP headers so that our app knows where the\n                # request really came from\n                proxy_set_header Host $host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n}\n\n注意:\n我不知道是我的原因还是其他,启动ngnix时总报错\nSSL_CTX_use_PrivateKey_file(\u0026#34;/root/ssl/1_honmaple.com.key\u0026#34;) \nfailed (SSL: error:0D07207B:asn1 encoding routines:ASN1_get_object:\nheader too long error:0D068066:asn1 encoding routines:ASN1_CHECK_TLEN:bad object \nheader error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:\nType=PKCS8_PRIV_KEY_INFO error:2306A065:PKCS12 routines:PKCS12_item_decrypt_d2i:\ndecode error error:0907B00D:PEM routines:PEM_READ_BIO_PRIVATEKEY:ASN1 lib error:\n140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib)\n\n所以我将.crt文件改成.pem,后面我发现还是报错，我将公钥里的\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n\n之间的空行去除\n\u0026gt;如果还是报错，请将.key文件解密\n\n其他配置\n\n如果要全站启用https,并将http定向到https,可以这样\nserver {\n    listen 80 ;\n    server_name honmaple.com;\n    rewrite ^/(.*) https://honmaple.com/$1 permanent;\n}\n\n记得更改成自己的域名\n\nok,就这样","index":89,"permalink":"https://honmaple.me/articles/2015/12/为网站启用https并增加ssl证书.html","summary":"\n\u003ch3\u003eHTTPS和HTTP的区别\u003c/h3\u003e\n\n\u003cp\u003e超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。\n为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\nHTTPS和HTTP的区别主要为以下四点:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ehttps协议需要到ca申请证书，一般免费证书很少，需要交费。\u003c/li\u003e\n\u003cli\u003ehttp是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。\u003c/li\u003e\n\u003cli\u003ehttp和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\u003c/li\u003e\n\u003cli\u003ehttp的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e申请ssl证书\u003c/h3\u003e\n\n\u003cp\u003e对于像我这样的穷学生或者不希望花钱的同学可以使用\u003ca href=\"https://www.startssl.com/\"\u003estartssl免费ssl证书...\u003c/a\u003e\u003c/p\u003e","title":"为网站启用https并增加ssl证书"},{"content":"这是一篇加密的文章，密码是蟒蛇英文\n  \n\n\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;","index":90,"permalink":"https://honmaple.me/articles/2018/03/为pelican添加文章加密功能.html","summary":"\u003cdiv class=\"encrypt-container entry-encrypt\"\u003e\n  \u003cdiv class=\"encrypt-form entry-form\"\u003e\n    \u003cinput type=\"password\" class=\"encrypt-password\" placeholder=\"请输入密码\" /\u003e\n    \u003ci class=\"fa fa-key encrypt-button\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\u003cdiv class=\"encrypt-desc\"\u003e这是一篇加密的文章，密码是蟒蛇英文\u003c/div\u003e\n  \u003cdiv class=\"encrypt-content\" style=\"display:none;\"\u003eMsLQDQwSepsQm6LphTgw7qnKSTKyclGVLX6NhGwidzN95hh4NSluq2gIXevgdHnYuutgLrh+0rlaj4NzKk9xkCQ4IBndo1ZBSji4KWTKiHS+3YcLqjHqjzR+LbeMHnHDbkRYmYUxyuQVxWSPpCLlko/cjV2pSgvZ2DrgnYjqHP17iEo8NMy3Qr8isXxFNZAkhCEbkgrglYW1H5ArLjuOXRJD8yOwQVp0RbyZB7z9rpsYBr1aMS4t1BPJJbdIKytLdT9wgjU8dombx7fAPwkMICRNw6WBNHt4JPsAFC9QxxmIIMZ8sAeRybtVuTpD+pFGLpwu4EdLs2vCokUVHJu4OhHr1NryjYp3K5uhve4ePtLVFyWDOZ2Zqb9uIHSbHSR3YAL5D5MBTGdDngLqybkfrI47wE0OBdBHum8E1cBxmaVrcWxOHmx1l7d7Cq8sf9sYZKeXVX7xYwHLKagTpYAvqpqv5c+DgRjMpCnUaJbo2JqIdpezakSfwDpbJHBFAM+IrmdbUVwPAm5z1ZsnqnvD+32kOIGRg0jfT74xaPJ1ZzHJjPfsxuXR1+MnH/Sya1Ol7umoFa2fNbSltMglrpCMzk+B8LOcQNXiobzjt09C1v1qUpyBHtquzSvuMuQkX2EJBkEOEpZMhXhzBDKWOx23FdUCwHEM7Fwmua8Eiee5IiDgbI851d9QvUbkS2qF2dHgtMuxLwUg5i1IQWeTMXNeETG3ZK06+Ywm2vxtAXep7kDyF9zQm5nTNmWAn5awJHcUUacyikmodWOoukqCvWcNa/G7H1mXbB28FVNZ4QnFwUSw++dWZPPmDYEOx7KOs4hlaHaGmFhgiA8+Es4webJy9ZgCHacBUS9/bmRJt8oEfC7o6q8qR9L4Cn5sLRZgw7hgRxae1iuEOzRZl+dZcJFqDc670+h0FLIfO0UExxB85z6nUEZKkhoIDYbpYmnby2PZmmCLSZ3N15wZiOMBS7vnbiu15jhcGFlc54IV3mTsrQr9v+HDT8HUkAq3p4phKQkE7VII3bRYKKhDT8LDYZHgq9xXsdDFy5ITNWZFO7X3dP/ROzzPH4BPpgGwewgsiE17KcKDtD3iS6fOBuT07NKorFjftvL68bCwp+mZclOM8syo6zfpRVgZPjJ0d0Mkc3UVZleOCwRb2RXnMoM9Z1enzqFAmBQVIcuVnwcSy/3DrmSjEKmBvHDVSJrrZZkplYiRqOK4irclKpaiz67tJXsmZYhUa5iKYnM/3oSrSCZY3jS4Ii1a7ifDWdns61XInsBQVHg0xrsr7Yy2qL6GVqF6ZwYokUs2sFM2bktJkXKtx3ZTk3GsvOupjOc4jAdoDOQaMXHbiIlnKOfbByk5ycAh3ZqV7phcpAvAucIa6JWCHg7PbAc8WmdqCfpbXAzOJCfpg7aqeJaEOaQw9dvQ8FCzQsW0er+/WXF6S3SL2tcbyYDDJxDSMsK5v7i1Ti7pJ3jR59coHVBulcjvCenkY8KXIQ==\u003c/div\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;\n\u003c/script\u003e\n","title":"为pelican添加文章加密功能"},{"content":"Table of Contents\n创建翻译\n动态变量\n\n\n创建翻译\nbabel-init:\n    cd $(THEMEDIR) \u0026amp;\u0026amp; pybabel extract -F babel.cfg -k lazy_gettext -o messages.pot ./ \u0026amp;\u0026amp; pybabel init -i messages.pot -d translations -l en\n\nbabel-update:\n    cd $(THEMEDIR) \u0026amp;\u0026amp; pybabel extract -F babel.cfg -k lazy_gettext -o messages.pot ./ \u0026amp;\u0026amp; pybabel update -i messages.pot -d translations\n\nbabel-compile:\n    cd $(THEMEDIR) \u0026amp;\u0026amp; pybabel compile -d translations\n\n动态变量\n\n   在模板里，我有一些动态变量需要翻译，比如在分类里的 Python 需要翻译成 生活苦短,但很不幸, Babel并不支持动态变量的翻译。\n   刚开始，在我没使用i18n_subsites时，我采用加载一个i18n.html文件\n\n{% macro gettext(string) -%}\n{% set _gettext=dict(\n    python=\u0026#39;人生苦短\u0026#39;,\n    security=\u0026#39;极客安全\u0026#39;,\n    archives=\u0026#39;文章归档\u0026#39;,\n) %}\n{{ _gettext.get(string.lower(),string) }}\n{%- endmacro %}\n\n   类似字典的形式对部分变量进行翻译，这能够工作的很好，虽然有些麻烦。\n\n\n\n   在使用Babel之后，我想要把它和messages.po统一管理，所以采用另一种比较折中的方案: jinja2 filter\n\nfrom babel import support\n\ndef gettrans(text, locale=DEFAULT_LANG):\n    translations = support.Translations()\n    catalog = support.Translations.load(\n        os.path.abspath(os.path.join(THEME, \u0026#34;translations\u0026#34;)), locale)\n    translations.merge(catalog)\n    if hasattr(catalog, \u0026#39;plural\u0026#39;):\n        translations.plural = catalog.plural\n    return translations.gettext(text)\n\nJINJA_FILTERS = {\n    \u0026#39;gettrans\u0026#39;: gettrans,\n}\n\n   这样就可以通过传递变量来获取对应的翻译, 而我所需要做的就是写好messages.po然后编译成messages.mo即可，同样为了每次使用pybabel update 都可以得到相同的内容，我使用了一种取巧的办法, 同样是i18n.html文件，把所需要国际化的可能变量全部放到一起，但不要在其它模板里import这个模板，这样每次更新翻译文件，Babel 都能自动找到并生成相同的messages.po文件\n\n{% macro gettrans(string) -%}\n  {% set _gettrans=[\n      _(\u0026#34;Linux\u0026#34;),\n      _(\u0026#34;Python\u0026#34;),\n      _(\u0026#34;Security\u0026#34;),\n      _(\u0026#34;友链\u0026#34;),\n      _(\u0026#34;联系\u0026#34;)] %}\n{%- endmacro %}\n\n\n   这种方式同样解决了我的另一个问题: 我可能在中文站点使用的是英文变量，但需要显示翻译后的中文，而在英文站点使用英文变量，显示的却同样是英文。说起来比较绕口，简单来说就是，中文站点里有一个Python变量,我需要显示为人生苦短 ， 而在英文站点，则显示为 Python，毕竟我可以在zh_CN/LC_MESSAGES/messages.po写上翻译后的内容,而在en/LC_MESSAGES/messages.po里保持原样,很方便地做到中英文分离。","index":91,"permalink":"https://honmaple.me/articles/2018/06/为pelican添加子站点功能.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e创建翻译\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ebabel-init:\n    cd \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eTHEMEDIR\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pybabel extract -F babel.cfg -k lazy_gettext -o messages.pot ./ \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pybabel init -i messages.pot -d translations -l en\n\nbabel-update:\n    cd \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eTHEMEDIR\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;...\u003c/span\u003e\u003c/pre\u003e","title":"为pelican添加子站点功能"},{"content":"功能实现很简单, pelican也有类似的插件实现 https://github.com/getpelican/pelican-plugins/tree/master/neighbors\n\n\n\n不过自己实现起来更爽不是吗? 而且类似prev_article_in_category和prev_article_in_subcategory的功能我并不需要\n\n\n\n首先参考pelican的文档,基础实现\n\ndef add_neighbors(generator):\n    ....\n\ndef register():\n    signals.article_generator_finalized.connect(add_neighbors)\n\n\n然后在generator.articles列表上进行操作,为article增加previous_article和next_article对象\n\n\n\n先进行排序(按时间)\n\narticles = generator.articles\narticles.sort(key=(lambda x: x.date), reverse=True)\n\n\n然后可以使用iter关键字,把列表变成生成器,使用next()( python2用a.next(),python3用a.__next__())获取下一个可迭代对象\n\n\npre_article = None\narticles_iter = iter(articles[1:])\nfor article in articles:\n    next_article = next(articles_iter, None)\n    setattr(article, \u0026#39;previous_article\u0026#39;, pre_article)\n    setattr(article, \u0026#39;next_article\u0026#39;, next_article)\n    pre_article = article\n\n\n最后，在模板template中增加相关html代码，示例:\n\n{% if article.previous_article %}\n\u0026lt;li class=\u0026#34;previous\u0026#34;\u0026gt;\n  \u0026lt;a href=\u0026#34;{{ SITEURL }}/{{ article.previous_article.url }}\u0026#34; title=\u0026#34;Previous article: {{ article.previous_article.title }}\u0026#34;\u0026gt;\n    \u0026lt;i class=\u0026#34;fa fa-chevron-left\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\n    {{ article.previous_article.title }}\n  \u0026lt;/a\u0026gt;\n\u0026lt;/li\u0026gt;\n{% endif %}\n{% if article.next_article %}\n\u0026lt;li class=\u0026#34;next\u0026#34;\u0026gt;\n  \u0026lt;a href=\u0026#34;{{ SITEURL }}/{{ article.next_article.url }}\u0026#34; title=\u0026#34;Next article: {{ article.previous_article.title }}\u0026#34;\u0026gt;\n    {{ article.next_article.title }}\n    \u0026lt;i class=\u0026#34;fa fa-chevron-right\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\n  \u0026lt;/a\u0026gt;\n\u0026lt;/li\u0026gt;\n{% endif %}\n\n\nok,就这样","index":92,"permalink":"https://honmaple.me/articles/2017/10/为pelican增加上一篇下一篇功能.html","summary":"\n\u003cp\u003e\n功能实现很简单, \u003cb\u003epelican\u003c/b\u003e也有类似的插件实现 \u003ca href=\"https://github.com/getpelican/pelican-plugins/tree/master/neighbors\"\u003ehttps://github.com/getpelican/pelican-plugins/tree/master/neighbors\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n不过自己实现起来更爽不是吗? 而且类似\u003cb\u003eprev_article_in_category\u003c/b\u003e和\u003cb\u003eprev_article_in_subcategory\u003c/b\u003e的功能我并不需要\n\u003c/p\u003e\n\n\u003cp\u003e\n首先参考\u003cb\u003epelican\u003c/b\u003e的文档,基础实现\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd_neighbors\u003c/span\u003e(generator):\n    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregister\u003c/span\u003e():\n    signals\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earticle...\u003c/pre\u003e","title":"为pelican增加上一篇下一篇功能"},{"content":"没有人是自成一体、与世隔绝的孤岛，\n每一个人都是广袤大陆的一部份。\n如果海浪冲掉了一块岩石，\n欧洲就减少。\n如同一个海岬失掉一角，\n如同你的朋友或者你自己的领地失掉一块。\n每个人的死亡都是我的哀伤，\n因为我是人类的一员。\n所以，不要问丧钟为谁而鸣，\n它就为你而鸣！","index":93,"permalink":"https://honmaple.me/articles/2015/12/丧钟为你而鸣.html","summary":"\u003cp\u003e没有人是自成一体、与世隔绝的孤岛，\u003cbr\u003e\n每一个人都是广袤大陆的一部份。\u003cbr\u003e\n如果海浪冲掉了一块岩石，\u003cbr\u003e\n欧洲就减少。\u003cbr\u003e\n如同一个海岬失掉一角，\u003cbr\u003e\n如同你的朋友或者你自己的领地失掉一块。\u003cbr\u003e\n每个人的死亡都是我的哀伤，\u003cbr\u003e\n因为我是人类的一员。\u003cbr\u003e\n所以，不要问丧钟为谁而鸣，\u003cbr\u003e\n它就为你而鸣！\u003c/p\u003e\n","title":"丧钟为你而鸣"},{"content":":世界那么大，我想去看看···\n\n\n\n:我得养家······","index":94,"permalink":"https://honmaple.me/articles/2016/10/世界这么大，我想去看看.html","summary":"\n\u003cp\u003e\n:世界那么大，我想去看看···\n\u003c/p\u003e\n\n\u003cp\u003e\n:我得养家······\n\u003c/p\u003e","title":"世界这么大，我想去看看"},{"content":"Table of Contents\n独自旅行的杯子\n忘记背包的英文\n错过的火车\n\n\n独自旅行的杯子\n\n  \u0026lt;2017-10-20 五 18:53\u0026gt;\n\n\n\n  世界总是充满杯具,正如陪伴了我大学三年多的水杯,独自坐上了开往广州的火车,离我而去\n\n\n\n\n  注:运动是相对的\n\n\n忘记背包的英文\n\n\n  世界总是充满杯具,正如帮助一名忘记拉上背包拉链的外国友人,\u0026#34;Your...Your\u0026#34;了半天，最后一句\u0026#34;I help you\u0026#34;换来的却是一句中文的\u0026#34;谢(sei)谢(sei)\u0026#34;\n\n\n\n\n  注: 背包 backpack\n\n错过的火车\n\n  \u0026lt;2017-10-23 一 18:58\u0026gt;\n\n\n\n  世界总是充满杯具,正如那错过的火车，刚到月台，火车刚开走,只要再给我30s,不，就20s······\n\n\n\n\n  注: 结果坐上了左边的动车(我买的可是高铁票)","index":95,"permalink":"https://honmaple.me/articles/2016/10/世界总是充满杯具.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e独自旅行的杯子\u003c/h1\u003e\n\u003cp\u003e\n  \u0026lt;2017-10-20 五 18:53\u0026gt;\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n  世界总是充满杯具,正如陪伴了我大学三年多的水杯,独自坐上了开往广州的火车,离我而去\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n  \u003cb\u003e注\u003c/b\u003e:运动是相对的\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e忘记背包的英文\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n  世界总是充满杯具,正如帮助一名忘记拉上背包拉链的外国友人,\u0026#34;Your...Your\u0026#34;了半天，最后一句\u0026#34;I help you\u0026#34;换来的却是一句中文的\u0026#34;谢(sei)谢(sei)\u0026#34;...\u003c/p\u003e\u003c/blockquote\u003e","title":"世界总是充满杯具"},{"content":"直接给出源码\n\n\n\n设置壁纸\n\nfeh --bg-scale /tmp/earth.png\n\n\n设置桌面大小,及图片放大倍数\n\nSCALE = 4\nWIDTH = 1368\nHEIGHT = 768\n\nfrom PIL import Image\nfrom io import BytesIO\nfrom urllib.request import Request, urlopen\nfrom datetime import datetime\nimport json\n\nSCALE = 4\nWIDTH = 1368\nHEIGHT = 768\n\n\ndef get_info():\n    url = \u0026#34;http://himawari8-dl.nict.go.jp/himawari8/img/D531106/latest.json\u0026#34;\n    request = Request(url)\n    response = urlopen(request, timeout=10)\n    return json.loads(response.read())\n\n\ndef download():\n    png = Image.new(\u0026#39;RGB\u0026#39;, (550 * SCALE, 550 * SCALE))\n    desktop = Image.new(\u0026#39;RGB\u0026#39;, (WIDTH, HEIGHT))\n    url_format = \u0026#39;http://himawari8-dl.nict.go.jp/himawari8/img/D531106/{}d/{}/{}_{}_{}.png\u0026#39;\n    info = get_info()\n    date = datetime.strptime(info[\u0026#39;date\u0026#39;], \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\n    for x in range(SCALE):\n        for y in range(SCALE):\n            url = url_format.format(SCALE, 550,\n                                    date.strftime(\u0026#34;%Y/%m/%d/%H%M%S\u0026#34;), x, y)\n            print(url)\n            request = Request(url)\n            response = urlopen(request, timeout=10)\n            img = Image.open(BytesIO(response.read()))\n            png.paste(img, (550 * x, 550 * y, 550 * (x + 1), 550 * (y + 1)))\n    png.thumbnail((HEIGHT, HEIGHT), Image.ANTIALIAS)\n    desktop.paste(png, ((WIDTH - HEIGHT) // 2, 0))\n    desktop.save(\u0026#39;/tmp/earth.png\u0026#39;, \u0026#34;PNG\u0026#34;)\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    download()\n\n\n或许应该找一张有星星的照片","index":96,"permalink":"https://honmaple.me/articles/2017/03/下载Himawari8拍摄的实时地球图片.html","summary":"\n\u003cp\u003e\n直接给出源码\n\u003c/p\u003e\n\n\u003cp\u003e\n设置壁纸\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003efeh --bg-scale /tmp/earth.png\u003c/pre\u003e\n\n\u003cp\u003e\n设置桌面大小,及图片放大倍数\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eSCALE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\nWIDTH \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1368\u003c/span\u003e\nHEIGHT \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e768\u003c/span\u003e\u003c/pre\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e PIL \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Image\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e io \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e BytesIO\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e urllib.request \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Request, urlopen\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e datetime \u003cspan style=\"color:#f92672\"\u003eimport...\u003c/span\u003e\u003c/pre\u003e","title":"下载Himawari8拍摄的实时地球图片"},{"content":"这是一篇加密的文章，你需要输入正确的密码.\n  qQrRTIVbWirZQYr4DlLDMxifSj/xER7/CWJ+HW/47fJc0WqLemi3fUN6m+CmawOOVNg/LCT9qg2t8e1e+1XfJETDC+8pQvtwtfQkm2LTkDMcd/BjNd0rxjCKsw6P4Dm7\n\n\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;","index":97,"permalink":"https://honmaple.me/articles/2017/08/七夕.html","summary":"\u003cdiv class=\"encrypt-container entry-encrypt\"\u003e\n  \u003cdiv class=\"encrypt-form entry-form\"\u003e\n    \u003cinput type=\"password\" class=\"encrypt-password\" placeholder=\"请输入密码\" /\u003e\n    \u003ci class=\"fa fa-key encrypt-button\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\u003cdiv class=\"encrypt-desc\"\u003e这是一篇加密的文章，你需要输入正确的密码.\u003c/div\u003e\n  \u003cdiv class=\"encrypt-content\" style=\"display:none;\"\u003eqQrRTIVbWirZQYr4DlLDMxifSj/xER7/CWJ+HW/47fJc0WqLemi3fUN6m+CmawOOVNg/LCT9qg2t8e1e+1XfJETDC+8pQvtwtfQkm2LTkDMcd/BjNd0rxjCKsw6P4Dm7\u003c/div\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\"\u003e\n if (!shortcodes) {\n     var shortcodes = {};\n }\n if (!shortcodes[\"encrypt\"] \u0026\u0026 document.querySelector(\".encrypt-container\")) {\n     shortcodes.loadJS(\"https://honmaple.me/static/lib/js/crypto-js.min.js\");\n     shortcodes.loadJS(\"https://honmaple.me/static/js/encrypt.js\");\n }\n shortcodes[\"encrypt\"] = true;\n\u003c/script\u003e\n","title":"七夕"},{"content":"关于一些vim插件的使用方法，vim插件多，快捷键也多，记录一下\n\ntpope/vim-surround\n\n光标在\n\u0026#34;Hello world!\u0026#34;\n\n中时按下 cs\u0026#34;\u0026#39; ，则会替换双引号为单引号：\n\u0026#39;Hello world!\u0026#39; \n\n继续按下 cs\u0026#39; ，则会替换单引号为 标签\n\u0026lt;q\u0026gt;Hello world!\u0026lt;/q\u0026gt;\n\n按下 cst\u0026#34; ，则回到初始的双引号：\n \u0026#34;Hello world!\u0026#34;\n\n要删除符号，则按下 ds\u0026#34;\nHello world!\n\n当光标在hello上时，按下 ysiw] ，则会变为\n[Hello] world!\n\n这个操作为其加上了包围符号。\n\n总结：\n\n1.删除包围符号的命令是 ds ,后面加的字符表示要删除的符号。比如：\n\u0026gt;\u0026#34;Hello *world!\u0026#34;           ds\u0026#34;         Hello world!\n\n2.替换包围符号的命令是 cs ,命令后跟两个参数，分别是被替换的符号和需要使用的符号。比如\n\u0026gt;\u0026#34;Hello *world!\u0026#34;           cs\u0026#34;\u0026#39;        \u0026#39;Hello world!\u0026#39;\n\n3.添加包围符号的命令是 ys ，命令后同样跟两个参数，第一个是一个vim“动作”（motion）或者是一个文本对象。（motion即vim动作，比如说 w 向后一个单词。文本对象简单的来说主要是来通过一些分隔符来标识一段文本，比如 iw 就是一个文本对象，即光标下的单词。）\n\u0026gt;  Hello w*orld!             ysiw)       Hello (world)!\n\n另外： yss 命令可以用于整行操作，忽略中间的空格。 yS 和 ySS 还能让包围内容单独一行并且加上缩进。\n\n4.添加包围符号还有个非常好用的：在可视模式v下，按下 S 后即可添加想要添加的包围符号了。\n再说一个小技巧：在包围符号为括时，输入左括号 (或者{ ,则会留一个空格\n\u0026gt;Hello w*orld!             ysiw(       Hello ( world )!","index":98,"permalink":"https://honmaple.me/articles/2015/12/一些vim插件的使用方法.html","summary":"\u003cp\u003e关于一些vim插件的使用方法，vim插件多，快捷键也多，记录一下\u003c/p\u003e\n\n\u003ch3\u003etpope/vim-surround\u003c/h3\u003e\n\n\u003cp\u003e光标在\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026#34;Hello world!\u0026#34;\n\u003c/pre\u003e\n\u003cp\u003e中时按下 cs\u0026#34;\u0026#39; ，则会替换双引号为单引号：\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026#39;Hello world!\u0026#39; \n\u003c/pre\u003e\n\u003cp\u003e继续按下 cs\u0026#39;\u003cq\u003e ，则会替换单引号为 标签\u003c/q\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;q\u0026gt;Hello world!\u0026lt;/q\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003e按下 cst...\u003c/p\u003e","title":"一些vim插件的使用方法"},{"content":"Table of Contents\n获取开始时间\n时间分组\n\n\n\n之前有这么一个需求\n\n\n\n将数据按照时间分组，比如说每5分钟为一组，或者每30分钟为一组，开始时间如果分钟数大于等于30分钟，则设置为30,如果小于30,则设置为0（也可以设置为更复杂的逻辑）\n\n\n\n当然中间还有一些数据的统计，分析和计算暂时不管\n\n\n\n获取开始时间\ndef get_start_date(start_date):\n    time = datetime.fromtimestamp(int(start_date) / 1000)\n    if time.minute \u0026gt;= 30:\n        minute = 30\n    else:\n        minute = 0\n    start_date = datetime(time.year, time.month, time.day, time.hour, minute,\n                          0)\n    start_date = mktime(start_date.timetuple()) * 1000\n    return start_date\n\n\n开始时间很简单，需要注意的是设置分钟，需要将时间戳转换为datetime，设置分钟数后再将datetime转为时间戳\n\ntime = datetime.fromtimestamp(int(start_date) / 1000)\nstart_date = datetime(time.year, time.month, time.day, time.hour, minute, 0)\nstart_date = mktime(start_date.timetuple()) * 1000\n\n时间分组\n\n  直接给出源码\n\ndef gen_date_group(start_date, datas, interval):\n    # datas是一组含时间戳的数据\n    interval = int(interval)\n    # 获取开始时间\n    start_date = get_start_date(start_date)\n    end_date = start_date + interval\n\n    count = 0\n    type_count = 0\n    for data in datas:\n        if data[\u0026#39;date\u0026#39;] \u0026gt;= end_date:\n            yield (start_date, get_count_average(type_count, count))\n            # 一些数据统计与计算\n            type_count = data[\u0026#39;type_count\u0026#39;]\n            count = data[\u0026#39;count\u0026#39;]\n            start_date = end_date\n            end_date = start_date + interval\n            # 注意这里，即使dates里没有某个时间区间的数据，也要不断循环分组\n            while data[\u0026#39;date\u0026#39;] \u0026gt;= end_date:\n                yield (start_date, 0)\n                start_date = end_date\n                end_date = start_date + interval\n        else:\n            type_count += data[\u0026#39;type_count\u0026#39;]\n            count += data[\u0026#39;count\u0026#39;]","index":99,"permalink":"https://honmaple.me/articles/2017/07/一个简单的数据分组算法.html","summary":"\n\u003cp\u003e\n之前有这么一个需求\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n将数据按照时间分组，比如说每5分钟为一组，或者每30分钟为一组，开始时间如果分钟数大于等于30分钟，则设置为30,如果小于30,则设置为0（也可以设置为更复杂的逻辑）\n\u003c/p\u003e\n\n\u003cp\u003e\n当然中间还有一些数据的统计，分析和计算暂时不管\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003e获取开始时间\u003c/h1\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_start_date\u003c/span\u003e(start_date):\n    time \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e datetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efromtimestamp(int(start_date) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e)\n    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e time\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eminute \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e:\n        minute \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003eelse...\u003c/span\u003e\u003c/pre\u003e","title":"一个简单的数据分组算法"},{"content":"我有这样一个想法\n\n\n\n有这么一个app\n\n\n\n\n\n 它可以自定义表单，然后保存到本地或者远程数据库\n\n\n\n 还可以填写一个远程url，验证的token，或者其他验证需要的header信息\n\n\n\n 填好之后就可以提交相关的表单\n\n\n\n\n\n好吧,其实是写说说，写博客使用的\n\n\n\n\n它还有另外一个功能: 上传图片\n\n\n\n\n\n 同样是先填写远程url,验证信息\n\n\n\n 填写其它相关信息\n\n\n\n 选择本地图片进行上传\n\n\n\n 上传成功后返回相应的url链接\n\n\n\n\n\n好吧,越来越像朋友圈和QQ空间了\n\n\n\n\n但是，它可以自定义发布和上传的url呀!\n\n\n\n最后，如果要更大，更远一些，可以对使用者的博客等内容进行相应的聚合,分类,成为一个优质的移动聚合平台.\n\n\n\n嗯，好想法，就等谁实现了","index":100,"permalink":"https://honmaple.me/articles/2017/11/一个很好的想法.html","summary":"\n\u003cp\u003e\n我有这样一个想法\n\u003c/p\u003e\n\n\u003cp\u003e\n有这么一个\u003cb\u003eapp\u003c/b\u003e\n\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n 它可以自定义表单，然后保存到本地或者远程数据库\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 还可以填写一个远程url，验证的token，或者其他验证需要的header信息\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 填好之后就可以提交相关的表单\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n好吧,其实是写说说，写博客使用的\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n它还有另外一个功能: \u003cb\u003e上传图片\u003c/b\u003e\n\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n 同样是先填写远程url,验证信息\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 填写其它相关信息\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 选择本地图片进行上传\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 上传成功后返回相应的url链接\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n好吧,越来越像朋友圈和QQ空间了\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003cb\u003e但是，它可以自定义发布和上传的url呀!\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n最后，如果要更大，更远一些，可以对使用者的博客等内容进行相应的聚合,分类,成为一个优质的移动聚合平台.\n\u003c/p\u003e\n\n\u003cp\u003e\n嗯，好想法，就等谁实现了\n\u003c/p\u003e","title":"一个很好的想法"},{"content":"Can you hear what I\u0026#39;m saying?I\u0026#39;m telling you it\u0026#39;s a disgrace!I can hear you!We let them take us to our deathlike sheep to the slaughter.Not so loud.Wh don\u0026#39;t we attack them?There\u0026#39;s half a million of us here.We could break out of the ghetto.At least we could die honorably,not as a stain on the face of history.Why are you so surethey\u0026#39;re sending us to our death?I\u0026#39;m not sure!You know why I\u0026#39;m not sure?Because they didn\u0026#39;t tell me.They\u0026#39;re gonna wipe us all out.What do you want me to do?Do your want me to fight?To fight you need organization...He\u0026#39;s right. What do you think I can do,fight them with my violin bow?The Germans will never squandera hug labor force like this.They\u0026#39;re sending usto a labor camp. It\u0026#39;s obvious.Oh, sure!Look at that cripple there.Look at the old people, the children.They\u0026#39;re gonna work?Look at you? You gonna carryiron girders on your back?They\u0026#39;re exterminating us.It won\u0026#39;t take them long.We\u0026#39;re 60,000 leftout of half a million.Mostly young people.And this time we\u0026#39;re gonna fight.We\u0026#39;re in good shape, organized.We\u0026#39;re prepared.If you need help, I...No one thought they\u0026#39;d hold out so long.I never should have come out.I should have stayed thereand fought with them.stop that.It\u0026#39;s over now.Just be proud it happened.My God, did they put up a fight.Yes, well.So did the Germans.They\u0026#39;re in shock.They didn\u0026#39;t expect it.Nobody expected it.Jews fighting back.Who would\u0026#39;ve thought?Well, what good did it do?What good?I\u0026#39;m surprised at you.They died with dignity,that\u0026#39;s what good it did.And you know something else?Now the poles will rise.We\u0026#39;re ready.We\u0026#39;ll fight too. You\u0026#39;ll see.你听到我说的话吗？我告诉你这是一个耻辱我在听！我们任凭他们把我们引向死亡就像羔羊走向屠场别这麽大声我们何不攻击他们？我们有五十万人在这里我们可以突破犹太人区重围为什你这麽确定他们会送我们下黄泉？我不确定！你知道为什麽我不能确定吗？因为他们没说过他们要把我们彻底消灭你希望我怎麽做？你要我抗争吗？抗争的话需要组织...他说得没错你认为我能做什麽？用我的小提琴弓抗争吗？德国人不会浪费像这样庞大的劳动力量很明显地他们正要把我们送到劳动集中营喔 当然！看看那个瘸子看看这些老人跟小孩他们也要工作？看看你，你要带着背上的铁架一起去吗？他们想把我们赶尽杀绝那用不着花太多时间从50万人到现在我们只剩下6万人几乎都是年轻人而这一次我们要反抗我们状况良好 组织健全我们已经准备好了如果你需要援助 我...没人想得到他们会持续这麽久我不应该出来的我应该留在那里跟他们对抗停止现在都结束了你该骄傲它发生了天哪 他们发起了抗争是的 没错德国人也是他们非常震惊他们没有预料到没有人预料得到犹太人反击了有谁想得到？好吧 那有什麽好处？什麽好处？你真让我吃惊他们尊严地死去这就是它的好处你还知道别的吗？现在波兰人要苏醒了我们准备好了我们也要抗战了 你知道吗？","index":101,"permalink":"https://honmaple.me/articles/2014/04/《钢琴家》.html","summary":"\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\nCan you hear what I\u0026#39;m saying?\u003cbr/\u003e\u003cbr/\u003eI\u0026#39;m telling you it\u0026#39;s a disgrace!\u003cbr/\u003eI can hear you!\u003cbr/\u003eWe let them take us to our death\u003cbr/\u003elike sheep to the slaughter.\u003cbr/\u003eNot...\u003c/p\u003e\u003c/div\u003e","title":"《钢琴家》"},{"content":"是我让火起，将你路烧尽，换今日送你归去。我是泪眼迷，你却笑如昔，问我：“君为何沾衣？”原上的草还如来时离离，我只说：“不过触景生情。”你似了然道：“愿再逢你。”我许你约定，愿天意答应。十年里，你我也曾挥手支风批雨，乾坤都在掌中握紧，而如今，你我间还要问天意，自君长别此去，只剩我一人独行雪里。你笑着问我：“君为何沾衣？”我只说：“不过触景生情。”你似了然道：“愿再逢你。”我许你约定，愿天意答应。十年里，你我也曾挥手支风批雨，乾坤都在掌中握紧，而如今，你我间还要问天意，自君长别此去，只剩我一人独行雪里。纵马去，等背影藏在峰回路转里，空山也听不见马蹄，独留我，在这浩荡的乾坤里，想起忘说一句：“此生得识君，三生有幸”。","index":102,"permalink":"https://honmaple.me/articles/2014/06/《有敌相惜》.html","summary":"\n\u003ciframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"//music.163.com/outchain/player?type=2\u0026amp;id=29535921\u0026amp;auto=0\u0026amp;height=66\" class=\"netease-music\"\u003e\u003c/iframe\u003e\n\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\n是我让火起，\u003cbr/\u003e将你路烧尽，\u003cbr/\u003e换今日送你归去。\u003cbr/\u003e我是泪眼迷，\u003cbr/\u003e你却笑如昔，\u003cbr/\u003e问我：“君为何沾衣？”\u003cbr/\u003e原上的草还如来时离离，\u003cbr/\u003e我只说：“不过触景生情。”\u003cbr/\u003e你似了然道：“愿再逢你。”\u003cbr/\u003e我许你约定，愿天意答应。\u003cbr/\u003e十年里，你我也曾挥手支风批雨，\u003cbr/\u003e乾坤都在掌中握紧，\u003cbr/\u003e而如今，你我间还要问天意，\u003cbr/\u003e自君长别此去，\u003cbr/\u003e只剩我一人独行雪里。\u003cbr/\u003e\u003cbr/\u003e你笑着问我：“君为何沾衣？”\u003cbr/\u003e我只说：“不过触景生情。”\u003cbr/\u003e你似了然道：“愿再逢你。”\u003cbr/\u003e我许你约定，愿天意答应。\u003cbr/\u003e十年里，你我也曾挥手支风批雨，\u003cbr/\u003e乾坤都在掌中握紧，\u003cbr/\u003e而如今，你我间还要问天意，\u003cbr/\u003e自君长别此去，\u003cbr/\u003e只剩我一人独行雪里...\u003c/p\u003e\u003c/div\u003e","title":"《有敌相惜》"},{"content":"以 sudo 或者 root 打开 wireshark 是不安全的,毕竟我不是root敢死队\n\nLinux\n\n如何以普通用户运行 wireshark\n\n\n添加wireshark用户组\n$ sudo groupadd wireshark\n\n\n将dumpcap更改为wireshark用户组\n$ sudo chgrp wireshark /usr/bin/dumpcap\n\n\n让wireshark用户组有root权限使用dumpcap\n$ sudo chmod 4755 /usr/bin/dumpcap\n\n\n\n(注意:如果设为4754 Wireshark还是会提示没有权限 )\n\n\n将用户加入wireshark组\n$ sudo gpasswd -a username wireshark\n或者\n$ sudo usermod -a -G wireshark username\n\n\n\nMacos\n└──╼ ls -al /dev/bpf* \ncrw-------  1 root  wheel  0x17000000  7 12 15:54 /dev/bpf0\ncrw-------  1 root  wheel  0x17000001  7 12 15:54 /dev/bpf1\ncrw-------  1 root  wheel  0x17000002  7 11 14:51 /dev/bpf2\ncrw-------  1 root  wheel  0x17000003  7 11 14:51 /dev/bpf3\n└──╼ sudo chgrp access_bpf /dev/bpf*\nPassword:\n└──╼ sudo chmod g+rw /dev/bpf*\n└──╼ ls -al /dev/bpf*\ncrw-rw----  1 root  access_bpf  0x17000000  7 12 15:54 /dev/bpf0\ncrw-rw----  1 root  access_bpf  0x17000001  7 12 15:54 /dev/bpf1\ncrw-rw----  1 root  access_bpf  0x17000002  7 11 14:51 /dev/bpf2\ncrw-rw----  1 root  access_bpf  0x17000003  7 11 14:51 /dev/bpf3\n\n参考资料\n\n\nubuntu系统下wireshark普通用户抓包设置\nMac OS can’t detect any interface","index":103,"permalink":"https://honmaple.me/articles/2016/05/wireshark解决权限问题.html","summary":"\u003cp\u003e以 \u003cstrong\u003esudo\u003c/strong\u003e 或者 \u003cstrong\u003eroot\u003c/strong\u003e 打开 \u003ccode\u003ewireshark\u003c/code\u003e 是不安全的,毕竟我不是root敢死队\u003c/p\u003e\n\n\u003ch2\u003eLinux\u003c/h2\u003e\n\n\u003cp\u003e如何以普通用户运行 wireshark\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e添加wireshark用户组\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo groupadd wireshark\n\u003c/pre\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e将dumpcap更改为wireshark用户组\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo chgrp wireshark /usr/bin/dumpcap\n\u003c/pre\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e让wireshark用户组有root权限使用dumpcap\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo chmod 4755 /usr/bin/dumpcap\n\u003c/pre\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cem\u003e(注意:如果设为4754 Wireshark还是会提示没有权限 )\u003c/em\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e将用户加入wireshark组...\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e","title":"wireshark解决权限问题"},{"content":"web-mode有一个内置的web-mode-fold-or-unfold函数，但这个函数有一个问题，当存在fold时，使用indent-region会得到错误的缩进，想要得到正确的缩进，必须先 unfold, 比如\n\n\n\u0026lt;div\u0026gt;\n  \u0026lt;div class=\u0026#34;col-xs-3 col-sm-3\u0026#34; id=\u0026#34;sidebar\u0026#34; role=\u0026#34;navigation\u0026#34;\u0026gt;\n    \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt;\n    \u0026lt;span\u0026gt;\n        \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt;\n    \u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;\n        \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt;\n    \u0026lt;/span\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt;\n\u0026lt;br /\u0026gt;\n\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;as\u0026lt;/a\u0026gt;\n\n\n当把div#sidebar使用web-mode-fold-or-unfold折叠起来, 然后使用\n\n\n(defun maple/indent-buffer ()\n  \u0026#34;Format buffer with `indent-region`.\u0026#34;\n  (interactive)\n  (save-excursion\n    (indent-region (point-min) (point-max) nil)))\n\n展开后就会变成\n\n\u0026lt;!-- sidebar --\u0026gt;\n\u0026lt;div\u0026gt;\n  \u0026lt;div class=\u0026#34;col-xs-3 col-sm-3\u0026#34; id=\u0026#34;sidebar\u0026#34; role=\u0026#34;navigation\u0026#34;\u0026gt;\n    \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt;\n    \u0026lt;span\u0026gt;\n    \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt;\n    \u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;\n    \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt;\n    \u0026lt;/span\u0026gt;\n    \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt;\n\u0026lt;br /\u0026gt;\n\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;as\u0026lt;/a\u0026gt;\n\n\n这与期望的效果不符(不知道是不是只有我碰到，还是这可能是一个bug),  我去看了一下web-mode-fold-or-unfold的实现, 它使用的是\n\n\n(put-text-property beg-inside end-inside \u0026#39;invisible t)\n\n\n来隐藏折叠部分， 我不太清楚为什么使用put-text-property会使indent-region缩进有问题，有知道的可以告知一下，但我平时在其他项目中都是使用 hs-toggle-hiding 来折叠代码， hs-toggle-hiding能很好的与indent-region配合\n\n\n\n由于web-mode-fold-or-unfold这个函数太长，不想占用我自己的配置， 所以魔改了一下\n\n\n(fset \u0026#39;maple/put-text-property (symbol-function \u0026#39;put-text-property))\n(defun maple/web-mode-put-text(p q prop value)\n  (if (and (eq prop \u0026#39;invisible) value) (hs-make-overlay p q \u0026#39;code)\n    (maple/put-text-property p q prop value)))\n(defun maple/web-mode-fold-or-unfold()\n  (interactive)\n  (cl-letf (((symbol-function \u0026#39;put-text-property) \u0026#39;maple/web-mode-put-text))\n    (web-mode-fold-or-unfold)))\n\n\n把put-text-property临时修改成hs-make-overlay,这样web-mode折叠后就能正确地使用maple/indent-buffer了\n\n\n\n来源:honmaple\u0026#39;s init-web.el","index":104,"permalink":"https://honmaple.me/articles/2018/11/web-mode自定义fold函数以适应indent-region.html","summary":"\n\u003cp\u003e\n\u003ccode\u003eweb-mode\u003c/code\u003e有一个内置的\u003ccode\u003eweb-mode-fold-or-unfold\u003c/code\u003e函数，但这个函数有一个问题，当存在\u003cb\u003efold\u003c/b\u003e时，使用\u003ccode\u003eindent-region\u003c/code\u003e会得到错误的缩进，想要得到正确的缩进，必须先 \u003ccode\u003eunfold\u003c/code\u003e, 比如\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col-xs-3 col-sm-3\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"web-mode自定义fold函数以适应indent-region"},{"content":"Table of Contents\nvue分页\nsss\n\n\nvue分页\n\n  需要参数:\n\n\n\n\n page: 当前页码\n\n\n\n total_page: 总页数\n\n\n\n\n  代码片段\n\n\u0026lt;ul class=\u0026#34;pagination\u0026#34; v-if=\u0026#34;total_page \u0026gt; 1\u0026#34;\u0026gt;\n  \u0026lt;li  v-if=\u0026#34;page \u0026gt; 1\u0026#34; class=\u0026#34;previous\u0026#34;\u0026gt;\n    \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; v-on:click=\u0026#34;paginate_to(1);\u0026#34;\u0026gt;«\u0026lt;/a\u0026gt;\n  \u0026lt;/li\u0026gt;\n  \u0026lt;template v-for=\u0026#34;p in total_page\u0026#34;\u0026gt;\n    \u0026lt;template v-if=\u0026#34;p == page\u0026#34;\u0026gt;\n      \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\n        \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34;\u0026gt;{{ p }}\u0026lt;/a\u0026gt;\n      \u0026lt;/li\u0026gt;\n    \u0026lt;/template\u0026gt;\n    \u0026lt;template v-else-if=\u0026#34;(page - 2 \u0026lt; p \u0026amp;\u0026amp; p \u0026lt; page + 2) || p \u0026lt;= 3 || p \u0026gt; total_page - 3 \u0026#34;\u0026gt;\n      \u0026lt;li\u0026gt;\n        \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; v-on:click=\u0026#34;paginate_to(p);\u0026#34;\u0026gt;{{ p }}\u0026lt;/a\u0026gt;\n      \u0026lt;/li\u0026gt;\n    \u0026lt;/template\u0026gt;\n    \u0026lt;template v-else-if=\u0026#34;(page - 3 \u0026lt; p  \u0026amp;\u0026amp; p  \u0026lt; page + 1) || p \u0026lt;= 2 || p \u0026gt; total_page - 4 \u0026#34;\u0026gt;\n      \u0026lt;li\u0026gt;\n        \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; v-on:click=\u0026#34;paginate_to(p);\u0026#34;\u0026gt;.....\u0026lt;/a\u0026gt;\n      \u0026lt;/li\u0026gt;\n    \u0026lt;/template\u0026gt;\n  \u0026lt;/template\u0026gt;\n  \u0026lt;li v-if=\u0026#34;page \u0026lt; total_page\u0026#34; class=\u0026#34;previous\u0026#34;\u0026gt;\n    \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; v-on:click=\u0026#34;paginate_to(total_page);\u0026#34;\u0026gt;»\u0026lt;/a\u0026gt;\n  \u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\n\nsss\ncomputed: {\n  songWithExtraStuff () {\n    const song = this.song\n    return {\n      ...song,\n      duration: max(song.tracks.map(track =\u0026gt; track.duration))\n    }\n  }\n}","index":105,"permalink":"https://honmaple.me/articles/2017/05/vue笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003evue分页\u003c/h1\u003e\n\u003cp\u003e\n  需要参数:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003ccode\u003epage\u003c/code\u003e: 当前页码\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003ccode\u003etotal_page\u003c/code\u003e: 总页数\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  代码片段\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eul\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pagination\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;total_page \u0026gt; 1\u0026#34;\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan style=\"color:#f92672\"\u003eli\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003ev-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;page \u0026gt; 1\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass...\u003c/span\u003e\u003c/pre\u003e","title":"vue笔记"},{"content":"设置 --\u0026gt;\n\n\n\n\n 共享文件夹\n\n\n\n[X]\n 固定分配\n\n\n[X]\n 自动挂载\n\n\n[X]\n 共享文件夹名称Share\n\n\n\n\nsudo mkdir /mnt/share\nsudo mount -t vboxsf Share /mnt/share","index":106,"permalink":"https://honmaple.me/articles/2016/10/virtualbox挂载共享文件夹.html","summary":"\n\u003cp\u003e\n设置 --\u0026gt;\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 共享文件夹\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 固定分配\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 自动挂载\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 共享文件夹名称\u003cb\u003eShare\u003c/b\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003esudo mkdir /mnt/share\nsudo mount -t vboxsf Share /mnt/share\u003c/pre\u003e","title":"virtualbox挂载共享文件夹"},{"content":"Table of Contents\n安装VirtualBox Extension Pack\n\n下载\n安装\n卸载\n\n启用usb设备\n虚拟机从U盘启动(仅macos)\n\n\n\n主系统:archlinux + virtualbox 5.0.24-1\n虚拟机:windows\n\n\n安装VirtualBox Extension Pack\n\n下载\n\n   先从官网下载扩展包 https://www.virtualbox.org/wiki/Downloads\n\n\n\n   注意 :版本要一致\n\n└──╼ pacman -Qi virtualbox\n名字           : virtualbox\n版本           : 5.0.24-1\n描述           : Powerful x86 virtualization for enterprise as well as home use\n架构           : x86_64\n\n   所以下载 5.0 版本的pack\n\n\n安装\n\n   参考 https://wiki.archlinux.org/index.php/VirtualBox\n\n$ sudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.0.24-108355.vbox-extpack\n\n\n   安装不一致的版本会\n\n└──╼ sudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.1.0-108711.vbox-extpack\n0%...\nProgress state: NS_ERROR_FAILURE\nVBoxManage: error: Failed to install \u0026#34;/home/jianglin/VirtualBox VMs/extpack/Oracle_VM_VirtualBox_Extension_Pack-5.1.0-108711.vbox-extpack\u0026#34;\nVBoxManage: error: VBoxExtPackRegister returned VERR_VERSION_MISMATCH, pReg=0000000000000000 ErrInfo=\u0026#39;VirtualBox version mismatch - expected 5.1 got 5.0\u0026#39;\nVBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component ExtPackManagerWrap, interface IExtPackManager\nVBoxManage: error: Context: \u0026#34;RTEXITCODE handleExtPack(HandlerArg*)\u0026#34; at line 1158 of file VBoxManageMisc.cpp\n\n卸载\n\n   参考 https://www.virtualbox.org/manual/ch08.html#vboxmanage-extpack\n   不是\n\n└──╼ sudo VBoxManage extpack uninstall Oracle_VM_VirtualBox_Extension_Pack-5.0.24-108355.vbox-extpack\n0%...\nProgress state: NS_ERROR_FAILURE\nVBoxManage: error: Failed to uninstall \u0026#34;Oracle_VM_VirtualBox_Extension_Pack-5.0.24-108355.vbox-extpack\u0026#34;\nVBoxManage: error: Invalid extension pack name specified\nVBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component ExtPackManagerWrap, interface IExtPackManager\nVBoxManage: error: Context: \u0026#34;RTEXITCODE handleExtPack(HandlerArg*)\u0026#34; at line 1199 of file VBoxManageMisc.cpp\n\n   而是\n\n└──╼ sudo VBoxManage extpack uninstall \u0026#34;Oracle VM VirtualBox Extension Pack\u0026#34;\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\nSuccessfully uninstalled \u0026#34;Oracle VM VirtualBox Extension Pack\u0026#34;.\n启用usb设备\n\n  虚拟机需要 关机\n  设置-\u0026gt;USB设备-\u0026gt;启用USB控制器-\u0026gt;勾选3.0\n\n\n\n  开机:顶部 设备 里选择 USB\n\n\n虚拟机从U盘启动(仅macos)\n\n  https://www.how2shout.com/how-to/virtualbox-virtual-machine-boot-usb.html\n\n\n\n  按照上述所说大概率是可以的\n\n\n\n\n\n 首先插入U盘，并查看U盘所在dev\n\ndiskutil list\n\n\n 卸载U盘并创建虚拟硬盘\n\ndiskutil unmountDisk /dev/disk#\nsudo vboxmanage internalcommands createrawvmdk -filename ./usb.vmdk -rawdisk /dev/disk#\n\n\n 再次卸载U盘\n\ndiskutil unmountDisk /dev/disk#\n\n\n 设置权限\n\nchown `whoami`:staff ./usb.vmdk\n\n\n 使用sudo启动virtualbox\n\nsudo VirtualBox\n\n     问题就在这，我不想使用sudo启动\n\n\n\n\n  OK,就这样","index":107,"permalink":"https://honmaple.me/articles/2016/07/virtualbox中使用U盘等usb设备.html","summary":"\n\u003cp\u003e\n主系统:archlinux + virtualbox 5.0.24-1\n虚拟机:windows\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e安装VirtualBox Extension Pack\u003c/h1\u003e\n\n\u003ch2 id=\"heading-1.1\"\u003e下载\u003c/h2\u003e\n\u003cp\u003e\n   先从官网下载扩展包 \u003ca href=\"https://www.virtualbox.org/wiki/Downloads\"\u003ehttps://www.virtualbox.org/wiki/Downloads\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   \u003cb\u003e注意\u003c/b\u003e :版本要一致\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e└──╼ pacman -Qi virtualbox\n名字           : virtualbox\n版本           : 5.0.24-1\n描述           : Powerful...\u003c/pre\u003e","title":"virtualbox中使用U盘等usb设备"},{"content":"Table of Contents\nvim操作  \n\n一、移动光标  \n二、查找替换  \n三、编辑操作  \n四.窗口操作  \n五.宏操作  \n六、可视操作  \n七.跳到声明  \n八.挂起操作  \n\nvim配置\n\n初始化文件\n全局设置\nUI设置\n编辑器设置\nBuffer设置\n文件设置\n\n\n\n\nvim号称编辑器之神，最近也一直使用vim写代码，最大的印象就是快，无论是临时修改文件，还是专门写代码.现在记录vim主要操作快捷键和我的vim配置 \n\n\nvim操作  \n一、移动光标  \n\n\n\n 左移h、右移l、下移j、上移k    \n\n\n\n 向下翻页ctrl  f，向上翻页ctrl  b  \n\n\n\n 向下翻半页ctrl  d，向上翻半页ctrl  u  \n\n\n\n 移动到行尾$，移动到行首0（数字），移动到行首第一个字符处^  \n\n\n\n 移动光标到下一个句子 ），移动光标到上一个句子（  \n\n\n\n 移动到段首{，移动到段尾}  \n\n\n\n 移动到下一个词w，移动到上一个词b  \n\n\n\n 移动到文档开始gg，移动到文档结束G  \n\n\n\n 移动到匹配的{}.().[]处%  \n\n\n\n 跳到第n行 ngg 或 nG 或 :n  \n\n\n\n 移动光标到屏幕顶端H，移动到屏幕中间M，移动到底部L  \n\n\n\n 读取当前字符，并移动到本屏幕内下一次出现的地方 *  \n\n\n\n 读取当前字符，并移动到本屏幕内上一次出现的地方 #  \n\n\n\n二、查找替换  \n\n\n\n\n 光标向后查找关键字 #或者g#  \n\n\n\n 光标向前查找关键字 或者g  \n\n\n\n 当前行查找字符 fx, Fx, tx, Tx  \n\n\n\n 基本替换 :s/s1/s2 （将下一个s1替换为s2）  \n\n\n\n 全部替换 :%s/s1/s2  \n\n\n\n 只替换当前行 :s/s1/s2/g  \n\n\n\n 替换某些行 :n1,n2 s/s1/s2/g  \n\n\n\n 搜索模式为 /string，搜索下一处为n，搜索上一处为N  \n\n\n\n 制定书签 mx, 但是看不到书签标记，而且只能用小写字母  \n\n\n\n 移动到某标签处 `x，1旁边的键  \n\n\n\n 移动到上次编辑文件的位置 `.  \n\n\n\n       .代表一个任意字符 *代表一个或多个字符的重复  \n\n\n\n\n三、编辑操作  \n\n\n\n 光标后插入a, 行尾插入A  \n\n\n\n 后插一行插入o，前插一行插入O  \n\n\n\n 删除字符插入s， 删除正行插入S  \n\n\n\n 光标前插入i，行首插入I  \n\n\n\n 删除一行dd，删除后进入插入模式cc或者S  \n\n\n\n 删除一个单词dw，删除一个单词进入插入模式cw  \n\n\n\n 删除一个字符x或者dl，删除一个字符进入插入模式s或者cl  \n\n\n\n 粘贴p，交换两个字符xp，交换两行ddp  \n\n\n\n 复制y，复制一行yy  \n\n\n\n 撤销u，重做ctrl + r，重复.  \n\n\n\n 智能提示 ctrl  n 或者 ctrl  p  \n\n\n\n 删除motion跨过的字符，删除并进入插入模式 c{motion}  \n\n\n\n 删除到下一个字符跨过的字符，删除并进入插入模式，不包括x字符 ctx  \n\n\n\n 删除当前字符到下一个字符处的所有字符，并进入插入模式，包括x字符，cfx  \n\n\n\n 删除motion跨过的字符，删除但不进入插入模式 d{motion}  \n\n\n\n 删除motion跨过的字符，删除但不进入插入模式，不包括x字符 dtx  \n\n\n\n 删除当前字符到下一个字符处的所有字符，包括x字符 dfx  \n\n\n\n 如果只是复制的情况时，将12-17条中的c或d改为y  \n\n\n\n 删除到行尾可以使用D或C  \n\n\n\n 拷贝当前行 yy或者Y  \n\n\n\n 删除当前字符 x  \n\n\n\n 粘贴 p  \n\n\n\n 可以使用多重剪切板，查看状态使用:reg，使用剪切板使用”，例如复制到w寄存器，”wyy，或者使用可视模式v”wy  \n\n\n\n 重复执行上一个作用使用.  \n\n\n\n 使用数字可以跨过n个区域，如y3x，会拷贝光标到第三个x之间的区域，3j向下移动3行  \n\n\n\n 在编写代码的时候可以使用]p粘贴，这样可以自动进行代码缩进  \n\n\n\n  \u0026gt;\u0026gt; 缩进所有选择的代码, \u0026lt;\u0026lt; 反缩进所有选择的代码  \n\n\n\n gd 移动到光标所处的函数或变量的定义处  \n\n\n\n K 在man里搜索光标所在的词  \n\n\n\n 合并两行 J  \n\n\n\n 若不想保存文件，而重新打开 :e!  \n\n\n\n 若想打开新文件 :e filename，然后使用ctrl + ^进行文件切换  \n\n\n\n四.窗口操作  \n\n\n\n 分隔一个窗口:split或者:vsplit  \n\n\n\n 创建一个窗口:new或者:vnew  \n\n\n\n 在新窗口打开文件:sf {filename}  \n\n\n\n 关闭当前窗口:close  \n\n\n\n 仅保留当前窗口:only  \n\n\n\n 到左边窗口 ctrl + w, h  \n\n\n\n 到右边窗口 ctrl + w, l  \n\n\n\n 到上边窗口 ctrl + w, k  \n\n\n\n 到下边窗口 ctrl + w, j  \n\n\n\n 到顶部窗口 ctrl + w, t  \n\n\n\n 到底部窗口 ctrl + w, b  \n\n\n\n五.宏操作  \n\n\n\n 开始记录宏操作q[a-z]，按q结束，保存操作到寄存器[a-z]中  \n\n\n\n @[a-z]执行寄存器[a-z]中的操作  \n\n\n\n @@执行最近一次记录的宏操作  \n\n\n\n六、可视操作  \n\n\n\n 进入块可视模式 ctrl + v  \n\n\n\n 进入字符可视模式 v  \n\n\n\n 进入行可视模式 V  \n\n\n\n 删除选定的块 d  \n\n\n\n 删除选定的块然后进入插入模式 c  \n\n\n\n 在选中的块同是插入相同的字符 I\u0026lt;String\u0026gt;ESC  \n\n\n\n七.跳到声明  \n\n\n\n [[ 向前跳到顶格第一个{    \n\n\n\n [] 向前跳到顶格第一个}  \n\n\n\n ]] 向后跳到顶格的第一个{  \n\n\n\n ]] 向后跳到顶格的第一个}  \n\n\n\n [{ 跳到本代码块的开头  \n\n\n\n ]} 跳到本代码块的结尾  \n\n\n\n八.挂起操作  \n\n\n\n 挂起Vim ctrl + z 或者 :suspend  \n\n\n\n 查看任务 在shell中输入 jobs  \n\n\n\n 恢复任务 fg [job number]（将后台程序放到前台）或者 bg [job number]（将前台程序放到后台）  \n\n\n\n 执行shell命令 :!command  \n\n\n\n 开启shell命令 :shell，退出该shell exit  \n\n\n\n 保存vim状态 :mksession name.vim  \n\n\n\n 恢复vim状态 :source name.vim  \n\n\n\n 启动vim时恢复状态 vim -S name.vim  \n\n\n\nvim配置\n\n\n  http://github.com/honmaple/vim\n\n\n初始化文件\n\n\n\n   ~/vim/vimrc\n\n\n\nset nocompatible\nfiletype off\nlet g:is_mac = has(\u0026#39;macunix\u0026#39;)\nlet g:is_linux = has(\u0026#39;unix\u0026#39;) \u0026amp;\u0026amp; !has(\u0026#39;macunix\u0026#39;) \u0026amp;\u0026amp; !has(\u0026#39;win32unix\u0026#39;)\nlet g:is_windows = has(\u0026#39;win32\u0026#39;) || has(\u0026#39;win64\u0026#39;)\nif has(\u0026#34;gui_running\u0026#34;)\n    let g:is_gui = 1\nelse\n    let g:is_gui = 0\nendif\nset rtp+=$HOME/.vim/bundle/Vundle.vim\n\n\nfunction s:require(file)\n    let l:file = $HOME . \u0026#39;/.vim/plugins/\u0026#39; . a:file . \u0026#39;.vim\u0026#39;\n    if filereadable(expand(l:file))\n        execute \u0026#39;source \u0026#39; . fnameescape(l:file)\n    else\n        echom l:file . \u0026#39; does not exist.\u0026#39;\n    endif\nendfunction\n\ncall vundle#begin()\nPlugin \u0026#39;VundleVim/Vundle.vim\u0026#39;\ncall vundle#end()            \u0026#34; required\nfiletype plugin indent on    \u0026#34; required\n\n\u0026#34; call plug#begin(\u0026#39;~/.vim/plugged\u0026#39;)\n\u0026#34; call plug#end()\n\n\nlet require_list = [\n  \\ \u0026#39;init-gui\u0026#39;,\n  \\ \u0026#39;init-ui\u0026#39;,\n  \\ \u0026#39;init-editor\u0026#39;,\n  \\ \u0026#39;init-buffer\u0026#39;,\n  \\ \u0026#39;init-file\u0026#39;,\n  \\ \u0026#39;init-auto-insert\u0026#39;,\n  \\ \u0026#39;init-git\u0026#39;,\n  \\ \u0026#39;init-develop\u0026#39;,\n  \\ \u0026#39;init-python\u0026#39;,\n  \\ \u0026#39;init-html\u0026#39;,\n  \\ \u0026#39;init-text\u0026#39;,\n  \\ \u0026#39;init-keybind\u0026#39;]\n\nfor file in require_list\n    call s:require(file)\nendfor\n全局设置\n\n\n   ~/git/.vim/plugins/init-gui.vim\n\n\n\n\u0026#34; 修改leader键\nlet mapleader = \u0026#39;,\u0026#39;\nlet g:mapleader = \u0026#39;,\u0026#39;\n\nfiletype on                    \u0026#34;启用文件类型侦测\nfiletype plugin on             \u0026#34;针对不同的文件类型加载对应的插件\nfiletype plugin indent on      \u0026#34;启用缩进\nsyntax on                      \u0026#34;代码高亮\nsyntax enable                      \u0026#34;代码高亮\nset t_Co=256\n\nset mouse=a                    \u0026#34;任何模式下启用鼠标\nset mousehide                  \u0026#34;Hide the mouse cursor while typing\nscriptencoding utf-8\n\u0026#34; 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉\n\u0026#34; set t_ti= t_te=\n\nif has(\u0026#39;clipboard\u0026#39;)\n    if has(\u0026#39;unnamedplus\u0026#39;)  \u0026#34; When possible use + register for copy-paste\n        set clipboard=unnamed,unnamedplus\n    else         \u0026#34; On mac and Windows, use * register for copy-paste\n        set clipboard=unnamed\n    endif\nendif\n\nset shortmess+=filmnrxoOtT          \u0026#34;去掉欢迎界面\nset guifont=Monospace\\ 12\nset viewoptions=folds,options,cursor,unix,slash \u0026#34; Better Unix / Windows compatibility\nset virtualedit=onemore             \u0026#34; Allow for cursor beyond last character\nset history=1000                    \u0026#34; Store a ton of history (default is 20)\n\u0026#34;set spell                           \u0026#34;启用拼写检查\nset hidden                          \u0026#34; Allow buffer switching without saving\nset iskeyword-=.                    \u0026#34; \u0026#39;.\u0026#39; is an end of word designator\nset iskeyword-=#                    \u0026#34; \u0026#39;#\u0026#39; is an end of word designator\nset iskeyword-=-                    \u0026#34; \u0026#39;-\u0026#39; is an end of word designator\n\n\u0026#34;set backup                          \u0026#34;设置备份文件\n\u0026#34;if has(\u0026#39;persistent_undo\u0026#39;)\n\u0026#34;    set undofile                \u0026#34; So is persistent undo ...\n\u0026#34;    set undolevels=1000         \u0026#34; Maximum number of changes that can be undone\n\u0026#34;    set undoreload=10000        \u0026#34; Maximum number lines to save for undo on a buffer reload\n\u0026#34;endif\n\nset tabpagemax=15               \u0026#34; Only show 15 tabs\nset showmode                    \u0026#34; Display the current mode\n\nset cursorline                  \u0026#34;高亮光标所在行\nset cuc                         \u0026#34;高亮光标所在列\nset colorcolumn=80\nhighlight clear SignColumn      \u0026#34; SignColumn should match background\nhighlight clear LineNr          \u0026#34; Current line number row will have same background color in relative mode\n\u0026#34;highlight clear CursorLineNr    \u0026#34; Remove highlight color from current line number\n\nif has(\u0026#39;cmdline_info\u0026#39;)\n    set ruler                   \u0026#34; Show the ruler\n    set rulerformat=%30(%=\\:b%n%y%m%r%w\\ %l,%c%V\\ %P%) \u0026#34; A ruler on steroids\n    set showcmd                 \u0026#34; Show partial commands in status line and\n\u0026#34; Selected characters/lines in visual mode\nendif\n\nif has(\u0026#39;statusline\u0026#39;)\n        set laststatus=2                         \u0026#34;启用状态栏信息\n        set statusline=%\u0026lt;%f\\                     \u0026#34; Filename\n        set statusline+=%w%h%m%r                 \u0026#34; Options\n    \u0026#34;  if !exists(\u0026#39;g:override_bundles\u0026#39;)\n        \u0026#34;set statusline+=%{fugitive#statusline()} \u0026#34; Git Hotness\n        \u0026#34;endif\n        set statusline+=\\ [%{\u0026amp;ff}/%Y]            \u0026#34; Filetype\n        set statusline+=\\ [%{getcwd()}]          \u0026#34; Current dir\n        set statusline+=%=%-14.(%l,%c%V%)\\ %p%%  \u0026#34; Right aligned file nav info\nendif\n\nset backspace=indent,eol,start  \u0026#34; Backspace for dummies\nset linespace=0                 \u0026#34; No extra spaces between rows\nset number                      \u0026#34;显示行号\nset relativenumber number       \u0026#34;设置相对行号\nau FocusLost * :set norelativenumber number\nau FocusGained * :set relativenumber\n\u0026#34; 插入模式下用绝对行号, 普通模式下用相对\nautocmd InsertEnter * :set norelativenumber number\nautocmd InsertLeave * :set relativenumber\nfunction! NumberToggle()\n    if(\u0026amp;relativenumber == 1)\n        set norelativenumber number\n    else\n        set relativenumber\n    endif\nendfunction\nset scrolloff=10                \u0026#34;在上下移动光标时，光标的上方或下方至少会保留显示的行数\nset showmatch                   \u0026#34;高亮显示匹配的括号\nset incsearch                   \u0026#34;在输入要搜索的文字时，实时匹配\nset hlsearch                    \u0026#34;高亮搜索\n\u0026#34;set winminheight=0              \u0026#34; Windows can be 0 line high\nset ignorecase                  \u0026#34;搜索模式里忽略大小写\nset smartcase                   \u0026#34;如果搜索模式包含大写字符，不使用\u0026#39;ignorecase\u0026#39; 选项，只有在输入搜索模式并且打开 \u0026#39;ignorecase\u0026#39; 选项时才会使用\nset wildmenu\n\u0026#34; 增强模式中的命令行自动完成操作\nset wildmode=list:longest,full  \u0026#34; Command \u0026lt;Tab\u0026gt; completion, list matches, then longest common part, then all.\nset whichwrap=b,s,h,l,\u0026lt;,\u0026gt;,[,]   \u0026#34; Backspace and cursor keys wrap too\n\u0026#34;让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)\nset completeopt=longest,menu\nset wildignore=*.o,*~,*.pyc,*.class\n\u0026#34;set scrolljump=5                \u0026#34; Lines to scroll when cursor leaves screen\n\u0026#34;set scrolloff=3                 \u0026#34; Minimum lines to keep above and below cursor\nset list\nset listchars=tab:›\\ ,trail:•,extends:#,nbsp:. \u0026#34; Highlight problematic whitespace\nset showcmd                       \u0026#34;在状态栏显示正在输入的命令\n\nset nowrap                      \u0026#34;设置不自动换行\n\u0026#34;set autoindent                  \u0026#34;打开自动缩进\nset shiftwidth=4                \u0026#34;换行时自动缩进宽度，可更改（宽度同tabstop）\nset expandtab                   \u0026#34;将Tab键转换为空格\nset tabstop=4                   \u0026#34;设置Tab键的宽度，可以更改，如：宽度为2\n\u0026#34;autocmd FileType haskell,rust setlocal nospell\n\nlet g:FoldMethod = 0\nfun! ToggleFold()\n    if g:FoldMethod == 0\n        exe \u0026#34;normal! zM\u0026#34;\n        let g:FoldMethod = 1\n    else\n        exe \u0026#34;normal! zR\u0026#34;\n        let g:FoldMethod = 0\n    endif\nendfun\n\nfunction! ToggleBG()\n    let s:tbg = \u0026amp;background\n    \u0026#34; Inversion\n    if s:tbg == \u0026#34;dark\u0026#34;\n        set background=light\n    else\n        set background=dark\n    endif\nendfunction\n\n\n\u0026#34;set smartindent                \u0026#34;启用智能对齐方式\n\u0026#34;set shiftround                 \u0026#34;缩进时，取整\n\u0026#34;set showtabline=1              \u0026#34;显示标签\nset smarttab                   \u0026#34;指定按一次backspace就删除shiftwidth宽度\n\u0026#34;set foldmethod=indent          \u0026#34;indent 折叠方式\n\u0026#34;set foldmethod=syntax\n\u0026#34;set foldenable                  \u0026#34;启用折叠\nset foldmethod=marker\n\u0026#34; 启动 vim 时关闭折叠代码\nset nofoldenable\n\u0026#34;set matchtime=5                \u0026#34;匹配括号高亮的时间（单位是十分之一秒）\n\u0026#34;set autoread                   \u0026#34;当文件在外部被修改，自动更新该文件\n\u0026#34;set autowrite                  \u0026#34;自动保存\n\u0026#34; set vb t_vb=                   \u0026#34;关闭提示音\n\n\u0026#34; 显示/隐藏菜单栏、工具栏、滚动条，可用 Ctrl + F11 切换\nif g:is_gui\n    winpos 100 10                 \u0026#34;指定窗口出现的位置，坐标原点在屏幕左上角\n    set guiheadroom=0\n    set lines=38 columns=120\n    set guioptions-=m\n    set guioptions-=T\n    set guioptions-=r\n    set guioptions-=L\n    nmap \u0026lt;silent\u0026gt; \u0026lt;c-F11\u0026gt; :if \u0026amp;guioptions =~# \u0026#39;m\u0026#39; \u0026lt;Bar\u0026gt;\n                \\set guioptions-=m \u0026lt;Bar\u0026gt;\n                \\set guioptions-=T \u0026lt;Bar\u0026gt;\n                \\set guioptions-=r \u0026lt;Bar\u0026gt;\n                \\set guioptions-=L \u0026lt;Bar\u0026gt;\n                \\else \u0026lt;Bar\u0026gt;\n                \\set guioptions+=m \u0026lt;Bar\u0026gt;\n                \\set guioptions+=T \u0026lt;Bar\u0026gt;\n                \\set guioptions+=r \u0026lt;Bar\u0026gt;\n                \\set guioptions+=L \u0026lt;Bar\u0026gt;\n                \\endif\u0026lt;CR\u0026gt;\nendif\nUI设置\n\n\n   ~/.vim/plugins/init-ui.vim\n\n\n\nPlugin \u0026#39;altercation/vim-colors-solarized\u0026#39;\nPlugin \u0026#39;tomasr/molokai\u0026#39;\n\u0026#34; Plugin \u0026#39;spf13/vim-colors\u0026#39;\nPlugin \u0026#39;bling/vim-airline\u0026#39;\nPlugin \u0026#39;powerline/fonts\u0026#39;\nPlugin \u0026#39;luochen1990/rainbow\u0026#39;\nPlugin \u0026#39;Yggdroot/indentLine\u0026#39;\nPlugin \u0026#39;liuchengxu/space-vim-dark\u0026#39;\nPlugin \u0026#39;mhinz/vim-startify\u0026#39;\n\n\n\nif $TERM=~\u0026#39;cons25\u0026#39;\n    colorscheme default\nelseif g:is_gui\n    set background=dark\n    \u0026#34; let g:solarized_termcolors=256\n    \u0026#34; let g:solarized_termtrans = 0\n    \u0026#34; colorscheme solarized\n    let g:molokai_original = 1\n    colorscheme molokai\nelse\n    set background=dark\n    let g:solarized_termcolors=256\n    let g:solarized_termtrans = 0\n    \u0026#34; colorscheme molokai\n    colorscheme solarized\nendif\n\u0026#34; indentLine {\n    \u0026#34; 用于显示对齐线\n    let g:indentLine_char = \u0026#34;┊\u0026#34;\n    let g:indentLine_first_char = \u0026#34;┊\u0026#34;\n    \u0026#34; 色块宽度\n    \u0026#34;let g:indent_guides_guide_size=1\n    \u0026#34; 设置终端对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色\n    let g:indentLine_color_term = 256\n\u0026#34; }\n\u0026#34; vim-airline {\n    \u0026#34; let g:airline#extensions#tabline#enabled = 1\n    let g:airline_powerline_fonts=1\n    if !exists(\u0026#39;g:airline_theme\u0026#39;)\n        let g:airline_theme = \u0026#39;dark\u0026#39;\n    endif\n\u0026#34; }\n\u0026#34; rainbow {\n    let g:rainbow_active = 1\n\u0026#34; }\n   \n编辑器设置\n\n\n   ~/.vim/plugins/init-editor.vim\n\n\n\nPlugin \u0026#39;tpope/vim-surround\u0026#39;\nPlugin \u0026#39;jiangmiao/auto-pairs\u0026#39;\nPlugin \u0026#39;vim-scripts/matchit.zip\u0026#39;\nPlugin \u0026#39;gcmt/wildfire.vim\u0026#39;\nPlugin \u0026#39;godlygeek/tabular\u0026#39;\nPlugin \u0026#39;majutsushi/tagbar\u0026#39;\nPlugin \u0026#39;kristijanhusak/vim-multiple-cursors\u0026#39;\nPlugin \u0026#39;tpope/vim-commentary\u0026#39;\nPlugin \u0026#39;Chiel92/vim-autoformat\u0026#39;\nPlugin \u0026#39;thinca/vim-quickrun\u0026#39;\n\n\u0026#34; tagbar {\n    \u0026#34;nmap tb :TlistClose\u0026lt;CR\u0026gt;:TagbarToggle\u0026lt;CR\u0026gt;\n    let g:tagbar_width=20                       \u0026#34;设置窗口宽度\n    let g:tagbar_left=0                         \u0026#34;在左侧窗口中显示\n    let g:tagbar_compact=1                      \u0026#34;不显示帮助信息\n    \u0026#34;tagbar_map_togglefold 打开tagbar变量  \u0026#34;o\u0026#34;\n    \u0026#34; set tags=./tags;\n    \u0026#34; 自动切换目录为当前编辑文件所在目录\n    \u0026#34; au BufRead,BufNewFile,BufEnter * cd %:p:h\n\u0026#34; }\n\u0026#34; wildfire {\n    let g:wildfire_objects = {\n            \\ \u0026#34;*\u0026#34; : [\u0026#34;i\u0026#39;\u0026#34;, \u0026#39;i\u0026#34;\u0026#39;, \u0026#34;i\\)\u0026#34;, \u0026#34;i\\]\u0026#34;, \u0026#34;i\\}\u0026#34;, \u0026#34;ip\u0026#34;,\u0026#34;it\u0026#34;],\n            \\ \u0026#34;html,xml\u0026#34; : [\u0026#34;at\u0026#34;,\u0026#34;i\u0026gt;\u0026#34;,\u0026#39;i\u0026#34;\u0026#39;,\u0026#34;i\\)\u0026#34;]}\n\u0026#34; }\n\u0026#34; vim-multiple-cursors {\n    \u0026#34; default mapping\n    let g:multi_cursor_next_key=\u0026#39;\u0026lt;c-n\u0026gt;\u0026#39;\n    let g:multi_cursor_prev_key=\u0026#39;\u0026lt;c-p\u0026gt;\u0026#39;\n    let g:multi_cursor_skip_key=\u0026#39;\u0026lt;c-x\u0026gt;\u0026#39;\n    let g:multi_cursor_quit_key=\u0026#39;\u0026lt;esc\u0026gt;\u0026#39;\n\u0026#34; }\n\u0026#34; Tabularize {\n    \u0026#34; 对齐\n    \u0026#34; nmap \u0026lt;Leader\u0026gt;a= :Tabularize /^[^=]*\\zs=\u0026lt;CR\u0026gt;\n    \u0026#34; vmap \u0026lt;Leader\u0026gt;a= :Tabularize /^[^=]*\\zs=\u0026lt;CR\u0026gt;\n\u0026#34; }\n\u0026#34; quickrun {\n    let g:quickrun_config = {\n    \\   \u0026#34;_\u0026#34; : {\n    \\       \u0026#34;outputter\u0026#34; : \u0026#34;message\u0026#34;,\n    \\   },\n    \\}\n    let g:quickrun_no_default_key_mappings = 1\n\u0026#34; }\nBuffer设置\n\n\n   ~/.vim/plugins/init-buffer.vim\n\n\n\nPlugin \u0026#39;bling/vim-bufferline\u0026#39;\nPlugin \u0026#39;sjl/gundo.vim\u0026#39;\n\n\u0026#34; gundo {\n    set undodir=~/.vim/.cache/undo\n    set undofile\n    set undolevels=10         \u0026#34; Maximum number of changes that can be undone\n    set undoreload=10        \u0026#34; Maximum number lines to save for undo on a buffer reload\n\u0026#34; }\n文件设置\n\n\n   ~/.vim/plugins/init-file.vim\n\n\n\nPlugin \u0026#39;ctrlpvim/ctrlp.vim\u0026#39;\nPlugin \u0026#39;tacahiroy/ctrlp-funky\u0026#39;\nPlugin \u0026#39;dyng/ctrlsf.vim\u0026#39;\nPlugin \u0026#39;scrooloose/nerdtree\u0026#39;\nPlugin \u0026#39;jistr/vim-nerdtree-tabs\u0026#39;\n\n\u0026#34; ctrlp {\n    let g:ctrlp_working_path_mode = \u0026#39;ra\u0026#39;\n    let g:ctrlp_map = \u0026#39;\u0026lt;c-p\u0026gt;\u0026#39;\n    let g:ctrlp_cmd = \u0026#39;CtrlP\u0026#39;\n\n    let g:ctrlp_custom_ignore = {\n        \\ \u0026#39;dir\u0026#39;:  \u0026#39;\\v[\\/]\\.(git|hg|svn|rvm)$\u0026#39;,\n        \\ \u0026#39;file\u0026#39;: \u0026#39;\\v\\.(exe|so|dll|zip|tar|tar.gz|pyc)$\u0026#39;,\n        \\ }\n\n    if executable(\u0026#39;ag\u0026#39;)\n        let s:ctrlp_fallback = \u0026#39;ag %s --nocolor -l -g \u0026#34;\u0026#34;\u0026#39;\n    elseif executable(\u0026#39;ack-grep\u0026#39;)\n        let s:ctrlp_fallback = \u0026#39;ack-grep %s --nocolor -f\u0026#39;\n    elseif executable(\u0026#39;ack\u0026#39;)\n        let s:ctrlp_fallback = \u0026#39;ack %s --nocolor -f\u0026#39;\n    else\n        let s:ctrlp_fallback = \u0026#39;find %s -type f\u0026#39;\n    endif\n    if exists(\u0026#34;g:ctrlp_user_command\u0026#34;)\n        unlet g:ctrlp_user_command\n    endif\n    let g:ctrlp_user_command = {\n                \\ \u0026#39;types\u0026#39;: {\n                \\ 1: [\u0026#39;.git\u0026#39;, \u0026#39;cd %s \u0026amp;\u0026amp; git ls-files . --cached --exclude-standard --others\u0026#39;],\n                \\ 2: [\u0026#39;.hg\u0026#39;, \u0026#39;hg --cwd %s locate -I .\u0026#39;],\n                \\ },\n                \\ \u0026#39;fallback\u0026#39;: s:ctrlp_fallback\n                \\ }\n\n\u0026#34; }\n\n\n\u0026#34; ctrlp-funky {\n    \u0026#34; CtrlP extensions\n    let g:ctrlp_extensions = [\u0026#39;funky\u0026#39;]\n    let g:ctrlp_funky_syntax_highlight = 1\n\u0026#34; }\n\u0026#34; ctrlsf {\n    \u0026#34; 工程内查找文件内容,先安装ag /the_silver_searcher\n    let g:ctrlsf_ackprg = \u0026#39;ag\u0026#39;\n    nmap     \u0026lt;C-F\u0026gt;f \u0026lt;Plug\u0026gt;CtrlSFPrompt\n    vmap     \u0026lt;C-F\u0026gt;f \u0026lt;Plug\u0026gt;CtrlSFVwordPath\n    vmap     \u0026lt;C-F\u0026gt;F \u0026lt;Plug\u0026gt;CtrlSFVwordExec\n    nmap     \u0026lt;C-F\u0026gt;n \u0026lt;Plug\u0026gt;CtrlSFCwordPath\n    nmap     \u0026lt;C-F\u0026gt;p \u0026lt;Plug\u0026gt;CtrlSFPwordPath\n\u0026#34; }\n\n\u0026#34; NerdTree {\n    \u0026#34; 自动开启nerdtree\n    let g:nerdtree_tabs_open_on_console_startup = 0\n    let g:nerdtree_tabs_open_on_gui_startup = 0\n    \u0026#34;当打开vim且没有文件时自动打开NERDTree\n    \u0026#34; if !g:is_gui\n    \u0026#34;     autocmd StdinReadPre * let s:std_in=1\n    \u0026#34;     autocmd VimEnter * if argc() == 0 \u0026amp;\u0026amp; !exists(\u0026#34;s:std_in\u0026#34;) | NERDTree | endif\n    \u0026#34; endif\n    \u0026#34;显示文件\n    let NERDTreeShowFiles=1\n    let NERDTreeIgnore=[\u0026#39;\\.py[cd]$\u0026#39;, \u0026#39;\\~$\u0026#39;, \u0026#39;\\.swo$\u0026#39;, \u0026#39;\\.swp$\u0026#39;, \u0026#39;^\\.git$\u0026#39;, \u0026#39;^\\.hg$\u0026#39;, \u0026#39;^\\.svn$\u0026#39;, \u0026#39;\\.bzr$\u0026#39;]\n    \u0026#34;显示隐藏文件\n    let NERDTreeShowHidden=0\n    let NERDTreeChDirMode=0\n    let NERDTreeQuitOnOpen=1\n    let NERDTreeMouseMode=2\n    let NERDTreeKeepTreeInNewTab=1\n    let NERDTreeWinSize=22\n    let NERDTreeWinPos=\u0026#34;left\u0026#34;\n    \u0026#34;高亮显示当前文件或目录\n    let NERDTreeHightCursorline=1\n    \u0026#34;不显示\u0026#39;Bookmarks\u0026#39; label \u0026#39;Press ? for help\u0026#39;\n    let NERDTreeMinimalUI=1\n    \u0026#34; s/v 分屏打开文件\n    let g:NERDTreeMapOpenSplit = \u0026#39;s\u0026#39;\n    let g:NERDTreeMapOpenVSplit = \u0026#39;v\u0026#39;\n\u0026#34; }","index":108,"permalink":"https://honmaple.me/articles/2015/12/vim操作及配置.html","summary":"\n\u003cp\u003e\nvim号称编辑器之神，最近也一直使用vim写代码，最大的印象就是快，无论是临时修改文件，还是专门写代码.现在记录vim主要操作快捷键和我的vim配置 \n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003evim操作  \u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e一、移动光标  \u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n 左移h、右移l、下移j、上移k    \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 向下翻页ctrl \u003cdel\u003e f，向上翻页ctrl \u003c/del\u003e b  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 向下翻半页ctrl \u003cdel\u003e d，向上翻半页ctrl \u003c/del\u003e u  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动到行尾$，移动到行首0（数字），移动到行首第一个字符处^  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动光标到下一个句子 ），移动光标到上一个句子（  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动到段首{，移动到段尾}  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动到下一个词w，移动到上一个词b  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动到文档开始gg，移动到文档结束G  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动到匹配的{}.().[]处%  \n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 跳到第n行...\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e","title":"vim操作及配置"},{"content":"tornado中默认没有session的实现,虽然默认的 set_secure_cookie 已经足够安全了,但更安全的应该是客户端保存session_id,服务端保存对应的信息\n\n\n\n注:保存在redis中的经测试是可以的,保存在内存中的貌似还不行\n\n\n\n给出源码:\n\n\nfrom uuid import uuid4\nfrom redis import StrictRedis\nfrom functools import wraps\nfrom datetime import datetime, timedelta\nfrom pytz import timezone\n\n\ndef singleton(cls):\n    instances = {}\n\n    @wraps(cls)\n    def getinstance(*args, **kw):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n\n    return getinstance\n\n\ndef current_time(tz=None):\n    if tz is None:\n        tz = \u0026#39;UTC\u0026#39;\n    return datetime.now(timezone(tz))\n\n\nclass CoreSession(object):\n    def __setitem__(self, key, value):\n        \u0026#39;\u0026#39;\u0026#39;\n        session[\u0026#39;username\u0026#39;] = \u0026#39;hello\u0026#39;\n        \u0026#39;\u0026#39;\u0026#39;\n        return self.set(key, value)\n\n    def __getitem__(self, key):\n        return self.get(key)\n\n    def get_or_set(self, key, value):\n        if not self.get(key):\n            self.set(key, value)\n        return self.get(key)\n\n\n@singleton\nclass MemorySession(CoreSession):\n    def __init__(self):\n        \u0026#39;\u0026#39;\u0026#39;\n        self._client = {\u0026#39;session_id1\u0026#39;:{key:value},\n                        \u0026#39;session_id2\u0026#39;:{key:value}}\n        \u0026#39;\u0026#39;\u0026#39;\n        self._client = {}\n\n    def init(self, session_id, expires_days=30):\n        self.session_id = \u0026#39;session:{}\u0026#39;.format(session_id)\n        self.expires_days = expires_days\n        if self.session_id not in self._client:\n            self._client[self.session_id] = {\n                \u0026#39;is_authenticated\u0026#39;: False,\n                \u0026#39;expire\u0026#39;: current_time() + timedelta(days=self.expires_days)\n            }\n        print(self.session_id)\n\n    def set(self, key, value):\n        self._client[self.session_id][key] = value\n\n    def get(self, key):\n        return self._client[self.session_id].get(key)\n\n    def pop(self, key):\n        return self._client[self.session_id].pop(key, None)\n\n    def remove_expires(self):\n        expire_sessions = []\n        for key, value in self._client.items():\n            if value[\u0026#39;expire\u0026#39;] \u0026gt; current_time():\n                expire_sessions.append(key)\n\n    def clear(self):\n        del self._client[self.session_id]\n\n\n@singleton\nclass RedisSession(CoreSession):\n    def __init__(self):\n        self._client = StrictRedis(\n            host=\u0026#39;localhost\u0026#39;,\n            port=6379,\n            db=0,\n            password=\u0026#39;redis\u0026#39;,\n            decode_responses=True)\n\n    def init(self, session_id, expires_days=30):\n        self.session_id = \u0026#39;session:{}\u0026#39;.format(session_id)\n        self.expires_days = expires_days\n        if not self._client.exists(self.session_id):\n            self._client.hset(self.session_id, \u0026#39;is_authenticated\u0026#39;, 0)\n            self._client.expire(self.session_id, self.expires_days * 30 * 3600)\n\n    def set(self, key, value):\n        return self._client.hset(self.session_id, key, value)\n\n    def get(self, key):\n        return self._client.hget(self.session_id, key)\n\n    def pop(self, key):\n        return self._client.hdel(self.session_id, key)\n\n    def clear(self):\n        return self._client.delete(self.session_id)\n\n\nclass Session(object):\n    def __init__(self, request_handler):\n        self.request_handler = request_handler\n        self.session_id = self.request_handler.get_secure_cookie(\u0026#34;session\u0026#34;)\n        if not self.session_id:\n            self.session_id = str(uuid4())\n            self.request_handler.set_secure_cookie(\u0026#34;session\u0026#34;, self.session_id)\n        # get cookies is bytes\n        if isinstance(self.session_id, bytes):\n            self.session_id = self.session_id.decode()\n        self._session = RedisSession()\n        # self._session = MemorySession()\n        self._session.init(self.session_id)\n\n    def __setitem__(self, key, value):\n        self._session[key] = value\n\n    def __getitem__(self, key):\n        return self._session[key]\n\n    def clear(self):\n        self.request_handler.clear_cookie(self.session_id)\n        return self._session.clear()","index":109,"permalink":"https://honmaple.me/articles/2017/08/tornado中session实现.html","summary":"\n\u003cp\u003e\ntornado中默认没有session的实现,虽然默认的 \u003cb\u003eset_secure_cookie\u003c/b\u003e 已经足够安全了,但更安全的应该是客户端保存session_id,服务端保存对应的信息\n\u003c/p\u003e\n\n\u003cp\u003e\n注:保存在redis中的经测试是可以的,保存在内存中的貌似还不行\n\u003c/p\u003e\n\n\u003cp\u003e\n给出源码:\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e uuid \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e uuid4\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e redis \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e StrictRedis\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e functools \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e wraps\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e datetime \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e datetime, timedelta\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pytz \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e timezone\n\n\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esingleton...\u003c/span\u003e\u003c/pre\u003e","title":"tornado中session实现"},{"content":"最近打开虚拟机中的thunar时总是不能在界面上显示回收站，而我将 rm 修改成了\n\nmv to Trash\n\n经常会清空回收站,所以找了一下解决办法\n\n\n\n参考问题\n\n\n\n办法很简单\n\nsudo pacman -S gvfs\n\n\nok","index":110,"permalink":"https://honmaple.me/articles/2016/10/thunar不显示回收站解决.html","summary":"\n\u003cp\u003e\n最近打开虚拟机中的thunar时总是不能在界面上显示回收站，而我将 \u003cb\u003erm\u003c/b\u003e 修改成了\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003emv to Trash\u003c/pre\u003e\n\u003cp\u003e\n经常会清空回收站,所以找了一下解决办法\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca href=\"https://bbs.archlinux.org/viewtopic.php?id=128637\"\u003e参考问题\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n办法很简单\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003esudo pacman -S gvfs\u003c/pre\u003e\n\n\u003cp\u003e\nok\n\u003c/p\u003e","title":"thunar不显示回收站解决"},{"content":"使用 --exclude + 需要排除的目录\n\n\n\n示例:\n\ntar zcvf hello.tar.gz --exclude=\u0026#34;**/__pycache__\u0026#34; maple/ manager.py\n\n\n注意 :\n--exclude 参数需要在要打包的文件或目录前,否则不起作用,另外排除的目录后不能加 /\n\n\n\n--exclude 同样用于 排除文件\n\n\ntar zcvf hello.tar.gz --exclude=\u0026#34;*.pyc\u0026#34; maple/ manager.py","index":111,"permalink":"https://honmaple.me/articles/2016/07/tar打包排除目录.html","summary":"\n\u003cp\u003e\n使用 \u003cb\u003e--exclude\u003c/b\u003e + 需要排除的目录\n\u003c/p\u003e\n\n\u003cp\u003e\n示例:\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003etar zcvf hello.tar.gz --exclude\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;**/__pycache__\u0026#34;\u003c/span\u003e maple/ manager.py\u003c/pre\u003e\n\n\u003cp\u003e\n\u003cb\u003e注意\u003c/b\u003e :\n--exclude 参数需要在要打包的文件或目录前,否则不起作用,另外排除的目录后不能加 \u003cb\u003e/\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n--exclude 同样用于 \u003cb\u003e排除文件\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003etar zcvf hello\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etar\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egz \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eexclude\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e*.pyc\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"tar打包排除目录"},{"content":"supervisor安装请参考flask应用部署——安装环境\n\n\n生成配置文件\n# cd /etc\n# mkdir -p supervisord/conf.d\n# echo_supervisord_conf \u0026gt; /etc/supervisord/supervisord.conf\n\n修改supervisord.conf\n# vim supervisord.conf # G直接跳到最后一行\n\n取消下面注释并修改\n[include]\nfiles = /etc/supervisord/conf.d/*.ini\n\nok，现在可以在/etc/supervisord/conf.d/目录下创建配置文件了\n# vim honmaple.com.ini\n\n输入以下内容\n# 进程的名字\n[program:website]\n# 命令\ncommand=/home/www/honmaple.com/venv/bin/gunicorn run:app -c /home/www/honmaple.com/gunicorn.conf\n# 网站目录\ndirectory=/home/www/honmaple.com\n# 进程所属用户\nuser=www\n# 自动重启设置。\nautostart=true\nautorestart=true\n# 日志存放位置。\nstdout_logfile=/home/www/honmaple.com/logs/gunicorn_supervisor.log\n\n上面有几处需要注意的地方\n\n创建新用户www\n# useradd www\n# passwd www #设置密码\n# su - www\n$ cd\n$ mkdir -p honmaple.com/logs\n\n建立虚拟环境(honmaple.com/目录下)\n$ virtualenv-3.4 venv\n$ . venv/bin/activate\n\ngunicorn配置\n# gunicorn.conf\nworkers = 4\nbind = \u0026#39;127.0.0.1:8000\u0026#39;\n\n简单的web应用\n#run.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\u0026#39;/\u0026#39;)\ndef hello_world():\n    return \u0026#39;Hello World!\u0026#39;\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    app.run()\n\n加载supervisor配置\n# supervisord -c /etc/supervisord/supervisord.conf\n# supervisorctl -c /etc/supervisord/supervisord.conf reload\n\nsupervisor遇到的问题\n\n提示\nError: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.\nFor help, use /usr/bin/supervisord -h\n...fail!\n\n解决办法\n# unlink /tmp/supervisor.sock  \n\n提示\nerror: \u0026lt;class \u0026#39;socket.error\u0026#39;\u0026gt;, [Errno 111] Connection refused: file: /usr/lib64/python2.6/socket.py line: 567\n\n解决办法\n# supervisord -c /etc/supervisord/supervisord.conf\n# supervisorctl -c /etc/supervisord/supervisord.conf reload\n\n提示\nERROR (no such process),请仔细查看配置文件是否有误","index":112,"permalink":"https://honmaple.me/articles/2016/01/supervisor使用.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003esupervisor安装请参考\u003ca href=\"https://honmaple.com/blog/pages/31\"\u003eflask应用部署——安装环境\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003e生成配置文件\u003c/h4\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# cd /etc\n# mkdir -p supervisord/conf.d\n# echo_supervisord_conf \u0026gt; /etc/supervisord/supervisord.conf\n\u003c/pre\u003e\n\u003ch4\u003e修改supervisord.conf\u003c/h4\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# vim supervisord.conf # G直接跳到最后一行\n\u003c/pre\u003e\n\u003cp\u003e取消下面注释并修改\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e[include]\nfiles = /etc/supervisord/conf.d/*.ini\n\u003c/pre\u003e\n\u003cp\u003eok，现在可以在...\u003c/p\u003e","title":"supervisor使用"},{"content":"Table of Contents\nssh连接virtualbox中的虚拟机\nssh开启私钥转发\n生成公钥\n\n\nssh连接virtualbox中的虚拟机\n\n   [参考文档](my.oschina.net/dmdgeeker/blog/229044)\n\n\n\n\n 从机设置\n\n$ sudo pacman -S openssh\n$ sudo systemctl start sshd # 可能还需要一些其他的安全设置，这里不再多说\n\n\n 虚拟机设置: 设置里，选择网络，端口转发，主机端口9022,从机端口22\n\n\n\n 连接虚拟机\n\n$ ssh -p 9022 username@127.0.0.1\n\n\nssh开启私钥转发\n\n\n   开启私钥转发可以在登录服务器后，即可直接克隆私有仓库 git clone git@xxx.com/somename.git，或者将服务器作为跳板机登录其它机器而不用手动添加ssh私钥\n\n\n\n\n\n\n 添加配置\n\n# ~/.ssh/config\nForwardAgent yes\n\n\n\n 登陆机器\n\nssh -A xxx@server\n\n\n\n 查看转发\n     本地机器\n\nssh-add -L\n\n\n     正常会显示登录机器所使用的公钥，如果未显示，添加私钥后重新登陆\n\nssh-add ~/.ssh/xxxx\nssh -A xxx@server\n\n\n\n 测试结果\n     在远程机器上直接登陆其它机器\n\nssh xxx@server2\n\n\n生成公钥\nssh-keygen -m PEM -t rsa -b 4096 -C \u0026#34;xx@email.com\u0026#34; -f ~/.ssh/id_rsa_xxx","index":113,"permalink":"https://honmaple.me/articles/2016/05/ssh笔记.html","summary":"\n\u003ch2 id=\"heading-1\"\u003essh连接virtualbox中的虚拟机\u003c/h2\u003e\n\u003cp\u003e\n   [参考文档](\u003ca href=\"my.oschina.net/dmdgeeker/blog/229044)\"\u003emy.oschina.net/dmdgeeker/blog/229044)\u003c/a\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 从机设置\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pacman -S openssh\n$ sudo systemctl start sshd \u003cspan style=\"color:#75715e\"\u003e# 可能还需要一些其他的安全设置，这里不再多说\u003c/span\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 虚拟机设置: 设置里，选择网络，端口转发，主机端口9022,从机端口22\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 连接虚拟机\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ ssh -p \u003cspan style=\"color:#ae81ff\"\u003e9022\u003c/span\u003e username@127.0.0...\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"ssh笔记"},{"content":"Table of Contents\n为什么需要这个需求?\n如何实现?\n具体使用\n\n多个实例\n单个实例\n排除字段\n仅包括字段\n关系查询深度\n\n\n\n为什么需要这个需求?\n\n  sqlalchemy 是个好东西,虽然其文档犹如老太婆的裹脚布--又臭又长,饱受诟病\n\n\n\n  使用 restful 时sqlalchemy返回的是一个 object 类，假设前后端分离,前端无法处理\n\n\n如何实现?\n\n  直接给出代码\n\nclass Serializer(object):\n\n    def __init__(self, instance, many=False, include=[], exclude=[], depth=2):\n        self.instance = instance\n        self.many = many\n        self.include = include\n        self.exclude = exclude\n        self.depth = depth\n\n    @property\n    def data(self):\n        if self.include and self.exclude:\n            raise ValueError(\u0026#39;include and exclude can\\\u0026#39;t work together\u0026#39;)\n        if self.many:\n            if isinstance(self.instance, list):\n                return self._serializerlist(self.instance, self.depth)\n            pageinfo = {\n                \u0026#39;items\u0026#39;: True,\n                \u0026#39;pages\u0026#39;: self.instance.pages,\n                \u0026#39;has_prev\u0026#39;: self.instance.has_prev,\n                \u0026#39;page\u0026#39;: self.instance.page,\n                \u0026#39;has_next\u0026#39;: self.instance.has_next,\n                \u0026#39;iter_pages\u0026#39;: list(self.instance.iter_pages(left_edge=1,\n                                                            left_current=2,\n                                                            right_current=3,\n                                                            right_edge=1))\n            }\n            return {\u0026#39;data\u0026#39;: self._serializerlist(self.instance.items,\n                                                 self.depth),\n                    \u0026#39;pageinfo\u0026#39;: pageinfo}\n        return self._serializer(self.instance, self.depth)\n\n    def _serializerlist(self, instances, depth):\n        results = []\n        for instance in instances:\n            result = self._serializer(instance, depth)\n            if result:\n                results.append(result)\n        return results\n\n    def _serializer(self, instance, depth):\n        result = {}\n        if depth == 0:\n            return result\n        depth -= 1\n        model_class = self.get_model_class(instance)\n        inp = self.get_inspect(model_class)\n        model_data = self._serializer_model(inp, instance, depth)\n        relation_data = self._serializer_relation(inp, instance, depth)\n        result.update(model_data)\n        result.update(relation_data)\n        return result\n\n    def _serializer_model(self, inp, instance, depth):\n        result = {}\n        model_columns = self.get_model_columns(inp)\n        for column in model_columns:\n            result[column] = getattr(instance, column)\n        return result\n\n    def _serializer_relation(self, inp, instance, depth):\n        result = {}\n        relation_columns = self.get_relation_columns(inp)\n        for relation in relation_columns:\n            column = relation.key\n            if relation.direction in [ONETOMANY, MANYTOMANY]:\n                children = getattr(instance, column)\n                if relation.lazy == \u0026#39;dynamic\u0026#39;:\n                    children = children.all()\n                result[column] = Serializer(\n                    children,\n                    many=True,\n                    exclude=[relation.back_populates],\n                    depth=depth).data\n            else:\n                child = getattr(instance, column)\n                if relation.lazy == \u0026#39;dynamic\u0026#39;:\n                    child = child.first()\n                result[column] = Serializer(\n                    child,\n                    many=False,\n                    exclude=[relation.back_populates],\n                    depth=depth).data\n        return result\n\n    def get_model_class(self, instance):\n        return getattr(instance, \u0026#39;__class__\u0026#39;)\n\n    def get_inspect(self, model_class):\n        return inspect(model_class)\n\n    def get_model_columns(self, inp):\n        if self.include:\n            model_columns = [\n                column.name for column in inp.columns\n                if column.name in self.include\n            ]\n        elif self.exclude:\n            model_columns = [\n                column.name for column in inp.columns\n                if column.name not in self.exclude\n            ]\n        else:\n            model_columns = [column.name for column in inp.columns]\n\n        return model_columns\n\n    def get_relation_columns(self, inp):\n        if self.include:\n            relation_columns = [\n                relation for relation in inp.relationships\n                if relation.key in self.include\n            ]\n        elif self.exclude:\n            relation_columns = [\n                relation for relation in inp.relationships\n                if relation.key not in self.exclude\n            ]\n        else:\n            relation_columns = [relation for relation in inp.relationships]\n        return relation_columns\n\n具体使用\n\n  使用上很简单(以flask-sqlalchemy为例),原生sqlalchemy类似\n\n\n多个实例\nposts = Post.query.all()\nserializer = Seralizer(posts,many=True)\ndata = serializer.data\n\n单个实例\npost = Post.query.first()\nserializer = Seralizer(post,many=False)\ndata = serializer.data\n\n排除字段\nserializer = Seralizer(post,exclude=[\u0026#39;title\u0026#39;])\n\n仅包括字段\nserializer = Seralizer(post,include=[\u0026#39;title\u0026#39;])\n\n关系查询深度\nserializer = Seralizer(post,depth=3)\n\n\n\n depth\n     默认为2","index":114,"permalink":"https://honmaple.me/articles/2016/12/sqlalchemy序列化为json.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e为什么需要这个需求?\u003c/h1\u003e\n\u003cp\u003e\n  \u003cb\u003esqlalchemy\u003c/b\u003e 是个好东西,虽然其文档犹如\u003ci\u003e老太婆的裹脚布--又臭又长\u003c/i\u003e,饱受诟病\n\u003c/p\u003e\n\n\u003cp\u003e\n  使用 \u003cb\u003erestful\u003c/b\u003e 时sqlalchemy返回的是一个 \u003cb\u003eobject\u003c/b\u003e 类，假设前后端分离,前端无法处理\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e如何实现?\u003c/h1\u003e\n\u003cp\u003e\n  直接给出代码\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSerializer\u003c/span\u003e(object):\n\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self, instance, many\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFalse, include\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[], exclude\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[], depth\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e):\n        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einstance \u003cspan style=\"color:#f92672\"\u003e=...\u003c/span\u003e\u003c/pre\u003e","title":"sqlalchemy序列化为json"},{"content":"类型名称\npython类型\n描述\n\n\n\n\n\nInteger\nint\n常规整形，通常为32位\n\n\n\n\nSmallInteger\nint\n短整形，通常为16位\n\n\n\n\nBigInteger\nint或long\n精度不受限整形\n\n\n\n\nFloat\nfloat\n浮点数\n\n\n\n\nNumeric\n\ndecimal.Decimal\n\n定点数\n\n\nString\nstr\n可变长度字符串\n\n\n\n\nText\nstr\n可变长度字符串，适合大量文本\n\n\n\n\nUnicode\nunicode\n可变长度Unicode字符串\n\n\n\n\nBoolean\nbool\n布尔型\n\n\n\n\nDate\ndatetime.date\n日期类型\n\n\n\n\nTime\ndatetime.time\n时间类型\n\n\n\n\nInterval\ndatetime.timedelta\n时间间隔\n\n\n\n\nEnum\nstr\n字符列表\n\n\n\n\nPickleType\n任意Python对象\n自动Pickle序列化\n\n\n\n\nLargeBinary\nstr\n二进制\n\n\n\n\n\n\n可选参数\t描述\n\n\n\n\n primarykey\t\n  如果设置为True，则为该列表的主键\n\n\n\n unique\t\n  如果设置为True，该列不允许相同值\n\n\n\n index\t\n  如果设置为True，为该列创建索引，查询效率会更高\n\n\n\n nullable\n  如果设置为True，该列允许为空。如果设置为False，该列不允许空值\n\n\n\n default\t\n  定义该列的默认值","index":115,"permalink":"https://honmaple.me/articles/2016/07/sqlalchemy常见数据类型及配置.html","summary":"\n\u003ctable\u003e\n\n\u003ctr\u003e\n\u003cth\u003e类型名称\u003c/th\u003e\n\u003cth\u003epython类型\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eInteger\u003c/td\u003e\n\u003ctd\u003eint\u003c/td\u003e\n\u003ctd\u003e常规整形，通常为32位\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSmallInteger\u003c/td\u003e\n\u003ctd\u003eint\u003c/td\u003e\n\u003ctd\u003e短整形，通常为16位\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBigInteger\u003c/td\u003e\n\u003ctd\u003eint或long\u003c/td\u003e\n\u003ctd\u003e精度不受限整形\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFloat\u003c/td\u003e\n\u003ctd\u003efloat\u003c/td\u003e\n\u003ctd\u003e浮点数\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNumeric\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003edecimal.Decimal\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e定点数\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003estr\u003c/td\u003e\n\u003ctd\u003e可变长度字符串\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eText\u003c/td\u003e\n\u003ctd\u003estr\u003c/td\u003e\n\u003ctd\u003e可变长度字符串，适合大量文本\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eUnicode\u003c/td\u003e\n\u003ctd\u003eunicode\u003c/td\u003e\n\u003ctd\u003e可变长度Unicode字符串\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBoolean\u003c/td\u003e\n\u003ctd\u003ebool\u003c/td\u003e\n\u003ctd\u003e布尔型\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDate\u003c/td\u003e\n\u003ctd\u003edatetime...\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e","title":"sqlalchemy常见数据类型及配置"},{"content":"sqlalchemy\n\n系统的学一下sqlalchemyA,不过没有中文文档,只能用我的渣英文能力慢慢看原文档了\n\n数据库连接\n\u0026gt;\u0026gt;\u0026gt; from sqlalchemy import create_engine\n\u0026gt;\u0026gt;\u0026gt; engine = create_engine(\u0026#39;sqlite:///:memory:\u0026#39;, echo=True)\n\necho为True输出日志\n\n各种数据库连接方式\ndialect+driver://username:password@host:port/database\n\n\nPostgresql\n# default\nengine = create_engine(\u0026#39;postgresql://scott:tiger@localhost/mydatabase\u0026#39;)\n# psycopg2\nengine = create_engine(\u0026#39;postgresql+psycopg2://scott:tiger@localhost/mydatabase\u0026#39;)\n# pg8000\nengine = create_engine(\u0026#39;postgresql+pg8000://scott:tiger@localhost/mydatabase\u0026#39;)\n\n\nMySQL\n# default\nengine = create_engine(\u0026#39;mysql://scott:tiger@localhost/foo\u0026#39;)\n# mysql-python\nengine = create_engine(\u0026#39;mysql+mysqldb://scott:tiger@localhost/foo\u0026#39;)\n# MySQL-connector-python\nengine = create_engine(\u0026#39;mysql+mysqlconnector://scott:tiger@localhost/foo\u0026#39;)\n# OurSQL\nengine = create_engine(\u0026#39;mysql+oursql://scott:tiger@localhost/foo\u0026#39;)\n\n\nOracle\nengine = create_engine(\u0026#39;oracle://scott:tiger@127.0.0.1:1521/sidname\u0026#39;)\nengine = create_engine(\u0026#39;oracle+cx_oracle://scott:tiger@tnsname\u0026#39;)\n\n\nSQLite\n# sqlite://\u0026lt;nohostname\u0026gt;/\u0026lt;path\u0026gt;\n# where \u0026lt;path\u0026gt; is relative:\nengine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;)\n#Unix/Mac - 4 initial slashes in total\nengine = create_engine(\u0026#39;sqlite:////absolute/path/to/foo.db\u0026#39;)\n#Windows\nengine = create_engine(\u0026#39;sqlite:///C:\\\\path\\\\to\\\\foo.db\u0026#39;)\n#Windows alternative using raw string\nengine = create_engine(r\u0026#39;sqlite:///C:\\path\\to\\foo.db\u0026#39;)\n# To use a SQLite :memory: database, specify an empty URL:\nengine = create_engine(\u0026#39;sqlite://\u0026#39;)\n\n\n\n声明样式\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String\n\nBase = declarative_base()\nclass User(Base):\n     __tablename__ = \u0026#39;users\u0026#39;\n\n     id = Column(Integer, primary_key=True)\n     name = Column(String)\n     fullname = Column(String)\n     password = Column(String)\n\n     def __repr__(self):\n        return \u0026#34;\u0026lt;User(name=\u0026#39;%s\u0026#39;, fullname=\u0026#39;%s\u0026#39;, password=\u0026#39;%s\u0026#39;)\u0026gt;\u0026#34; % (\n                             self.name, self.fullname, self.password)\n\n样式参数说明\n\n\n\n\n\n\n\n\n\n\n\n \n说明\n\n\n\n\n**\\_tablename\\_\\_**\n表名\n\n\n\n\n字段类型及说明\n\n字段类型及文档\n\n\nGeneric Types\n\n\n\n\n\n\n\n\n\n\n\n\n字段类型\n说明\n\n\n\n\n\n\nBigInteger\n大数\n\n\n\n\nBoolean(createconstraint=True, name=None, \\_createevents=True)\n布尔\n\n\n\n\nData\n \n\n\n\n\nDateTime(timezone=False)\n时间\n\n\n\n\nEnum(\\*enums, \\*\\*kw)\n枚举\n\n\n\n\nFloat(precision=None, asdecimal=False, decimalreturnscale=None, \\*\\*kwargs)\n浮点型\n\n\n\n\nInteger\n整型\n\n\n\n\nInterval(native=True, secondprecision=None, dayprecision=None)\n时间间隔\n\n\n\n\nLargeBinary(length=None)\n二进制大对象\n\n\n\n\nMatchType(createconstraint=True, name=None, \\_createevents=True)\n \n\n\n\n\nNumeric(precision=None, scale=None, decimalreturnscale=None, asdecimal=True)\n \n\n\n\n\nPickleType(protocol=2, pickler=None, comparator=None)\n \n\n\n\n\nSchemaType(name=None, schema=None, metadata=None, inheritschema=False, quote=None, \\_createevents=True)\n \n\n\n\n\nSmallInteger\n小整型\n\n\n\n\nString(length=None, collation=None, convertunicode=False, unicodeerror=None, \\_warnonbytestring=False)\n字符串\n\n\n\n\nText(length=None, collation=None, convertunicode=False, unicodeerror=None, \\_warnonbytestring=False)\n文本对象\n\n\n\n\nTime(timezone=False)\n时间\n\n\n\n\nUnicode(length=None, \\*\\*kwargs)\n \n\n\n\n\nUnicodeText(length=None, \\*\\*kwargs)\n \n\n\n\n\n\nSQL Standard Types\n\n\n\n\n\n\n\n\n\n\n\n\n字段类型\n说明\n\n\n\n\n\n\nBIGINT\n \n\n\n\n\nBINARY(length=None)\n \n\n\n\n\nBLOB(length=None)\n \n\n\n\n\nBOOLEAN(createconstraint=True, name=None, \\_createevents=True)\n \n\n\n\n\nCHAR(length=None, collation=None, convertunicode=False, unicodeerror=None, \\_warnonbytestring=False)\n \n\n\n\n\nCLOB(length=None, collation=None, convertunicode=False, unicodeerror=None, \\_warnonbytestring=False)\n \n\n\n\n\nDATE\n \n\n\n\n\nDATETIME(timezone=False)\n \n\n\n\n\nDECIMAL(precision=None, scale=None, decimalreturnscale=None, asdecimal=True)\n \n\n\n\n\nFLOAT(precision=None, asdecimal=False, decimalreturnscale=None, \\*\\*kwargs)\n \n\n\n\n\nINT\n \n\n\n\n\nINTEGER\n \n\n\n\n\nNCHAR(length=None, \\*\\*kwargs)\n \n\n\n\n\nNVARCHAR(length=None, \\*\\*kwargs)\n \n\n\n\n\nNUMERIC(precision=None, scale=None, decimalreturnscale=None, asdecimal=True)¶\n \n\n\n\n\nREAL(precision=None, asdecimal=False, decimalreturnscale=None, \\*\\*kwargs)\n \n\n\n\n\nSMALLINT\n \n\n\n\n\nTEXT(length=None, collation=None, convertunicode=False, unicodeerror=None, \\_warnonbytestring=False\n \n\n\n\n\nTIME(timezone=False)\n \n\n\n\n\nTIMESTAMP(timezone=False)\n \n\n\n\n\nVARBINARY(length=None)\n \n\n\n\n\nVARCHAR(length=None, collation=None, convertunicode=False, unicodeerror=None, \\_warnonbytestring=False)\n \n\n\n\n\n\n\n创建表\nBase.metadata.create_all(engine)\n\n为表创建实例\n\u0026gt;\u0026gt;\u0026gt; ed_user = User(name=\u0026#39;ed\u0026#39;, fullname=\u0026#39;Ed Jones\u0026#39;, password=\u0026#39;edspassword\u0026#39;)\n\u0026gt;\u0026gt;\u0026gt; ed_user.name\n\u0026#39;ed\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; ed_user.password\n\u0026#39;edspassword\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; str(ed_user.id)\n\u0026#39;None\u0026#39;\n\n创建session\n\u0026gt;\u0026gt;\u0026gt; from sqlalchemy.orm import sessionmaker\n\u0026gt;\u0026gt;\u0026gt; Session = sessionmaker(bind=engine)\n\n你也可以先创建Session,在创建应用前\n\u0026gt;\u0026gt;\u0026gt; Session = sessionmaker()\n\n当你创建了应用,可以这样配置\n\u0026gt;\u0026gt;\u0026gt; Session.configure(bind=engine)  # once engine is available\n\n插入和更新数据\n\n插入\n\n插入一条数据\n\u0026gt;\u0026gt;\u0026gt; ed_user = User(name=\u0026#39;ed\u0026#39;, fullname=\u0026#39;Ed Jones\u0026#39;, password=\u0026#39;edspassword\u0026#39;)\n\u0026gt;\u0026gt;\u0026gt; session.add(ed_user)\n\n插入多条数据\n\u0026gt;\u0026gt;\u0026gt; session.add_all([\n...     User(name=\u0026#39;wendy\u0026#39;, fullname=\u0026#39;Wendy Williams\u0026#39;, password=\u0026#39;foobar\u0026#39;),\n...     User(name=\u0026#39;mary\u0026#39;, fullname=\u0026#39;Mary Contrary\u0026#39;, password=\u0026#39;xxg527\u0026#39;),\n...     User(name=\u0026#39;fred\u0026#39;, fullname=\u0026#39;Fred Flinstone\u0026#39;, password=\u0026#39;blah\u0026#39;)])\n\n更新\n\u0026gt;\u0026gt;\u0026gt; ed_user.password = \u0026#39;f8s7ccs\u0026#39;\n\n查看\n\u0026gt;\u0026gt;\u0026gt; session.dirty\nIdentitySet([\u0026lt;User(name=\u0026#39;ed\u0026#39;, fullname=\u0026#39;Ed Jones\u0026#39;, password=\u0026#39;f8s7ccs\u0026#39;)\u0026gt;])\n\u0026gt;\u0026gt;\u0026gt; session.new  # doctest: +SKIP\nIdentitySet([\u0026lt;User(name=\u0026#39;wendy\u0026#39;, fullname=\u0026#39;Wendy Williams\u0026#39;, password=\u0026#39;foobar\u0026#39;)\u0026gt;,\n\u0026lt;User(name=\u0026#39;mary\u0026#39;, fullname=\u0026#39;Mary Contrary\u0026#39;, password=\u0026#39;xxg527\u0026#39;)\u0026gt;,\n\u0026lt;User(name=\u0026#39;fred\u0026#39;, fullname=\u0026#39;Fred Flinstone\u0026#39;, password=\u0026#39;blah\u0026#39;)\u0026gt;])\n\n必须提交才能生效\n\u0026gt;\u0026gt;\u0026gt; session.commit()","index":116,"permalink":"https://honmaple.me/articles/2016/04/sqlalchemy学习(一).html","summary":"\n\u003ch1\u003esqlalchemy\u003ca id=\"orgheadline19\"\u003e\u003c/a\u003e\u003c/h1\u003e\n\n\u003cp\u003e系统的学一下sqlalchemyA,不过没有中文文档,只能用我的渣英文能力慢慢看原文档了\u003c/p\u003e\n\n\u003ch2\u003e数据库连接\u003ca id=\"orgheadline6\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026gt;\u0026gt;\u0026gt; from sqlalchemy import create_engine\n\u0026gt;\u0026gt;\u0026gt; engine = create_engine(\u0026#39;sqlite:///:memory:\u0026#39;, echo=True)\n\u003c/pre\u003e\n\u003cp\u003eecho为True输出日志\u003c/p\u003e\n\n\u003ch3\u003e各种数据库连接方式\u003ca id=\"orgheadline5\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edialect+driver://username:password@host:port/database\n\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003ePostgresql\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# default\nengine...\u003c/pre\u003e\u003c/li\u003e\u003c/ol\u003e","title":"sqlalchemy学习(一)"},{"content":"Table of Contents\nsqlalchemy object序列化为json\n\n多个实例\n单个实例\n排除字段\n仅包括字段\n关系查询深度\n增加一些自定义的函数\n可传递参数的函数\n\n像django orm一样使用sqlalchemy\n\n基本查询(已实现)\n关系查询\n其它\n\n去掉一些sqlalchemy的重复工作\n\nModelMixin\nModelTimeMixin\nModelUserMixin\n\n\n\nsqlalchemy object序列化为json\n\n  灵感来源于 Django REST framework\n\n多个实例\nposts = Post.query.all()\nserializer = Seralizer(posts,many=True)\ndata = serializer.data\n\n单个实例\npost = Post.query.first()\nserializer = Seralizer(post,many=False)\ndata = serializer.data\n\n排除字段\nserializer = Seralizer(post,exclude=[\u0026#39;title\u0026#39;])\n\n仅包括字段\nserializer = Seralizer(post,include=[\u0026#39;title\u0026#39;])\n\n关系查询深度\nserializer = Seralizer(post,depth=3)\n\n\n\n depth\n     默认为2\n\n\n\n增加一些自定义的函数\nserializer = Serializer(post,extra=[\u0026#39;get_post_count\u0026#39;])\n\n   Post\n\nclass Post(Model):\n    ......\n    def get_post_count(self):\n        return 11\n\n可传递参数的函数\nclass PostSerializer(Serializer):\n    count = Field(source = \u0026#39;get_post_count\u0026#39;,args={\u0026#39;name\u0026#39;:\u0026#39;hello\u0026#39;},default=20)\n    class Meta:\n        include = []\n        depth = 2\n        include = []\n        exclude = []\n        extra = [\u0026#39;count\u0026#39;]\n像django orm一样使用sqlalchemy\n\n  djang orm与sqlalchemy相比,为什么很多人都认为django orm更好用,大概就是因为django orm更方便\n\n\n基本查询(已实现)\n\n\n\n gt\n\n\n\n lt\n\n\n\n lte\n\n\n\n gte\n\n\n\n contains\n\n\n\n in\n\n\n\n exact\n\n\n\n iexact\n\n\n\n startswith\n\n\n\n istartswith\n\n\n\n iendswith\n\n\n\n endswith\n\n\n\n isnull\n\n\n\n range\n\n\n\n year\n\n\n\n month\n\n\n\n day\n\n\n\n\n   示例:\n\nPost.query.filter_by(title__contains = \u0026#39;sql\u0026#39;).all()\nPost.query.exclude_by(title__contains = \u0026#39;sql\u0026#39;).all()\n\n关系查询\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).all()\n\n其它\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).or(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).and(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).exists()\nPost.query.load_only(\u0026#39;title\u0026#39;)\n\n去掉一些sqlalchemy的重复工作\n\n  以flask-sqlalchemy为例,通过继承 models.py 中的Mixin,就可以去除部分重复工作\n\n\nModelMixin\n\n   自增ID -- id\n\n\npost = Post(·····)\npost.save() # 保存\npost.delete() # 保存\n\n\n   批量操作\n\n\n\n\n bulk_insert\n\n\n\n bulk_update\n\n\n\n bulk_save\n\n\n\nModelTimeMixin\n\n   增加两字段\n\n\n\n\n created_at\n     数据创建时间\n\n\n\n updated_at\n     数据更新时间\n\n\n\nModelUserMixin\n\n   关联用户表,与User表现为多对一关系(即一个用户有多个post)\n\nclass Post(ModelUserMixin, Model):\n\n    user_related_name = \u0026#39;posts\u0026#39;\n    titile = ...","index":117,"permalink":"https://honmaple.me/articles/2017/03/sqlalchemy使用上的小tips.html","summary":"\n\u003ch1 id=\"heading-1\"\u003esqlalchemy object序列化为json\u003c/h1\u003e\n\u003cp\u003e\n  灵感来源于 \u003cb\u003eDjango REST framework\u003c/b\u003e\n\u003c/p\u003e\n\u003ch2 id=\"heading-1.1\"\u003e多个实例\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eposts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Post\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003equery\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eall()\nserializer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Seralizer(posts,many\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eTrue)\ndata \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e serializer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edata\u003c/pre\u003e\n\n\u003ch2 id=\"heading-1.2\"\u003e单个实例\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003epost \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Post\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003equery\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efirst()\nserializer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Seralizer(post,many\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFalse...\u003c/pre\u003e","title":"sqlalchemy使用上的小tips"},{"content":"Table of Contents\n安装\n更新\n交叉编译\n\n\n安装\n\n\n\n 安装\n\n└──╼ brew install rustup\n└──╼ rustup-init\n......\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n\u0026gt;1\n\n\n\n 配置 rust 目录\n\n└──╼ mkdir $HOME/repo/rust\n└──╼ mv $HOME/.rustup $HOME/repo/rust/rustup\n└──╼ mv $HOME/.cargo $HOME/repo/rust/cargo\n\n\n     写入 .bashrc 文件\n\nexport RUSTUP_HOME=$HOME/repo/rust/rustup\nexport CARGO_HOME=$HOME/repo/rust/cargo\nexport PATH=$PATH:$HOME/repo/rust/cargo/bin\n\n\n\n 验证\n\n└──╼ source .bashrc\n└──╼ cargo --version\ncargo 1.46.0 (149022b1d 2020-07-17)\n\n\n更新\n\n   最近在测试时发现无法安装 tauri-app, 需要更新 cargo\n\nCaused by:\n  failed to parse the `edition` key\n\nCaused by:\n  this version of Cargo is older than the `2021` edition, and only supports `2015` and `2018` editions.\n\n\n   解决方式\n\n└──╼ rustc --version\nrustc 1.46.0 (04488afe3 2020-08-24)\n└──╼ rustup update stable\n...\n└──╼ rustc --version\nrustc 1.64.0 (a55dd71d5 2022-09-19)\n\n交叉编译\n\n\n\n\n www.qttc.net/529-rust-cross-compile-mac-to-linux.html\n\n\n\n moevis.github.io/cheatsheet/2018/08/18/%E8%B6%85%E6%96%B9%E4%BE%BF%E7%9A%84-Rust-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html\n\n\n\n\nbrew install FiloSottile/musl-cross/musl-cross\nrustup target add x86_64-unknown-linux-musl\n\n\n   添加配置 $CARGO_HOME/config.toml\n\n[target.x86_64-unknown-linux-musl]\nlinker = \u0026#34;x86_64-linux-musl-gcc\u0026#34;\n\ncargo build --target=x86_64-unknown-linux-musl","index":118,"permalink":"https://honmaple.me/articles/2020/09/rust笔记.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e安装\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 安装\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e└──╼ brew install rustup\n└──╼ rustup-init\n......\n1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e Proceed with installation \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003edefault\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n2\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e Customize installation\n3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e Cancel installation\n\u0026gt;1\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 配置 \u003cb\u003erust\u003c/b\u003e 目录\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e└──╼ mkdir $HOME/repo/rust\n└──╼ mv $HOME/.rustup $HOME/repo...\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"rust笔记"},{"content":"Table of Contents\n准备\n创建集群\n测试集群\n\n\n\n参考资料\n\n\n\nRedis 集群是一个提供在多个Redis间节点间共享数据的程序集\n\n\n准备\n\n\n  集群开始需要运行redis集群实例，而且要让集群正常运作至少需要三个主节点,这里创建六个节点，三个为主节点，三个为从节点,端口号分别为9001,9002,9003,9004,9005,9006\n\n\n\n  并创建六个以端口号为名字的目录， 在每个目录中运行一个Redis实例\n\nmkdir -p redis/9001\ncd redis\nmkdir 9002\nmkdir 9003\nmkdir 9004\nmkdir 9005\nmkdir 9006\n\n\n  然后将对应的配置redis.conf放入相应的目录中(记得修改端口号)\n\n\n\n\n  最小配置选项:\n\nport 9001\ncluster-enabled yes\ncluster-config-file node9001.conf\ncluster-node-timeout 5000\nappendonly yes\n\n\n\n  然后就可以启动redis实例了\n\nredis-server redis/9001/redis.conf\nredis-server redis/9002/redis.conf\nredis-server redis/9003/redis.conf\nredis-server redis/9004/redis.conf\nredis-server redis/9005/redis.conf\nredis-server redis/9006/redis.conf\n\n\n  由于这个过程很简单而且重复,所以我写了一个脚本进行创建:\n\n@cli.command()\n@click.option(\u0026#39;--dirs\u0026#39;, \u0026#39;-d\u0026#39;, default=DEFAULT_PATH)\n@click.option(\u0026#39;--port\u0026#39;, \u0026#39;-p\u0026#39;, default=9001)\ndef create(dirs, port):\n    for i in range(6):\n        path = os.path.join(dirs, str(port + i))\n        if not os.path.exists(path):\n            os.makedirs(path)\n        conf = os.path.join(path, \u0026#39;redis.conf\u0026#39;)\n        with open(conf, \u0026#39;w+\u0026#39;) as f:\n            text = \u0026#39;\u0026#39;\u0026#39;port {0}\ncluster-enabled yes\ncluster-config-file nodes{0}.conf\ncluster-node-timeout 5000\nappendonly yes\n\u0026#39;\u0026#39;\u0026#39;.format(port + i)\n            f.write(text)\n        with cd(dirs):\n            os.system(\u0026#39;redis-server {}\u0026#39;.format(conf))\n\n创建集群\n\n  使用redis的官方脚本redis-trib进行创建\n\nruby redis-trib.rb create --replicas 1 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003 127.0.0.1:9004 127.0.0.1:9005 127.0.0.1:9006\n\n  或者接上面的脚本\n\nports = [\u0026#39;127.0.0.1:{}\u0026#39;.format(port + i) for i in range(6)]\nos.system(\u0026#39;ruby redis-trib.rb create --replicas 1 {}\u0026#39;.format(\u0026#39; \u0026#39;.join(\n    ports)))\n\n\n  –replicas 1:表示为集群中的每个主节点创建一个从节点\n\n\n\n  结果如图所示:\n  \n\n  \n\n\n\n\n  输入yes\n  最后查看集群是否启动成功\n  \n\n  \n\n\n\n测试集群\n\n  -c 选项以集群方式启动\n\n$ redis-cli -c -p 7000\n  127.0.0.1:9001\u0026gt; keys *\n  (empty list or set)\n  127.0.0.1:9001\u0026gt; set hello world\n  OK\n  127.0.0.1:9001\u0026gt; get hello\n  \u0026#34;world\u0026#34;\n  127.0.0.1:9001\u0026gt; set hello1 world1\n  -\u0026gt; Redirected to slot [11613] located at 127.0.0.1:9003\n  OK\n  127.0.0.1:9003\u0026gt; get hello1\n  \u0026#34;world1\u0026#34;\n  127.0.0.1:9003\u0026gt; set hello2 world2\n  -\u0026gt; Redirected to slot [7486] located at 127.0.0.1:9002\n  OK\n  127.0.0.1:9002\u0026gt; get hello2\n  \u0026#34;world2\u0026#34;\n\n\n  进入另一个实例\n\n\n$ redis-cli -c -p 9002\n  127.0.0.1:9002\u0026gt; get hello\n  -\u0026gt; Redirected to slot [866] located at 127.0.0.1:9001\n  \u0026#34;world\u0026#34;\n  127.0.0.1:9001\u0026gt; get hello1\n  -\u0026gt; Redirected to slot [11613] located at 127.0.0.1:9003\n  \u0026#34;world1\u0026#34;\n  127.0.0.1:9003\u0026gt; get hello2\n  -\u0026gt; Redirected to slot [7486] located at 127.0.0.1:9002\n  \u0026#34;world2\u0026#34;\n\n\n  ok,先这样","index":119,"permalink":"https://honmaple.me/articles/2017/08/redis集群搭建.html","summary":"\n\u003cp\u003e\n\u003ca href=\"http://www.redis.cn/topics/cluster-tutorial.html\"\u003e参考资料\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nRedis 集群是一个提供在多个Redis间\u003cb\u003e节点间共享数据\u003c/b\u003e的程序集\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e准备\u003c/h1\u003e\n\n\u003cp\u003e\n  集群开始需要运行redis集群实例，而且要让集群正常运作至少需要三个主节点,这里创建六个节点，三个为主节点，三个为从节点,端口号分别为9001,9002,9003,9004,9005,9006\n\u003c/p\u003e\n\n\u003cp\u003e\n  并创建六个以端口号为名字的目录， 在每个目录中运行一个Redis实例\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003emkdir -p redis/9001\ncd redis\nmkdir \u003cspan style=\"color:#ae81ff\"\u003e9002\u003c/span\u003e\nmkdir \u003cspan style=\"color:#ae81ff\"\u003e9003\u003c/span\u003e\nmkdir \u003cspan style=\"color:#ae81ff\"\u003e9004\u003c/span\u003e\nmkdir \u003cspan style=\"color:#ae81ff\"\u003e9005\u003c/span\u003e\nmkdir \u003cspan style=\"color:#ae81ff\"\u003e9006\u003c/span\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n  然后将对应的配置...\u003c/p\u003e","title":"redis集群搭建"},{"content":"必须得记下来，否则等那天看到又要浪费时间了,主要记录访问时间这里\n    \u0026#39;\u0026#39;\u0026#39;记录访问的时间\u0026#39;\u0026#39;\u0026#39;\n    now_time = int(time()) #首先得到当前时间戳 \n    \u0026#39;\u0026#39;\u0026#39;查询上次访问的时间和最近访问的时间\u0026#39;\u0026#39;\u0026#39;\n    query_last_time = redis_data.zscore(visited_users,\u0026#39;last_time\u0026#39;)\n    query_now_time = redis_data.zscore(visited_users,\u0026#39;time\u0026#39;)\n    \u0026#39;\u0026#39;\u0026#39;判断查询是否为空,一般是第一次访问还未记录的IP\u0026#39;\u0026#39;\u0026#39;\n    if query_last_time is None:\n        query_last_time = now_time\n        pipe.zadd(visited_users,query_last_time,\u0026#39;last_time\u0026#39;)\n    if query_now_time is None:\n        query_now_time = now_time\n    \u0026#39;\u0026#39;\u0026#39;将当前时间与last_time进行对比,十分钟之内不记录\u0026#39;\u0026#39;\u0026#39;\n    if now_time - query_last_time \u0026gt;= 600:\n        \u0026#39;\u0026#39;\u0026#39;这里类似交换更新数据,把query_now_time变成last_time,把now_time更新\u0026#39;\u0026#39;\u0026#39;\n        pipe.zadd(visited_users,query_now_time,\u0026#39;last_time\u0026#39;)\n        pipe.zadd(visited_users,now_time,\u0026#39;time\u0026#39;)\n    else:\n        pipe.zadd(visited_users,now_time,\u0026#39;time\u0026#39;)","index":120,"permalink":"https://honmaple.me/articles/2016/01/redis记录用户操作.html","summary":"\u003cp\u003e必须得记下来，否则等那天看到又要浪费时间了,主要记录访问时间这里\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e    \u0026#39;\u0026#39;\u0026#39;记录访问的时间\u0026#39;\u0026#39;\u0026#39;\n    now_time = int(time()) #首先得到当前时间戳 \n    \u0026#39;\u0026#39;\u0026#39;查询上次访问的时间和最近访问的时间\u0026#39;\u0026#39;\u0026#39;\n    query_last_time = redis_data.zscore(visited_users,\u0026#39;last_time\u0026#39;...\u003c/pre\u003e","title":"redis记录用户操作"},{"content":"Table of Contents\nTIME\n\nGMT时间格式\n获取某个时间的时间戳\n得到当天0点时间\n时间或时间戳与字符串转换\n秒转化为时分秒\n获取上个月开始与结束时间\n获取上周星期天与星期六\n获取上周时间(星期天零点到星期天零点)\n\nHTTP\n\n在网址中加入参数\nurllib2发送json数据 POST请求\nurllib2发送PUT或DELETE请求\n\nSyntax\n\n解析赋值字符串\n字典递归更新\n字典使用dot                                                         \n单例模式                                                             \n\nPip\n\npip更新所有的packages\npip指定国内源\n\n判斷是否激活virtualenv\nDjango model得到所有field name\npython运行超时设置\n库\n\njson.loads时无法保持字典列表的顺序\n\n其它\n\n获取文件最后n行数据\npython列表中去除烦人的\u0026#34;u\u0026#34;\n\n常见问题\n\nPROTOCOL_SSLv3 is not defined\n\n\n\nTIME\nGMT时间格式\nGMT_FORMAT = \u0026#39;%a, %d %b %Y %H:%M:%S GMT\u0026#39;\n获取某个时间的时间戳\nimport datetime\nimport time\n\nstring = \u0026#34;2018-03-31\u0026#34;\ndate_time = datetime.datetime.strptime(string, \u0026#39;%Y-%m-%d\u0026#39;)\ntime_time = time.mktime(date_time.timetuple())\nprint(time_time)\n得到当天0点时间\ntoday = datetime.datetime.today()\nb = datetime.datetime(today.year, today.month, today.day, 0, 0, 0)\nprint(b)\n\nnow = time.time()\nmidnight = now - (now % 86400) + time.timezone\nitime = time.ctime(midnight)\nprint(itime)\n时间或时间戳与字符串转换\n#把datetime转成字符串\ndef datetime_toString(dt):\n    return dt.strftime(\u0026#34;%Y-%m-%d-%H\u0026#34;)\n\n#把字符串转成datetime\ndef string_toDatetime(string):\n    return datetime.strptime(string, \u0026#34;%Y-%m-%d-%H\u0026#34;)\n\n#把字符串转成时间戳形式\ndef string_toTimestamp(strTime):\n    return time.mktime(string_toDatetime(strTime).timetuple())\n\n#把时间戳转成字符串形式\ndef timestamp_toString(stamp):\n    return time.strftime(\u0026#34;%Y-%m-%d-%H\u0026#34;, time.localtime(stamp))\n\n#把时间戳转成datetime\ndef timestamp_toDatetime(stamp):\n    return datetime.fromtimestamp(stamp)\n\n#把datetime类型转外时间戳形式\ndef datetime_toTimestamp(dateTim):\n    return time.mktime(dateTim.timetuple())\n\n秒转化为时分秒\ndef time_string(seconds):\n    hours, _minutes = divmod(seconds, 3600)\n    minutes, seconds = divmod(_minutes, 60)\n    return (hours, minutes, seconds)\n获取上个月开始与结束时间\nfrom datetime import datetime, timedelta\n\n\ndef gen_zero_time():\n    \u0026#39;\u0026#39;\u0026#39;\n    生成当天零点时间\n    \u0026#39;\u0026#39;\u0026#39;\n    today = datetime.today()\n    b = datetime(today.year, today.month, today.day, 0, 0, 0)\n    return b\n\n\nd = gen_zero_time()\nend_date = d.replace(day=1)\nstart_date = (d.replace(day=1) + timedelta(days=-1)).replace(day=1)\nprint(start_date)\nprint(end_date)\n\n获取上周星期天与星期六\nfrom datetime import datetime, timedelta\nfrom dateutil import relativedelta\ntoday = datetime.now()\nstart = today - timedelta((today.weekday() + 1) % 7)\nsat = start + relativedelta.relativedelta(weekday=relativedelta.SA(-1))\nsun = sat + relativedelta.relativedelta(weekday=relativedelta.SU(-1))\nprint(sat)\nprint(sun)\n获取上周时间(星期天零点到星期天零点)\nfrom datetime import datetime, timedelta\n\n\ndef gen_zero_time():\n    \u0026#39;\u0026#39;\u0026#39;\n    生成当天零点时间\n    \u0026#39;\u0026#39;\u0026#39;\n    today = datetime.today()\n    b = datetime(today.year, today.month, today.day, 0, 0, 0)\n    return b\n\n\na = gen_zero_time()\nstart_date = a + timedelta(days=-a.weekday() - 1, weeks=-1)\nend_date = start_date + timedelta(days=7)\nprint(start_date)\nprint(end_date)\n\nHTTP\n在网址中加入参数\nimport urllib\nimport urlparse\n\n\ndef url_add_params(url, **params):\n    \u0026#34;\u0026#34;\u0026#34; 在网址中加入新参数 \u0026#34;\u0026#34;\u0026#34;\n    pr = urlparse.urlparse(url)\n    query = dict(urlparse.parse_qsl(pr.query))\n    query.update(params)\n    prlist = list(pr)\n    prlist[4] = urllib.urlencode(query)\n    return urlparse.ParseResult(*prlist).geturl()\n\n\nif __name__ == \u0026#34;__main__\u0026#34;:\n    url = \u0026#39;http://bbs.163.com\u0026#39;\n    print url_add_params(url, token=123, site=\u0026#34;bbs\u0026#34;)\nurllib2发送json数据 POST请求\nimport json\nimport urllib2\n\ndata = {\n        \u0026#39;ids\u0026#39;: [12, 3, 4, 5, 6]\n}\n\nreq = urllib2.Request(\u0026#39;http://example.com/api/posts/create\u0026#39;)\nreq.add_header(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/json\u0026#39;)\n\nresponse = urllib2.urlopen(req, json.dumps(data))\nurllib2发送PUT或DELETE请求\nimport urllib2\nopener = urllib2.build_opener(urllib2.HTTPHandler)\nrequest = urllib2.Request(\u0026#39;http://example.org\u0026#39;, data=\u0026#39;your_put_data\u0026#39;)\nrequest.add_header(\u0026#39;Content-Type\u0026#39;, \u0026#39;your/contenttype\u0026#39;)\nrequest.get_method = lambda: \u0026#39;PUT\u0026#39;\nurl = opener.open(request)\n\n# 或者使用httplib\nimport httplib\nconn = httplib.HTTPConnection(\u0026#39;www.foo.com\u0026#39;)\nconn.request(\u0026#39;PUT\u0026#39;, \u0026#39;/myurl\u0026#39;, body)\nresp = conn.getresponse()\ncontent = resp.read()\n\nSyntax\n解析赋值字符串\n\n   即把\n\na=b c=d e=f g.a=1 g.a.b=2 g.c.d=3 h=\u0026#34;a b c\u0026#34; i=\u0026#39;sss\u0026#39;\n\n   解析成\n\n{\u0026#39;a\u0026#39;: \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;: \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;: \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;: {\u0026#39;a\u0026#39;: {\u0026#39;b\u0026#39;: \u0026#39;2\u0026#39;}, \u0026#39;c\u0026#39;: {\u0026#39;d\u0026#39;: \u0026#39;3\u0026#39;}}, \u0026#39;h\u0026#39;: \u0026#39;a b c\u0026#39;, \u0026#39;i\u0026#39;: \u0026#39;sss\u0026#39;}\n\nregex = re.compile(r\u0026#34;([\\w.]+|\\\u0026#34;[^=]*|\u0026#39;[^=]*)=(\\\u0026#34;[^\\\u0026#34;]*\\\u0026#34;|\u0026#39;[^\u0026#39;]*\u0026#39;|.*?)(\\s|$)\u0026#34;)\n\ndef parse_string(string):\n    r = {}\n\n    def _get(key):\n        key = key.strip()\n        if key[0] == key[-1] in [\u0026#34;\u0026#39;\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;]:\n            return key[1:-1]\n        return key\n\n    def _update(value, nvalue):\n        if not isinstance(nvalue, dict) or not isinstance(value, dict):\n            return nvalue\n        for k, v in nvalue.items():\n            value.setdefault(k, dict())\n            if isinstance(v, dict):\n                v = _update(value[k], v)\n            value[k] = v\n        return value\n\n    def _set(key, value):\n        for i in key.split(\u0026#34;.\u0026#34;)[::-1]:\n            value = {i: value}\n        return value\n\n    for key, value in regex.findall(string):\n        r = _update(r, _set(_get(key), _get(value)))\n    return r\n字典递归更新\n\n   即当更新dict的value也是一个dict时，递归更新相应内容\n\ndef update(value, nvalue):\n    if not isinstance(nvalue, dict) or not isinstance(value, dict):\n        return nvalue\n    for k, v in nvalue.items():\n        if isinstance(v, dict):\n            v = update(value[k], v)\n        value.update({k: v})\n    return value\n字典使用dot                                                         \nclass dotdict(dict):\n\n    __setattr__ = dict.__setitem__\n    __delattr__ = dict.__delitem__\n\n    def __getattr__(self, name):\n        value = self[name]\n        if isinstance(value, dict):\n            return dotdict(value)\n        return value\n\n\na = {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2, \u0026#39;c\u0026#39;: 3, \u0026#39;d\u0026#39;: {\u0026#39;a\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;: 1}}\nc = dotdict(a)\nprint(c.a)\nprint(c.d.a)\n\n\n   或者\n\nclass dotdict(object):\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n单例模式                                                             \nfrom functools import wraps\nfrom threading import Lock\n\n\ndef singleton(class_):\n    instances = {}\n    _lock = Lock()\n\n    @wraps(class_)\n    def _instance(*args, **kwargs):\n        with _lock:\n            if class_ not in instances:\n                instances[class_] = class_(*args, **kwargs)\n            instances[class_].__init__(*args, **kwargs)\n        return instances[class_]\n\n    return _instance\n\n@singleton\nclass AA(object):\n    def __init__(self, a):\n        self.a = a\n\n    def aa(self):\n        print(self.a)\n\n\na = AA(\u0026#39;ccc\u0026#39;).aa()\nb = AA(\u0026#39;baabb\u0026#39;).aa()\nprint(id(a) == id(b))\nPip\npip更新所有的packages\npip freeze --local | grep -v \u0026#39;^\\-e\u0026#39; | cut -d = -f 1  | xargs -n1 pip install -U\n\n   如果是更新sudo安装的packages\n\npip freeze --local | grep -v \u0026#39;^\\-e\u0026#39; | cut -d = -f 1  | xargs -n1 sudo pip install -U\n\npip指定国内源\npip install flask_migrate -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com\n判斷是否激活virtualenv\nimport sys\nif hasattr(sys, \u0026#39;real_prefix\u0026#39;):\n   return True\n\nDjango model得到所有field name\nMyModel._meta.get_all_field_names()\n\npython运行超时设置\nimport signal\n\nclass TimeoutError(Exception):\n    pass\n\ndef timeout(seconds=10, error_message=\u0026#34;Timer expired\u0026#34;):\n    def _timeout(func):\n        def _handle_timeout(signum, frame):\n            raise TimeoutError(error_message)\n\n        def wrapper(*args, **kwargs):\n            signal.signal(signal.SIGALRM, _handle_timeout)\n            signal.alarm(seconds)\n            try:\n                result = func(*args, **kwargs)\n            finally:\n                signal.alarm(0)\n            return result\n\n        return wrapper\n\n    return _timeout\n\n库\n\njson.loads时无法保持字典列表的顺序\n\n   stackoverflow.com/questions/47111058/json-loads-doesnt-keep-order\n\nfrom json import loads\nfrom collections import OrderedDict\nloads(your_json_string, object_pairs_hook=OrderedDict)\n\n   http://www.grokcode.com/864/snakefooding-python-code-for-complexity-visualization/\n\n\n其它\n获取文件最后n行数据\nimport mmap\n\n\ndef getlastline(fname, n=1):\n    with open(fname) as source:\n        mapping = mmap.mmap(source.fileno(), 0, prot=mmap.PROT_READ)\n    cursor = -1\n    while n \u0026gt; 0:\n        n -= 1\n        cursor = mapping.rfind(b\u0026#39;\\n\u0026#39;, 0, cursor)\n    return mapping[cursor:].decode().split(\u0026#34;\\n\u0026#34;)\n\npython列表中去除烦人的\u0026#34;u\u0026#34;\n# !/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\ns = [u\u0026#34;python\u0026#34;, u\u0026#34;golang\u0026#34;, u\u0026#34;lua\u0026#34;]\nprint(s)\n\n\n\n\n\n\n python script\n\ns = [u\u0026#34;python\u0026#34;, u\u0026#34;golang\u0026#34;, u\u0026#34;lua\u0026#34;]\nprint([str(i) for i in s])\n\n\n\n\n\n jinja2\n\nfrom jinja2 import Template\ntemplate = Template(\n    \u0026#39;[{% for i in consul_join %}\u0026#34;{{ i | string }}\u0026#34;{% if not loop.last %},{% endif %}{% endfor %}]\u0026#39;\n)\ntemplate.render(consul_join=[u\u0026#34;python\u0026#34;, u\u0026#34;golang\u0026#34;, u\u0026#34;lua\u0026#34;])\n\n\n\n\n常见问题\n\nPROTOCOL_SSLv3 is not defined\n\n   github.com/docker-library/python/issues/29\n\nbash -c \u0026#39;sed -i s/PROTOCOL_SSLv3/PROTOCOL_SSLv23/g /usr/local/lib/python2.7/site-packages/gevent/ssl.py \u0026amp;\u0026amp; python prober.py\u0026#39;","index":121,"permalink":"https://honmaple.me/articles/2017/01/python笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eTIME\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003eGMT时间格式\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eGMT_FORMAT \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ea, \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eb \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eY \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eH:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eM:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eS GMT\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003c/pre\u003e\n\u003ch2 id=\"heading-1.2\"\u003e获取某个时间的时间戳\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e datetime\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e time\n\nstring \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e2018-03-31\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\ndate_time \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e datetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edatetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrptime(string, \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eY...\u003c/span\u003e\u003c/pre\u003e","title":"python笔记"},{"content":"Table of Contents\nProcess Parameters\n\nos.environ(环境变量)\nos.getenv(key, default=None)\n\nos.path\n\nos.path.abspath(path) #返回绝对路径\nos.path.basename(path) #返回文件名\nos.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径。\nos.path.dirname(path) #返回文件路径\nos.path.exists(path) #路径存在则返回True,路径不存在返回False\nos.path.exists(\u0026#39;aa.py\u0026#39;)\nos.path.lexists #路径存在则返回True,路径不存在也返回False\nos.path.expanduser(path) #把path中包含的\u0026#34;~\u0026#34;和\u0026#34;~user\u0026#34;转换成用户目录\nos.path.expandvars(path) #根据环境变量的值替换path中包含的”(name”和”){name}”\nos.path.getatime(path) #返回最后一次进入此path的时间。\nos.path.getmtime(path) #返回在此path下最后一次修改的时间。\nos.path.getctime(path)\nos.path.getsize(path) #返回文件大小，如果文件不存在就返回错误\nos.path.isabs(path) #判断是否为绝对路径\nos.path.isfile(path) #判断路径是否为文件\nos.path.isdir(path) #判断路径是否为目录\nos.path.islink(path) #判断路径是否为链接\nos.path.ismount(path) #判断路径是否为挂载点（）\nos.path.join(path1[, path2[, …]]) #把目录和文件名合成一个路径\nos.path.normcase(path) #转换path的大小写和斜杠\nos.path.normpath(path) #规范path字符串形式\nos.path.realpath(path) #返回path的真实路径\nos.path.relpath(path[, start]) #从start开始计算相对路径\nos.path.samefile(path1, path2) #判断目录或文件是否相同\nos.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件\nos.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件\nos.path.split(path) #把路径分割成dirname和basename，返回一个元组\nos.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组\nos.path.splitext(path) #分割路径，返回路径名和文件扩展名的元组\nos.path.splitunc(path) #把路径分割为加载点与文件\nos.path.walk(path, visit, arg) #遍历path，进入每个目录都调用visit函数，visit函数必须有\nos.path.supportsunicodefilenames #设置是否支持unicode路径名\n\n\n\nProcess Parameters\n\nos.environ(环境变量)\n\n\u0026gt;\u0026gt;\u0026gt; os.environ[\u0026#39;HOME\u0026#39;]\n\u0026#39;/home/xxx\u0026#39;\n\nos.getenv(key, default=None)\n\n\u0026gt;\u0026gt;\u0026gt; os.getenv(\u0026#34;HOME\u0026#34;)\n\u0026#39;/home/xxx\u0026#39;\n\nos.path\n\nos.path.abspath(path) #返回绝对路径\n\n\u0026gt;\u0026gt;\u0026gt; os.path.abspath(\u0026#39;aa.py\u0026#39;)\n\u0026#39;/home/jianglin/test/aa.py\u0026#39;\n\nos.path.basename(path) #返回文件名\n\n\u0026gt;\u0026gt;\u0026gt; os.path.basename(\u0026#39;aa.py\u0026#39;)\n\u0026#39;aa.py\u0026#39;\n\nos.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径。\n\n\u0026gt;\u0026gt;\u0026gt; os.path.commonprefix([\u0026#39;aa.py\u0026#39;,\u0026#39;a.py\u0026#39;])\n\u0026#39;a\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.commonprefix([\u0026#39;aa.py\u0026#39;,\u0026#39;c.py\u0026#39;])\n\u0026#39;\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.commonprefix([\u0026#39;~/test/aa.py\u0026#39;,\u0026#39;~/test/c.py\u0026#39;])\n\u0026#39;~/test/\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.commonprefix([\u0026#39;~/test/aa.py\u0026#39;,\u0026#39;~/test/c.py\u0026#39;,\u0026#39;~/test/git/.git/config\u0026#39;])\n\u0026#39;~/test/\u0026#39;\n\nos.path.dirname(path) #返回文件路径\n\n\u0026gt;\u0026gt;\u0026gt; os.path.dirname(\u0026#39;~/test/aa.py\u0026#39;)\n\u0026#39;~/test\u0026#39;\n\nos.path.exists(path) #路径存在则返回True,路径不存在返回False\n\nos.path.exists(\u0026#39;aa.py\u0026#39;)\nTrue\n\u0026gt;\u0026gt;\u0026gt; os.path.exists(\u0026#39;aa.pp\u0026#39;)\nFalse\nos.path.lexists #路径存在则返回True,路径不存在也返回False\n\n\u0026gt;\u0026gt;\u0026gt; os.path.lexists(\u0026#39;aa.py\u0026#39;)\nTrue\n\u0026gt;\u0026gt;\u0026gt; os.path.lexists(\u0026#39;aa.pp\u0026#39;)\nFalse\n\nos.path.expanduser(path) #把path中包含的\u0026#34;~\u0026#34;和\u0026#34;~user\u0026#34;转换成用户目录\n\n\u0026gt;\u0026gt;\u0026gt; os.path.expanduser(\u0026#39;aa.py\u0026#39;)\n\u0026#39;aa.py\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.expanduser(\u0026#39;~/test/aa.py\u0026#39;)\n\u0026#39;/home/jianglin/test/aa.py\u0026#39;\nos.path.expandvars(path) #根据环境变量的值替换path中包含的”(name”和”){name}”\n\nos.path.getatime(path) #返回最后一次进入此path的时间。\n\u0026gt;\u0026gt;\u0026gt; os.path.getatime(\u0026#39;aa.py\u0026#39;)\n1461933601.0809627\n\u0026gt;\u0026gt;\u0026gt; os.path.getatime(\u0026#39;~/git/\u0026#39;)\nTraceback (most recent call last):\nFile \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\nFile \u0026#34;/usr/lib/python3.5/genericpath.py\u0026#34;, line 60, in getatime\nreturn os.stat(filename).st_atime\nFileNotFoundError: [Errno 2] No such file or directory: \u0026#39;~/git/\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.getatime(\u0026#39;~/git/maple-bbs/.gitignore\u0026#39;)\nTraceback (most recent call last):\nFile \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\nFile \u0026#34;/usr/lib/python3.5/genericpath.py\u0026#34;, line 60, in getatime\nreturn os.stat(filename).st_atime\nFileNotFoundError: [Errno 2] No such file or directory: \u0026#39;~/git/maple-bbs/.gitignore\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.getatime(\u0026#39;a.py\u0026#39;)\n1461418983.486829\n\u0026gt;\u0026gt;\u0026gt; os.path.getatime(\u0026#39;~/git\u0026#39;)\nTraceback (most recent call last):\nFile \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\nFile \u0026#34;/usr/lib/python3.5/genericpath.py\u0026#34;, line 60, in getatime\nreturn os.stat(filename).st_atime\nFileNotFoundError: [Errno 2] No such file or directory: \u0026#39;~/git\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.getatime(\u0026#39;./git/.git/config\u0026#39;)\n1461856107.9136002\nos.path.getmtime(path) #返回在此path下最后一次修改的时间。\n\u0026gt;\u0026gt;\u0026gt; os.path.getmtime(\u0026#39;aa.py\u0026#39;)\n1461933858.6676357\nos.path.getctime(path)\n\u0026gt;\u0026gt;\u0026gt; os.path.getctime(\u0026#39;aa.py\u0026#39;)\n1461933858.6676357\nos.path.getsize(path) #返回文件大小，如果文件不存在就返回错误\n\u0026gt;\u0026gt;\u0026gt; os.path.getsize(\u0026#39;aa.py\u0026#39;)\n448\nos.path.isabs(path) #判断是否为绝对路径\n\u0026gt;\u0026gt;\u0026gt; os.path.isabs(\u0026#39;aa.py\u0026#39;)\nFalse\n\u0026gt;\u0026gt;\u0026gt; os.path.isabs(\u0026#39;~/test/aa.py\u0026#39;)\nFalse\n\u0026gt;\u0026gt;\u0026gt; os.path.isabs(\u0026#39;/home/jianglin/test/aa.py\u0026#39;)\nTrue\nos.path.isfile(path) #判断路径是否为文件\n\u0026gt;\u0026gt;\u0026gt; os.path.isfile(\u0026#39;aa.py\u0026#39;)\nTrue\n\u0026gt;\u0026gt;\u0026gt; os.path.isfile(\u0026#39;~/test\u0026#39;)\nFalse\nos.path.isdir(path) #判断路径是否为目录\n\u0026gt;\u0026gt;\u0026gt; os.path.isdir(\u0026#39;~/test\u0026#39;)\nFalse\n\u0026gt;\u0026gt;\u0026gt; os.path.isdir(\u0026#39;/home/jianglin/test/aa.py\u0026#39;)\nFalse\n\u0026gt;\u0026gt;\u0026gt; os.path.isdir(\u0026#39;/home/jianglin/test\u0026#39;)\nTrue\nos.path.islink(path) #判断路径是否为链接\n\nos.path.ismount(path) #判断路径是否为挂载点（）\n\nos.path.join(path1[, path2[, …]]) #把目录和文件名合成一个路径\n\u0026gt;\u0026gt;\u0026gt; os.path.join(\u0026#39;/home/jianglin/test\u0026#39;,\u0026#39;aa.py\u0026#39;)\n\u0026#39;/home/jianglin/test/aa.py\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.join(\u0026#39;/home/jianglin\u0026#39;,\u0026#39;test/aa.py\u0026#39;)\n\u0026#39;/home/jianglin/test/aa.py\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; os.path.join(\u0026#39;~\u0026#39;,\u0026#39;test/aa.py\u0026#39;)\n\u0026#39;~/test/aa.py\u0026#39;\nos.path.normcase(path) #转换path的大小写和斜杠\n\nos.path.normpath(path) #规范path字符串形式\n\nos.path.realpath(path) #返回path的真实路径\n\nos.path.relpath(path[, start]) #从start开始计算相对路径\n\nos.path.samefile(path1, path2) #判断目录或文件是否相同\n\nos.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件\n\nos.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件\n\nos.path.split(path) #把路径分割成dirname和basename，返回一个元组\n\u0026gt;\u0026gt;\u0026gt; os.path.split(\u0026#39;~/test/aa.py\u0026#39;)\n(\u0026#39;~/test\u0026#39;, \u0026#39;aa.py\u0026#39;)\nos.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组\n\nos.path.splitext(path) #分割路径，返回路径名和文件扩展名的元组\n\nos.path.splitunc(path) #把路径分割为加载点与文件\n\nos.path.walk(path, visit, arg) #遍历path，进入每个目录都调用visit函数，visit函数必须有\n\n\n   3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有\n\n\n\n   文件名，args则为walk的第三个参数\n\n\nos.path.supportsunicodefilenames #设置是否支持unicode路径名","index":122,"permalink":"https://honmaple.me/articles/2016/07/python的os模块学习.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eProcess Parameters\u003c/h1\u003e\n\n\u003ch2 id=\"heading-1.1\"\u003eos.environ(环境变量)\u003c/h2\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eenviron[\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eHOME\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e]\n\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/home/xxx\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"heading-1.2\"\u003eos.getenv(key, default=None)\u003c/h2\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetenv(\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eHOME\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/home/xxx\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"heading-2\"\u003eos.path\u003c/h1\u003e\n\n\u003ch2 id=\"heading-2.1\"\u003eos...\u003c/h2\u003e","title":"python的os模块学习"},{"content":"\u0026gt;\u0026gt;\u0026gt; import datetime\n\nstring转datetime\n\u0026gt;\u0026gt;\u0026gt; import datetime\n\u0026gt;\u0026gt;\u0026gt; str = \u0026#34;2016-04-03\u0026#34;\n\u0026gt;\u0026gt;\u0026gt; date_time = datetime.datetime.strptime(str,\u0026#39;%Y-%m-%d\u0026#39;)\n\u0026gt;\u0026gt;\u0026gt; date_time\ndatetime.datetime(2016, 4, 3, 0, 0)\n\ndatetime转string\n\u0026gt;\u0026gt;\u0026gt; date_time.strftime(\u0026#39;%Y-%m-%d\u0026#39;)\n\u0026#39;2016-04-03\u0026#39;\n\ndatetime转时间戳\n\u0026gt;\u0026gt;\u0026gt; time_time = time.mktime(date_time.timetuple())\n\u0026gt;\u0026gt;\u0026gt; time_time\n1459612800.0\n\n时间戳转string\n\u0026gt;\u0026gt;\u0026gt; time.strftime(\u0026#39;%Y-%m-%d\u0026#39;,time.localtime(time_time))\n\u0026#39;2016-04-03\u0026#39;","index":123,"permalink":"https://honmaple.me/articles/2016/04/python时间转换.html","summary":"\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026gt;\u0026gt;\u0026gt; import datetime\n\u003c/pre\u003e\n\u003ch3\u003estring转datetime\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026gt;\u0026gt;\u0026gt; import datetime\n\u0026gt;\u0026gt;\u0026gt; str = \u0026#34;2016-04-03\u0026#34;\n\u0026gt;\u0026gt;\u0026gt; date_time = datetime.datetime.strptime(str,\u0026#39;%Y-%m-%d\u0026#39;...\u003c/pre\u003e","title":"python时间转换"},{"content":"参考 这里\n\n\nclass TailRecurseException(BaseException):\n    def __init__(self, args, kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\n\ndef tail_call_optimized(g):\n    \u0026#34;\u0026#34;\u0026#34;\n    This function decorates a function with tail call\n    optimization. It does this by throwing an exception\n    if it is it\u0026#39;s own grandparent, and catching such\n    exceptions to fake the tail call optimization.\n\n    This function fails if the decorated\n    function recurses in a non-tail context.\n    \u0026#34;\u0026#34;\u0026#34;\n\n    def func(*args, **kwargs):\n        f = sys._getframe()\n        # 为什么是grandparent, 函数默认的第一层递归是父调用,\n        # 对于尾递归, 不希望产生新的函数调用(即:祖父调用),\n        # 所以这里抛出异常, 拿到参数, 退出被修饰函数的递归调用栈!(后面有动图分析)\n        if f.f_back and f.f_back.f_back \\\n            and f.f_back.f_back.f_code == f.f_code:\n            # 抛出异常\n            raise TailRecurseException(args, kwargs)\n        else:\n            while 1:\n                try:\n                    return g(*args, **kwargs)\n                except TailRecurseException as e:\n                    # 捕获异常, 拿到参数, 退出被修饰函数的递归调用栈\n                    args = e.args\n                    kwargs = e.kwargs\n\n    func.__doc__ = g.__doc__\n    return func\n\n\n\n测试\n\n@tail_call_optimized\ndef factorial(n, acc=1):\n    \u0026#34;calculate a factorial\u0026#34;\n    from pudb import set_trace\n    set_trace()\n    if n == 0:\n        return acc\n    return factorial(n - 1, n + acc)\n\nprint factorial(10000)","index":124,"permalink":"https://honmaple.me/articles/2017/12/python尾递归优化.html","summary":"\n\u003cp\u003e\n参考 \u003ca href=\"https://segmentfault.com/a/1190000007641519\"\u003e这里\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTailRecurseException\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eBaseException\u003c/span\u003e):\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self, args, kwargs):\n        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e args\n        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ekwargs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e kwargs\n\n\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etail_call_optimized\u003c/span\u003e(g):\n    \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    This function decorates a function with tail call\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    optimization. It...\u003c/span\u003e\u003c/pre\u003e","title":"python尾递归优化"},{"content":"一个装饰器\n\n\nfrom functools import wraps\n\ndef log(func):\n    @wraps(func)\n    def wrapper(*args, **kw):\n        print(\u0026#39;call %s():\u0026#39; % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n\n\n或者针对带参数的decorator：\n\n\ndef log(text):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            print(\u0026#39;%s %s():\u0026#39; % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator","index":125,"permalink":"https://honmaple.me/articles/2016/07/python复习--装饰器.html","summary":"\n\u003cp\u003e\n一个装饰器\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e functools \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e wraps\n\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(func):\n    \u003cspan style=\"color:#a6e22e\"\u003e@wraps\u003c/span\u003e(func)\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrapper\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ekw):\n        \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ecall \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e():\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e func\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e__name__)\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e func(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ekw)\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e wrapper\u003c/pre\u003e\n\n\u003cp\u003e\n或者针对带参数的decorator：\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(text):\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edecorator\u003c/span\u003e(func):\n        \u003cspan style=\"color:#a6e22e\"\u003e@wraps\u003c/span\u003e(func...\u003c/pre\u003e","title":"python复习--装饰器"},{"content":"map\n\nmap()函数接收两个参数，一个是函数，一个是Iterable，\nmap将传入的函数依次作用到序列的每个元素，\n并把结果作为新的Iterator返回。\n\u0026gt;\u0026gt;\u0026gt; def f(x):\n...     return x * x\n...\n\u0026gt;\u0026gt;\u0026gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\u0026gt;\u0026gt;\u0026gt; list(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n或者\n\u0026gt;\u0026gt;\u0026gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n[\u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;]\n\nreduce\n\nreduce把一个函数作用在一个序列[x1, x2, x3, ...]上，\n这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算\n\u0026gt;\u0026gt;\u0026gt; from functools import reduce\n\u0026gt;\u0026gt;\u0026gt; def add(x, y):\n...     return x + y\n...\n\u0026gt;\u0026gt;\u0026gt; reduce(add, [1, 3, 5, 7, 9])\n25\n\nfilter\n\nfilter()把传入的函数依次作用于每个元素，\n然后根据返回值是True还是False决定保留还是丢弃该元素。\n例如，在一个list中，删掉偶数，只保留奇数，可以这么写：\ndef is_odd(n):\n    return n % 2 == 1\n\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# 结果: [1, 5, 9, 15]\n\nsorted\n\nsorted()可以对list进行排序\n\nkey\n\n接收*key*实现自定义排序\n\u0026gt;\u0026gt;\u0026gt; sorted([36, 5, -12, 9, -21], key=abs)\n[5, 9, -12, -21, 36]\n\n对字符串排序，是按照ASCII的大小比较的\n排序忽略大小写\n\u0026gt;\u0026gt;\u0026gt; sorted([\u0026#39;bob\u0026#39;, \u0026#39;about\u0026#39;, \u0026#39;Zoo\u0026#39;, \u0026#39;Credit\u0026#39;], key=str.lower)\n[\u0026#39;about\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;Credit\u0026#39;, \u0026#39;Zoo\u0026#39;]\n\nreverse\n\nreverse = True反向排序\n\u0026gt;\u0026gt;\u0026gt; sorted([\u0026#39;bob\u0026#39;, \u0026#39;about\u0026#39;, \u0026#39;Zoo\u0026#39;, \u0026#39;Credit\u0026#39;], key=str.lower, reverse=True)\n[\u0026#39;Zoo\u0026#39;, \u0026#39;Credit\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;about\u0026#39;]\n\n返回函数\n\n返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，\n或者后续会发生变化的变量。\n\n匿名函数lambda\n\n可以把匿名函数赋值给一个变量，再利用变量来调用该函数：\n\u0026gt;\u0026gt;\u0026gt; f = lambda x: x * x\n\u0026gt;\u0026gt;\u0026gt; f\n\u0026lt;function \u0026lt;lambda\u0026gt; at 0x101c6ef28\u0026gt;\n\u0026gt;\u0026gt;\u0026gt; f(5)\n25\n\n把匿名函数作为返回值返回:\ndef build(x, y):\n    return lambda: x * x + y * y","index":126,"permalink":"https://honmaple.me/articles/2016/03/python复习(二).html","summary":"\n\u003ch3\u003emap\u003c/h3\u003e\n\n\u003cp\u003emap()函数接收两个参数，一个是函数，一个是Iterable，\nmap将传入的函数依次作用到序列的每个元素，\n并把结果作为新的Iterator返回。\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026gt;\u0026gt;\u0026gt; def f(x):\n...     return x * x\n...\n\u0026gt;\u0026gt;\u0026gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\u0026gt;\u0026gt;\u0026gt; list...\u003c/pre\u003e","title":"python复习(二)"},{"content":"·参考\n\n循环\n\nranger(100)表示0到99这一百个数\n可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。\n把list、dict、str等Iterable变成Iterator可以使用iter()函数\n\n不可变对象\n\u0026gt;\u0026gt;\u0026gt; a = \u0026#39;abc\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; a.replace(\u0026#39;a\u0026#39;, \u0026#39;A\u0026#39;)\n\u0026#39;Abc\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; a\n\u0026#39;abc\u0026#39;\n\n列表(list)\n# 向列表追加元素  \na = [\u0026#39;hello\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;]\na.append(\u0026#39;world\u0026#39;)\n# 删除列表最后一个元素\na.pop()\n\n切片\n# 从a[0]开始到a[2]\na[0:3]\n# 或者,省略0\na[:3]\n# 省略-1\na[-2:]\n# 每两个取一个\na[::2]\n\n迭代\n\n判断是否可迭代\nisinstance(x, Iterable)\n\n下标循环\n\u0026gt;\u0026gt;\u0026gt; for i, value in enumerate([\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;]):\n...     print(i, value)\n...\n0 A\n1 B\n2 C\n\n列表生成式\n\u0026gt;\u0026gt;\u0026gt; [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n# 或者\n\u0026gt;\u0026gt;\u0026gt; [x * x for x in range(1, 11) if x % 2 == 0]\n[4, 16, 36, 64, 100]\n# 使用两层循环，生成全排列\n\u0026gt;\u0026gt;\u0026gt; [m + n for m in \u0026#39;ABC\u0026#39; for n in \u0026#39;XYZ\u0026#39;]\n[\u0026#39;AX\u0026#39;, \u0026#39;AY\u0026#39;, \u0026#39;AZ\u0026#39;, \u0026#39;BX\u0026#39;, \u0026#39;BY\u0026#39;, \u0026#39;BZ\u0026#39;, \u0026#39;CX\u0026#39;, \u0026#39;CY\u0026#39;, \u0026#39;CZ\u0026#39;]\n\n元组(tuple)\n# 只有一个元素时\na = (\u0026#39;hello\u0026#39;,)\n# 而不是\na = (\u0026#39;hello\u0026#39;)\n\n字典(dict)\n\nkey不存在\n\n如果key不存在,dict会报错\n    \u0026gt;\u0026gt;\u0026gt; a[\u0026#39;hello\u0026#39;]\n    Traceback (most recent call last):\n      File \u0026#34;\u0026#34;, line 1, in \n    KeyError: \u0026#39;hello\u0026#39;\n可以用get方式避免报错,如果key不存在，返回None,或者自己指定的value\n    \u0026gt;\u0026gt;\u0026gt; a.get(\u0026#39;hello\u0026#39;)\n    \u0026gt;\u0026gt;\u0026gt; a.get(\u0026#39;hello\u0026#39;, -1)\n    -1\n\n删除key\na.pop(\u0026#39;hello\u0026#39;)\n\nset\n\nkey不会重复\na = set([1,2,3])\n# 添加key到set\na.add(4)\n# 删除key从set\na.add(4)\n\nset可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：\n\u0026gt;\u0026gt;\u0026gt; s1 = set([1, 2, 3])\n\u0026gt;\u0026gt;\u0026gt; s2 = set([2, 3, 4])\n\u0026gt;\u0026gt;\u0026gt; s1 \u0026amp; s2\n{2, 3}\n\u0026gt;\u0026gt;\u0026gt; s1 | s2\n{1, 2, 3, 4}\n\n迭代key和value\nfor k,v in a.items():\n    print(k,v)\n\n数据类型转化及内置函数\n# 转换函数\nint float str bool\n# 数据类型检查\nisinstance(x, (int, float))\n\ngenerator\n\n生成一个generator\n\u0026gt;\u0026gt;\u0026gt; g = (x * x for x in range(2))\n\u0026gt;\u0026gt;\u0026gt; g\n\u0026lt;generator object \u0026lt;genexpr\u0026gt; at 0x1022ef630\u0026gt;\n\n输出generator\n\u0026gt;\u0026gt;\u0026gt; next(g)\n0\n\u0026gt;\u0026gt;\u0026gt; next(g)\n1\n\u0026gt;\u0026gt;\u0026gt; next(g)\nTraceback (most recent call last):\n  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\nStopIteration\n\n或者使用for\n\nyield\n\n可将函数输出转化为generator\n\n函数\n\n函数没有return，默认return None,简写为return\n返回多个数return \u0026#39;hello\u0026#39;,\u0026#39;world\u0026#39;其实质是一个tuple\n\n可变参数\ndef calc(numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n调用是需要使用list或tuple,calc([1,2,3])或calc((1,2,3))\n使用可变参数\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n调用时就可以calc(1,2,3)\n也可以将list或tuple传入\n\u0026gt;\u0026gt;\u0026gt; nums = [1, 2, 3]\n\u0026gt;\u0026gt;\u0026gt; calc(*nums)\n14\n\n关键字参数\ndef person(name, age, **kw):\n    print(\u0026#39;name:\u0026#39;, name, \u0026#39;age:\u0026#39;, age, \u0026#39;other:\u0026#39;, kw)\n\n调用时可以只传入name和age,或者传入任意个数的关键字参数\n\u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Michael\u0026#39;, 30)\nname: Michael age: 30 other: {}\n\u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Adam\u0026#39;, 45, gender=\u0026#39;M\u0026#39;, job=\u0026#39;Engineer\u0026#39;)\nname: Adam age: 45 other: {\u0026#39;gender\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;}\n\n也可这样调用\n\u0026gt;\u0026gt;\u0026gt; extra = {\u0026#39;city\u0026#39;: \u0026#39;Beijing\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;}\n\u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Jack\u0026#39;, 24, **extra)\n\n命名关键字参数\n\n如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：\ndef person(name, age, *, city, job):\n    print(name, age, city, job)\n\n参数组合\n\n参数定义的顺序必须是：必选参数、默认参数、可变参数/命名关键字参数和关键字参数\n\n尾递归","index":127,"permalink":"https://honmaple.me/articles/2016/03/python复习(一).html","summary":"\u003cp\u003e·\u003ca href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\"\u003e参考\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e循环\u003c/h3\u003e\n\n\u003cp\u003eranger(100)表示0到99这一百个数\u003cbr\u003e\n可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。\u003cbr\u003e\n把list、dict、str等Iterable变成Iterator可以使用iter()函数\u003c/p\u003e\n\n\u003ch3\u003e不可变对象\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026gt;\u0026gt;\u0026gt; a = \u0026#39;abc\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; a.replace(\u0026#39;a\u0026#39;, \u0026#39;A\u0026#39;)\n\u0026#39;Abc\u0026#39;\n\u0026gt;...\u003c/pre\u003e","title":"python复习(一)"},{"content":"import hashlib\nimport base64\n\ndata = \u0026#39;123456\u0026#39;\ndata = data.encode(\u0026#39;utf-8\u0026#39;)\nmd5 = hashlib.md5()\nmd5.update(data)\nprint (\u0026#34;md5加密 :%s\u0026#34;%md5.hexdigest())\nsha1 = hashlib.sha1()\nsha1.update(data)\nprint (\u0026#34;sha1加密: %s\u0026#34;%sha1.hexdigest())\nsha224 = hashlib.sha224()\nsha224.update(data)\nprint (\u0026#34;sha224加密: %s\u0026#34;%sha224.hexdigest())\nsha256 = hashlib.sha256()\nsha256.update(data)\nprint (\u0026#34;sha256加密: %s\u0026#34;%sha256.hexdigest())\nsha384 = hashlib.sha384()\nsha384.update(data)\nprint (\u0026#34;sha384加密: %s\u0026#34;%sha384.hexdigest())\nsha512 = hashlib.sha512()\nsha512.update(data)\nprint (\u0026#34;sha512加密: %s\u0026#34;%sha512.hexdigest())\nnew = hashlib.new(\u0026#39;ripemd160\u0026#39;)\nnew.update(data)\nprint (\u0026#34;new加密: %s\u0026#34;%new.hexdigest())\nb = base64.encodestring(data)\nc = base64.decodestring(b)\nprint (\u0026#34;base64加密: %s\u0026#34;%b)\nprint (\u0026#34;base64解密: %s\u0026#34;%c)","index":128,"permalink":"https://honmaple.me/articles/2016/04/python一些加密解密.html","summary":"\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eimport hashlib\nimport base64\n\ndata = \u0026#39;123456\u0026#39;\ndata = data.encode(\u0026#39;utf-8\u0026#39;)\nmd5 = hashlib.md5()\nmd5.update(data)\nprint (\u0026#34;md5加密 :%s\u0026#34;%md5.hexdigest())\nsha1 = hashlib.sha1()\nsha1...\u003c/pre\u003e","title":"python一些加密解密"},{"content":"Table of Contents\nprint\nstring\n比值问题\n编码问题\n\nsys.setdefaultencoding(\u0026#39;utf-8\u0026#39;)\nencode、decode\n编码转换\n\ncmp\nsorted\nException\nSSL\nfile.read\nredis\nrequests\n\n自定义编码请求\n\npost json\npost form\n\n响应编码\n请求headers顺序\n\ndjango\n\n\n\n\n首先使用工具 2to3 转换\n\n2to3 目录名 -w -n\n\n\nprint\n\n   stackoverflow.com/questions/55559825/how-to-fix-print-double-parentheses-after-2to3-conversion\n\n\n\n\n 问题:\n     如果在python2项目里使用了python3的写法，比如在 python2 里的 print(\u0026#34;test\u0026#34;), 使用 2to3 就会转换成\n\nprint((\u0026#34;test\u0026#34;))\n\n     所以需要找到 print(( 并修复该转换(其实不转也没什么问题)\n\nag -Gpy \u0026#39;print((\u0026#39;\n\n\n 修复:\n\n- print((\u0026#34;test\u0026#34;))\n+ print(\u0026#34;test\u0026#34;)\n\n\n\nstring\n\n\n\n 问题1:\n\nmodule \u0026#39;string\u0026#39; has no attribute \u0026#39;letters\n\n\n 修复:\n\n- string.letters\n+ string.ascii_letters\n\n\n\n\n 问题2:\n\n\u0026#39;str\u0026#39; object has no attribute \u0026#39;decode\u0026#39;\n\n\n 修复:\n\n- str.decode(xxx)\n+ str.encode(xxx).decode(\u0026#39;unicode_escape\u0026#39;)\n\n\n\n比值问题\nslice indices must be integers or None or have an __index__ method\n\n\n\n\n 问题:\n     python2里 3/2 返回的是整型 1\n     python3里 3/2 返回的是浮点型 1.5\n\n\n\n 修复:\n\nprint(3//2)\n# 或者\nprint(int(3/2))\n\n\n编码问题\nsys.setdefaultencoding(\u0026#39;utf-8\u0026#39;)\n\n    python2里的 sys.setdefaultencoding(\u0026#39;utf-8\u0026#39;) 需要删除\n\n\nencode、decode\n\n\n\n 问题:\n\nLookupError: \u0026#39;base64\u0026#39; is not a text encoding; use codecs.encode() to handle arbitrary codecs\n\n\n 语法:\n\n\n\n\n python2\n\nPython 2.7.16 (default, Dec 21 2020, 23:00:36)\n[GCC Apple LLVM 12.0.0 (clang-1200.0.30.4) [+internal-os, ptrauth-isa=sign+stri on darwin\nType \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information.\n\u0026gt;\u0026gt;\u0026gt; a = \u0026#34;a\u0026#34;\n\u0026gt;\u0026gt;\u0026gt; a.encode(\u0026#34;base64\u0026#34;)\n\u0026#39;YQ==\\n\u0026#39;\n\u0026gt;\u0026gt;\u0026gt; b = a.encode(\u0026#34;base64\u0026#34;)\n\u0026gt;\u0026gt;\u0026gt; b.decode(\u0026#34;base64\u0026#34;)\n\u0026#39;a\u0026#39;\n\n\n python3\n\nPython 3.7.4 (default, Sep  7 2020, 15:30:33)\n[Clang 11.0.3 (clang-1103.0.32.29)] on darwin\nType \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information.\n\u0026gt;\u0026gt;\u0026gt; a = \u0026#34;a\u0026#34;\n\u0026gt;\u0026gt;\u0026gt; a.encode(\u0026#34;base64\u0026#34;)\nTraceback (most recent call last):\n  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\nLookupError: \u0026#39;base64\u0026#39; is not a text encoding; use codecs.encode() to handle arbitrary codecs\n\n\n\n 修复:\n\nimport base64\n\ndef b64encode(s):\n    if isinstance(s, bytes):\n        return base64.b64encode(s)\n    return base64.b64encode(s.encode(\u0026#39;utf-8\u0026#39;)).decode(\u0026#39;utf-8\u0026#39;)\n\ndef b64decode(s):\n    return base64.b64decode(s).decode(\u0026#39;utf-8\u0026#39;)\n- x.encode(\u0026#39;base64\u0026#39;)\n- x.decode(\u0026#39;base64\u0026#39;)\n+ b64encode(x)\n+ b64decode(x)\n\n\n\n编码转换\n\n    utf-8转换为gbk\n\n\n\n\n python2\n\n\u0026#39;hello世界\u0026#39;.decode(\u0026#39;utf-8\u0026#39;).encode(\u0026#39;gbk\u0026#39;)\n\n\n python3\n\n\u0026#39;\u0026#39;.join([chr(i) for i in \u0026#39;hello世界\u0026#39;.encode(\u0026#39;gbk\u0026#39;)])\n# 或者\n\u0026#39;hello世界\u0026#39;.encode(\u0026#39;gbk\u0026#39;).decode(\u0026#39;unicode_escape\u0026#39;)\n\n\ncmp\n\n   python3里cmp内置函数不再存在，需要自定义函数\n\ndef cmp(a, b):\n    return (a \u0026gt; b) - (a \u0026lt; b)\n\nsorted\n\n   python2里sorted有一个cmp参数，python3里统一为key参数\n\n\n\n\n\n python2\n\nsorted(keys, lambda x, y: cmp(len(x), len(y)), reverse=True)\n\n\n python3\n\nfrom functools import cmp_to_key\n\nsorted(keys, key=cmp_to_key(lambda x, y: cmp(len(x), len(y))), reverse=True)\n\n     注意: must use keyword argument for key function\n\n\n\nException\n\n\n\n python3里没有 .message, 所以需要修改 e.message 为 str(e)\n\n\n\n python3无法使用 as 直接对变量赋值\n\ndef main():\n    err = None\n    try:\n        raise ValueError(\u0026#34;sss\u0026#34;)\n    -    except Exception as err:\n    -       pass\n    +    except Exception as e:\n    +       err = e\n    return err\n\nprint(main())\n\nUnboundLocalError: local variable \u0026#39;err\u0026#39; referenced before assignment\n\n\nSSL\n\n\n\n 问题:\n\nFile \u0026#34;/usr/local/lib/python3.6/dist-packages/OpenSSL/SSL.py\u0026#34;, line 1591, in set_tlsext_host_name\nraise TypeError(\u0026#34;name must be a byte string\u0026#34;)\n\n\n\n 解决\n\n- s.set_tlsext_host_name(hostname)\n+ s.set_tlsext_host_name(hostname.encode(\u0026#39;utf-8\u0026#39;))\n\n\nfile.read\nwith open(\u0026#34;test.txt\u0026#34;, \u0026#34;rb\u0026#34;) as f:\n    for i in f.read(10):\n        print(i, type(i))\n\n\n\n\n python2\n\n(\u0026#39;\\x7f\u0026#39;, \u0026lt;type \u0026#39;str\u0026#39;\u0026gt;)\n(\u0026#39;E\u0026#39;, \u0026lt;type \u0026#39;str\u0026#39;\u0026gt;)\n(\u0026#39;\\x00\u0026#39;, \u0026lt;type \u0026#39;str\u0026#39;\u0026gt;)\n\n\n python3\n\n127 \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;\n69 \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;\n0 \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;\n\n\n 两者之间的转换\n\nord(\u0026#39;\\x7f\u0026#39;) == 127\nchr(127) == \u0026#39;\\x7f\u0026#39;\n\n\nredis\n\n   python3里默认取出的值是 bytes 类型, 需要客户端添加 decode_responses=True 参数, 取出的值才是 str 类型\n\n\nrequests\n自定义编码请求\n\n    github.com/psf/requests/issues/4133\n\npost json\n\n\n\n python2\n\ndata = {\u0026#39;test\u0026#39;: \u0026#39;hello世界\u0026#39;.decode(\u0026#39;utf-8\u0026#39;).encode(\u0026#39;gbk\u0026#39;)}\nheaders = {\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=gbk\u0026#39;}\ndata=json.dumps(data,ensure_ascii=False)\nrsp = requests.post(\u0026#34;/dynamic/test\u0026#34;, data=data,headers=headers)\n\n\n python3\n\ndata = {\u0026#39;test\u0026#39;: \u0026#39;hello世界\u0026#39;}\nheaders = {\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=gbk\u0026#39;}\ndata=json.dumps(data, ensure_ascii=False)\nresp = requests.post(\u0026#34;/dynamic/test\u0026#34;, data=data.encode(\u0026#39;gbk\u0026#39;), headers=headers)\n\n\npost form\n\n\n\n python2\n\ndata = {\u0026#39;test\u0026#39;: \u0026#39;hello世界\u0026#39;.decode(\u0026#39;utf-8\u0026#39;).encode(\u0026#39;gbk\u0026#39;)}\nheaders = {\u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded;charset=gbk\u0026#39;}\nresp = requests.post(\u0026#34;/dynamic/test\u0026#34;, data=data,headers=headers)\n\n\n python3\n\ndata = {\u0026#39;test\u0026#39;: \u0026#39;hello世界\u0026#39;.encode(\u0026#39;gbk\u0026#39;)}\nheaders = {\u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded;charset=gbk\u0026#39;}\nresp = requests.post(\u0026#34;/dynamic/test\u0026#34;, data=data,headers=headers)\n\n\n响应编码\nresp = requests.get(\u0026#34;...\u0026#34;)\nprint(type(resp.content))\nprint(type(resp.text))\n\n\n\n\n python2\n      resp.content 是 str 类型, resp.text 是 unicode 类型\n\n\n\n python3\n      resp.content 是 bytes 类型, resp.text 是 str 类型\n\n\n\n请求headers顺序\n\n    根源主要在 requests.structures 的 CaseInsensitiveDict 类\n\nfrom requests.structures import CaseInsensitiveDict\nfrom collections import OrderedDict\n\nheaders = {\n    \u0026#39;Accept-Language\u0026#39;: \u0026#39;en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4\u0026#39;,\n    \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate, sdch\u0026#39;,\n    \u0026#39;cache\u0026#39;: 0,\n    \u0026#39;host\u0026#39;: \u0026#39;Host1.com\u0026#39;,\n    \u0026#39;Accept\u0026#39;: \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u0026#39;,\n    \u0026#39;User-Agent\u0026#39;: \u0026#39;curl/7.29.0\u0026#39;,\n    \u0026#39;Host\u0026#39;: \u0026#39;Host2.com\u0026#39;\n}\nprint(headers)\n\nr = CaseInsensitiveDict()\nr.update(headers)\nprint(r)\n\n\n    不同的python版本结果会输出\n\n\n\n\n python2\n\nOrderedDict([(\u0026#39;Accept-Language\u0026#39;, \u0026#39;en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4\u0026#39;), (\u0026#39;Accept-Encoding\u0026#39;, \u0026#39;gzip, deflate, sdch\u0026#39;), (\u0026#39;cache\u0026#39;, 0), (\u0026#39;Host\u0026#39;, \u0026#39;Host2.com\u0026#39;), (\u0026#39;Accept\u0026#39;, \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u0026#39;), (\u0026#39;User-Agent\u0026#39;, \u0026#39;curl/7.29.0\u0026#39;), (\u0026#39;host\u0026#39;, \u0026#39;Host1.com\u0026#39;)])\nCaseInsensitiveDict({\u0026#39;Accept-Language\u0026#39;: \u0026#39;en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4\u0026#39;, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate, sdch\u0026#39;, \u0026#39;cache\u0026#39;: 0, \u0026#39;Accept\u0026#39;: \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u0026#39;, \u0026#39;User-Agent\u0026#39;: \u0026#39;curl/7.29.0\u0026#39;, \u0026#39;host\u0026#39;: \u0026#39;Host1.com\u0026#39;})\n\n\n python3\n\nOrderedDict([(\u0026#39;Accept-Language\u0026#39;, \u0026#39;en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4\u0026#39;), (\u0026#39;Accept-Encoding\u0026#39;, \u0026#39;gzip, deflate, sdch\u0026#39;), (\u0026#39;cache\u0026#39;, 0), (\u0026#39;host\u0026#39;, \u0026#39;Host1.com\u0026#39;), (\u0026#39;Accept\u0026#39;, \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u0026#39;), (\u0026#39;User-Agent\u0026#39;, \u0026#39;curl/7.29.0\u0026#39;), (\u0026#39;Host\u0026#39;, \u0026#39;Host2.com\u0026#39;)])\n{\u0026#39;Accept-Language\u0026#39;: \u0026#39;en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4\u0026#39;, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate, sdch\u0026#39;, \u0026#39;cache\u0026#39;: 0, \u0026#39;Host\u0026#39;: \u0026#39;Host2.com\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u0026#39;, \u0026#39;User-Agent\u0026#39;: \u0026#39;curl/7.29.0\u0026#39;}\n\n\n\n    所以如果要兼容两个版本，需要显示的传入\n\nheaders = OrderedDict(sorted(headers.items(), key=lambda x: x[0]))\n\ndjango\n- for k, v in request.GET.iterlists():\n+ for k, v in request.GET.lists():\n\n\n\n   并且k和v的类型在python3里默认为 str ， 不需要使用 k.encode(\u0026#34;utf-8\u0026#34;) 进行转换","index":129,"permalink":"https://honmaple.me/articles/2021/03/python2升级至python3.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n首先使用工具 \u003cb\u003e2to3\u003c/b\u003e 转换\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e2to3 目录名 -w -n\u003c/pre\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003eprint\u003c/h2\u003e\n\u003cp\u003e\n   \u003ca href=\"stackoverflow.com/questions/55559825/how-to-fix-print-double-parentheses-after-2to3-conversion\"\u003estackoverflow.com/questions/55559825/how-to-fix-print-double-parentheses-after-2to3-conversion\u003c/a\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 问题:\n     如果在python2项目里使用了python3的写法，比如在 \u003cb\u003epython2\u003c/b\u003e 里的 \u003ccode\u003eprint(\u0026#34;test\u0026#34;)\u003c/code\u003e, 使用 \u003cb\u003e2to3\u003c/b\u003e 就会转换成\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e((\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003etest...\u003c/span\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"python2升级至python3"},{"content":"Table of Contents\n常见问题\n\npyenv install 3.6.7 失败\n\n相关日志\n解决方式\n参考文档\n\n\n\n\n常见问题\n\npyenv install 3.6.7 失败\n\n\n\n\n 环境: macOs big Sur 11.2.2\n\n\n\n pyenv: 1.2.23\n\n\n\n\n相关日志\n┌─[jianglin]─[~/repo/golang/src/alarm](master)\n└──╼ pyenv install 3.6.7\npython-build: use openssl@1.1 from homebrew\npython-build: use readline from homebrew\nInstalling Python-3.6.7...\npython-build: use readline from homebrew\npython-build: use zlib from xcode sdk\n\nBUILD FAILED (OS X 11.2.2 using python-build 20180424)\n\nInspect or clean up the working tree at /var/folders/44/hnrgfyfn0fsb8lqwk_0h2jvm0000gn/T/python-build.20210318151243.78376\nResults logged to /var/folders/44/hnrgfyfn0fsb8lqwk_0h2jvm0000gn/T/python-build.20210318151243.78376.log\n\nLast 10 log lines:\n        ret = sendfile(in, out, offset, \u0026amp;sbytes, \u0026amp;sf, flags);\n              ^\n./Modules/posixmodule.c:10433:5: warning: code will never be executed [-Wunreachable-code]\n    Py_FatalError(\u0026#34;abort() called from Python code didn\u0026#39;t abort!\u0026#34;);\n    ^~~~~~~~~~~~~\nclang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include   -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include   -std=c99 -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes   -I. -I./Include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl@1.1/include -I/Users/jianglin/repo/python/pyenv/versions/3.6.7/include  -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl@1.1/include -I/Users/jianglin/repo/python/pyenv/versions/3.6.7/include   -DPy_BUILD_CORE  -c ./Modules/pwdmodule.c -o Modules/pwdmodule.o\n1 warning and 1 error generated.\nmake: *** [Modules/posixmodule.o] Error 1\nmake: *** Waiting for unfinished jobs....\n1 warning generated.\n┌─[jianglin]─[~/repo/golang/src/alarm](master)\n└──╼  pyenv install --patch 3.6.7 \u0026lt; \u0026lt;(curl -sSL https://github.com/python/cpython/commit/8ea6353.patch\\?full_index\\=1)\npython-build: use openssl@1.1 from homebrew\npython-build: use readline from homebrew\nInstalling Python-3.6.7...\ncurl: (28) Operation timed out after 300188 milliseconds with 0 out of 0 bytes received\npython-build: use readline from homebrew\npython-build: use zlib from xcode sdk\n\nBUILD FAILED (OS X 11.2.2 using python-build 20180424)\n\nInspect or clean up the working tree at /var/folders/44/hnrgfyfn0fsb8lqwk_0h2jvm0000gn/T/python-build.20210318151644.86904\nResults logged to /var/folders/44/hnrgfyfn0fsb8lqwk_0h2jvm0000gn/T/python-build.20210318151644.86904.log\n\nLast 10 log lines:\n./Modules/posixmodule.c:8211:15: error: implicit declaration of function \u0026#39;sendfile\u0026#39; is invalid in C99 [-Werror,-Wimplicit-function-declaration]\n        ret = sendfile(in, out, offset, \u0026amp;sbytes, \u0026amp;sf, flags);\n              ^\n./Modules/posixmodule.c:10433:5: warning: code will never be executed [-Wunreachable-code]\n    Py_FatalError(\u0026#34;abort() called from Python code didn\u0026#39;t abort!\u0026#34;);\n    ^~~~~~~~~~~~~\n1 warning and 1 error generated.\nmake: *** [Modules/posixmodule.o] Error 1\nmake: *** Waiting for unfinished jobs....\n1 warning generated.\n\n解决方式\n┌─[jianglin]─[~/repo/golang/src/alarm](master)\n└──╼ CFLAGS=-Wno-implicit-function-declaration  pyenv install --patch 3.6.7 \u0026lt; \u0026lt;(curl -sSL https://github.com/python/cpython/commit/8ea6353.patch\\?full_index\\=1)\npython-build: use openssl@1.1 from homebrew\npython-build: use readline from homebrew\nInstalling Python-3.6.7...\ncurl: (7) Failed to connect to github.com port 443: Operation timed out\npython-build: use readline from homebrew\npython-build: use zlib from xcode sdk\nInstalled Python-3.6.7 to /Users/jianglin/repo/python/pyenv/versions/3.6.7\n\n参考文档\n\n\n\n github.com/pyenv/pyenv/issues/1737\n\n\n\n github.com/pyenv/pyenv/issues/1643","index":130,"permalink":"https://honmaple.me/articles/2021/03/pyenv笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e常见问题\u003c/h1\u003e\n\n\u003ch2 id=\"heading-1.1\"\u003epyenv install 3.6.7 失败\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 环境: macOs big Sur 11.2.2\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n pyenv: 1.2.23\n\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"heading-1.1.1\"\u003e相关日志\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e┌─[jianglin]─[~/repo/golang/src/alarm](master)\n└──╼ pyenv install 3.6.7\npython-build...\u003c/pre\u003e","title":"pyenv笔记"},{"content":"postgresql的简单使用\n\npython\n\n参考资料\n\n安装psycopg2\n\n推荐使用venv虚拟环境\npip install psycopg2 \n\n这个API打开一个连接到PostgreSQL数据库。如果成功打开数据库时，它返回一个连接对象\npsycopg2.connect(database=\u0026#34;testdb\u0026#34;, user=\u0026#34;postgres\u0026#34;, password=\u0026#34;cohondob\u0026#34;, host=\u0026#34;127.0.0.1\u0026#34;, port=\u0026#34;5432\u0026#34;) \n\n该程序创建一个光标将用于整个数据库使用Python编程。\nconnection.cursor()\n\n此例程执行SQL语句。可被参数化的SQL语句（即占位符，而不是SQL文字）。 psycopg2的模块支持占位符用％s标志\ncursor.execute(sql [, optional parameters])\n\n该程序执行SQL命令对所有参数序列或序列中的sql映射\ncurosr.executemany(sql, seq_of_parameters)\n\n这个程序执行的存储数据库程序给定的名称。该程序预计为每一个参数，参数的顺序必须包含一个条目。\ncurosr.callproc(procname[, parameters])\n\n这个只读属性，它返回数据库中的行的总数已修改，插入或删除最后 execute*().\ncursor.rowcount\n\n此方法提交当前事务。如果不调用这个方法，无论做了什么修改，自从上次调用commit()是不可见的，从其他的数据库连接。\nconnection.commit()\n\n此方法会回滚任何更改数据库自上次调用commit（）方法\nconnection.rollback()\n\n此方法关闭数据库连接。请注意，这并不自动调用commit（）。如果你只是关闭数据库连接而不调用commit（）方法首先，那么所有更改将会丢失！\nconnection.close()\n\n这种方法提取的查询结果集的下一行，返回一个序列，或者无当没有更多的数据是可用的。\ncursor.fetchone()\n\n这个例程中取出下一个组的查询结果的行数，返回一个列表。当没有找到记录，返回空列表。该方法试图获取尽可能多的行所显示的大小参数。\ncursor.fetchmany([size=cursor.arraysize])\n\n这个例程获取所有查询结果（剩余）行，返回一个列表。空行时则返回空列表\ncursor.fetchall()\n\n可以看出,psycopg2的操作与sqlite类似除了连接数据库","index":131,"permalink":"https://honmaple.me/articles/2015/12/postgresql学习2——使用.html","summary":"\u003cp\u003epostgresql的简单使用\u003c/p\u003e\n\n\u003ch3\u003epython\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.yiibai.com/html/postgresql/2013/080998.html\"\u003e参考资料\u003c/a\u003e\u003c/p\u003e\n\n\u003ch4\u003e安装psycopg2\u003c/h4\u003e\n\n\u003cp\u003e推荐使用venv虚拟环境\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003epip install psycopg2 \n\u003c/pre\u003e\n\u003cp\u003e这个API打开一个连接到PostgreSQL数据库。如果成功打开数据库时，它返回一个连接对象\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003epsycopg2.connect(database=\u0026#34;testdb\u0026#34;, user=\u0026#34;postgres\u0026#34;, password=\u0026#34;cohondob\u0026#34;, host=\u0026#34;127.0.0.1\u0026#34;, port=\u0026#34;5432\u0026#34;...\u003c/pre\u003e","title":"postgresql学习2——使用"},{"content":"最近从sqlite转到postgresql,虽然postgresql比sqlite更加复杂\n\narchlinux\n\n参考资料\n$ sudo pacman -S postgresql\n$ sudo mkdir /var/lib/postgres/data #如果已存在则可以不建立\n$ sudo chmod -R postgres:postgres /var/lib/postgres/data\n由于我安装系统时没有生成en_US_UTF-8本地化文件(如果已经生成了的就\n不必再生成)\n$ sudo vim /etc/locale.gen #找到en_US_UTF-8，注释掉\n$ locale-gen\n\n然后运行\n$ sudo -i -u postgres #或者使用root账户su - postgres\n$ initdb --locale en_US.UTF-8 -E UTF8 -D \u0026#39;/var/lib/postgres/data\u0026#39;\n$ createuser -i #输入你的账户名称,并给管理员权限\n\n最好给postgres用户设置密码\n(注意不是linux系统帐号)\n# su - postgres\n$ psql\n\u0026gt;ALTER USER postgres WITH PASSWORD \u0026#39;yourpasswd\u0026#39;;\n\ncentos\n\n 参考资料\n\n到这里\n下载所需要的rpm安装包\n或者直接\n# yum localinstall http://yum.postgresql.org/9.4/redhat/rhel-6-x86_64/pgdg-centos94-9.4-1.noarch.rpm\n# yum list postgres*\n# yum install postgresql94-server\n# yum install postgresql94-contrib\n\n# service postgresql initdb  #初始化数据库\n# service postgresql start #启动数据库\n# chkconfig postgresql on  #将数据库服务加入启动列表\n修改PostgreSQL 数据库用户postgres的密码\n(注意不是linux系统帐号)\n# su - postgres\n$ psql\n\u0026gt;ALTER USER postgres WITH PASSWORD \u0026#39;yourpasswd\u0026#39;;","index":132,"permalink":"https://honmaple.me/articles/2015/12/postgresql学习1——安装.html","summary":"\u003cp\u003e最近从sqlite转到postgresql,虽然postgresql比sqlite更加复杂\u003c/p\u003e\n\n\u003ch3\u003earchlinux\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/PostgreSQL\"\u003e参考资料\u003c/a\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pacman -S postgresql\n$ sudo mkdir /var/lib/postgres/data #如果已存在则可以不建立\n$ sudo chmod -R postgres:postgres /var/lib/postgres/data\n由于我安装系统时没有生成en_US_UTF-8本地化文件(如果已经生成了的就\n不必再生成)\n$ sudo vim...\u003c/pre\u003e","title":"postgresql学习1——安装"},{"content":"这几天参考imenu-list重写了一个类似 vim 中tagbar的插件 maple-imenu,  其实之前我一直在使用另一个类似的插件—— imenu-list, 虽然imenu-list已经足够使用了, 但它和golden-ratio搭配起来很难受， golden-ratio 我是常开的, 但imenu-list也会偶尔使用(浏览及讲解代码必备，否则查找某个函数和变量时很难受的)\n\n\n\n原本我想要自定义一下imenu-list，但看了源码之后, 发现很多地方都不符合我的需求， 而且需要改动的地方越来越多，最后不如自己重写\n\n\n\n\n\n 如何使用\n  下载文件复制到 $HOME/.emacs.d/site-lisp/maple-imenu 目录, 然后\n\n(use-package maple-imenu\n  :load-path \u0026#34;site-lisp/maple-imenu\u0026#34;\n  :commands (maple-imenu)\n  :config\n  (with-eval-after-load \u0026#39;evil\n    (evil-make-overriding-map maple-imenu-mode-map \u0026#39;normal)))\n\nM-x maple-imenu\n\n  \n    \n      [[https://static.honmaple.com/images/2018/10/maple-imenu-1.png]]\n    \n    \n     [[https://static.honmaple.com/images/2018/10/maple-imenu-2.png]]\n    \n  \n\n\n\n 相关变量\n\n\n\n\n maple-imenu-buffer\n    maple-imenu buffer name, default *maple-imenu*\n\n\n\n maple-imenu-displayed-buffer\n    displayed buffer name, default nil\n\n\n\n maple-imenu-overlays\n    save overlay info, toggle open or close entry\n\n\n\n maple-imenu-width\n    maple-imenu window size, default 25\n\n\n\n maple-imenu-padding\n    maple-imenu prefix padding, default 2\n\n\n\n maple-imenu-position\n    maple-imenu window display position, default \u0026#39;right, or \u0026#39;left\n\n\n\n maple-imenu-arrow\n    open or close arrow, default (\u0026#34;▾\u0026#34; . \u0026#34;▸\u0026#34;)\n\n\n\n maple-imenu-auto-update\n    auto update when t, after save every time\n\n\n\n\n\n 相比较imenu-list\n  ➊ 代码和逻辑我认为与 imenu-list 比起来更加通俗易懂\n\n\n\n  ➋ window fixed, 至少与golden-ratio搭配不那么难受\n\n\n\n  ➌ 更多我可以控制和自定义的地方","index":133,"permalink":"https://honmaple.me/articles/2018/10/maple-imenu——类似tagbar的emacs插件.html","summary":"\n\u003cp\u003e\n这几天参考\u003ccode\u003eimenu-list\u003c/code\u003e重写了一个类似 vim 中\u003ccode\u003etagbar\u003c/code\u003e的插件 \u003ca href=\"https://github.com/honmaple/dotfiles/blob/master/emacs.d/site-lisp/maple/maple-imenu.el\"\u003emaple-imenu\u003c/a\u003e,  其实之前我一直在使用另一个类似的插件—— \u003cb\u003eimenu-list\u003c/b\u003e, 虽然\u003cb\u003eimenu-list\u003c/b\u003e已经足够使用了, 但它和\u003cb\u003egolden-ratio\u003c/b\u003e搭配起来很难受， \u003cb\u003egolden-ratio\u003c/b\u003e 我是常开的, 但\u003cb\u003eimenu-list\u003c/b\u003e也会偶尔使用(浏览及讲解代码必备，否则查找某个函数和变量时很难受的)\n\u003c/p\u003e\n\n\u003cp\u003e\n原本我想要自定义一下\u003cb\u003eimenu-list\u003c/b\u003e，但看了源码之后, 发现很多地方都不符合我的需求， 而且需要改动的地方越来越多...\u003c/p\u003e","title":"maple-imenu——类似tagbar的emacs插件"},{"content":"Table of Contents\n安装homebrew\n\n切换中国源\n恢复官方源\n\nbrew更新\nmacos使用深色菜单栏\n安装powerline字体\n禁止.DS_store生成\n移动文件\n复制文本到终端出现00~xxxx01~字符\n重装CommandLineTools\n查看监听端口\nosascript记录\n\n获取当前输入法\n菜单是否选中\n字符串对比\n获取菜单参数\n\n\n\n安装homebrew\n\n\n\n 安装命令行tools\n\nxcode-install\n\ncurl \u0026gt;\u0026gt; brew_install\n\n\n\n 修改REPO地址\n\n\n\n 执行安装\n\nruby brew_install\n\n\n\n   homebrew cask\n\n\n\n   使用git clone 中科大到指定目录\n\n\n\n   homebrew卸载依赖, 使用homebrew tap xxx/rmtree\n\nbrew rmtree emacs\n\n\n   App Store 安装 QQ,微信，网易云音乐\n   Brew cask 安装 git, google-chrome, virtualbox, shadowsocksx-ng,emacs\n\n\n\n   拷贝文件，使用共享里的远程管理, 在原机器Linux下ssh到macbookpro，或者使用scp\n\n\n\n   修改电脑名，在设置共享里\n\n\n切换中国源\ngit -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\ngit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\ngit -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git\nbrew update -v\n\n恢复官方源\ngit -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://github.com/Homebrew/brew.git\ngit -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-core.git\ngit -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-cask.git\nbrew update -v\n\nbrew更新\n\n\n\n 更新brew\n\nbrew update -v\n\n     注：-v可显示更新进度\n\n\n\n 列出可更新\n\nbrew outdated\nbrew cask outdated --greedy\n\n\n 更新软件\n\nbrew upgrade go git node\nbrew cask upgrade steam\n\n\nmacos使用深色菜单栏\n\n   1.在「系统偏好设置 - 通用」中将外观切换成「浅色」。\n   2.打开终端，输入指令：defaults write -g NSRequiresAquaSystemAppearance -bool Yes\n   3.注销并重新登录。这一步会关闭当前所有打开的应用，因此需要提前保存好所有文稿。\n   4.在「系统偏好设置 - 通用」中将外观切换成「深色\n\n\n\n   如果你想要恢复成默认的深色模式，那么在终端中输入\n\ndefaults write -g NSRequiresAquaSystemAppearance -bool No\ndefaults delete -g NSRequiresAquaSystemAppearance\n\n   再执行第 3 步即可\n\n\n安装powerline字体\nbrew cask install font-inconsolata-for-powerline\n\n   终端设置字体，重启终端\n\n\n禁止.DS_store生成\n# 禁止 .DS_store 生成，打开“终端”，复制黏贴下面的命令，回车执行，重启 Mac 即可生效。\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE\n# 恢复 .DS_store 生成\ndefaults delete com.apple.desktopservices DSDontWriteNetworkStores\n# 刪除已存在的. DS_Store\nsudo find . -name \u0026#34;.DS_Store\u0026#34; -depth -exec rm {} \\;\n\n移动文件\n\n   sspai.com/post/28389\n\n\n\n   选中目标文件，然后使用 Command+C 复制，然后用 Command +Option+V 将其移动到目标目录。\n\n\n复制文本到终端出现00~xxxx01~字符\n\n   stackoverflow.com/questions/44848979/getting-strange-characters-when-pasting-into-my-iterm2-terminal\n\n\nprintf \u0026#39;\\e[?2004l\u0026#39;\n重装CommandLineTools\nsudo rm -rf /Library/Developer/CommandLineTools\nxcode-select --install\n\n查看监听端口\nsudo lsof -nP -iTCP | grep LISTEN\n\nosascript记录\n获取当前输入法\n\n\n\n 方式一\n\nosascript \u0026lt;\u0026lt; EOF\ntell application \u0026#34;System Events\u0026#34;\n    tell process \u0026#34;TextInputMenuAgent\u0026#34;\n        set currentLayout to menu bar item 1 of menu bar 2\n    end tell\n    return description of currentLayout\nend tell\nEOF\n\n\n 方式二\n\nreturn value of attribute \u0026#34;AXDescription\u0026#34; of currentLayout\n\n菜单是否选中\nosascript \u0026lt;\u0026lt; EOF\ntell application \u0026#34;System Events\u0026#34;\n        tell process \u0026#34;TextInputMenuAgent\u0026#34;\n            set currentLayout to menu item \u0026#34;ABC\u0026#34; of menu 1 of menu bar item 1 of menu bar 2\n        end tell\n        return value of attribute \u0026#34;AXMenuItemMarkChar\u0026#34; of currentLayout as string is not \u0026#34;missing value\u0026#34;\nend tell\nEOF\n字符串对比\nreturn description of currentLayout is not \u0026#34;ABC\u0026#34;\nreturn description of currentLayout as string = \u0026#34;ABC\u0026#34;\n获取菜单参数\n\n\n\n 方式一\n\n# 获取所有\nreturn properties of currentLayout\n# 获取单个\nreturn description of currentLayout\n\n\n 方式二\n\n# 获取所有\nreturn attributes of currentLayout\nreturn value of attributes of currentLayout\n# 获取单个\nreturn value of attributes \u0026#34;AXMenuItemMarkChar\u0026#34; of currentLayout","index":134,"permalink":"https://honmaple.me/articles/2019/07/macos初始化设置.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e安装homebrew\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 安装命令行tools\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003excode-install\u003c/pre\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ecurl \u0026gt;\u0026gt; brew_install\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 修改REPO地址\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 执行安装\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eruby brew_install\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n   homebrew cask\n\u003c/p\u003e\n\n\u003cp\u003e\n   使用git clone 中科大到指定目录\n\u003c/p\u003e\n\n\u003cp\u003e\n   homebrew卸载依赖, 使用homebrew tap xxx/rmtree\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ebrew rmtree emacs\u003c/pre\u003e\n\n\u003cp\u003e\n   App Store 安装 QQ,微信，网易云音乐\n   Brew cask 安装...\u003c/p\u003e","title":"macos初始化设置"},{"content":"Table of Contents\n分割字符串\n保留小数后n位\n随机字符串\n\n\n分割字符串\nlocal ngx_find    = ngx.re.find\n\nlocal function split(str, sep , count)\n    local t = {}\n    count = count or -1\n\n    local nfield, nstart = 1, 1\n    local nfirst,nlast = string.find(str, sep)\n    -- local nfirst,nlast = ngx_find(str, sep, \u0026#34;jo\u0026#34;)\n    while nfirst and count ~= 0 do\n        t[nfield] = string.sub(str, nstart, nfirst - 1)\n        nfield = nfield+1\n        nstart = nlast+1\n        nfirst,nlast = string.find(str, sep, nstart)\n        -- nfirst,nlast = ngx_find(str, sep, \u0026#34;jo\u0026#34;, nil, nstart)\n        count = count-1\n    end\n    t[nfield] = string.sub(str, nstart)\n    return t\nend\n\n保留小数后n位\nlocal function round(num, n)\n    local p = math.pow(10, n or 3)\n    local m = num * p\n    local _, d = math.modf(m)\n    if d \u0026lt; 0.5 then return math.floor(m) / p end\n    return math.ceil(m) / p\nend\n\n随机字符串\n\n   gist.github.com/haggen/2fd643ea9a261fea2094","index":135,"permalink":"https://honmaple.me/articles/2018/01/lua笔记.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e分割字符串\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e ngx_find    \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ngx.re.find\n\n\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esplit\u003c/span\u003e(str, sep , count)\n    \u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n    count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\n    \u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e nfield, nstart \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e nfirst,nlast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.find(str, sep...\u003c/pre\u003e","title":"lua笔记"},{"content":"s = { 1, 2, 3, 4, 5, 6 }\nprint(#s)     -- output: 6\ns[4] = nil\nprint(#s)     -- output: 6\ns[7] = nil\nprint(#s)     -- output: 3\ns[4] = 4\nprint(#s)     -- output: 6\ns[4] = nil\nprint(#s)     -- output: 3\n\nprint()\n\ns = { \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34; }\nprint(#s)     -- output: 6\ns[\u0026#34;4\u0026#34;] = nil\nprint(#s)     -- output: 6\ns[\u0026#34;7\u0026#34;] = nil\nprint(#s)     -- output: 6\ns[\u0026#34;4\u0026#34;] = \u0026#34;4\u0026#34;\nprint(#s)     -- output: 6\ns[\u0026#34;4\u0026#34;] = nil\nprint(#s)     -- output: 6\n\n\n\nLua 5.3.4\n\n\n\n\n输出就是这么匪夷所思,所以, 不要在Lua的table中使用nil值，如果一个元素要删除，直接remove","index":136,"permalink":"https://honmaple.me/articles/2017/10/lua中匪夷所思的table长度.html","summary":"\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003es \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e }\nprint(\u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003es)     \u003cspan style=\"color:#75715e\"\u003e-- output: 6\u003c/span\u003e\ns[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\nprint(\u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003es)     \u003cspan style=\"color:#75715e\"\u003e-- output: 6\u003c/span\u003e\ns[\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\nprint(\u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003es)     \u003cspan style=\"color:#75715e\"\u003e-- output: 3\u003c/span\u003e\ns[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\nprint(\u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003es)     \u003cspan style=\"color:#75715e\"\u003e-- output: 6...\u003c/span\u003e\u003c/pre\u003e","title":"lua中匪夷所思的table长度"},{"content":"移动光标快捷键\n\nctrl+f\t向前移动一个字符\nctrl+b\t向后移动一个字符\nalt+f\t向前移动一个单词\nalt+b\t向后移动一个单词\nctrl+a\t移动到当前行首\nctrl+e\t移动到当前行尾\nctrl+l\t清屏，并在屏幕最上面开始一个新行\n\n\n\n 编辑命令行快捷键\n\nctrl+d\t删除当前的字符\nctrl+t\t交换当前字符和前一个字符的位置\nalt+t\t交换当前单词和前一个单词的位置\nalt+u\t把当前单词变成大写\nalt+l\t把当前单词变成小写\nalt+c\t把当前单词变成首字母大写的单词\nctrl+v\t添加一个特殊字符，例如，要添加一个制表符，按ctrl+v+tab\n\n\n\n 剪切、粘贴快捷键\n\nctrl+k\t剪切文本直到行的末尾\nctrl+u\t剪切文本直到行的起始\nctrl+w\t剪切光标前的单词\nalt+d\t剪切光标后的单词\nctrl+y\t粘贴最近剪切的文本\nalt+y\t回退到先前剪切的文本并粘贴它\nctrl+c\t删除整行","index":137,"permalink":"https://honmaple.me/articles/2017/02/linux终端常用快捷键.html","summary":"\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n 移动光标快捷键\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ectrl+f\t向前移动一个字符\nctrl+b\t向后移动一个字符\nalt+f\t向前移动一个单词\nalt+b\t向后移动一个单词\nctrl+a\t移动到当前行首\nctrl+e\t移动到当前行尾\nctrl+l\t清屏，并在屏幕最上面开始一个新行\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 编辑命令行快捷键\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ectrl+d\t删除当前的字符\nctrl+t\t交换当前字符和前一个字符的位置\nalt+t\t交换当前单词和前一个单词的位置\nalt+u\t把当前单词变成大写\nalt+l\t把当前单词变成小写\nalt+c\t把当前单词变成首字母大写的单词\nctrl+v\t添加一个特殊字符，例如，要添加一个制表符，按ctrl+v+tab\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 剪切、粘贴快捷键...\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e","title":"linux终端常用快捷键"},{"content":"Table of Contents\n记录\n\n设置临时英文环境变量\n\nlinux下gif播放\nsupervisor增加新配置不重启\n文件操作\n\nzip打包排除文件\n获取文件压缩后的md5\nag仅查找目录\n替换^M字符\n\nNET\n\niptables\nSSH\n\ngit clone时不提示Are you sure you want to continue connecting (yes/no)?\n\n\nDisk\n\nthunar提示\u0026#34;not authorized to perform operation\u0026#34;\n\n数据库\n\n设置mysql的密码小于8字符\n修改postgresql字段长度postgresqllinux\n\n进程\n\n查看进程work目录\n\n命令\n\nfind\nawk\ndate\ncurl\n\ncurl请求指定IP的http域名\ncurl请求指定IP的https域名\ncurl请求搭配grep查询\ncurl请求form\n\nwget\n\n\n\n记录\n设置临时英文环境变量\nLANG=\u0026#34;en_US.UTF-8\u0026#34; git branch 2\u0026gt; /dev/null\n\nlinux下gif播放\n\n  feh只支持静态文件,可用\n\nanimate output.gif\n\nsupervisor增加新配置不重启\nsupervisorctl reread\nsupervisorctl update\n\n文件操作\nzip打包排除文件\nzip -r -x=.git/* -x=*.pyc ../release.py *\n\n获取文件压缩后的md5\ntar -cf - action_plugins/ group_vars/ | md5sum\n\nag仅查找目录\n\n   https://github.com/ggreer/the_silver_searcher/issues/379\n\nag -G --file-search-regex *.txt /home/username\n替换^M字符\nsed -i -e \u0026#39;s/^M//g\u0026#39; file\n# or\nsed -i -e \u0026#39;s/^M//g\u0026#39; directory/*\n\n   注意: 这里的 ^M 要使用 CTRL-V CTRL-M 生成，而不是直接键入 ^M\n\n\nNET\n\n  网络相关的笔记\n\n\niptables\n\n   iptable修改forword默认策略\n\niptables -P FORWARD ACCEPT\n\nSSH\ngit clone时不提示Are you sure you want to continue connecting (yes/no)?\n\n    ~/.ssh/config\n\n\nHost github.com\n    StrictHostKeyChecking no\n\nDisk\n\n  磁盘相关笔记, 包括分区，挂载，磁盘清理修复等\n\n\nthunar提示\u0026#34;not authorized to perform operation\u0026#34;\n\n   之前我一直参考http://blog.chinaunix.net/uid-25906175-id-3030600.html, 通过修改 /usr/share/polkit-1/actions/org.freedesktop.udisks.policy 中 filesystem-mount-system 的 auth_admin_keep 为 yes, 但最近(2018-8-2)更新重启后这种方法无法成功\n\n\n\n   后来参考这里https://wiki.archlinux.org/index.php/Polkit#Authentication_agents 和 https://askubuntu.com/questions/487911/thunar-not-authorized-to-acces-mounted-volumes, 通过安装 Authentication_agents 并启动\n\n/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1\n\n数据库\n设置mysql的密码小于8字符\n\n   ERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n\nSET GLOBAL  validate_password_policy=\u0026#39;LOW\u0026#39;;\n\n\n\n LOW\n     政策只测试密码长度。 密码必须至少有8个字符长。\n\n\n\n MEDIUM\n     政策的条件 密码必须包含至少1数字字符,1 大写和小写字符,和1特别 (nonalphanumeric)字符。\n\n\n\n STRONG\n     政策的情况 密码子字符串长度为4的或更长时间不能匹配 单词在字典文件中,如果一个人被指定。\n\n\nSET GLOBAL validate_password_length=6;\nALTER USER \u0026#39;test_user\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;test_password\u0026#39;;\n修改postgresql字段长度postgresqllinux\nALTER TABLE  \u0026#34;user\u0026#34; ALTER COLUMN password TYPE character varying(256);\n\n进程\n查看进程work目录\n\n   superuser.com/questions/103309/how-can-i-know-the-absolute-path-of-a-running-process\n\npwdx $pid\n\n命令\nfind\n\n   参考\n\nfind /tmp -name test                    # 查询tmp目录下test文件\nfind /tmp -name test                    # 查询tmp目录下以test开头的文件\nfind /etc -name test??                  # 查询tmp目录下以test开头并且文件名为6位字母的文件\nfind /tmp -user test                    # 查询test用户在tmp目录下创建的文件\nfind /tmp -size +204800                 # 查询tmp目录下大于100MB的文件\nfind /tmp -size -20480                  # 查询tmp目录下小于10MB的文件\nfind /tmp -size +20480 \u0026amp;\u0026amp; -size -204800 # 查询tmp目录下大于100MB的文件并且小于10MB的文件\nfind /tmp -size +20480 -a -size -204800 # 同上\nfind /tmp -amin -10                     # 查询10分钟之前访问的文件\nfind /tmp -mmin -10                     # 查询10分钟之内修改的文件\nfind /tmp -cmin -10                     # 查询10分钟之内属性被修改的文件\n\nawk\n\n\n\n 显示行号和内容\n\nzcat test.log | awk \u0026#39;{print NR,$0}\u0026#39;\n\n\n 统计文件列数\n\nzcat test.log | awk \u0026#39;{print NF}\u0026#39; | sort | uniq -c\n\n\n 筛选列数\n\nzcat test.log | awk \u0026#39;{ if (NF \u0026lt; 30) {print NR,NF,$0}}\u0026#39;\n\n\ndate\n\n\n\n 字符串转时间戳\n\ndate -d \u0026#39;06/12/2012 07:21:22\u0026#39; +\u0026#34;%s\u0026#34;\n\n\n 时间戳转字符串\n\ndate -r 1644915240\n\n\ncurl\ncurl请求指定IP的http域名\ncurl http://ip:port/test -H \u0026#39;host:example.com\u0026#39;\n\ncurl请求指定IP的https域名\ncurl https://example.com/test --resolve \u0026#39;example.com:443:ip\u0026#39;\n\ncurl请求搭配grep查询\ncurl http://192.168.60.32:9200/_cat/indices?v 2\u0026gt;\u0026amp;1 | grep updns\n\ncurl请求form\ncurl -d \u0026#34;param1=value1\u0026amp;param2=value2\u0026#34; -X POST http://localhost:3000/data\n\n    或者\n\ncurl -d \u0026#34;param1=value1\u0026amp;param2=value2\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -X POST http://localhost:3000/data\n\nwget\n\n\n\n 下载目录\n\nwget -r -np -nH http://127.0.0.0.1:8000/test-dir","index":138,"permalink":"https://honmaple.me/articles/2017/12/linux笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e记录\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e设置临时英文环境变量\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eLANG\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en_US.UTF-8\u0026#34;\u003c/span\u003e git branch 2\u0026gt; /dev/null\u003c/pre\u003e\n\n\u003ch1 id=\"heading-2\"\u003elinux下gif播放\u003c/h1\u003e\n\u003cp\u003e\n  \u003cb\u003efeh\u003c/b\u003e只支持静态文件,可用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eanimate output.gif\u003c/pre\u003e\n\n\u003ch1 id=\"heading-3\"\u003esupervisor增加新配置不重启\u003c/h1\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003esupervisorctl reread\nsupervisorctl update\u003c/pre\u003e\n\n\u003ch1 id=\"heading-4\"\u003e文件操作\u003c/h1\u003e\n\u003ch2 id=\"heading-4.1\"\u003ezip打包排除文件\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ezip -r -x=.git/* -x=*.pyc...\u003c/pre\u003e","title":"linux笔记"},{"content":"一些linux下的基本操作命令，linux下命令太多，不可能完全记住，记个笔记还是有必要的\n\n命令行快捷操作\n\nctrl + 左右键:在单词间跳转\nctrl+a:跳到本行的行首\nctrl+e:跳到页尾\nCtrl+u：删除当前光标前面的文字\nctrl+k：删除当前光标后面的文字\nCtrl+L：进行清屏操作\nCtrl+y:进行恢复删除做\nCtrl+w:删除光标前面的单词的字符\nAlt – d ：由光标位置开始，往右删除单词。往行尾删\n\n字符界面播放ascii视频\n$ mplayer -vo caca MovieName\n\n打开nvidia设置\n$ optirun nvidia-settings -c :8\n\n更新google禁用 GPG 签名检查\n$ sudo dnf update google-chrome-stable* --nogpgcheck\n\n字符界面使用鼠标\n$ sudo dnf install gpm\n$ sudo service gpm start\n\n新字体安装\n\n字体目录下运行\n$ mkfontscale\n$ mkfontdir\n$ fc-cache -fv\n\nssh代理\n$ ssh -qTfnN -D 7070 ~@~\n\n安装vimdoc\n\n./vimcdoc.sh -i 安装\n\n./vimcdoc.sh -u 卸载\n\n编译Youcompleteme\n$ ./install.sh --clang-completer\n\nvim安装bundle插件管理\n$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n\n挂载iso文件\n$ sudo mount -o loop xxx.iso /mnt/123\n$ sudo umount /mnt/123","index":139,"permalink":"https://honmaple.me/articles/2015/08/linux的一些操作命令.html","summary":"\u003cp\u003e一些linux下的基本操作命令，linux下命令太多，不可能完全记住，记个笔记还是有必要的\u003c/p\u003e\n\n\u003ch3\u003e命令行快捷操作\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003ectrl + 左右键\u003c/code\u003e:在单词间跳转\u003cbr\u003e\n\u003ccode\u003ectrl+a\u003c/code\u003e:跳到本行的行首\u003cbr\u003e\n\u003ccode\u003ectrl+e\u003c/code\u003e:跳到页尾\u003cbr\u003e\n\u003ccode\u003eCtrl+u\u003c/code\u003e：删除当前光标前面的文字\u003cbr\u003e\n\u003ccode\u003ectrl+k\u003c/code\u003e：删除当前光标后面的文字\u003cbr\u003e\n\u003ccode\u003eCtrl+L\u003c/code\u003e：进行清屏操作\u003cbr\u003e\n\u003ccode\u003eCtrl+y\u003c/code\u003e:进行恢复删除做\u003cbr\u003e\n\u003ccode\u003eCtrl+w\u003c/code\u003e:删除光标前面的单词的字符\u003cbr\u003e\n\u003ccode\u003eAlt – d\u003c/code\u003e ：由光标位置开始，往右删除单词。往行尾删\u003c/p\u003e\n\n\u003ch3\u003e字符界面播放ascii视频\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ mplayer -vo caca MovieName\n\u003c/pre\u003e\n\u003ch3\u003e打开nvidia设置\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$...\u003c/pre\u003e","title":"linux的一些操作命令"},{"content":"python stcflash.py %s --lowbaud %d","index":140,"permalink":"https://honmaple.me/articles/2016/06/linux下烧写文件到单片机.html","summary":"\n\u003cp\u003e\npython stcflash.py %s --lowbaud %d\n\u003c/p\u003e","title":"linux下烧写文件到单片机"},{"content":"方法很简单，将用户加入串口所对应的group，需要 注意 的是不同的系统对应的group可能不同\n\n\n\n按照网上说的加入 dialout,\n\n└──╼ sudo usermod -a -G  dialout username\n\n结果提示\ndialout”组不存在\n\n\n\n查看对应的组\n\n└──╼ ls -al /dev/ttyUSB0\ncrw-rw---- 1 root uucp 188, 0 6月  15 23:09 /dev/ttyUSB0\n└──╼ sudo usermod -a -G  uucp username\n\nok,之后重启一下","index":141,"permalink":"https://honmaple.me/articles/2016/06/linux下串口读写权限问题.html","summary":"\n\u003cp\u003e\n方法很简单，将用户加入串口所对应的group，需要 \u003cb\u003e注意\u003c/b\u003e 的是不同的系统对应的group可能不同\n\u003c/p\u003e\n\n\u003cp\u003e\n按照网上说的加入 \u003cb\u003edialout\u003c/b\u003e,\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e└──╼ sudo usermod -a -G  dialout username\u003c/pre\u003e\n\u003cp\u003e\n结果提示\n\u003ci\u003edialout”组不存在\u003c/i\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n查看对应的组\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e└──╼ ls -al /dev/ttyUSB0\ncrw-rw---- \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e root uucp 188, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e 6月  \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e 23:09 /dev/ttyUSB0...\u003c/pre\u003e","title":"linux下串口读写权限问题"},{"content":"开发工具mcu8051ide\n\n下载地址http://sourceforge.net/projects/mcu8051ide/\n安装sdcc\n$ sudo pacman -S sdcc\n\n根据README需要下载的依赖\n\nREQUIRED PACKAGES :\n(Without these packages this program WILL NOT run)\n\n\n\n\nPackage\nmin. Version\nWhere it\u0026#39;s available\n\n\n\n\n\ntcl\t\n\t8.5.9\t\nhttp://www.tcl.tk/software/tcltk/downloadnow84.html\n\n\n\ntk\t\n\t8.5.9\t\nhttp://www.tcl.tk/software/tcltk/downloadnow84.html\n\n\n\nitcl\t\n\t3.4 \t\nhttp://sourceforge.net/projects/incrtcl\n\n\n\ntdom\t\n\t0.8 \t\nhttp://tdom.github.com/\n\n\n\ntkimg\t\n\t1.3 \t\nhttp://sourceforge.net/projects/tkimg\n\n\n\ntcllib\t\n\t1.6 \t\nhttp://sourceforge.net/projects/tcllib\n\n\n\nTclx\t\n\t8.4 \t\nhttp://tclx.sourceforge.net\n\n\n\nbwidget\n\t1.8 \t\nhttp://sourceforge.net/projects/tcllib\n\n\n\n注:安装必要依赖可以下载源码包自己编译安装,因为我的是Archlinux,以下命令以Arch为主\n\n安装tcl,tk,tcllib,bwidget\n$ sudo pacman -S tcl tk tcllib bwidget\n\n安装itcl,tdom,tkimg,tclx\n$ yaourt -Ss itcl\naur/eclipse-dltk-itcl 5.0-1 (3)\n    incr Tcl IDE for Eclipse\naur/itcl3 3.4.1-1 [installed] (1)\n    Provides the extra language support needed to build large Tcl/Tk \n    applications, version 3.4\n$ yaourt -S itcl3 #具体步骤略过\n$ yaourt -S tdom\naur/tdom 0.8.3-1 [installed] (13)\n    A fast XML/DOM/XPath package for Tcl written in C\naur/tdom-git 0.8.3.r92.g363cbda-1 (4)\n    A fast XML/DOM/XPath package for Tcl written in C\n$ yaourt -S tdom\n$ yaourt -Ss tkimg\naur/tkimg 1.4.2-1 [installed] (3)\n    This package enhances Tk, adding support for many other Image formats: \n    BMP, XBM, XPM, GIF, PNG, JPEG, TIFF and postscript.\n$ yaourt -S tkimg\n$ yaourt -Ss tclx\naur/tclx 8.4-4 (19)\n    Provides OS primitives, file scanning, data records etc. for Tcl\naur/tclxml 3.2-2 (4)\n    XML support for the Tcl scripting language\naur/tclxosd 0.20-2 (2)\n    A Tcl bindings for libxosd (On Screen Display)\n$ yaourt -S tclx #这里发现一个问题，我tclx没有装但mcu8051ide也能正常使用\n\n安装mcu8051ide\n\n解压源码包,进入源码包目录\n$ cmake . -DCMAKE_INSTALL_PREFIX=/opt/mcu8051ide/ #不要忘记\u0026#34;.\u0026#34;,后面的是要安装到的目录\n$ make\n$ sudo make install \n\n打开使用mcu8051ide\n$ cd /opt/bin\n$ ./mcu8051ide --check-libraries #检查依赖是否安装好\n$ ./mcu8051ide #打开软件\n\nok,可以编写程序了\n\n单片机烧写\n\n使用软件gSTCISP\n\n\n下载地址\n\n\n安装gSTCISP\n\n解压缩软件\n$ cd gSTC-ISP\n$ ./configure --prefix=/opt/gSTCISP/\n$ make  #如果直接make会出错,cd 到src目录，vim Makefile将CFLAGS = -g -O2更改为CFLAGS = -g -O2 -I/usr/include/vte-0.0/\n$ sudo make install\n\n使用gSTCISP\n$ sudo gSTCISP  #如果直接使用gSTCISP打开,烧写时会提示没有权限,请使用root权限打开\n\n选择 /dev/ttyUSB0 (or 1) 和 4800 bauds\n然后点击下载\n\n\n\nok,可以在linux系统下开发C51单片机了","index":142,"permalink":"https://honmaple.me/articles/2015/10/linux下C51开发.html","summary":"\n\u003ch2\u003e开发工具mcu8051ide\u003c/h2\u003e\n\n\u003cp\u003e下载地址\u003ca href=\"http://sourceforge.net/projects/mcu8051ide/\"\u003ehttp://sourceforge.net/projects/mcu8051ide/\u003c/a\u003e\u003cbr\u003e\n安装sdcc\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pacman -S sdcc\n\u003c/pre\u003e\n\u003ch3\u003e根据README需要下载的依赖\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eREQUIRED PACKAGES :\n(Without these packages this program WILL NOT run)\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePackage\u003c/th\u003e\n\u003cth align=\"center\"\u003emin. Version\u003c/th\u003e\n\u003cth\u003eWhere it\u0026#39;s available\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003etcl\t\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\t8.5.9...\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e","title":"linux下C51开发"},{"content":"参考这个回答\n前几天装了虚拟机，但是虚拟机里无法与主机共享剪贴板(xfce4是可以的),于是搜索了一下，\n找到了答案,原来是vbox的功能没有全部开启\n\n进入i3,输入以下命令即可\n$ VBoxClient-all\n\nok,就这样","index":143,"permalink":"https://honmaple.me/articles/2016/06/i3wm在virtualbox中剪贴版激活.html","summary":"\u003cp\u003e\u003ca href=\"http://superuser.com/questions/793331/sharing-windows-clipboard-with-i3-in-virtualbox-vm\"\u003e参考这个回答\u003c/a\u003e\n前几天装了虚拟机，但是虚拟机里无法与主机共享剪贴板(xfce4是可以的),于是搜索了一下，\n找到了答案,原来是vbox的功能没有全部开启\u003c/p\u003e\n\n\u003cp\u003e进入i3,输入以下命令即可\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ VBoxClient-all\n\u003c/pre\u003e\n\u003cp\u003eok,就这样\u003c/p\u003e\n","title":"i3wm在virtualbox中剪贴版激活"},{"content":"DEBUG\n  生产环境选择False\n  测试环境选择True\n\n\n\n\n SECRET_KEY\n  安全密钥,可通过下面方法生成:\n\n\n\u0026gt;\u0026gt;\u0026gt; import os\n\u0026gt;\u0026gt;\u0026gt; os.urandom(24)\nb\u0026#39;\\xdfr\\xff\\xd1\\xbcO\\xc1\\xa9_\\xcb\\x18\\x04\\xa6ZVJ\\xf8\\xd26]\\x07_HE\u0026#39;\n\n\n\n SECURITY_PASSWORD_SALT\n  加盐,主要用于生成邮箱验证url\n\n\n\n\n REMEMBER_COOKIE_DURATION, PERMANENT_SESSION_LIFETIME\n  设置记住我之后cookies保存时间\n  使用 datetime.timedelta(days=3)\n\n\n\n\n PER_PAGE\n  设置每页显示多少条主题\n\n\n\n\n 定制缓存\n\nCACHE_REDIS_HOST = \u0026#39;127.0.0.1\u0026#39;\nCACHE_REDIS_PORT = \u0026#39;6379\u0026#39;\nCACHE_REDIS_PASSWORD = \u0026#39;\u0026#39;\nCACHE_REDIS_DB = 1\n\nCACHE_DEFAULT_TIMEOUT = 60\nCACHE_KEY_PREFIX = \u0026#39;cache:\u0026#39;\n\n\n\n SERVER_NAME\n  设置域名,本地测试使用\n\nSERVER_NAME = \u0026#39;localhost:5000\u0026#39;\n\n\n  生产环境使用\n\nSERVER_NAME = \u0026#39;你的域名\u0026#39;\n\n\n  注意 : 该论坛程序默认使用的是 forums.example.com 子域名,并且启用了 docs.example.com子域名\n  如果想要使用 example.com 作为论坛域名,需要注释\n\n\n\n  maple/__init__.py\n\napp.url_map._rules.clear()\napp.url_map._rules_by_endpoint.clear()\napp.url_map.default_subdomain = \u0026#39;forums\u0026#39;\napp.add_url_rule(app.static_url_path + \u0026#39;/\u0026lt;path:filename\u0026gt;\u0026#39;,\n                    endpoint=\u0026#39;static\u0026#39;,\n                    view_func=app.send_static_file,\n                    subdomain=\u0026#39;forums\u0026#39;)\n\n\n  不想启用 docs 子域名\n\n\n\n  请修改\n\n\n\n  maple/urls.py\n\napp.register_blueprint(docs_site, subdomain=\u0026#39;docs\u0026#39;)\n\n  改成\n\napp.register_blueprint(docs_site, url_prefix=\u0026#39;/docs)\n\n\n\n ONLINE_LAST_MINUTES\n  记录在线时间,默认为5分钟\n\n\n\n\n 邮箱设置\n\nMAIL_SERVER =\nMAIL_PORT =\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME =\nMAIL_PASSWORD =\nMAIL_DEFAULT_SENDER =\n\n\n\n 数据库设置\n\nSQLALCHEMY_DATABASE_URI = \u0026#39;\u0026#39;\n\n\n\n 时区及语言设置\n\nLANGUAGES = {\u0026#39;en\u0026#39;: \u0026#39;English\u0026#39;, \u0026#39;zh\u0026#39;: \u0026#39;Chinese\u0026#39;}","index":144,"permalink":"https://honmaple.me/articles/2016/07/honmaple社区程序config介绍.html","summary":"\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003cb\u003eDEBUG\u003c/b\u003e\n  生产环境选择False\n  测试环境选择True\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003cb\u003eSECRET_KEY\u003c/b\u003e\n  安全密钥,可通过下面方法生成:\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e os\n\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eurandom(\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e)\n\u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xdf\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xff\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xd1\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xbc\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eO\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xc1\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xa9\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xcb\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x18\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x04\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xa6\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eZVJ\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xf8\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\xd2\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e6...\u003c/span\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"honmaple社区程序config介绍"},{"content":"第一版下载图片后设为壁纸,四周都是黑黑的不好看,\n所以结合本地壁纸将两张图片进行合成\n\n\n\n只要计算一下要缩减的大小与要放置的位置\n\n\n\n我的方法是:打开 gimp,合成两张图片,记下缩减的大小(214,214)与位置(160,160)\n\n\n\n\n每次只要运行一下\n\npython himawari8.py\n\n\n源码\n\nfrom PIL import Image, ImageOps, ImageDraw\nfrom io import BytesIO\nfrom urllib.request import Request, urlopen\nfrom datetime import datetime, timedelta\nimport json\n\nSCALE = 2\nWIDTH = 1368\nHEIGHT = 768\n\n\ndef get_info():\n    url = \u0026#34;http://himawari8-dl.nict.go.jp/himawari8/img/D531106/latest.json\u0026#34;\n    request = Request(url)\n    response = urlopen(request, timeout=10)\n    return json.loads(response.read())\n\n\ndef download():\n    png = Image.new(\u0026#39;RGB\u0026#39;, (550 * SCALE, 550 * SCALE))\n    # desktop = Image.new(\u0026#39;RGB\u0026#39;, (WIDTH, HEIGHT))\n    desktop = Image.open(\u0026#39;/home/jianglin/Pictures/308556.png\u0026#39;)\n    url_format = \u0026#39;http://himawari8-dl.nict.go.jp/himawari8/img/D531106/{}d/{}/{}_{}_{}.png\u0026#39;\n    info = get_info()\n    # date = datetime.strptime(info[\u0026#39;date\u0026#39;], \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) + timedelta(\n    #     hours=-8)\n    date = datetime.strptime(info[\u0026#39;date\u0026#39;], \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\n    for x in range(SCALE):\n        for y in range(SCALE):\n            url = url_format.format(SCALE, 550,\n                                    date.strftime(\u0026#34;%Y/%m/%d/%H%M%S\u0026#34;), x, y)\n            print(url)\n            request = Request(url)\n            response = urlopen(request, timeout=10)\n            img = Image.open(BytesIO(response.read()))\n            png.paste(img, (550 * x, 550 * y, 550 * (x + 1), 550 * (y + 1)))\n    png = circle(png)\n    desktop.paste(png, (160, 160), png)\n    desktop.save(\u0026#39;/tmp/earth.png\u0026#39;, \u0026#34;PNG\u0026#34;)\n    set_background()\n\n\ndef circle(img):\n    width = SCALE * 550\n    height = SCALE * 550\n    size = (width, height)\n    mask = Image.new(\u0026#39;L\u0026#39;, size, 0)\n    draw = ImageDraw.Draw(mask)\n    draw.ellipse((3, 3, width - 3, height - 3), fill=255)\n    output = ImageOps.fit(img, mask.size, centering=(0.5, 0.5))\n    output.putalpha(mask)\n    output.thumbnail((214, 214), Image.ANTIALIAS)\n    return output\n\n\ndef convert():\n    # size = (768, 768)\n    # mask = Image.new(\u0026#39;L\u0026#39;, size, 0)\n    # draw = ImageDraw.Draw(mask)\n    # draw.ellipse((3, 3, 765, 765), fill=255)\n    # im = Image.open(\u0026#39;/tmp/earth.png\u0026#39;)\n    # output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))\n    # output.putalpha(mask)\n    # output.thumbnail((256, 256), Image.ANTIALIAS)\n    # output.save(\u0026#39;output.png\u0026#39;)\n    # output.convert(\u0026#34;RGBA\u0026#34;)\n    output = Image.open(\u0026#39;output.png\u0026#39;)\n    output.thumbnail((214, 214), Image.ANTIALIAS)\n    desktop = Image.open(\u0026#39;/home/jianglin/Pictures/308556.png\u0026#39;)\n    desktop.paste(output, (160, 160), output)\n    desktop.save(\u0026#39;/tmp/earch.png\u0026#39;, \u0026#34;PNG\u0026#34;)\n\n\ndef set_background():\n    import os\n    os.system(\u0026#39;feh --bg-scale /tmp/earth.png\u0026#39;)\n\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    download()","index":145,"permalink":"https://honmaple.me/articles/2017/03/himawari8图片下载改进版.html","summary":"\n\u003cp\u003e\n第一版下载图片后设为壁纸,四周都是黑黑的不好看,\n所以结合本地壁纸将两张图片进行合成\n\u003c/p\u003e\n\n\u003cp\u003e\n只要计算一下要缩减的大小与要放置的位置\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n我的方法是:打开 \u003cb\u003egimp\u003c/b\u003e,合成两张图片,记下缩减的大小(214,214)与位置(160,160)\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n每次只要运行一下\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003epython himawari8.py\u003c/pre\u003e\n\n\u003cp\u003e\n源码\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e PIL \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Image, ImageOps, ImageDraw\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e io \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e BytesIO\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e urllib.request \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Request, urlopen\n\u003cspan style=\"color:#f92672\"\u003efrom...\u003c/span\u003e\u003c/pre\u003e","title":"himawari8图片下载改进版"},{"content":"Table of Contents\ncounsel-find-file\ntab键\n记忆多个按键\n模糊搜索\n候选词按使用频率排序\nminibuffer\ndired中复制或重命名文件\nsudo edit\n\n\n\n\n我为什么放弃ivy回到了helm\n\n\n\n\n说一说ivy用的不爽的地方吧\n\n\ncounsel-find-file\n\n   counsel-find-file作为最常用的命令,ivy竟然没有把默认的find-file进行覆写，比如我在dired中想要复制文件，我习惯使用C-h退回上一个目录，但即使我之前已经设置了\n\n:map counsel-find-file-map\n(\u0026#34;C-h\u0026#34; . counsel-up-directory)\n\n   但只有在使用counsel-find-file时有效,类似dired中是无效的，相比较于helm-find-files把find-file进行覆写，无论何时都能使用自己自定义的按键，这很不爽\n\n\ntab键\n\n   在helm中，tab仅作为补全使用，想要打开选中项，则需要按一下enter键,而在ivy中，我不知道开发者怎么想的, 我需要记住两个或两个以上的按键。\n\n\n\n   在ivy中，tab键就像命令名称ivy-alt-done一样，意味着按一下tab,就能得到helm中tab and enter的效果。\n\n\n\n   这很方便是不是？\n\n\n\n   但是，如果我要在emacs中重命名一个文件，把aaa.py重命名为aaa.py.bak，这该怎么办，在helm中我可以很容易的重命名，因为tab只是补全，我在tab后输入.bak然后enter就行，在ivy中，我得一个字符一个字符手打，或者记住其它按键补全选中项，然后才能重命名\n\n\n记忆多个按键\n\n   ivy有这样一个问题,它不会像helm一样在第一行显示用户输入的字符，在ivy的很多issue中都有人提了这个问题，如果当前目录下有名为aaa的目录,这是我想要创建一个aaa.py的文件，ivy会列出aaa这个目录，那是我该怎么创建aaa.py文件。方法是一个新的命令ivy-immediate-done,而不是ivy-alt-done\n\n\n模糊搜索\n\n   在helm中我可以很容易的使用模糊搜索，ivy中也一样，只要简单的设置\n\n(setq ivy-re-builders-alist\n      \u0026#39;((t . ivy--regex-fuzzy)))\n\n   但ivy中有这样一个问题，空格键不能在模糊匹配中使用，/汗，作为从helm转入ivy的人，经常会不经意间在输入时按下空格键，然后，What? ivy中搜索变成空了\n\n\n候选词按使用频率排序\n\n   helm默认支持，但在ivy中我需要安装smex，只安装smex，又不需要什么配置，文档也没有提供（这是我摸索出来的），有些莫名其妙\n\n\nminibuffer\n\n   这是我对ivy种草的原因，从minibuffer中弹出待选项，多么帅气，哪里像helm，使用一个buffer作为弹出框，还带一个\u0026#34;丑丑\u0026#34;的mode-line，但后面仔细研究后，才发现helm从当前buffer中弹出helm-buffer是多么明智的选择，视野不会移动到当前buffer以外的地方，尤其是在屏幕较大的时候\n\n\n   \n     \n      \n\n  \n\n     \n     \n      \n\n  \n\n     \n   \n\ndired中复制或重命名文件\n\n   我之前想要复制或重命名一个文件，只要进入dired中按C或R，然后选择目标就行，但不知道为什么，使用ivy时复制重命名总是报错，不成功(后面也没有继续折腾)\n\n\nsudo edit\n\n   我从spacemacs中复制了一段代码\n\n(defun file/sudo-edit (\u0026amp;optional arg)\n  (interactive \u0026#34;p\u0026#34;)\n  (let ((fname (if (or arg (not buffer-file-name)) (read-file-name \u0026#34;File: \u0026#34;) buffer-file-name)))\n    (find-file\n     (cond ((string-match-p \u0026#34;^/ssh:\u0026#34; fname)\n            (with-temp-buffer\n              (insert fname)\n              (search-backward \u0026#34;:\u0026#34;)\n              (let ((last-match-end nil)\n                    (last-ssh-hostname nil))\n                (while (string-match \u0026#34;@\\\\\\([^:|]+\\\\\\)\u0026#34; fname last-match-end)\n                  (setq last-ssh-hostname (or (match-string 1 fname) last-ssh-hostname))\n                  (setq last-match-end (match-end 0)))\n                (insert (format \u0026#34;|sudo:%s\u0026#34; (or last-ssh-hostname \u0026#34;localhost\u0026#34;))))\n              (buffer-string)))\n           (t (concat \u0026#34;/sudo:root@localhost:\u0026#34; fname))))))\n\n   可以很容易地使用sudo对文件进行进行编辑，但使用ivy时不成功，印象分又-1\n\n\n\n   helm中也有用的不爽的地方，比如:\n\n\n\n\n 有个header-line是什么鬼\n     设置了helm-display-header-line为nil还是有，字体那么大，背景那么丑，显示出来干嘛，虽然后面设置height为0.1解决\n\n\n\n 在mode-line显示help信息干嘛\n     我已經对helm很熟悉了，不需要这些help info，后面设置spaceline-helm-help-p为nil解决\n\n\n\n multi source\n     我不知道这对谁有用，反正对我没用\n\n\n\n ...\n\n\n\n\n   另外，很多人提到的ivy速度要比helm快，这个就仁者见仁，智者见智了，如果说的是启动速度，我的emac配置已经优化为1s内启动，如果是弹出速度，我没有具体对比过，不过就个人而言，helm与ivy弹出速度感觉两者都差不多\n\n\n\n   总之，helm大而全，ivy小而精，但helm有过多的为用户做出选择，ivy在细节上打磨的不太够，哪个用得爽就选谁吧，反正我用helm!","index":146,"permalink":"https://honmaple.me/articles/2018/01/helm与ivy简单对比.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n我为什么放弃ivy回到了helm\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n说一说ivy用的不爽的地方吧\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003ecounsel-find-file\u003c/h2\u003e\n\u003cp\u003e\n   counsel-find-file作为最常用的命令,ivy竟然没有把默认的find-file进行覆写，比如我在dired中想要复制文件，我习惯使用\u003ccode\u003eC-h\u003c/code\u003e退回上一个目录，但即使我之前已经设置了\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e:map counsel-find-file-map\n(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eC-h\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e counsel-up-directory)\u003c/pre\u003e\n\u003cp\u003e\n   但只有在使用\u003ccode\u003ecounsel-find-file\u003c/code\u003e时有效,类似dired中是无效的，相比较于\u003ccode\u003ehelm...\u003c/code\u003e\u003c/p\u003e","title":"helm与ivy简单对比"},{"content":"Table of Contents\n测试代码\n测试结果\n\n\n测试代码\npackage main\n\nimport (\n    \u0026#34;encoding/json\u0026#34;\n    \u0026#34;reflect\u0026#34;\n    \u0026#34;testing\u0026#34;\n)\n\ntype A struct {\n    A string   `json:\u0026#34;a\u0026#34;`\n    B string   `json:\u0026#34;b\u0026#34;`\n    C int      `json:\u0026#34;c\u0026#34;`\n    D int      `json:\u0026#34;d\u0026#34;`\n    E []string `json:\u0026#34;e\u0026#34;`\n    F []int    `json:\u0026#34;f\u0026#34;`\n}\n\nvar a = \u0026amp;A{\n    \u0026#34;string\u0026#34;,\n    \u0026#34;test\u0026#34;,\n    15,\n    1024,\n    []string{\u0026#34;vvv\u0026#34;, \u0026#34;ssss\u0026#34;, \u0026#34;44444\u0026#34;},\n    []int{100, 4012},\n}\n\nfunc Struct2Map(value interface{}) map[string]interface{} {\n    v := reflect.ValueOf(value)\n    for v.Kind() == reflect.Ptr {\n        v = v.Elem()\n    }\n    t := v.Type()\n\n    res := make(map[string]interface{})\n    for i := 0; i \u0026lt; t.NumField(); i++ {\n        if tag := t.Field(i).Tag.Get(\u0026#34;json\u0026#34;); tag != \u0026#34;\u0026#34; \u0026amp;\u0026amp; tag != \u0026#34;-\u0026#34; {\n            res[tag] = v.Field(i).Interface()\n        }\n    }\n    return res\n}\n\nfunc Struct2MapByJson(value interface{}) map[string]interface{} {\n    bs, err := json.Marshal(value)\n    if err != nil {\n\n    }\n\n    res := make(map[string]interface{})\n    if err := json.Unmarshal(bs, \u0026amp;res); err != nil {\n\n    }\n    return res\n}\n\nfunc Benchmark_Json2Map(b *testing.B) {\n    for i := 0; i \u0026lt; b.N; i++ {\n        Struct2MapByJson(a)\n    }\n}\n\nfunc Benchmark_Reflect2Map(b *testing.B) {\n    for i := 0; i \u0026lt; b.N; i++ {\n        Struct2Map(a)\n    }\n}\n\n测试结果\n└──╼ go test -test.bench=\u0026#34;.*\u0026#34; .\ngoos: darwin\ngoarch: amd64\npkg: maple-test1\nBenchmark_Json2Map-8          241076          4672 ns/op\nBenchmark_Reflect2Map-8      1000000          1005 ns/op\nPASS\nok      maple-test1\t2.971s","index":147,"permalink":"https://honmaple.me/articles/2020/09/golang笔记之struct转map性能比较.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e测试代码\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;reflect\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;testing\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n    \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e   \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ejson:\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n    \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e   \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ejson:\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n    \u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e      \u003cspan style=\"color:#e6db74\"\u003e`...\u003c/span\u003e\u003c/pre\u003e","title":"golang笔记之struct转map性能比较"},{"content":"Table of Contents\n测试代码\n测试结果\n\n\n测试代码\npackage main\n\nimport \u0026#34;testing\u0026#34;\n\ntype InterfaceA interface {\n    AA()\n}\n\ntype InterfaceB interface {\n    BB()\n}\n\ntype A struct {\n    v int\n}\n\nfunc (a *A) AA() {\n    a.v += 1\n}\n\nfunc BenchmarkTypeSwitch(b *testing.B) {\n    var a = new(A)\n\n    switchFunc := func(v interface{}) {\n        switch v.(type) {\n        case InterfaceA:\n            v.(InterfaceA).AA()\n        case InterfaceB:\n            v.(InterfaceB).BB()\n        }\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkNormalSwitch(b *testing.B) {\n    var a = new(A)\n\n    switchFunc := func(v *A) {\n        v.AA()\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceSwitch(b *testing.B) {\n    var a = new(A)\n\n    switchFunc := func(v interface{}) {\n        v.(InterfaceA).AA()\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceSwitch1(b *testing.B) {\n    var a = new(A)\n\n    switchFunc := func(v interface{}) {\n        v.(*A).AA()\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceSwitch2(b *testing.B) {\n    var a = new(A)\n\n    switchFunc := func(v InterfaceA) {\n        v.(*A).AA()\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceSwitch3(b *testing.B) {\n    var a = new(A)\n\n    switchFunc := func(v InterfaceA) {\n        v.AA()\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkNormalListSwitch(b *testing.B) {\n    a := make([]*A, 10000)\n    for i := range a {\n        a[i] = new(A)\n    }\n\n    switchFunc := func(vv []*A) {\n        for _, v := range vv {\n            v.AA()\n        }\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceListSwitch(b *testing.B) {\n    a := make([]*A, 10000)\n    for i := range a {\n        a[i] = new(A)\n    }\n\n    switchFunc := func(vv interface{}) {\n        for _, v := range vv.([]*A) {\n            v.AA()\n        }\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceListSwitch1(b *testing.B) {\n    a := make([]InterfaceA, 10000)\n    for i := range a {\n        a[i] = new(A)\n    }\n\n    switchFunc := func(vv interface{}) {\n        for _, v := range vv.([]InterfaceA) {\n            v.AA()\n        }\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\nfunc BenchmarkInterfaceListSwitch2(b *testing.B) {\n    a := make([]InterfaceA, 10000)\n    for i := range a {\n        a[i] = new(A)\n    }\n\n    switchFunc := func(vv []InterfaceA) {\n        for _, v := range vv {\n            v.AA()\n        }\n    }\n    for i := 0; i \u0026lt; b.N; i++ {\n        switchFunc(a)\n    }\n}\n\n测试结果\n└──╼ go test -test.bench=\u0026#34;.*\u0026#34; .\ngoos: darwin\ngoarch: amd64\npkg: log2\ncpu: Intel(R) Core(TM) i5-8279U CPU @ 2.40GHz\nBenchmarkTypeSwitch-8                 72261417            16.89 ns/op\nBenchmarkNormalSwitch-8               861871533            1.384 ns/op\nBenchmarkInterfaceSwitch-8            148360124            8.370 ns/op\nBenchmarkInterfaceSwitch1-8           780127671            1.537 ns/op\nBenchmarkInterfaceSwitch2-8           774663793            1.538 ns/op\nBenchmarkInterfaceSwitch3-8           739255111            1.628 ns/op\nBenchmarkNormalListSwitch-8             225832          5346 ns/op\nBenchmarkInterfaceListSwitch-8          252312          4820 ns/op\nBenchmarkInterfaceListSwitch1-8          61461         19800 ns/op\nBenchmarkInterfaceListSwitch2-8          60193         20142 ns/op\nPASS\nok    log2\t14.670s","index":148,"permalink":"https://honmaple.me/articles/2020/08/golang笔记之interface类型判断性能.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e测试代码\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;testing\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInterfaceA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n    \u003cspan style=\"color:#a6e22e\"\u003eAA\u003c/span\u003e()\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInterfaceB\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e {\n    \u003cspan style=\"color:#a6e22e\"\u003eBB\u003c/span\u003e()\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n    \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eAA\u003c/span\u003e() {\n    \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBenchmarkTypeSwitch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e) {\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =...\u003c/pre\u003e","title":"golang笔记之interface类型判断性能"},{"content":"Table of Contents\n关于golang.org无法连接\n\n初始化Gopkg\n\n读取配置文件\n判断文件是否存在\n随机睡眠\n字符串\n\n随机的n位字符串\n字符串连接\n打印原始字符(换行符)\n\n检查元素是否在map中\n检查元素是否在list中\n执行Linux命令\n迭代文件目录\n求两列表的差集\n删除列表中重复的数据\n参数校验\n\n是否是IP\n是否是EMAIL\n\n读取http响应的gz package\n编译\n\n编译成不同系统的可执行文件\n\n测试\n常见问题\n\ndocker内运行时区问题\n\n解决方式\n\nmap性能\ngo mod tidy checking tree against\n\n\n关于golang.org无法连接\n\n  虽然推荐使用\n\ngo get -u golang.org/x/sync\n\n  但很不幸，国内无法连接golang.org,所以只能曲线救国，借助github.com来安装相关的package\n\ngit clone https://github.com/golang/sync ./\n# 或者\ngit clone https://github.com/golang/sync\nmv sync $GOPATH/src/golang/x/\n\n初始化Gopkg\n# go mod init jlb\ngo: copying requirements from Gopkg.lock\ngo: converting Gopkg.lock: stat google.golang.org/genproto@a8101f21cf983e773d0c1133ebc5424792003214: unrecognized import path \u0026#34;google.golang.org/genproto\u0026#34;: https fetch: Get \u0026#34;https://google.golang.org/genproto?go-get=1\u0026#34;: dial tcp 216.239.37.1:443: i/o timeout\n\n\n   GORPOXY只适用于go mod\n\n\n\n   需要先移动Gopkg.lock\n\nmv Gopkg.lock Gopkg.lock.bak\n\n\n   然后执行\n\ngo mod init jlb\ngo mod tidy\n\n读取配置文件\n\n  注: Configuration 里元素(Path)必须大写开头\n\nimport (\n    \u0026#34;encoding/json\u0026#34;\n    \u0026#34;flag\u0026#34;\n    \u0026#34;fmt\u0026#34;\n    \u0026#34;io/ioutil\u0026#34;\n)\n\ntype Configuration struct {\n    Path string\n}\n\nconst VETSION = \u0026#34;0.1.0\u0026#34;\n\nvar (\n    config Configuration\n)\n\nfunc init() {\n    var (\n        conf_file string\n        print_ver bool\n    )\n    flag.StringVar(\u0026amp;conf_file, \u0026#34;c\u0026#34;, \u0026#34;etc/config.json\u0026#34;, \u0026#34;config file\u0026#34;)\n    flag.BoolVar(\u0026amp;print_ver, \u0026#34;v\u0026#34;, false, \u0026#34;config file\u0026#34;)\n    flag.Parse()\n\n    raw, err := ioutil.ReadFile(conf_file)\n    if err != nil {\n        log.Error(\u0026#34;config parse fail!\u0026#34;)\n        os.Exit(1)\n    }\n    err = json.Unmarshal(raw, \u0026amp;config)\n    if err != nil {\n        log.Error(\u0026#34;config unmarshal fail!\u0026#34;)\n        os.Exit(1)\n    }\n    if print_ver {\n        fmt.Println(\u0026#34;version:\u0026#34;, VERSION)\n        os.Exit(0)\n    }\n}\n判断文件是否存在\nimport (\n    \u0026#34;os\u0026#34;\n)\nfunc file_is_exists(f string) bool {\n    _, err := os.Stat(f)\n    if os.IsNotExist(err) {\n        return false\n    }\n    return err == nil\n}\n\n随机睡眠\nimport (\n    \u0026#34;math/rand\u0026#34;\n    \u0026#34;time\u0026#34;\n)\nfunc random_sleep(t int) {\n    rand.Seed(time.Now().Unix())\n    time.Sleep(time.Duration(rand.Intn(t)) * time.Microsecond)\n}\n\n字符串\n随机的n位字符串\nvar letterRunes = []rune(\u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;)\n\nfunc randStringRunes(n int) string {\n    rand.Seed(time.Now().UnixNano())\n    b := make([]rune, n)\n    for i := range b {\n        b[i] = letterRunes[rand.Intn(len(letterRunes))]\n    }\n    return string(b)\n}\n字符串连接\nimport (\n    \u0026#34;bytes\u0026#34;\n)\nfunc string_concat(s ...string) string {\n    var buffer bytes.Buffer\n    for _, i := range s {\n        buffer.WriteString(i)\n    }\n    return buffer.String()\n}\n打印原始字符(换行符)\nimport (\n    \u0026#34;bytes\u0026#34;\n)\nfunc print_text(s) string {\n    fmt.Printf(\u0026#34;%#v\\n\u0026#34;, s)\n}\n\n检查元素是否在map中\nfunc check_in_map(f map[string]string, v string) bool {\n    if _, ok := f[v]; ok {\n        return true\n    }\n    return false\n}\n\n检查元素是否在list中\nfunc check_in_list(f []string, v string) bool {\n    for i := range f {\n        if f[i] == v {\n            return true\n        }\n    }\n    return false\n}\n\n执行Linux命令\nimport (\n    \u0026#34;os/exec\u0026#34;\n)\nfunc exec_command(command string, args ...string) (error, bool) {\n    var (\n        err error\n    )\n    cmd := exec.Command(command, args...)\n    cmd.Start()\n    done := make(chan error)\n    go func() {\n        done \u0026lt;- cmd.Wait()\n    }()\n\n    select {\n    case \u0026lt;-time.After(600 * time.Second):\n        if err = cmd.Process.Kill(); err != nil {\n            log.Error(\u0026#34;failed to kill: %s, error: %s\u0026#34;, cmd.Path, err)\n        }\n        go func() {\n            \u0026lt;-done // allow goroutine to exit\n        }()\n        log.Info(\u0026#34;process:%s killed\u0026#34;, cmd.Path)\n        return err, true\n    case err = \u0026lt;-done:\n        return err, false\n    }\n}\n\n迭代文件目录\nfunc file_iter(path string) []string {\n    // path must be abs path\n    var files []string\n    scripts, _ := ioutil.ReadDir(path)\n    for _, script := range scripts {\n        if script.IsDir() {\n            return file_iter(filepath.Join(path, script.Name()))\n        }\n        files = append(files, filepath.Join(path, script.Name()))\n    }\n    return files\n}\n求两列表的差集\nfunc difference(a,b []string) []string {\n    // len(a) \u0026lt; len(b), avoid all item of a belong to b\n    m := map[string]bool{}\n    for _, x := range a {\n        m[x] = true\n    }\n    diff := []string{}\n    for _, x := range b {\n        if _, ok := m[x]; !ok {\n            diff = append(diff, x)\n        }\n    }\n    return diff\n}\n删除列表中重复的数据\nfunc RemoveDuplicates(elements []string) []string {\n    keys := map[string]bool{}\n    result := []string{}\n\n    for _, element := range elements {\n        if _, value := keys[element]; !value {\n            keys[element] = true\n            result = append(result, element)\n        }\n    }\n    return result\n}\n参数校验\n是否是IP\nfunc IsValidIP(key string) bool {\n    IP := net.ParseIP(key)\n    if IP == nil {\n        return false\n    }\n\n    return true\n}\n是否是EMAIL\nimport \u0026#34;regexp\u0026#34;\n\nfunc IsValidEmail(key string) bool {\n    re := regexp.MustCompile(\u0026#34;^[a-zA-Z0-9.!#$%\u0026amp;\u0026#39;*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\u0026#34;)\n    if !re.MatchString(key) {\n        return false\n    }\n    if strings.HasSuffix(key, \u0026#34;@upai.com\u0026#34;) || strings.HasSuffix(key, \u0026#34;@huaban.com\u0026#34;) {\n        return true\n    }\n    return false\n}\n读取http响应的gz package\nfunc main() {\n    resp, _ := HTTPRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://some-gz-package/package-name\u0026#34;, nil)\n    defer resp.Body.Close()\n\n    gz, err := gzip.NewReader(resp.Body)\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n    defer gz.Close()\n    scanner := bufio.NewScanner(gz)\n    for scanner.Scan() {\n        fmt.Println(scanner.Text())\n    }\n}\n\n编译\n编译成不同系统的可执行文件\n\n\n\n GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows\n\n\n\n GOARCH：目标可执行程序操作系统构架，包括 386，amd64，arm\n\n# Golang version 1.5以前版本在首次交叉编译时还需要配置交叉编译环境：\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash\n\n\n\n\n\n Mac下编译Linux, Windows平台的64位可执行程序：\n\n$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go\n$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go\n\n\n Linux下编译Mac, Windows平台的64位可执行程序：\n\n$ CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go\n$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go\n\n\n\n Windows下编译Mac, Linux平台的64位可执行程序：\n\n$ SET CGO_ENABLED=0SET GOOS=darwin3 SET GOARCH=amd64 go build test.go\n$ SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build test.go\n\n\n测试\n\n  指定函数\n\n\n\n\n test\n\ngo test -run=\u0026#34;^TestAAA\u0026#34; ./...\n\n\n\n bench\n\ngo test -bench=\u0026#34;^BenchmarkAAA\u0026#34; -run=\u0026#34;^Benchmark\u0026#34; ./...\n\n\n常见问题\ndocker内运行时区问题\n\n解决方式\napt-get install -y tzdata\n\nmap性能\n只读场景：sync.map \u0026gt; rwmutex \u0026gt;\u0026gt; mutex\n读写场景（边读边写）：rwmutex \u0026gt; mutex \u0026gt;\u0026gt; sync.map\n读写场景（读80% 写20%）：sync.map \u0026gt; rwmutex \u0026gt; mutex\n读写场景（读98% 写2%）：sync.map \u0026gt; rwmutex \u0026gt;\u0026gt; mutex\n只写场景：sync.map \u0026gt;\u0026gt; mutex \u0026gt; rwmutex\n\ngo mod tidy checking tree against\n\n  github.com/golang/go/issues/35164\n\n└──╼ go mod tidy\ngo: finding module for package github.com/honmaple/org-golang\ngo: finding module for package github.com/honmaple/org-golang/render\ngo: downloading github.com/honmaple/org-golang v0.0.0-20230214143528-22f61b3874c8\ngithub.com/honmaple/snow/builder/page/markup/orgmode imports\n    github.com/honmaple/org-golang: github.com/honmaple/org-golang@v0.0.0-20230214143528-22f61b3874c8: verifying module: github.com/honmaple/org-golang@v0.0.0-20230214143528-22f61b3874c8: checking tree#15584694 against tree#15683659: reading https://goproxy.io/sumdb/sum.golang.org/tile/8/1/237: 404 Not Found\n    server response: not found\ngithub.com/honmaple/snow/builder/page/markup/orgmode imports\n    github.com/honmaple/org-golang/render: github.com/honmaple/org-golang@v0.0.0-20230214143528-22f61b3874c8: verifying module: github.com/honmaple/org-golang@v0.0.0-20230214143528-22f61b3874c8: checking tree#15584694 against tree#15683659: reading https://goproxy.io/sumdb/sum.golang.org/tile/8/1/237: 404 Not Found\n    server response: not found\n\n└──╼ GOSUMDB=off go mod tidy\ngo: finding module for package github.com/honmaple/org-golang\ngo: finding module for package github.com/honmaple/org-golang/render\ngo: downloading github.com/honmaple/org-golang v0.0.0-20230214143528-22f61b3874c8\ngo: found github.com/honmaple/org-golang in github.com/honmaple/org-golang v0.0.0-20230214143528-22f61b3874c8\ngo: found github.com/honmaple/org-golang/render in github.com/honmaple/org-golang v0.0.0-20230214143528-22f61b3874c8","index":149,"permalink":"https://honmaple.me/articles/2018/03/golang笔记.html","summary":"\u003ch1 id=\"heading-1\"\u003e关于golang.org无法连接\u003c/h1\u003e\n\u003cp\u003e\n  虽然推荐使用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ego get -u golang.org/x/sync\u003c/pre\u003e\n\u003cp\u003e\n  但很不幸，国内无法连接\u003ccode\u003egolang.org\u003c/code\u003e,所以只能曲线救国，借助\u003cb\u003egithub.com\u003c/b\u003e来安装相关的\u003ccode\u003epackage\u003c/code\u003e\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003egit clone https://github.com/golang/sync ./\n\u003cspan style=\"color:#75715e\"\u003e# 或者\u003c/span\u003e\ngit clone https://github.com/golang/sync\nmv...\u003c/pre\u003e","title":"golang笔记"},{"content":"Table of Contents\n常见问题\n\n配置大小写敏感\n\n全局配置\n临时生效\n\ngit修改提交作者和邮箱\n合并多个commit历史\ngit删除远程分支已经被删除的本地分支\n合并pull request\nfork版本保持与上游一致\n镜像站\n报错\n\nerror: pathspec \u0026#39;py3\u0026#39; did not match any file(s) known to git.\n\n\n\n\n常见问题\n配置大小写敏感\n全局配置\ngit config --global core.ignorecase false\n\n临时生效\ngit mv --force dockerfile Dockerfile\n\ngit修改提交作者和邮箱\n\n\n\n 提交前\n     如果代码未提交,则可以\n\ngit config  user.name \u0026#34;Author Name\u0026#34;\ngit config  user.email \u0026#34;Author Email\u0026#34;\n\n\n\n 提交后\n     如果代码已经提交,或者已经push到remote(只能修改最近一次提交)\n\ngit commit --amend --author=\u0026#34;NewAuthor \u0026lt;NewEmail@address.com\u0026gt;\u0026#34;\n\n\n     修改全部commit,需要使用脚本 参考github官方\n\n#!/bin/sh\n\ngit filter-branch --env-filter \u0026#39;\nOLD_EMAIL=\u0026#34;your-old-email@example.com\u0026#34;\nCORRECT_NAME=\u0026#34;Your Correct Name\u0026#34;\nCORRECT_EMAIL=\u0026#34;your-correct-email@example.com\u0026#34;\nif [ \u0026#34;$GIT_COMMITTER_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ]\nthen\n    export GIT_COMMITTER_NAME=\u0026#34;$CORRECT_NAME\u0026#34;\n    export GIT_COMMITTER_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34;\nfi\nif [ \u0026#34;$GIT_AUTHOR_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ]\nthen\n    export GIT_AUTHOR_NAME=\u0026#34;$CORRECT_NAME\u0026#34;\n    export GIT_AUTHOR_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34;\nfi\n\u0026#39; --tag-name-filter cat -- --branches --tags\n\n\n     在.git同级目录下运行\n\nsh git.sh\n\n     然后使用--force push到远程\n\n\n合并多个commit历史\ngit rebase -i commit_id\n\n\n   使用 magit\n\nmagit-status\nll\n# move to commit id\nr-ii\ngit删除远程分支已经被删除的本地分支\n\n   也不知道为什么， google了很久也没找到答案，明明题目已经清楚的问\n\n\n\n   如何删除远程分支已经被删除的本地分支?\n\n\n\n\n   可下面一群人在答\n\n\n\n   如何删除本地分支已经被删除的远程分支?\n\n\n\n\n   瞎答\n\n\n\n   最后还是只能靠自己\n\n# 先清理远程分支, 即删除本地分支已经被删除的远程分支\ngit fetch -p\n# 找到存在的远程分支\ngit branch -r | grep -v HEAD | awk -F \u0026#39;/\u0026#39; \u0026#39;{print $2}\u0026#39; \u0026gt; /tmp/test.txt\n# 清理本地分支\ngit branch -a | grep -v \u0026#39;\\*\u0026#39; |  egrep -v -f /tmp/test.txt | xargs git branch -d\n\n\n   注意: 不要使用 xargs git branch -D\n\n\n合并pull request\ngit fetch origin pull/3/head:pr\ngit checkou pr\n\nfork版本保持与上游一致\n\n   github.com/selfteaching/the-craft-of-selfteaching/issues/67\n\n\ngit remote -v\ngit remote add upstream 上游仓库url(git@...)\ngit fetch upstream\ngit rebase upstream/master # 可能会提示：首先，回退头指针以便在其上重放您的工作...\ngit reset upstream/master --hard\n\n镜像站\ngit config --global url.https://github.com.cnpmjs.org/.insteadof https://github.com/\n\n报错\nerror: pathspec \u0026#39;py3\u0026#39; did not match any file(s) known to git.\n# git checkout py3\nerror: pathspec \u0026#39;py3\u0026#39; did not match any file(s) known to git.\n# git branch -a\n* master\n  remotes/origin/HEAD -\u0026gt; origin/master\n  remotes/origin/master\n\n\n\n\n 解决方式\n\n# git config --get remote.origin.fetch\n+refs/heads/master:refs/remotes/origin/master\n# git config remote.origin.fetch \u0026#34;+refs/heads/*:refs/remotes/origin/*\u0026#34;\n# git config --get remote.origin.fetch\n+refs/heads/*:refs/remotes/origin/*\n\n\n      然后重新 git fetch 即可","index":150,"permalink":"https://honmaple.me/articles/2018/03/git笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e常见问题\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e配置大小写敏感\u003c/h2\u003e\n\u003ch3 id=\"heading-1.1.1\"\u003e全局配置\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003egit config --global core.ignorecase false\u003c/pre\u003e\n\n\u003ch3 id=\"heading-1.1.2\"\u003e临时生效\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003egit mv --force dockerfile Dockerfile\u003c/pre\u003e\n\n\u003ch2 id=\"heading-1.2\"\u003egit修改提交作者和邮箱\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 提交前\n     如果代码未提交,则可以\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003egit config  user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Author Name\u0026#34;\u003c/span\u003e\ngit config  user.email \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Author Email\u0026#34;\u003c/span\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 提交后...\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e","title":"git笔记"},{"content":"参考资料\n廖雪峰Git教程\n记忆一下主要内容：\n\n安装git\n$ sudo dnf install git\n\n安装后配置\n$ git config --global user.name \u0026#34;Your Name\u0026#34;\n$ git config --global user.email \u0026#34;email@example.com\u0026#34;\n\n创建版本库\n$ mkdir git\n$ cd git\n$ mkdir \u0026#34;目录名\u0026#34;\n$ cd \u0026#34;目录名\u0026#34;\n$ git init #将该目录变成可用于git管理的仓库\n\ngit操作指令\n$ git add filename #将文件添加到仓库\n$ git commit -m \u0026#34;注释内容\u0026#34;  #将文件提交到仓库，-m后面是本次提交的内容说明\n$ git add file1.txt\n$ git add file2.txt file3.txt\n$ git commit -m \u0026#34;add 3 files.\u0026#34; #git commit 可以一次性提交多个文件\n\n$ git status #查看仓库当前状态\n$ git diff filename #查看文件修改状态\n$ git log --pretty=oneline #查看提交日志\n$ git reset --hard HEAD^ #从当前状态回退到上个版本状态 ，上上版本HEAD^^,100个上版本HEAD~100\n$ git diff HEAD -- filename #查看工作区与版本库里的最新版本的区别\n$ git checkout -- filename #让工作区文件回退到上次提交状态\n$ git reset HEAD readme.txt #把暂存区的修改撤销掉\n$ git rm filename #删除仓库文件\n\n远程仓库\n$ ssh-keygen -t rsa -C\u0026#34;youremail@example.com\u0026#34; #生成公钥与私钥\n\n将公钥上传到到GitHub账户\n保存好私钥\n$ git remote add origin git@github.com:honmaple/vim.git #关联远程仓库\n$ git push -u origin master #把本地库内容推送到远程库\n$ git push origin master #以后提交本地内容只要输入这个命令就行\n$ git clone git@github.com：honmaple/honmaple.git #从远程库克隆到本地\n\n我这里出现问题(远程的commit比本地的commit要新),需要\n$ git pull origin master","index":151,"permalink":"https://honmaple.me/articles/2015/08/git学习.html","summary":"\u003cp\u003e参考资料\n\u003ca href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\"\u003e廖雪峰Git教程\u003c/a\u003e\u003cbr\u003e\n记忆一下主要内容：\u003c/p\u003e\n\n\u003ch3\u003e安装git\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo dnf install git\n\u003c/pre\u003e\n\u003ch3\u003e安装后配置\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ git config --global user.name \u0026#34;Your Name\u0026#34;\n$ git config --global user.email \u0026#34;email@example.com\u0026#34;\n\u003c/pre\u003e\n\u003ch3\u003e创建版本库\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ mkdir git\n$...\u003c/pre\u003e","title":"git学习"},{"content":"Table of Contents\n安装\n\n安装flutter\n安装java\n安装android sdk\n\n初体验\n\n创建一个新的项目\n配置android模拟器\n启动flutter项目\n\n升级Flutter版本\n\n升级步骤\nFAQ\n\nFAQ\n\n启动项目报 Operation timed out\nUnable to locate Android SDK\n\n参考文档\n\n\n安装\n安装flutter\n\n\n\n 首先下载flutter包, 解压到 ~/repo 目录,并配置 ~/.bashrc\n\nexport PATH=$PATH:$HOME/repo/flutter/bin\n\n\n\n source ~/.bashrc使其生效\n\n\n\n      注意：首次运行flutter，macos可能会提示无法打开dart，需要到 系统偏好 -\u0026gt; 安全性与隐私 点击允许\n\n\n\n└──╼ flutter --version\nFlutter 2.2.1 • channel stable • https://github.com/flutter/flutter.git\nFramework • revision 02c026b03c (9 天前) • 2021-05-27 12:24:44 -0700\nEngine • revision 0fdb562ac8\nTools • Dart 2.13.1\n\n\n\n 第一步，禁用 google analytics\n\n└──╼ flutter config --no-analytics\n\n  ╔════════════════════════════════════════════════════════════════════════════╗\n  ║                 Welcome to Flutter! - https://flutter.dev                  ║\n  ║                                                                            ║\n  ║ The Flutter tool uses Google Analytics to anonymously report feature usage ║\n  ║ statistics and basic crash reports. This data is used to help improve      ║\n  ......\n  ║ See Google\u0026#39;s privacy policy:                                               ║\n  ║ https://policies.google.com/privacy                                        ║\n  ╚════════════════════════════════════════════════════════════════════════════╝\n\nAnalytics reporting disabled.\n\nYou may need to restart any open editors for them to read new settings.\n\n\n 第二步, 执行 flutter doctor 检查依赖环境\n\n└──╼ flutter doctor\nRunning \u0026#34;flutter pub get\u0026#34; in flutter_tools...                      10.6s\nDoctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, 2.2.1, on macOS 11.3.1 20E241 darwin-x64, locale zh-Hans-CN)\n[✗] Android toolchain - develop for Android devices\n    ✗ Unable to locate Android SDK.\n      Install Android Studio from: https://developer.android.com/studio/index.html\n      On first launch it will assist you in installing the Android SDK components.\n      (or visit https://flutter.dev/docs/get-started/install/macos#android-setup for detailed instructions).\n      If the Android SDK has been installed to a custom location, please use\n      `flutter config --android-sdk` to update to that location.\n\n[✗] Xcode - develop for iOS and macOS\n    ✗ Xcode installation is incomplete; a full installation is necessary for iOS development.\n      Download at: https://developer.apple.com/xcode/download/\n      Or install Xcode via the App Store.\n      Once installed, run:\n        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n        sudo xcodebuild -runFirstLaunch\n    ✗ CocoaPods not installed.\n        CocoaPods is used to retrieve the iOS and macOS platform side\u0026#39;s plugin code that responds to your plugin usage on the Dart side.\n        Without CocoaPods, plugins will not work on iOS or macOS.\n        For more info, see https://flutter.dev/platform-plugins\n      To install see https://guides.cocoapods.org/using/getting-started.html#installation for instructions.\n[✓] Chrome - develop for the web\n[!] Android Studio (not installed)\n[✓] VS Code (version 1.56.2)\n[✓] Connected device (1 available)\n\n! Doctor found issues in 3 categories.\n\n\n安装java\n\n\n\n 安装\n\n└──╼ brew install openjdk@8\n\n      刚开始我安装的是 openjdk@11, 但在启动 sdkmanager 时会报\n\n└──╼ /usr/local/share/android-sdk/tools/bin/sdkmanager\nException in thread \u0026#34;main\u0026#34; java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema\n    at com.android.repository.api.SchemaModule$SchemaModuleVersion.\u0026lt;init\u0026gt;(SchemaModule.java:156)\n    at com.android.repository.api.SchemaModule.\u0026lt;init\u0026gt;(SchemaModule.java:75)\n    at com.android.sdklib.repository.AndroidSdkHandler.\u0026lt;clinit\u0026gt;(AndroidSdkHandler.java:81)\n    at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:73)\n    at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:48)\nCaused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlSchema\n    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\n      查找网上的资料，即使设置了 JAVA_OPTS, 但还是有问题，所以我安装 openjdk@8 而不是 openjdk@11\n\n└──╼ export JAVA_OPTS=\u0026#39;-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee\u0026#39;\n└──╼ /usr/local/share/android-sdk/tools/bin/sdkmanager\nError occurred during initialization of boot layer\njava.lang.module.FindException: Module java.se.ee not found\n\n\n 配置环境变量\n\nexport JAVA_HOME=/usr/local/opt/openjdk@8\nexport PATH=$JAVA_HOME/bin:$PATH\n\n      如果未设置 JAVA_HOME 环境变量，后续执行 flutter doctor 可能会报\n\nThe operation couldn’t be completed. Unable to locate a Java Runtime.\nPlease visit http://www.java.com for information on installing Java.\n\n\n安装android sdk\n\n\n\n 安装sdk\n\n└──╼ brew install android-sdk\n\n\n\n 安装sdk组件\n      首先执行 sdkmanager --list 找到组件最新版本或者选择合适版本\n\n└──╼ sdkmanager platform-tools\n└──╼ sdkmanager \u0026#39;platforms;android-29\u0026#39;\n└──╼ sdkmanager \u0026#39;build-tools;31.0.0-rc4\u0026#39;\n└──╼ sdkmanager --licenses\n\n      如果未执行 sdkmanager --licenses 并同意相关协议，在执行 flutter doctor 后可能会提示\n\n[!] Android toolchain - develop for Android devices (Android SDK version 31.0.0-rc4)\n    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses\n\n\n\n 配置环境变量\n\nexport ANDROID_SDK_ROOT=/usr/local/share/android-sdk\nexport PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH\n\n\n初体验\n创建一个新的项目\n└──╼ flutter create myapp\n└──╼ cd myapp\n\n    注意不要在 flutter sdk 目录里创建项目\n\nCannot create a project within the Flutter SDK. Target directory \u0026#39;$HOME/repo/flutter/src/myapp\u0026#39; is within the Flutter SDK at\n\u0026#39;$HOME/repo/flutter\u0026#39;.\n\n配置android模拟器\n\n\n\n 安装模拟器\n\n└──╼ sdkmanager emulator\n└──╼ sdkmanager \u0026#39;system-images;android-29;google_apis;x86_64\u0026#39;\n\n\n 创建新的android模拟器\n\n└──╼ avdmanager -s create avd -n testAndroid -k \u0026#34;system-images;android-29;google_apis;x86_64\u0026#34;\n└──╼ avdmanager list avd\n\n启动flutter项目\n\n\n\n 启动模拟器\n\n└──╼ flutter emulators\n1 available emulator:\n\ntestAndroid • testAndroid •  • android\n\nTo run an emulator, run \u0026#39;flutter emulators --launch \u0026lt;emulator id\u0026gt;\u0026#39;.\nTo create a new emulator, run \u0026#39;flutter emulators --create [--name xyz]\u0026#39;.\n\nYou can find more information on managing emulators at the links below:\nhttps://developer.android.com/studio/run/managing-avds\nhttps://developer.android.com/studio/command-line/avdmanager\n└──╼ flutter emulators --launch testAndroid\n\n\n 查看可用驱动\n\n└──╼ flutter devices\n2 connected devices:\n\nAndroid SDK built for x86 64 (mobile) • emulator-5554 • android-x64    • Android 10 (API 29) (emulator)\nChrome (web)                          • chrome        • web-javascript • Google Chrome 90.0.4430.212\n\n\n 启动项目\n\n└──╼ flutter run -d emulator-5554\n\n      \n\n  \n\n      至此，我的第一个flutter应用体验完成。\n      很久没学习新的技术，感觉自己都快落伍了，脑子也快生锈了，很早之前就打算自己写一个私人使用的 app，但总抱着一招鲜吃遍天的想法，坚持着熟悉的 vue web app, 而且还道听途说对 flutter 有所怀疑，一直没实际体验过。虽然 vue 足够简单，搭配 cordova 也很方便，但毕竟属于 web app，每种语言或者工具应该都有自己最擅长的领域，比如 vue 之于 web，flutter 至于 移动端app，最重要的是，现在技术更新迭代太快，你不学总有人学，学而不思则罔，思而不学则殆，不思不学只会被淘汰\n\n\n\n升级Flutter版本\n升级步骤\n\n\n\n  查看当前使用的版本\n\n└──╼ flutter channel\n\nFlutter channels:\nmaster\ndev\nbeta\n* stable\n\n\n 选择版本(可选)\n\n└──╼ flutter channel stable\n\n\n 升级\n\n└──╼ flutter upgrade\n\nFAQ\n\n\n\n Flutter目录有修改\n\n[   +8 ms] Your flutter checkout has local changes that would be erased by upgrading. If you want to keep these changes, it is recommended that you stash them via \u0026#34;git stash\u0026#34; or else commit the changes\nto a local\n           branch. If it is okay to remove local changes, then re-run this command with \u0026#34;--force\u0026#34;.\n....\n\n       进入Flutter目录，使用 git diff\n\n──╼ git diff\ndiff --git a/packages/flutter_tools/gradle/flutter.gradle b/packages/flutter_tools/gradle/flutter.gradle\nindex 3db040b967..69db8a4873 100644\n--- a/packages/flutter_tools/gradle/flutter.gradle\n+++ b/packages/flutter_tools/gradle/flutter.gradle\n@@ -24,8 +24,17 @@ import org.gradle.util.VersionNumber\n\n buildscript {\n     repositories {\n-        google()\n-        jcenter()\n+        // google()\n+        // jcenter()\n+        maven {\n+            url \u0026#39;https://maven.aliyun.com/repository/jcenter\u0026#39;\n+        }\n+        maven {\n+            url \u0026#39;http://maven.aliyun.com/nexus/content/groups/public\u0026#39;\n+        }\n+        maven {\n+            url \u0026#39;https://maven.aliyun.com/repository/google\u0026#39;\n+        }\n     }\n     dependencies {\n         classpath \u0026#39;com.android.tools.build:gradle:4.1.0\u0026#39;\n\n\n       使用git reset --hard 重置修改，或者使用 flutter upgrade --force 强制更新\n\n\n\nFAQ\n启动项目报 Operation timed out\nUsing hardware rendering with device Android SDK built for x86 64. If you notice graphics artifacts, consider enabling software rendering with\n\u0026#34;--enable-software-rendering\u0026#34;.\nLaunching lib/main.dart on Android SDK built for x86 64 in debug mode...\nException in thread \u0026#34;main\u0026#34; java.net.ConnectException: Operation timed out (Connection timed out)\n        at java.net.PlainSocketImpl.socketConnect(Native Method)\n        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n        ......\n        at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:128)\n        at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:61)\nRunning Gradle task \u0026#39;assembleDebug\u0026#39;...\nRunning Gradle task \u0026#39;assembleDebug\u0026#39;... Done                        76.2s\nException: Gradle task assembleDebug failed with exit code 1\n\n\n    这是因为无法下载 gradle 的包和依赖，需要科学上网或者修改为国内源\n\n\n\n\n 修改项目目录下的 android/gradle/wrapper/gradle-wrapper.properties 文件\n\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-6.7-all.zip\n+ distributionUrl=https\\://mirrors.cloud.tencent.com/gradle/gradle-6.7-all.zip\n\n\n 修改项目目录下 android/build.gradle\n\n- google()\n- jcenter()\n+ maven { url \u0026#39;https://maven.aliyun.com/repository/google\u0026#39; }\n+ maven { url \u0026#39;https://maven.aliyun.com/repository/jcenter\u0026#39; }\n+ maven { url \u0026#39;http://maven.aliyun.com/nexus/content/groups/public\u0026#39; }\n\n\n 修改 flutter sdk 目录下 packages/flutter_tools/gradle/flutter.gradle\n\nbuildscript {\n     repositories {\n!        // google()\n!        // jcenter()\n!        maven {\n!            url \u0026#39;https://maven.aliyun.com/repository/jcenter\u0026#39;\n!        }\n!        maven {\n!            url \u0026#39;http://maven.aliyun.com/nexus/content/groups/public\u0026#39;\n!        }\n!        maven {\n!            url \u0026#39;https://maven.aliyun.com/repository/google\u0026#39;\n!        }\n     }\n     dependencies {\n         classpath \u0026#39;com.android.tools.build:gradle:4.1.0\u0026#39;\n     }\n }\n\nUnable to locate Android SDK\n└──╼ flutter doctor\nDoctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, 3.3.4, on macOS 12.5 21G72 darwin-x64, locale zh-Hans-CN)\n[✗] Android toolchain - develop for Android devices\n    ✗ Unable to locate Android SDK.\n      Install Android Studio from: https://developer.android.com/studio/index.html\n      On first launch it will assist you in installing the Android SDK components.\n      (or visit https://flutter.dev/docs/get-started/install/macos#android-setup for detailed instructions).\n      If the Android SDK has been installed to a custom location, please use\n      `flutter config --android-sdk` to update to that location.\n\n    解决:\n\n└──╼ flutter config --android-sdk /usr/local/share/android-sdk\nSetting \u0026#34;android-sdk\u0026#34; value to \u0026#34;/usr/local/share/android-sdk\u0026#34;.\n\nYou may need to restart any open editors for them to read new settings.\n\n参考文档\n\n\n\n flutter.cn/docs/get-started/install/macos\n\n\n\n blog.csdn.net/xiuxiuxiubiubiubiu/article/details/104918561\n\n\n\n www.cnblogs.com/bluestorm/p/14761482.html","index":152,"permalink":"https://honmaple.me/articles/2021/06/flutter笔记之初体验.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e安装\u003c/h2\u003e\n\u003ch3 id=\"heading-1.1\"\u003e安装flutter\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 首先下载flutter包, 解压到 \u003ccode\u003e~/repo\u003c/code\u003e 目录,并配置 \u003ccode\u003e~/.bashrc\u003c/code\u003e\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eexport PATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$PATH:$HOME/repo/flutter/bin\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003ccode\u003esource ~/.bashrc\u003c/code\u003e使其生效\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n      注意：首次运行flutter，macos可能会提示无法打开dart，需要到 \u003ccode\u003e系统偏好 -\u0026gt; 安全性与隐私\u003c/code\u003e 点击允许\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e└──╼ flutter --version\nFlutter 2.2...\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"flutter笔记之初体验"},{"content":"问题来源\ndef index():\n    if form.validate_on_submit() and request.method == \u0026#34;POST\u0026#34;:\n        # do something\n    else:\n        # 这里使用**redirect**重定向而不是render_template","index":153,"permalink":"https://honmaple.me/articles/2016/04/flask解决f5刷新问题.html","summary":"\u003cp\u003e\u003ca href=\"https://segmentfault.com/q/1010000002486706\"\u003e问题来源\u003c/a\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edef index():\n    if form.validate_on_submit() and request.method == \u0026#34;POST\u0026#34;:\n        # do something\n    else:\n        # 这里使用**redirect**重定向而不是render_template\n\u003c/pre\u003e","title":"flask解决f5刷新问题"},{"content":"Table of Contents\n设计需求\n具体实现\n具体代码\n\n\n\n在前端显示为该问题 \u0026#34;几分钟前发表或几天前发表\u0026#34;\n\n\n\n后端通过filter注册\n\n\n\n参考资料\n\n\n设计需求\n\n\n\n 如果问题发表超过 10天 ,则显示为 %Y-%m-%d %H:%M\n\n\n\n\n 如果小于 10天 ，但是大于 1天 ，则显示为 n天前 发表\n\n\n\n\n 如果小于 1天 ，但是大于 1小时 ，则显示为 n小时前 发表\n\n\n\n\n 如果小于 1小时 ，但是大于 90秒 ，则显示为 n分钟前 发表\n\n\n\n\n 如果小于 90秒 ，则显示为 刚刚 发表\n\n\n\n具体实现\n\n  通过 diff.days 和 diff.seconds 实现\n\n\n\n  比如，大于10天\n\nif diff.days \u0026gt; 10:\n    return dt.strftime(\u0026#39;%Y-%m-%d %H:%M\u0026#39;)\n\n\n  大于90秒,小于1小时\n\nif diff.seconds \u0026lt;= 3600 and diff.seconds \u0026gt; 90:\n    periods = ((diff.seconds / 60, \u0026#34;minute\u0026#34;, \u0026#34;minutes\u0026#34;), )\n\n具体代码\ndef timesince(dt, default=\u0026#34;just now\u0026#34;):\n    now = datetime.now()\n    diff = now - dt\n    if diff.days \u0026gt; 10:\n        return dt.strftime(\u0026#39;%Y-%m-%d %H:%M\u0026#39;)\n    if diff.days \u0026lt;= 10 and diff.days \u0026gt; 0:\n        periods = ((diff.days, \u0026#34;day\u0026#34;, \u0026#34;days\u0026#34;), )\n    if diff.days \u0026lt;= 0 and diff.seconds \u0026gt; 3600:\n        periods = ((diff.seconds / 3600, \u0026#34;hour\u0026#34;, \u0026#34;hours\u0026#34;), )\n    if diff.seconds \u0026lt;= 3600 and diff.seconds \u0026gt; 90:\n        periods = ((diff.seconds / 60, \u0026#34;minute\u0026#34;, \u0026#34;minutes\u0026#34;), )\n    if diff.seconds \u0026lt;= 90:\n        return default\n\n    for period, singular, plural in periods:\n\n        if period:\n            return \u0026#34;%d %s ago\u0026#34; % (period, singular if period == 1 else\n                                    plural)\n\n    return default\n\n ok,之后就可以\n\napp.jinja_env.filters[\u0026#39;timesince\u0026#39;] = timesince\n\n 来实现几分钟前发表的功能了","index":154,"permalink":"https://honmaple.me/articles/2016/06/flask时间格式化.html","summary":"\n\u003cp\u003e\n在前端显示为该问题 \u0026#34;几分钟前发表或几天前发表\u0026#34;\n\u003c/p\u003e\n\n\u003cp\u003e\n后端通过filter注册\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca href=\"http://flask.pocoo.org/snippets/33/\"\u003e参考资料\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e设计需求\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 如果问题发表超过 \u003cb\u003e10天\u003c/b\u003e ,则显示为 \u003ci\u003e%Y-%m-%d %H:%M\u003c/i\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 如果小于 \u003cb\u003e10天\u003c/b\u003e ，但是大于 \u003cb\u003e1天\u003c/b\u003e ，则显示为 \u003ci\u003en天前\u003c/i\u003e 发表\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 如果小于 \u003cb\u003e1天\u003c/b\u003e ，但是大于 \u003cb\u003e1小时\u003c/b\u003e ，则显示为 \u003ci\u003en小时前\u003c/i\u003e 发表\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 如果小于 \u003cb\u003e1小时\u003c/b\u003e ，但是大于 \u003cb\u003e90秒\u003c/b\u003e ，则显示为 \u003ci\u003en分钟前\u003c/i\u003e 发表...\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e","title":"flask时间格式化"},{"content":"使用文档上的一句话:\n\n\nApplications fail, servers fail. Sooner or later you will see an exception in production. Even if your code is 100% correct, you will still see exceptions from time to time. Why? Because everything else involved will fail.\n\n\n应用发生错误时发送邮件\n\n这里文档上个人认为说的不清不楚,毕竟想要使用还要看logging的文档\n\n原文档\nADMINS = [\u0026#39;yourname@example.com\u0026#39;]\nif not app.debug:\n    import logging\n    from logging.handlers import SMTPHandler\n    mail_handler = SMTPHandler(\u0026#39;127.0.0.1\u0026#39;,\n                               \u0026#39;server-error@example.com\u0026#39;,\n                               ADMINS, \u0026#39;YourApplication Failed\u0026#39;)\n    mail_handler.setLevel(logging.ERROR)\n    app.logger.addHandler(mail_handler)\n\n实际上这里的好多参数没有交代清楚,具体可以看https://docs.python.org/2/library/logging.handlers.html#smtp-handler\n\n具体代码\nimport logging\nfrom logging.handlers import SMTPHandler\nfrom logging import Formatter\nconfig = app.config\ncredentials = (config[\u0026#39;MAIL_USERNAME\u0026#39;], config[\u0026#39;MAIL_PASSWORD\u0026#39;])\nmail_handler = SMTPHandler(\n    secure=(),\n    mailhost=(config[\u0026#39;MAIL_SERVER\u0026#39;], config[\u0026#39;MAIL_PORT\u0026#39;]),\n    fromaddr=\u0026#39;\u0026#39;,\n    toaddrs=\u0026#39;\u0026#39;,\n    subject=\u0026#39;YourApplication Failed\u0026#39;,\n    credentials=credentials)\n\nmail_handler.setFormatter(Formatter(\u0026#39;\u0026#39;\u0026#39;\nMessage type:       %(levelname)s\nLocation:           %(pathname)s:%(lineno)d\nModule:             %(module)s\nFunction:           %(funcName)s\nTime:               %(asctime)s\n\nMessage:\n\n%(message)s\n\u0026#39;\u0026#39;\u0026#39;))\nmail_handler.setLevel(logging.ERROR)\napp.logger.addHandler(mail_handler)\n\n其他方面不多说，这个多了一个 secure = () ，这是因为我的smtp服务需要使用TLS，\n如果不加这行，会出现连接被拒绝的报错\nsmtplib.SMTPServerDisconnected: Connection unexpectedly closed\n\n记录应用错误到文件\n\n这个是google到的,参考资料\n具体代码\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfile_handler = RotatingFileHandler(\u0026#39;python.log\u0026#39;, maxBytes=1024 * 1024 * 100, backupCount=20)\nfile_handler.setLevel(logging.ERROR)\nformatter = logging.Formatter(\u0026#34;%(asctime)s - %(name)s - %(levelname)s - %(message)s\u0026#34;)\nfile_handler.setFormatter(formatter)\napp.logger.addHandler(file_handler)","index":155,"permalink":"https://honmaple.me/articles/2016/05/flask日志处理.html","summary":"\u003cp\u003e使用文档上的一句话:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eApplications fail, servers fail. Sooner or later you will see an exception in production. Even if your code is 100% correct, you will still see exceptions from time to time. Why? Because everything else involved...\u003c/p\u003e\u003c/blockquote\u003e","title":"flask日志处理"},{"content":"虽然以前安装过但是没有记录，这次重新安装，趁机记录下来，省得满世界地找\n\u0026gt;环境: centos7\n\n安装nginx\n\n参考资料\n使用yum list nginx会发现nginx是1.6的版本,但现在nginx已经到了1.9，虽然不必那么新，\n但是过旧的版本说不定会出现安全问题\n# vim /etc/yum.repos.d/nginx.repo  \n\n输入\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=0\nenabled=1\n\n然后\n# yum list nginx  #你会发现nginx已经是1.8的版本\n# yum install nginx\n# systemctl start nginx #启动nginx\n\n安装python3\n\ncentos7默认安装了python2.7的版本，但我习惯用python3,但是centos无法通过yum install python3安装,\n只好自己编译了\n\n安装必要的文件\n# yum groupinstall \u0026#34;Development tools\u0026#34;\n# yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel \nreadline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel\n\n下载python3源码\n\npython3已到的python3.5，请按自己的需求下载\n$ wget https://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz\n$ tar xz Python-3.4.4.tgz\n$ cd Python-3.4.4\n$ ./configure\n$ make\n# make install\n\n\n如果提示c 编译器未找到\nyum install gcc gcc-c++\n\n\n安装supervisor\n\n编译安装python3的时候python3-pip就已经安装好了\n# pip3 install supervisor\nCollecting supervisor\n  Downloading supervisor-3.2.0.tar.gz (409kB)\n    100% |################################| 413kB 972kB/s \n    Complete output from command python setup.py egg_info:\n    Supervisor requires Python 2.4 or later but does not work on any version of Python 3.  You are using version 3.4.4 (default, Jan  6 2016, 11:01:55)\n    [GCC 4.8.3 20140911 (Red Hat 4.8.3-9)].  Please install using a supported version.\n\n    ----------------------------------------\nCommand \u0026#34;python setup.py egg_info\u0026#34; failed with error code 1 in /tmp/pip-build-qp0f7ft9/supervisor\n\n报错，错误提示很明显,supervisor不支持python3\n\n安装python2的pip\n# yum install python-pip\n# yum install python-devel #最好把这个也装上，以后会用到的\n# pip install supervisor # 这里又有一个提示\nYou are using pip version 7.1.0, however version 7.1.2 is available.\nYou should consider upgrading via the \u0026#39;pip install --upgrade pip\u0026#39; command.\n# pip install --upgrade pip\n\n安装python的虚拟环境virtualenv\n# pip3 install virtualenv\n$ mkdir www\n$ cd www\n$ virtualenv-3.4 venv\nUsing base prefix \u0026#39;/usr/local\u0026#39;\nNew python executable in venv/bin/python3.4\nAlso creating executable in venv/bin/python\nInstalling setuptools, pip, wheel...done.\n\n建议在~/.bashrc中添加\nalias ve=\u0026#39;. venv/bin/activate\u0026#39;\n\n以后只要使用ve就能进入虚拟环境\n\n关于数据库的安装请参考我的另一篇文章postgresql学习1——安装","index":156,"permalink":"https://honmaple.me/articles/2016/01/flask应用部署——安装环境.html","summary":"\u003cp\u003e虽然以前安装过但是没有记录，这次重新安装，趁机记录下来，省得满世界地找\u003cbr\u003e\n\u0026gt;环境: centos7\u003c/p\u003e\n\n\u003ch3\u003e安装nginx\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\"\u003e参考资料\u003c/a\u003e\u003cbr\u003e\n使用\u003ccode\u003eyum list nginx\u003c/code\u003e会发现nginx是1.6的版本,但现在nginx已经到了1.9，虽然不必那么新，\n但是过旧的版本说不定会出现安全问题\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# vim /etc/yum.repos.d/nginx.repo  \n\u003c/pre\u003e\n\u003cp\u003e输入\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/$releasever...\u003c/pre\u003e","title":"flask应用部署——安装环境"},{"content":"数据库实现分页\n\noffset\n\n使用offset可以实现数据库分页功能\nquestions = Questions.query.offset(num) # 从num开始\n\nlimit\n\n使用limit实现限制每页的文章数量\nquestions = Questions.query.offset(num).limit(6) #每页显示6篇文章\n\n前端实现分页\n\n需求设计\n\n是使用上一页，下一页，用表单进行跳转,还是使用数字显示\n\n获得文章数量 pages,和当前页码 number\n\n简单的上一页，下一页\n\n因为我的设计不是这个，所以简单说一下\n\n下一页,上一页\n\njinja2 代码\n\u0026lt;a href=\u0026#34;{{ url_for(\u0026#39;blog.index\u0026#39;,number=number + 1)}}\u0026#34;\u0026gt;下一页\u0026lt;/a\u0026gt;\n\u0026lt;a href=\u0026#34;{{ url_for(\u0026#39;blog.index\u0026#39;,number=number - 1)}}\u0026#34;\u0026gt;下一页\u0026lt;/a\u0026gt;\n\n首页没有上一页，尾页没有下一页\n{% if number == pages %}\nno next page\n{% else %}\n \u0026lt;a href=\u0026#34;{{ url_for(\u0026#39;blog.index\u0026#39;,number=number + 1)}}\u0026#34;\u0026gt;下一页\u0026lt;/a\u0026gt;\n{% endif %}\n{% if number == 1 %}\nno previous page\n{% else %}\n \u0026lt;a href=\u0026#34;{{ url_for(\u0026#39;blog.index\u0026#39;,number=number - 1)}}\u0026#34;\u0026gt;上一页\u0026lt;/a\u0026gt;\n{% endif %}\n\n显示各个页码的分页\n\n搞了一下午,终于搞定了\n\n设计\n\n总页码小于7,显示所有页码,总页码大于7，显示当前页码以及当前页码前两页和后两页.\n当页码大于7时,当前页码小于4,显示1~6页的页码·····\n\n使用\n{{ import \u0026#39;base/page.html\u0026#39; as page }}\nnumber为当前页码,pages为总共的页码\n{{ page.page(\u0026#39;blog.index\u0026#39;,number=number,pages=pages)}}\n如果url_for需要加参数，使用\n{{ page.page(\u0026#39;blog.index\u0026#39;,number=number,pages=pages,kw=dict(tag=tag))}}\n\n源码\n\n给出源码\n{% macro page(url,number=1,pages=1,kw=None) -%}\n\u0026lt;div style=\u0026#34;text-align:center;margin-top:-15px\u0026#34;\u0026gt;\n    \u0026lt;ul class=\u0026#34;pagination\u0026#34;\u0026gt;\n        {%- if number == 1 %}\n        \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\n            \u0026lt;a aria-label=\u0026#34;Previous\u0026#34;\u0026gt;\n                \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;laquo;\u0026lt;/span\u0026gt;\n            \u0026lt;/a\u0026gt;\n        \u0026lt;/li\u0026gt;\n        {%- else -%}\n        \u0026lt;li\u0026gt;\n            {% if not kw %}\n            \u0026lt;a href=\u0026#34;{{ url_for(url,number=number-1) }}\u0026#34; aria-label=\u0026#34;Previous\u0026#34;\u0026gt;\n                \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;laquo;\u0026lt;/span\u0026gt;\n            \u0026lt;/a\u0026gt;\n            {% else %}\n            \u0026lt;a href=\u0026#34;{{ url_for(url,number=number-1,**kw) }}\u0026#34; aria-label=\u0026#34;Previous\u0026#34;\u0026gt;\n                \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;laquo;\u0026lt;/span\u0026gt;\n            \u0026lt;/a\u0026gt;\n            {% endif -%}\n        \u0026lt;/li\u0026gt;\n        {% endif -%}\n\n        {% if pages \u0026lt; 7 %}\n        {% for page in range(1,pages + 1) %}\n        {{ page_url(url,page,number,kw) }}\n        {% endfor %}\n        {% else %}\n        {% if number \u0026lt;= 4 %}\n        {% for page in range(1,6) %}\n        {{ page_url(url,page,number,kw) }}\n        {% endfor %}\n\n        {%- if number \u0026lt;= pages - 2 %}\n        \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;a\u0026gt;···\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n        {%- endif -%}\n\n        {{ page_url(url,pages,number,kw) }}\n        {% else %}\n        {{ page_url(url,1,number,kw) }}\n        {{ page_url(url,2,number,kw) }}\n        {{ page_dot_start(number)}}\n\n        {% if number \u0026gt;= pages - 3 %}\n        {% for page in range(number-2,pages + 1) %}\n        {{ page_url(url,page,number,kw) }}\n        {% endfor %}\n        {% else %}\n        {% for page in range(number-2,number + 3) %}\n        {{ page_url(url,page,number,kw) }}\n        {% endfor %}\n        {{ page_dot_end(pages,number) }}\n        {{ page_url(url,pages,number,kw) }}\n        {% endif  %}\n\n        {% endif  %}\n        {% endif  %}\n\n\n        {%- if number == pages %}\n        \u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\n            \u0026lt;a aria-label=\u0026#34;Next\u0026#34;\u0026gt;\n                \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;raquo;\u0026lt;/span\u0026gt;\n            \u0026lt;/a\u0026gt;\n        \u0026lt;/li\u0026gt;\n        {%- else -%}\n        \u0026lt;li\u0026gt;\n            {% if not kw %}\n            \u0026lt;a href=\u0026#34;{{ url_for(url,number=number+1) }}\u0026#34; aria-label=\u0026#34;Next\u0026#34;\u0026gt;\n                \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;raquo;\u0026lt;/span\u0026gt;\n            \u0026lt;/a\u0026gt;\n            {% else %}\n            \u0026lt;a href=\u0026#34;{{ url_for(url,number=number+1,**kw) }}\u0026#34; aria-label=\u0026#34;Next\u0026#34;\u0026gt;\n                \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;raquo;\u0026lt;/span\u0026gt;\n            \u0026lt;/a\u0026gt;\n            {% endif -%}\n        \u0026lt;/li\u0026gt;\n        {% endif -%}\n    \u0026lt;/ul\u0026gt;\n\u0026lt;/div\u0026gt;\n{% endmacro %}\n\n{% macro page_url(url,page,number,kw) -%}\n{%- if page == number %}\n\u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;{{ page_kw(url,page,kw)}}\u0026lt;/li\u0026gt;\n{%- else -%}\n\u0026lt;li\u0026gt;{{ page_kw(url,page,kw)}}\u0026lt;/li\u0026gt;\n{%- endif -%}\n{% endmacro %}\n\n{% macro page_dot_end(pages,number) -%}\n{%- if number \u0026lt;= pages - 4 %}\n\u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;a\u0026gt;···\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n{%- endif -%}\n{% endmacro %}\n\n{% macro page_dot_start(number) -%}\n{%- if number \u0026gt; 5 %}\n\u0026lt;li class=\u0026#34;disabled\u0026#34;\u0026gt;\u0026lt;a\u0026gt;···\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n{%- endif -%}\n{% endmacro %}\n\n{% macro page_kw(url,page,kw) -%}\n{% if not kw %}\n\u0026lt;a href=\u0026#34;{{ url_for(url,number=page) }}\u0026#34;\u0026gt;{{ page }}\u0026lt;/a\u0026gt;\n{% else %}\n\u0026lt;a href=\u0026#34;{{ url_for(url,number=page,**kw) }}\u0026#34;\u0026gt;{{ page }}\u0026lt;/a\u0026gt;\n{%- endif -%}\n{% endmacro %}","index":157,"permalink":"https://honmaple.me/articles/2016/04/flask实现分页.html","summary":"\n\u003ch2\u003e数据库实现分页\u003ca id=\"orgheadline3\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\n\u003ch3\u003eoffset\u003ca id=\"orgheadline1\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e使用offset可以实现数据库分页功能\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003equestions = Questions.query.offset(num) # 从num开始\n\u003c/pre\u003e\n\u003ch3\u003elimit\u003ca id=\"orgheadline2\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e使用limit实现限制每页的文章数量\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003equestions = Questions.query.offset(num).limit(6) #每页显示6篇文章\n\u003c/pre\u003e\n\u003ch2\u003e前端实现分页\u003ca id=\"orgheadline12\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\n\u003ch3\u003e需求设计\u003ca id=\"orgheadline4\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e是使用上一页，下一页，用表单进行跳转,还是使用数字显示\u003c/p\u003e\n\n\u003cp\u003e获得文章数量 \u003cstrong\u003epages\u003c/strong\u003e,和当前页码 \u003cstrong\u003enumber\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e简单的上一页，下一页\u003ca id=\"orgheadline7\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003cem\u003e因为我的设计不是这个，所以简单说一下\u003c/em\u003e\u003c/p\u003e\n\n\u003ch4\u003e下一页...\u003c/h4\u003e","title":"flask实现分页"},{"content":"好久没有写东西的，主要是最近在用flask写一个网站，由于写前端界面时为了让UI好看一点，搞得自己晕头转向，方向都错了,在此期间也遇到很多问题，虽然绝大部分已经解决了，但是还有很多没有解决。其实，做一个项目是最能检验能力的。\n\n中文网站链接编码\n\n如果访问一个含中文字符的网站，很大可能会提示错误\nimport urllib\nurllib.parse.quote(url)","index":158,"permalink":"https://honmaple.me/articles/2015/12/flask学习笔记——3.html","summary":"\u003cp\u003e好久没有写东西的，主要是最近在用flask写一个网站，由于写前端界面时为了让UI好看一点，搞得自己晕头转向，方向都错了,在此期间也遇到很多问题，虽然绝大部分已经解决了，但是还有很多没有解决。其实，做一个项目是最能检验能力的。\u003c/p\u003e\n\n\u003ch3\u003e中文网站链接编码\u003c/h3\u003e\n\n\u003cp\u003e如果访问一个含中文字符的网站，很大可能会提示错误\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eimport urllib\nurllib.parse.quote(url)\n\u003c/pre\u003e","title":"flask学习笔记——3"},{"content":"今天被flask的项目结构或者说是蓝图搞得晕头转脑，各种文档也没说清，从github搜索并clone了几个用flask做成的网站，无奈水平太低，看不懂\n\n记录一下今天学到的\n\n蓝图\n\n|-app/\n|-|init.py\n|-|views.py\n|-|init.py\n|-|templates/\n|-|static/\n|-config.py\n|-run.py\n|-tmp/\n\nrun.py\n\n输入python run.py就可以运行程序\nfrom app import app #从app包中调用app模块\napp.run() #运行程序\n\nconfig.py\n\n一些基本的配置\nDEBUG = True #打开调试模式\n\napp/init.py\nfrom flask import Flask, request, session, g, redirect, url_for, \\\n     abort, render_template, flash\n\napp = Flask(__name__)\napp.config.from_object(\u0026#34;config\u0026#34;)  #调用config.py配置文件\n\nfrom app import views #从app包中导入views模块\n\napp/views.py\n\n视图文件\nfrom app import app\nfrom flask import Flask, request, session, g, redirect, url_for, \\\n     abort, render_template, flash\n@app.route.(\u0026#39;/\u0026#39;)\ndef Index():\n    return \u0026#39;hello,world\u0026#39;\n@app.route(/index)\ndef Show_page():\n    return render_template(\u0026#39;index.html\u0026#39;)\n\napp/templates/\n\n放置模板\n\napp/templates/index.html\n\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n        \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\n        \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width\u0026#34;\u0026gt;\n        \u0026lt;link rel=stylesheet type=text/css href=\u0026#34;{{ url_for(\u0026#39;static\u0026#39;, filename=\u0026#39;style.css\u0026#39;) }}\u0026#34;\u0026gt;\n        #使用static文件夹中的css，js\n        \u0026lt;title\u0026gt;\n        hello\n        \u0026lt;/title\u0026gt;\n\n    \u0026lt;/head\u0026gt;\n    \u0026lt;body\u0026gt;\n        \u0026lt;ul\u0026gt;\n            \u0026lt;li\u0026gt;hello\u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;world\u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;hello world\u0026lt;/li\u0026gt;\n        \u0026lt;/ul\u0026gt;\n    \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\napp/static\n\n放置一些静态文件\ncss,js等","index":159,"permalink":"https://honmaple.me/articles/2015/12/flask学习笔记--2.html","summary":"\u003cp\u003e今天被flask的项目结构或者说是蓝图搞得晕头转脑，各种文档也没说清，从github搜索并clone了几个用flask做成的网站，无奈水平太低，看不懂\u003c/p\u003e\n\n\u003cp\u003e记录一下今天学到的\u003c/p\u003e\n\n\u003ch2\u003e蓝图\u003c/h2\u003e\n\n\u003cp\u003e|-app/\u003cbr\u003e\n|-|\u003cstrong\u003einit\u003c/strong\u003e.py\n|-|views.py\u003cbr\u003e\n|-|\u003cstrong\u003einit\u003c/strong\u003e.py\u003cbr\u003e\n|-|templates/\u003cbr\u003e\n|-|static/\u003cbr\u003e\n|-config.py\u003cbr\u003e\n|-run.py\u003cbr\u003e\n|-tmp/\u003c/p\u003e\n\n\u003ch3\u003erun.py\u003c/h3\u003e\n\n\u003cp\u003e输入\u003ccode\u003epython...\u003c/code\u003e\u003c/p\u003e","title":"flask学习笔记--2"},{"content":"基本知识\n\npython html/css javascript http等\n\nflask安装\n\nFlask 依赖两个外部库： Werkzeug 和 Jinja2 。\nWerkzeug 是一个 WSGI 套件。 WSGI 是 Web 应用与 多种服务器之间的标准 Python 接口，即用于开发，也用于部署。\nJinja2 是用于渲染 模板的。\n\nvirtualenv\n\n关于virtualenv\n\n安装 virtualenv\n$ sudo pip install virtualenv\n\n安装完virtualenv后创建自己的文件夹\n$ mkdir flask\n$ cd flask\n$ virtualenv venv\nNew python executable in env/bin/python\nInstalling setuptools............done.\n\n以后要使用virtualenv只用输入\n$ . venv/bin/activate   #不要忘记了\u0026#34;.\u0026#34;\n\n你会发现在终端PS1前会出现(venv),代表你已经进入virtualenv虚拟环境\n退出virtualenv\n$ deactivate\n\n在virtualenv中安装flask\n$pip install flask\n\n\n另外,你也可以使用$ sudo pip install flask安装flask到你的电脑中\n\n\nflask使用\n\n安装完后就可以使用了\n注意项目结构\n\u0026gt;推荐使用\n|-app/\n|-|views.py\n|-|models.py\n|-|init.py\n|-|templates/\n|-|static/\n|-config.py\n|-run.py\n|-tmp/\n\n创建第一个应用过过隐\n\n暂时可以不用进行项目结构编排\n$vim hello.py\n\n输入\nfrom flask import Flask\n#导入Flask类\napp = Flask(__name__)\n#__name__模块名，必须的\n@app.route(\u0026#39;/\u0026#39;)\n#使用 route() 装饰器来告诉 Flask 触发函数的 URL \ndef hello_world():\n    return \u0026#39;Hello World!\u0026#39;\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    app.run()\n#使用 run() 函数来运行本地服务器和应用  \n\n运行后出现\n\u0026gt;* Running on http://127.0.0.1:5000/\n\n打开浏览器输入网址http://127.0.0.1:5000/\n\n打开调试模式\napp.debug = True\napp.run()\n\n或者是\napp.run(debug=True)\n\n注意\n\n\n调试模式仅限在本地使用，在生产环境中不要打开","index":160,"permalink":"https://honmaple.me/articles/2015/12/flask学习笔记--1.html","summary":"\n\u003ch2\u003e基本知识\u003c/h2\u003e\n\n\u003cp\u003epython html/css javascript http等\u003c/p\u003e\n\n\u003ch2\u003eflask安装\u003c/h2\u003e\n\n\u003cp\u003eFlask 依赖两个外部库： Werkzeug 和 Jinja2 。\nWerkzeug 是一个 WSGI 套件。 WSGI 是 Web 应用与 多种服务器之间的标准 Python 接口，即用于开发，也用于部署。\nJinja2 是用于渲染 模板的。\u003c/p\u003e\n\n\u003ch3\u003evirtualenv\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e关于virtualenv\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e安装 virtualenv\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pip install...\u003c/pre\u003e","title":"flask学习笔记--1"},{"content":"flask 作为后端数据库操作是必要的，现在记录一下一些flask数据库的相关操作，\n我将使用三种方法操作数据库\n暂时使用较简单的sqlite作为例子\n\n相关环境的安装\n\n建议使用ve虚拟环境\nsudo pacman -S sqlite # archlinux\nsudo pip install virtualenv \n# 在vertualenv环境下执行\npip install Flask-SQLAlchemy Jinja2 SQLAlchemy \n\n最好是多看文档\n\n1.使用sqlite3模块API\n\n参考资料\n这是最简单的方法,不仅适用于flask,python的其他方面也一样适用,如爬虫之类\n\n连接数据库\n#!/usr/bin/env python\n# -*- coding=UTF-8 -*-\nimport sqlite3\ndatabase = /path/test.db  #数据库文件路径\ntest = sqlite.connect(\u0026#39;database\u0026#39;) #连接数据库，如果数据库文件不存在则创建\nprint(\u0026#39;connect database successfully\u0026#39;)\ntest.close()  #关闭数据库连接\n\n如果将数据库名改为:memory:,则在内存中打开数据库而不是磁盘\n\n创建表\ndatabase = /path/test.db\ntest = sqlite.connect(\u0026#39;database\u0026#39;)\ntest.execute(\u0026#39;\u0026#39;\u0026#39;CREATE TABLE BOOKS\n       (ID INT PRIMARY KEY     NOT NULL,\n       TYPE           TEXT    NOT NULL,\n       NAME           TEXT    NOT NULL,\n       CONTENT        TEXT);\u0026#39;\u0026#39;\u0026#39;)\nprint(\u0026#34;Table created successfully\u0026#34;)\ntest.close()\n\n插入数据\ndatabase = /path/test.db\ntest = sqlite.connect(\u0026#39;database\u0026#39;)\ntest.execute(\u0026#34;INSERT INTO BOOKS (ID,TYPE,NAME,CONTENT) \\\n      VALUES (1, \u0026#39;hello\u0026#39;, \u0026#39;world\u0026#39;, \u0026#39;helloworld\u0026#39;)\u0026#34;);\ntest.execute(\u0026#34;INSERT INTO BOOKS (ID,TYPE,NAME,CONTENT) \\\n      VALUES (2, \u0026#39;goodbye\u0026#39;, \u0026#39;world\u0026#39;, \u0026#39;goodbyeworld\u0026#39;)\u0026#34;);\ntest.commit() #要使数据保存，必须提交\nprint(\u0026#34;Records commited successfully\u0026#34;)\ntest.close()\n\n查询数据\ndatabase = /path/test.db\ntest = sqlite.connect(\u0026#39;database\u0026#39;)\ncursor = test.execute(\u0026#34;SELECT ID,TYPE,NAME,CONTENT  from BOOKS\u0026#34;)\nfor row in cursor:\n   print(\u0026#34;ID =%d \u0026#34;%(row[0]))\n   print(\u0026#34;TYPE =%s \u0026#34;%(row[1]))\n   print(\u0026#34;NAME =%s \u0026#34;%(row[2]))\n   print(\u0026#34;CONTENT =%s \u0026#34;%(row[3]))\ntest.close()\n\n更新数据\ndatabase = /path/test.db\ntest = sqlite.connect(\u0026#39;database\u0026#39;)\ntest.execute(\u0026#34;UPDATE BOOKS SET CONTENT = \u0026#39;hello\u0026#39; WHERE ID=2\u0026#34;)\ntest.commit\ntest.close()\n\n删除数据\ndatabase = /path/test.db\ntest = sqlite.connect(\u0026#39;database\u0026#39;)\ntest.execute(\u0026#34;DELETE FROM BOOKS WHERE ID=2\u0026#34;)\ntest.commit\ntest.close()\n\n由于数据库文件我已经在外部使用第一种方法创建,所以第二种方法我直接打开\n\n2.使用文档上所说的方法\n\n参考资料\n英文\n中文\nimport sqlite3\nfrom flask import g\n\nDATABASE = \u0026#39;/path/to/database.db\u0026#39;\n\ndef connect_db():\n    return sqlite3.connect(DATABASE)\n\n@app.before_request #使用app_request装饰器打开数据库\ndef before_request():\n    g.db = connect_db()\n\n@app.teardown_request #使用app_request装饰器关闭数据库\ndef teardown_request(exception):\n    if hasattr(g, \u0026#39;db\u0026#39;):\n        g.db.close()\n\ndef query_db(query, args=(), one=False):  #数据库简化查询\n    cur = g.db.execute(query, args)\n    rv = [dict((cur.description[idx][0], value)\n               for idx, value in enumerate(row)) for row in cur.fetchall()]\n    return (rv[0] if rv else None) if one else rv  \n\n需要使用时(主要是查询)\nfor book in query_db(\u0026#39;select * from BOOKS\u0026#39;):\n    print book[\u0026#39;NAME\u0026#39;], \u0026#39;has the id\u0026#39;, book[\u0026#39;ID\u0026#39;]\n#由于flask一般不使用print，可以这样\nbook = query_db(\u0026#39;select * from BOOKS\u0026#39;)\n在模板中\n{{ book.ID }}或着{{ book[\u0026#39;ID\u0026#39;] }}\n\n如果只希望得到一个单独的结果\nbook = query_db(\u0026#39;select * from BOOKS where NAME = ?\u0026#39;,\n                [the_bookname], one=True)\nif book is None:\n    print \u0026#39;No such user\u0026#39;\nelse:\n    print the_bookname, \u0026#39;has the id\u0026#39;, book[\u0026#39;ID\u0026#39;]\n\n创建，更新，插入，删除数据请使用第一个方法\n\n初始化数据库模型\nfrom contextlib import closing\n\ndef init_db():\n    with closing(connect_db()) as db:\n        with app.open_resource(\u0026#39;schema.sql\u0026#39;) as f:\n            db.cursor().executescript(f.read())\n        db.commit()\n\n3.使用Flask-SQLAlchemy扩展 (这应该是最推荐的方法)\n\n参考文档\n中文\n英文\n\n一个最小应用\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config[\u0026#39;SQLALCHEMY_DATABASE_URI\u0026#39;] = \u0026#39;sqlite:////tmp/test.db\u0026#39;\n# sqlite打开的格式是sql:///三个\u0026#34;/\u0026#34;,接着是数据库文件的**绝对路径**\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True)\n    email = db.Column(db.String(120), unique=True)\n\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\n    def __repr__(self):\n        return \u0026#39;\u0026lt;User %r\u0026gt;\u0026#39; % self.username\n\n使用\n\n假若上面代码保存为test.py\n    打开python shell\n\u0026gt;\u0026gt;\u0026gt; from test import db,User\n\u0026gt;\u0026gt;\u0026gt; db.create_all() #创建表\n\u0026gt;\u0026gt;\u0026gt; admin = User(\u0026#39;admin\u0026#39;, \u0026#39;admin@example.com\u0026#39;) #创建数据\n# 这时数据还未真正写入数据库,需要提交\n\u0026gt;\u0026gt;\u0026gt; db.session.add(admin)\n\u0026gt;\u0026gt;\u0026gt; db.session.commit() #这时数据已经写入数据库中\n# 简单数据查询\n\u0026gt;\u0026gt;\u0026gt; users = User.query.all()\n\u0026gt;\u0026gt;\u0026gt; print(users)\n[\u0026lt;User u\u0026#39;admin\u0026#39;\u0026gt;]\n\u0026gt;\u0026gt;\u0026gt; admin = User.query.filter_by(username=\u0026#39;admin\u0026#39;).first()\n\u0026gt;\u0026gt;\u0026gt; print(admin)\n\u0026lt;User u\u0026#39;admin\u0026#39;\u0026gt;\n\n如果想要简单的查看数据,推荐firefox的一个sqlite插件 sqlite manager\n\n配置\nSQLALCHEMY_DATABASE_URI #用于连接的数据库\nSQLALCHEMY_BINDS #连接多个数据库\n# 比如\nSQLALCHEMY_BINDS = {\n    \u0026#39;users\u0026#39;:        \u0026#39;mysqldb://localhost/users\u0026#39;,\n    \u0026#39;appmeta\u0026#39;:      \u0026#39;sqlite:////path/to/appmeta.db\u0026#39;\n}\n# 创建删除表\n\u0026gt;\u0026gt;\u0026gt; db.create_all(bind=[\u0026#39;users\u0026#39;])\n\u0026gt;\u0026gt;\u0026gt; db.create_all(bind=\u0026#39;appmeta\u0026#39;)\n# 引用绑定,使用 __bind_key__\nclass User(db.Model):\n    __bind_key__ = \u0026#39;users\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True)\n\n选择，插入，删除\n\n插入\n\u0026gt;\u0026gt;\u0026gt; from test import User\n\u0026gt;\u0026gt;\u0026gt; me = User(\u0026#39;admin\u0026#39;, \u0026#39;admin@example.com\u0026#39;)\n\u0026gt;\u0026gt;\u0026gt; db.session.add(me)\n\u0026gt;\u0026gt;\u0026gt; db.session.commit()\n\n删除\n\u0026gt;\u0026gt;\u0026gt; db.session.delete(me)\n\u0026gt;\u0026gt;\u0026gt; db.session.commit()\n\n查询\n首先插入如下数据\n\n\n\n\nid\nusername\nemail\n\n\n\n\n\n1\nadmin\nadmin@example.com\n\n\n\n2\npeter\npeter@example.org\n\n\n\n3\nguest\nguest@example.com\n\n\n\n通过用户名查询用户:\n\u0026gt;\u0026gt;\u0026gt; admin = User.query.filter_by(username=\u0026#39;admin\u0026#39;).first()\n\u0026gt;\u0026gt;\u0026gt; print(admin.id)\n1\n\u0026gt;\u0026gt;\u0026gt; print(admin.email)\nu\u0026#39;admin@example.com\u0026#39;\n\n查找不存在的用户名:\n\u0026gt;\u0026gt;\u0026gt; missing = User.query.filter_by(username=\u0026#39;missing\u0026#39;).first()\n\u0026gt;\u0026gt;\u0026gt; missing is None\nTrue\n\n使用更复杂的表达式查询一些用户:\n\u0026gt;\u0026gt;\u0026gt; User.query.filter(User.email.endswith(\u0026#39;@example.com\u0026#39;)).all()\n[\u0026lt;User u\u0026#39;admin\u0026#39;\u0026gt;, \u0026lt;User u\u0026#39;guest\u0026#39;\u0026gt;]\n\n按某种规则对用户排序:\n\u0026gt;\u0026gt;\u0026gt; User.query.order_by(User.username)\n[\u0026lt;User u\u0026#39;admin\u0026#39;\u0026gt;, \u0026lt;User u\u0026#39;guest\u0026#39;\u0026gt;, \u0026lt;User u\u0026#39;peter\u0026#39;\u0026gt;]\n\n限制返回用户的数量:\n\u0026gt;\u0026gt;\u0026gt; User.query.limit(1).all()\n[\u0026lt;User u\u0026#39;admin\u0026#39;\u0026gt;]\n\n用主键查询用户:\n\u0026gt;\u0026gt;\u0026gt; User.query.get(1)\n\u0026lt;User u\u0026#39;admin\u0026#39;\u0026gt;\n\n在视图中使用\n\n使用 get_or_404() 来代替 get()，使用 first_or_404() 来代替 first()。\n这样会抛出一个 404 错误，而不是返回 None:\n@app.route(\u0026#39;/user/\u0026lt;username\u0026gt;\u0026#39;)\ndef show_user(username):\n    user = User.query.filter_by(username=username).first_or_404()\n    return render_template(\u0026#39;show_user.html\u0026#39;, user=user)\n\n主要就是这样，最好看完整的文档\n具体例子可以查看GitHub","index":161,"permalink":"https://honmaple.me/articles/2015/12/flask学习——数据库操作.html","summary":"\u003cp\u003eflask 作为后端数据库操作是必要的，现在记录一下一些flask数据库的相关操作，\n我将使用三种方法操作数据库\u003cbr\u003e\n暂时使用较简单的sqlite作为例子\u003c/p\u003e\n\n\u003ch3\u003e相关环境的安装\u003c/h3\u003e\n\n\u003cp\u003e\u003cem\u003e建议使用ve虚拟环境\u003c/em\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003esudo pacman -S sqlite # archlinux\nsudo pip install virtualenv \n# 在vertualenv环境下执行\npip install Flask-SQLAlchemy Jinja2 SQLAlchemy \n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e最好是多看文档\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e1.使用sqlite3模块API\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.runoob.com/sqlite/sqlite-python.html\"\u003e参考资料\u003c/a\u003e\u003cbr\u003e\n\u003cem\u003e这是最简单的方法,不仅适用于flask,python的其他方面也一样适用,如爬虫之类\u003c/em\u003e\u003c/p\u003e\n\n\u003ch4\u003e连接数据库\u003c/h4\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e#!/usr/bin/env python...\u003c/pre\u003e","title":"flask学习——数据库操作"},{"content":"Table of Contents\n为什么需要用token验证\n如何使用token?\n\n生成token\n验证token\n使用flask-login\n设置csrf白名单\n\n使用脚本发表\n\n\n为什么需要用token验证\n\n  原因呢是因为写博客时已经在本地写好了，但是要发表到网站上还需要这么几步:\n\n\n\n\n[X]\n 打开浏览器\n\n\n[X]\n 打开我的网站\n\n\n[X]\n 进入登陆页\n\n\n[X]\n 登陆\n\n\n[X]\n 进入后台页\n\n\n[X]\n 进入文章发表页\n\n\n[X]\n 复制粘贴\n\n\n[X]\n 发表\n\n\n\n\n  所以使用token验证成为必然\n\n\n如何使用token?\n\n生成token\n\n   使用itsdangerous对token进行加密\n\nclass User(model):\n    ......\n\n    @property\n    def token(self):\n        config = current_app.config\n        secret_key = config.setdefault(\u0026#39;SECRET_KEY\u0026#39;)\n        salt = config.setdefault(\u0026#39;SECURITY_PASSWORD_SALT\u0026#39;)\n        serializer = URLSafeTimedSerializer(secret_key)\n        # column = self.(需要加密的字段)\n        token = serializer.dumps(column, salt=salt)\n        return token\n\n   请保管好SECRET_KEY 和 SECURITY_PASSWORD_SALT,不要泄露\n\n\n验证token\nclass User(Model):\n    ......\n\n    @staticmethod\n    def check_token(token, max_age=86400):\n        config = current_app.config\n        secret_key = config.setdefault(\u0026#39;SECRET_KEY\u0026#39;)\n        salt = config.setdefault(\u0026#39;SECURITY_PASSWORD_SALT\u0026#39;)\n        serializer = URLSafeTimedSerializer(secret_key)\n        try:\n            column = serializer.loads(token, salt=salt, max_age=max_age)\n        except BadSignature:\n            return False\n        except SignatureExpired:\n            return False\n\n\n\n max-age\n     最大过期时间\n\n\n\n\n   如果验证成功查找该用户是否存在\n\nuser = User.query.filter_by(column=column).first()\nif user is None:\n    return False\nreturn user\n\n\n   示例:\n\n@staticmethod\ndef check_token(token, max_age=86400):\n    config = current_app.config\n    secret_key = config.setdefault(\u0026#39;SECRET_KEY\u0026#39;)\n    salt = config.setdefault(\u0026#39;SECURITY_PASSWORD_SALT\u0026#39;)\n    serializer = URLSafeTimedSerializer(secret_key)\n    try:\n        username = serializer.loads(token, salt=salt, max_age=max_age)\n    except BadSignature:\n        return False\n    except SignatureExpired:\n        return False\n    user = User.query.filter_by(username=username).first()\n    if user is None:\n        return False\n    return user\n\n使用flask-login\n\n   flask-login是flask的一个登陆扩展,自带token验证, 但是请一定要设\n\nlogin_manager.session_protection = \u0026#34;basic\u0026#34;\n\n   这是我在试验了n次后,读了flask-login的源码后才发现的（其实后面发现文档有写☹）\n\n\n\n   然后设置 request_loader\n\n@login_manager.request_loader\ndef user_loader_from_request(request):\n    token = request.args.get(\u0026#39;your_token\u0026#39;)\n    if token is not None:\n        user = User.check_token(token)\n        if user:\n            return user\n\nreturn login_manager\n\n   这是简单的从url中获取token进行验证,也可以从 header中获取(更安全)\n\ntoken = request.headers.get(\u0026#39;your_token\u0026#39;)\n设置csrf白名单\n\n   非常不幸的是，假设你开启了csrf保护,本地使用脚本验证时会报400错误,设置csrf白名单\n\ncsrf.exempt\n\n使用脚本发表\n\n  直接给出代码\n\nfrom urllib import request\nimport json\n\ncontent = \u0026#39;\u0026#39;\u0026#39;\n    ,* adssad\n    ,** adasd\n    ,*** adsad\n    \u0026#39;\u0026#39;\u0026#39;\n\ndata = {\n    \u0026#39;title\u0026#39;: \u0026#39;hello world\u0026#39;,\n    \u0026#39;content\u0026#39;:content\n}\ndata = json.dumps(data)\ndata = bytes(data, \u0026#39;utf8\u0026#39;)\nurl = \u0026#39;xxxxx\u0026#39; + \u0026#39;?your_token=\u0026#39;\nreq = request.Request(url, data=data)\nreq.add_header(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/json\u0026#39;)\nreq.add_header(\n    \u0026#39;User-Agent\u0026#39;,\n    \u0026#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36\u0026#39;\n)\nresult = request.urlopen(req).read().decode(\u0026#39;utf-8\u0026#39;)\nprint(result)\n\n\n  现在的步骤是:\n\n\n\n[X]\n 复制粘贴\n\n\n[X]\n 发表\n\n\n\n   ok,后续可能还需要将复制粘贴这一步也去了\n\n\n\n\n本篇文章就是采用这种方式发表","index":162,"permalink":"https://honmaple.me/articles/2016/12/flask使用token进行登陆.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e为什么需要用token验证\u003c/h1\u003e\n\u003cp\u003e\n  原因呢是因为写博客时已经在本地写好了，但是要发表到网站上还需要这么几步:\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 打开浏览器\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 打开我的网站\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 进入登陆页\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 登陆\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 进入后台页\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 进入文章发表页\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 复制粘贴\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e[X]\u003c/code\u003e\n 发表\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  所以使用\u003cb\u003etoken\u003c/b\u003e验证成为必然\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e如何使用token?\u003c/h1\u003e\n\n\u003ch2 id=\"heading-2.1\"\u003e生成token\u003c/h2\u003e\n\u003cp\u003e\n   使用\u003cb\u003eitsdangerous\u003c/b\u003e对token进行加密\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e(model):\n    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\n\n    \u003cspan style=\"color:#a6e22e\"\u003e@property\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoken\u003c/span\u003e(self):\n        config \u003cspan style=\"color:#f92672\"\u003e=...\u003c/span\u003e\u003c/pre\u003e","title":"flask使用token进行验证"},{"content":"简单使用ajax\n\n参考文档\n\u0026lt;script type=text/javascript\u0026gt;\n$(document).ready(function(){\n    $(\u0026#39;button#ajax\u0026#39;).click(function() {\n        $.ajax ({\n            type : \u0026#34;POST\u0026#34;,\n            url : \u0026#34;{{ url_for(\u0026#39;index.login\u0026#39;) }}\u0026#34;,\n            data:JSON.stringify({\n                name: $(\u0026#39;input[name=\u0026#34;name\u0026#34;]\u0026#39;).val(),\n                passwd: $(\u0026#39;input[name=\u0026#34;passwd\u0026#34;]\u0026#39;).val()\n            }),\n            contentType: \u0026#39;application/json;charset=UTF-8\u0026#39;,\n            success: function(result) {\n                if (result.judge == true)\n                {\n                    window.location = \u0026#39;/\u0026#39;;\n                }\n                else \n                {\n                    $(\u0026#34;#showerror\u0026#34;).show();\n                    $(\u0026#34;#error\u0026#34;).text(result.error);\n                }\n            }\n        });\n    });\n});\n\u0026lt;/script\u0026gt;\n\najax使用CSRF\n\n参考文档\n\n首先注册CSRF\nfrom flask_wtf.csrf import CsrfProtect\ncsrf = CsrfProtect()\ncsrf.init_app(app)\n\n在模板中使用\nvar csrftoken = \u0026#34;{{ csrf_token() }}\u0026#34;\n    $.ajaxSetup({\n        beforeSend: function(xhr, settings) {\n            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) \u0026amp;\u0026amp; !this.crossDomain) {\n                xhr.setRequestHeader(\u0026#34;X-CSRFToken\u0026#34;, csrftoken)\n            }\n        }\n    });","index":163,"permalink":"https://honmaple.me/articles/2016/02/flask使用ajax.html","summary":"\n\u003ch3\u003e简单使用ajax\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp\"\u003e参考文档\u003c/a\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u0026lt;script type=text/javascript\u0026gt;\n$(document).ready(function(){\n    $(\u0026#39;button#ajax\u0026#39;).click(function() {\n        $.ajax ({\n            type : \u0026#34;POST\u0026#34;,\n            url : \u0026#34;{{ url_for(\u0026#39;index.login\u0026#39;) }}\u0026#34;,\n            data:JSON.stringify...\u003c/pre\u003e","title":"flask使用ajax"},{"content":"参考资料1\n参考资料2\n下面是具体代码\n# from urlparse import urljoin #python2\nfrom urllib.parse import urljoin\nfrom flask import request\nfrom werkzeug.contrib.atom import AtomFeed\n\n\ndef make_external(url):\n    return urljoin(request.url_root, url)\n\n\n@site.route(\u0026#39;/atom.xml\u0026#39;)\ndef feed():\n    feed = AtomFeed(\u0026#39;Recent Articles\u0026#39;,\n                    feed_url=request.url,\n                    url=request.url_root,\n                    subtitle=\u0026#39;I like solitude, yearning for freedom\u0026#39;)\n    articles = Articles.query.limit(15).all()\n    for article in articles:\n        feed.add(\n            article.title,\n            article.content,\n            content_type=\u0026#39;html\u0026#39;,\n            author=article.author,\n            url=make_external(url_for(\u0026#39;blog.view\u0026#39;, id=article.id)),\n            updated=article.publish,\n            published=article.publish)\n    return feed.get_response()","index":164,"permalink":"https://honmaple.me/articles/2016/05/flask中生成atom.html","summary":"\u003cp\u003e\u003ca href=\"http://flask.pocoo.org/snippets/10/\"\u003e参考资料1\u003c/a\u003e\n\u003ca href=\"http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/contrib/atom.html\"\u003e参考资料2\u003c/a\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e下面是具体代码\n# from urlparse import urljoin #python2\nfrom urllib.parse import urljoin\nfrom flask import request\nfrom werkzeug.contrib.atom import AtomFeed\n\n\ndef make_external(url):\n    return urljoin(request.url_root, url)\n\n\n@site.route(\u0026#39;...\u003c/pre\u003e","title":"flask中生成atom"},{"content":"Table of Contents\n安装\n用户系统\n权限\n\n使用\n权限缓存\n\n登录\n\n使用\n注意事项\n\n验证码\n\n使用\n配置\n\n错误处理\n邮箱\n表单\n数据库\n\n基本查询(已实现)\n关系查询\n其它\n\n序列化\n\n多个实例\n单个实例\n排除字段\n仅包括字段\n关系查询深度\n额外的字段\n自定义\n\n中间件\n日志\nApp\n\n使用\n配置\n\nBootstrap\n\n使用\n模板\n配置\n\nRedis\n\n使用\n配置\n\n\n\n安装\n\n   To install Flask-Maple:\n\npip install flask-maple\n\n\n   Or alternatively, you can download the repository and install manually by doing:\n\ngit clone git@github.com:honmaple/flask-maple.git\ncd flask-maple\npython setup.py install\n\n用户系统\n\n   在 flask_maple/auth/model.py 中默认实现了 GroupMixin 与 UserMixin\n   如果要创建 user 表与 group 表,只需要\n\nfrom flask_maple.auth.models import UserMixin, GroupMixin\n\nclass User(db.Model, UserMixin):\n    pass\n\nclass Group(db.Model, GroupMixin):\n    pass\n\n   即可\n\n\n\n   user 表默认创建以下字段, 可添加更多想要的字段\n\n\n\n\n id\n\n\n\n username\n\n\n\n password\n\n\n\n email\n\n\n\n is_superuser\n\n\n\n is_confirmed\n\n\n\n register_time\n\n\n\n last_login\n\n\n\n groups\n\n\n\n\n   group 表默认创建以下字段\n\n\n\n\n id\n\n\n\n name\n\n\n\n users\n\n\n\n parent_group\n\n\n\n child_groups\n\n\n\n权限\n使用\nfrom flask_maple.permission.models import PermissionMixin\n\nclass Permission(db.Model, PermissionMixin):\n    pass\n\n\n    user 表与 group 表可继承 flask_maple.permission.models.UserMixin 与 flask_maple.permission.models.GroupMixin\n    或者直接使用 flask_maple.auth.models.UserMixin 与 flask_maple.auth.models.GroupMixin\n\n\n\n\n\n 添加权限\n\nidentity = user # or group\nidentity.add_perm(\n    action,\n    resource,\n    resource_type=\u0026#39;endpoint\u0026#39;,\n    description=None)\n\n\n\n 删除权限\n\nidentity.remove_perm(\n    action,\n    resource,\n    resource_type=\u0026#39;endpoint\u0026#39;)\n\n\n\n 检查权限\n\nidentity.has_perm(action, resource, resource_type=\u0026#39;endpoint\u0026#39;, and_=False)\n\n\n权限缓存\n\n    默认权限会从数据库获取, 如果经常使用，可自行添加缓存, 并在添加删除权限后自行对缓存进行操作\n\nclass User(db.Model, UserMixin):\n    def perm_cache(self,\n                   action,\n                   resource,\n                   resource_type=\u0026#39;endpoint\u0026#39;,\n                   and_=False):\n        return\n\n登录\n\n   依赖于 flask-login, flask-mail\n\n\n使用\nfrom flask_maple import auth\n\nauth.init_app(app)\n\n# 或者\nfrom flask_maple.auth.views import Auth\n\nAuth(app)\n\n\n    将会创建6个 url\n\n\n\n\n\n /login\n\n\n\n /logout\n\n\n\n /register\n\n\n\n /forget\n\n\n\n /confirm\n\n\n\n /confirm/\u0026lt;token\u0026gt;\n\n\n\n\n    可以自定义登陆，注册，忘记密码页面，以登陆页面为例 (templates/maple/login.html)\n\n{% extends \u0026#34;base/base.html\u0026#34; %}\n{%- block content -%}\n{% import \u0026#39;maple/auth.html\u0026#39; as auth %}\n\u0026lt;div class=\u0026#34;panel panel-primary\u0026#34;\u0026gt;\n    \u0026lt;div class=\u0026#34;panel-heading\u0026#34;\u0026gt;\n        \u0026lt;a href=\u0026#34;{{ url_for(\u0026#39;auth.login\u0026#39;) }}\u0026#34; style=\u0026#34;color:#fff\u0026#34;\u0026gt;{{ _(\u0026#39;Login\u0026#39;)}}\u0026lt;/a\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div class=\u0026#34;panel-body\u0026#34;\u0026gt;\n        {{ auth.login()}}\n    \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n{% endblock %}\n\n注意事项\n\n    登陆与登出默认使用 user.login(remember) , user.logout(), 如果未使用 flask_maple/auth/model.py 中的 UserMixin,则需要自己定义\n\n\n验证码\n\n   使用 Pillow 生成验证码\n\n\npip install pillow\n\n使用\nfrom flask_maple import Captcha\ncaptcha = Captcha(app)\n\n# 因为字体可能存在侵权，所以需要指定自己服务器字体, 默认为 /usr/share/fonts/TTF/DejaVuSans.ttf\ncaptcha = Captcha(app, font=\u0026#34;\u0026#34;)\n\n    然后访问 http://127.0.0.1/captcha\n\n\n配置\nCAPTCHA_URL = \u0026#34;The captcha url,default \u0026#39;captcha\u0026#39;\u0026#34;\n\n错误处理\n\n   主要是对发生错误时的页面进行定制(403,404,500)\n\nfrom flask_maple import Error\nerror = Error(app)\n\n\n   定制图片源于flask官网,侵删\n\n\n邮箱\n\n   依赖于 flask-mail, 区别使用多线程发送\n\n\nfrom flask_maple.mail import Mail\n\nmail = Mail(app)\nmail.send_email(*args, **kwargs)\n\n\n   此外，还有一个 MailMixin,实现了邮箱验证需要的密钥,\n\nfrom flask_maple.mail import MailMixin\n\nclass User(db.Model, MailMixin):\n    pass\n\nprint(user.email_token)\nprint(User.check_email_token(token, max_age=259200))\n表单\n数据库\n\n   像django一样使用 flask-sqlalchemy\n   djang orm 与sqlalchemy相比,为什么很多人都认为django orm更好用,大概就是因为django orm更方便\n\n\n基本查询(已实现)\n\n\n\n gt\n\n\n\n lt\n\n\n\n lte\n\n\n\n gte\n\n\n\n contains\n\n\n\n in\n\n\n\n exact\n\n\n\n iexact\n\n\n\n startswith\n\n\n\n istartswith\n\n\n\n iendswith\n\n\n\n endswith\n\n\n\n isnull\n\n\n\n range\n\n\n\n year\n\n\n\n month\n\n\n\n day\n\n\n\n\n    示例:\n\nPost.query.filter_by(title__contains = \u0026#39;sql\u0026#39;).all()\nPost.query.exclude_by(title__contains = \u0026#39;sql\u0026#39;).all()\n\n关系查询\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).all()\n\n其它\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).or(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).and(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = \u0026#39;sql\u0026#39;).exists()\nPost.query.load_only(\u0026#39;title\u0026#39;)\n\n序列化\n\n   把 sqlalchemy 对象序列化为 json, 使用方法参考于 django rest framework\n\n\n多个实例\nfrom flask_maple.serializer import Serializer\n\nposts = Post.query.all()\nserializer = Serializer(posts)\ndata = serializer.data\n\n单个实例\npost = Post.query.first()\nserializer = Serializer(post)\ndata = serializer.data\n\n排除字段\nserializer = Seralizer(post,exclude=[\u0026#39;title\u0026#39;])\n\n仅包括字段\nserializer = Seralizer(post,include=[\u0026#39;title\u0026#39;])\n\n关系查询深度\nserializer = Seralizer(post,depth=3)\n\n    depth默认为2\n\n\n额外的字段\nclass Post(Model):\n    ......\n    def get_post_count(self):\n        return 11\n\nserializer = Serializer(post,extra=[\u0026#39;get_post_count\u0026#39;])\n\n自定义\nfrom flask_maple.serializer import Serializer\n\nclass PostSerializer(Serializer):\n    class Meta:\n        include = []\n        depth = 2\n        include = []\n        exclude = []\n        extra = [\u0026#39;count\u0026#39;]\n\nserializer = PostSerializer(post,include=[\u0026#39;title\u0026#39;])\n\n中间件\n\n   参考于 django \n\nfrom flask_maple.middleware import Middleware\n\napp = ...\nMiddleware(app)\n\n\n   中间件写法(以一个简单的性能测试中间件为例)\n\nclass ProfileMiddleware(object):\n    def preprocess_request(self):\n        pr = cProfile.Profile()\n        pr.enable()\n        request.pr = pr\n\n    def process_response(self, response):\n        pr = request.pr\n        pr.disable()\n        s = StringIO()\n        sortby = \u0026#39;cumulative\u0026#39;\n        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)\n        ps.print_stats()\n        print(s.getvalue())\n        return response\n\n\n   重要 ，需要加入中间件配置\n\nMIDDLEWARE = [\u0026#34;path.to.ProfileMiddleware\u0026#34;]\n\n日志\n\n   记录 info 和 error 两个日志level, 使用很简单\n\nfrom flask_maple.log import Logging\n\napp = ...\nLogging(app)\n\n\n   配置文件\n\nLOGGING = {\n    \u0026#39;info\u0026#39;: \u0026#39;logs/info.log\u0026#39;,   # 记录info level的日志,与配置文件同级下的logs目录,可修改\n    \u0026#39;error\u0026#39;: \u0026#39;logs/error.log\u0026#39;, # 记录error level的日志\n    \u0026#39;send_mail\u0026#39;: False,        # 当有错误发生时，是否发送邮件到管理员邮箱\n    \u0026#39;toaddrs\u0026#39;: [],             # 管理员邮箱，可为多个\n    \u0026#39;subject\u0026#39;: \u0026#39;Your Application Failed\u0026#39;,\n    \u0026#39;formatter\u0026#39;: \u0026#39;\u0026#39;\u0026#39;\n            Message type:       %(levelname)s\n            Location:           %(pathname)s:%(lineno)d\n            Module:             %(module)s\n            Function:           %(funcName)s\n            Time:               %(asctime)s\n\n            Message:\n\n            %(message)s\n            \u0026#39;\u0026#39;\u0026#39;\n}\n\n\n   当send_mail为 True时, 配置依赖于 flask_mail的配置(主要是不想写多份)\n\nMAIL_USERNAME\nMAIL_PASSWORD\nMAIL_SERVER\nMAIL_PORT\nMAIL_DEFAULT_SENDER\nApp\n\n   创建两个常用的 url\n\n\n\n\n\n /robots.txt\n\n\n\n /favicon.ico\n\n\n\n使用\nfrom flask_maple.app import App\n\nApp(app)\n\n\n    此外,因为国际化等原因,可以传递 flask_maple.json.CustomJSONEncoder 给App\n\nfrom flask_maple.app import App\nfrom flask_maple.json import CustomJSONEncoder\n\nApp(app, json=CustomJSONEncoder)\n\n配置\n\n    参考于 django,可以懒加载 blueprint\n\nINSTALLED_APPS = [\n    \u0026#34;path.to.blueprint1\u0026#34;,\n    \u0026#34;path.to.blueprint2\u0026#34;,\n    {\n        \u0026#34;kwargs\u0026#34;:{},\n        \u0026#34;blueprint\u0026#34;:{}\n    }\n]\nBootstrap\n\n   主要是个人经常使用的一些模板,比如bootstrap的js,css文件，分页模板, 上下撑满等\n   并依赖于 flask-assets ,对js,css文件进行压缩\n\n\n使用\nfrom flask_maple import Bootstrap\nbootstrap = Bootstrap(\n    app,\n    css=(\u0026#39;styles/monokai.css\u0026#39;, \u0026#39;styles/mine.css\u0026#39;),\n    js=(\u0026#39;styles/upload.js\u0026#39;, \u0026#39;styles/forums.js\u0026#39;, \u0026#39;styles/following.js\u0026#39;,\n        \u0026#39;styles/topic.js\u0026#39;),\n    use_auth=True)\n\n\n    或者\n\nbootstrap = Bootstrap()\nbootstrap.init_app(app)\n\n模板\n{% extends \u0026#39;maple/base.html\u0026#39; %}\n{% block main -%}\n\u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;submit\u0026lt;/button\u0026gt;\n\u0026lt;span class=\u0026#34;glyphicon glyphicon-search\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\n{% endblock -%}\n\n配置\nAUTHOR_NAME = \u0026#34;This will show you name at html footer\u0026#34;\n\nRedis\n\n   默认会加载 rediscluster.StrictRedisCluster ,如果rediscluster未安装则加载 redis.StrictRedis\n\n\n使用\nfrom flask_maple.redis import Redis\n\nredis = Redis(app)\n\n# 像平时使用redispy一样使用\nprint(redis.get(...))\n\n配置\nREDSI = {...}","index":165,"permalink":"https://honmaple.me/articles/2018/02/flask_maple文档.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e\n   To install Flask-Maple:\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003epip install flask\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emaple\u003c/pre\u003e\n\n\u003cp\u003e\n   Or alternatively, you can download the repository and install manually by doing:\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003egit clone git\u003cspan style=\"color:#a6e22e\"\u003e@github.com\u003c/span\u003e:honmaple\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eflask\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emaple\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egit\ncd flask\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emaple\npython setup\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epy...\u003c/pre\u003e","title":"flask_maple文档"},{"content":"简单的例子这里已经有了\n中文\n这里记录一下平时我遇到的一些问题\n\n一对多\n\n需求:一个问题对应多个回复\n下面给出代码(字段不完整)\nclass Questions(db.Model):\n    __tablename__ = \u0026#39;questions\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(50), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n\n    def __init__(self,title,content):\n        self.title = title\n        self.content = content\n\n    def __repr__(self):\n        return \u0026#34;\u0026lt;Questions %r\u0026gt;\u0026#34; % self.title\n\n\nclass Replies(db.Model):\n    __tablename__ = \u0026#39;replies\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    question_id = db.Column(db.Integer, db.ForeignKey(\u0026#39;questions.id\u0026#39;,\n                                                      ondelete=\u0026#34;CASCADE\u0026#34;))\n    replies = db.relationship(\u0026#39;Questions\u0026#39;,\n                              backref=db.backref(\u0026#39;replies\u0026#39;,\n                                                 cascade=\u0026#39;all,delete-orphan\u0026#39;,\n                                                 lazy=\u0026#39;dynamic\u0026#39;,\n                                                 order_by=\u0026#39;Replies.time\u0026#39;)\n                              )\n\n    def __init__(self, content):\n        self.content = content\n\n    def __repr__(self):\n        return \u0026#34;\u0026lt;Replies %r\u0026gt;\u0026#34; % self.content\n\n会发现这样的两行(虽然实际上有好几行)\n    question_id = db.Column(db.Integer, db.ForeignKey(\u0026#39;questions.id\u0026#39;,\n                                                      ondelete=\u0026#34;CASCADE\u0026#34;))\n    replies = db.relationship(\u0026#39;Questions\u0026#39;,\n                              backref=db.backref(\u0026#39;replies\u0026#39;,\n                                                 cascade=\u0026#39;all,delete-orphan\u0026#39;,\n                                                 lazy=\u0026#39;dynamic\u0026#39;,\n                                                 order_by=\u0026#39;Replies.time\u0026#39;)\n                              )\n\nquestion_id为外键,关联着questions这个数据表\nreplies这一行我习惯用反代,也就是backref=db.backref\n调用\nquestion = Questions.query.filter_by(id=1).first()\nprint(question.replies)  # 输出该问题的回复\nprint(question.replies.content) # 错误\nfor reply in question.replies:\n    print(reply.content)  # 正确\nreply = Replies.query.filter_by(id=1).first()\nprint(reply.question_id) # 输出该回复的所属问题\nprint(reply.question_id.title)\n\n级联删除\n\n也就是删除一个问题，也会将该问题下的所有回复删除,而删除问题下的回复将不会影响到具体问题\n具体请google sqlalchemy cascade\n经过测试,上面代码可级联删除回复,而不是将外键置空","index":166,"permalink":"https://honmaple.me/articles/2016/03/flask-sqlalchemy使用.html","summary":"\u003cp\u003e简单的例子\u003ca href=\"http://flask-sqlalchemy.pocoo.org/2.1/quickstart/\"\u003e这里\u003c/a\u003e已经有了\u003cbr\u003e\n\u003ca href=\"http://www.pythondoc.com/flask-sqlalchemy/index.html\"\u003e中文\u003c/a\u003e\n这里记录一下平时我遇到的一些问题\u003c/p\u003e\n\n\u003ch4\u003e一对多\u003c/h4\u003e\n\n\u003cp\u003e需求:一个问题对应多个回复\u003cbr\u003e\n下面给出代码(字段不完整)\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eclass Questions(db.Model):\n    __tablename__ = \u0026#39;questions\u0026#39;\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(50), nullable=False)\n    content...\u003c/pre\u003e","title":"flask-sqlalchemy使用"},{"content":"记录一下，省得每次重装都要找（绝大多数转自网络)fedora22 发布后 dnf 代替了 yum\n\n1.增加sudo用户组\n$ su  \n\n转到root用户，输入密码\n# visudo\n\n在root ALL=(ALL) ALL下增加一行\nyourname ALL=(ALL) ALL  \n\n如果不想每次输入密码更改为\nyourname ALL=(ALL) NOPASSWD:ALL  \n\n:wq #保存退出  \nexit #回到一般用户  \n\n2.备份的主题，图标,字体拷贝到home目录\n$ cp -r files ~/.theme \n$ cp -r files ~/.icons\n$ cp -r files ~/.fonts\n$ sudo chmod -R 755 files  \n\n## 3. 启用RPM Fusion仓库\n$ sudo rpm -Uhv http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-22.noarch.rpm\n$ sudo rpm -Uhv http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-22.noarch.rpm\n\n4.使用 dnf 缓存与dnf 最快源\n# vim /etc/dnf/dnf.conf\n\n添加 keepcache=true 与 fastestmirror=true\n\n5. 安装Flash播放器\n\n32位系统\n$ sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-i386-1.0-1.noarch.rpm\n$ sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux\n$ sudo dnf install flash-plugin\n\n64位系统\n$ sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm\n$ sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux\n$ sudo dnf install flash-plugin\n\n6.安装解压缩插件\n$ sudo yum install unrar unzip p7zip\n\n7.安装gcc 和g++\n$ sudo yum install gcc gcc-c++\n\n8.安装播放器\n\nvlc视频播放器\n$ sudo yum install vlc mplayer\n\n音乐播放器\n$ sudo yum install moc\n\n歌词\nosdlyrics\n\n9.安装火狐\n$ sudo yum install firefox\n\n10.安装code::blocks\n$ sudo yum install codeblocks\n\n11.开机默认进文本模式\n$ sudo rm /etc/systemd/system/default.target\n$ sudo ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target  #文本模式\n$ sudo ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target   #图形模式\n\n12.安装头文件\n$ sudo yum install kernel-headers kernel-devel\n\n13.一些必要的编译工具\n$ sudo yum install cscope ctags pylint cmake clang gtk2-devel ncurses ncurses-devel\n\n14.游戏\n$ sudo yum install asciiquarium sl fortune oneko\n\ngnome-mines    扫雷  \ngnome-sudoku   数独  \ngnome-mahjongg 对对碰\n\n15.输入法\n$ sudo yum install fcitx fcitx-configtool fcitx-qt fcitx-sunpinyin\n\n16.联网程序\n$ sudo yum install w3m w3m-img bcloud uget git wget firefox google-chrome-stable\n\n17.系统清理\n$ sudo yum install bleachbit\n\n18.图像与文字\n$ sudo yum install wps gimp shotwell\n\n19.其他\n# vim /etc/sysconfig/selinux  #selinux配置位置\n# vim /etc/sysconfig/iptables  #防火墙配置位置","index":167,"permalink":"https://honmaple.me/articles/2015/05/fedora安装后设置.html","summary":"\u003cp\u003e记录一下，省得每次重装都要找（绝大多数转自网络)\u003cbr/\u003e\u003cbr/\u003efedora22 发布后 dnf 代替了 yum\u003c/p\u003e\n\n\u003ch2\u003e1.增加sudo用户组\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ su  \n\u003c/pre\u003e\n\u003cp\u003e转到root用户，输入密码\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# visudo\n\u003c/pre\u003e\n\u003cp\u003e在root ALL=(ALL) ALL下增加一行\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eyourname ALL=(ALL) ALL  \n\u003c/pre\u003e\n\u003cp\u003e如果不想每次输入密码更改为\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eyourname ALL=(ALL) NOPASSWD:ALL  \n\n:wq #保存退出  \nexit #回到一般用户  \n\u003c/pre\u003e\n\u003ch2\u003e2.备份的主题，图标...\u003c/h2\u003e","title":"fedora安装后设置"},{"content":"参考fedora安装bumblebee官方wiki 写在前面：安装前最好更新系统，安装内核头文件等，如果有多余旧内核先删除 安装驱动最好进入字符界面操作\n\n有一些错误，现更正\n\n将selinux设置为disabled\n# vim /etc/sysconfig/selinux \n\n安装及必要的依赖\n# dnf install -y libbsd-devel libbsd glibc-devel libX11-devel help2man autoconf git tar glib2 glib2-devel kernel-devel kernel-headers automake gcc gtk2-devel \n# dnf install VirtualGL \n# dnf install VirtualGL.i686  # 即使是在64位操作系统上，这个也是必装的\n# dnf -y install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee/fedora22/noarch/bumblebee-release-1.2-1.noarch.rpm \n# dnf -y install bbswitch bumblebee \n# dnf -y install http://install.linux.ncsu.edu/pub/yum/itecs/public/bumblebee-nonfree/fedora22/noarch/bumblebee-nonfree-release-1.2-1.noarch.rpm \n# dnf -y install bumblebee-nvidia \n\n安装完成后加入用户组\n$ sudo usermod -a -G video username \n$ sudo usermod -a -G bumblebee username   #username是用户名\n\n启动必要服务\n$ sudo systemctl enable dkms \n$ sudo systemctl enable bumblebeed \n\n重启\n$ reboot \n\n测试bumblebee\n$ optirun glxgears -info | grep \u0026#34;GL_VENDOR\u0026#34;","index":168,"permalink":"https://honmaple.me/articles/2015/06/fedora22成功安装bumblebee-nvidia.html","summary":"\u003cp\u003e参考fedora安装\u003ca href=\"http://fedoraproject.org/wiki/Bumblebee#Description\"\u003ebumblebee官方wiki\u003c/a\u003e \u003cbr/\u003e写在前面：安装前最好更新系统，安装内核头文件等，如果有多余旧内核先删除 \u003cbr/\u003e安装驱动最好进入字符界面操作\u003c/p\u003e\n\n\u003cp\u003e有一些错误，现更正\u003c/p\u003e\n\n\u003ch3\u003e将selinux设置为disabled\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# vim /etc/sysconfig/selinux \n\u003c/pre\u003e\n\u003ch3\u003e安装及必要的依赖\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# dnf install -y libbsd-devel libbsd glibc-devel libX11-devel help2man autoconf git tar glib2 glib2-devel kernel-devel kernel-headers...\u003c/pre\u003e","title":"fedora22成功安装bumblebee-nvidia"},{"content":"Table of Contents\n需求\n解决\n\n\n需求\n\n  在使用 org-mode 写文档时，插入图片后默认不显示，想要直接在 org文件中预览图片，可以使用\n\norg-toggle-inline-images\n\n  但是问题来了，开启预览模式后，移动光标跳过文件内容，找了一下\n\n\n\n  参考链接 [1]\n  那么问题来了，如何只在开启 org-toggle-inline-images 后关闭 smooth-scrooling,\n  关闭 org-toggle-inline-images 后开启 smooth-scrooling\n\n\n解决\n\n  给出代码,使用 defadvice\n\n(defadvice org-toggle-inline-images (after org-open-at-point activate)\n  (if smooth-scrolling-mode (smooth-scrolling-mode -1)\n        (smooth-scrolling-mode 1)))\n\nFootnotes\n\n1\nhttps://github.com/syl20bnr/spacemacs/issues/3824","index":169,"permalink":"https://honmaple.me/articles/2016/12/emacs预览图片时禁止smooth-scrolling.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e需求\u003c/h1\u003e\n\u003cp\u003e\n  在使用 \u003cb\u003eorg-mode\u003c/b\u003e 写文档时，插入图片后默认不显示，想要直接在 \u003cb\u003eorg\u003c/b\u003e文件中预览图片，可以使用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eorg-toggle-inline-images\u003c/pre\u003e\n\u003cp\u003e\n  但是问题来了，开启预览模式后，移动光标跳过文件内容，找了一下\n\u003c/p\u003e\n\n\u003cp\u003e\n  \u003ca href=\"https://github.com/syl20bnr/spacemacs/issues/3824\"\u003e参考链接\u003c/a\u003e \u003csup\u003e\u003ca id=\"fnr.1\" href=\"#fn.1\"\u003e[1]\u003c/a\u003e\u003c/sup\u003e\n  那么问题来了，如何只在开启 \u003cb\u003eorg-toggle-inline-images\u003c/b\u003e 后关闭 \u003cb\u003esmooth-scrooling\u003c/b\u003e,\n  关闭 \u003cb\u003eorg-toggle-inline-images\u003c/b\u003e 后开启 \u003cb\u003esmooth...\u003c/b\u003e\u003c/p\u003e","title":"emacs预览图片时禁止smooth-scrolling"},{"content":"Table of Contents\n\n\n1. 换系统\n2. 修改language环境\n3. 重新以gb2312的编码载入文件(推荐)\n\n\n\n\n最近在看windows文件时总是乱码，查了资料后才知道windowns下的编码为 gb2312 ,\n而linux下的编码为 utf-8 ,所以打开文件会乱码\n\n如何解决?\n\n换系统\n\n这不是废话吗!\n\n修改language环境\n\n在配置文件中加入这么一行\n(set-language-environment \u0026#39;Chinese-GB)\n\n重启就行,结果····打开 linux下的文件乱码\n\n重新以gb2312的编码载入文件(推荐)\n\n参考这里\nM-x revert-buffer-with-coding-system\n\n选择chinese-gb2312,确认载入(不需要重启)\n\nok,是不是很简单","index":170,"permalink":"https://honmaple.me/articles/2016/06/emacs解决windowns文件乱码.html","summary":"\n\u003cdiv id=\"table-of-contents\"\u003e\n\u003ch2\u003eTable of Contents\u003c/h2\u003e\n\u003cdiv id=\"text-table-of-contents\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline1\"\u003e1. 换系统\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline2\"\u003e2. 修改language环境\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orgheadline3\"\u003e3. 重新以gb2312的编码载入文件(推荐)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e最近在看windows文件时总是乱码，查了资料后才知道windowns下的编码为 \u003cstrong\u003egb2312\u003c/strong\u003e ,\n而linux下的编码为 \u003cstrong\u003eutf-8\u003c/strong\u003e ,所以打开文件会乱码\u003c/p\u003e\n\n\u003cp\u003e如何解决?\u003c/p\u003e\n\n\u003ch3\u003e换系统\u003ca id=\"orgheadline1\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e这不是废话吗!\u003c/p\u003e\n\n\u003ch3\u003e修改language环境\u003ca id=\"orgheadline2\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e在配置文件中加入这么一行\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(set-language-environment \u0026#39;Chinese-GB)\n\u003c/pre\u003e\n\u003cp\u003e重启就行,结果····打开 linux下的文件乱码\u003c/p\u003e\n\n\u003ch3\u003e重新以gb2312的编码载入文件(推荐)\u003ca id=\"orgheadline3\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"http://blog.csdn.net/pfanaya/article/details/6205640\"\u003e参考这里\u003c/a\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eM...\u003c/pre\u003e","title":"emacs解决windowns文件乱码"},{"content":"参考问题\n\n其实也就是加一行代码就行\n(fset \u0026#39;evil-visual-update-x-selection \u0026#39;ignore)\n\n注意 需要加载 evil 后增加\n也就是\n(require \u0026#39;evil)\n(fset \u0026#39;evil-visual-update-x-selection \u0026#39;ignore)","index":171,"permalink":"https://honmaple.me/articles/2016/04/emacs解决evil-visual下剪贴板问题.html","summary":"\u003cp\u003e\u003ca href=\"http://emacs.stackexchange.com/questions/14940/emacs-doesnt-paste-in-evils-visual-mode-with-every-os-clipboard\"\u003e参考问题\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e其实也就是加一行代码就行\u003ca id=\"orgheadline1\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(fset \u0026#39;evil-visual-update-x-selection \u0026#39;ignore)\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e注意\u003c/strong\u003e 需要加载 \u003cstrong\u003eevil\u003c/strong\u003e 后增加\n也就是\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(require \u0026#39;evil)\n(fset \u0026#39;evil-visual-update-x-selection \u0026#39;ignore)\n\u003c/pre\u003e","title":"emacs解决evil-visual下剪贴板问题"},{"content":"Table of Contents\n基础使用\n自定义文件头\n提取文件头公共信息\n\n\n\n想要在emacs中添加文件头有好几种方法:\n\n\n\n\n 直接手打\n\n\n\n 使用模板yasnippet\n\n\n\n 使用header2\n\n\n\n 使用内置的package auto-insert\n\n\n\n\nheader2可能是最方便的一种自动添加文件头的方式，但我之前使用过，想要自定义自己想要的内容很难，而且白白浪费header2的功能\n\n\n\n今天主要说一说emacs内置里auto-insert,使用它在创建文件时自动添加文件头信息\n\n\n基础使用\n\n   直接(auto-insert-mode)\n   并且设置\n\n(setq auto-insert-query nil) ;; 不提醒\n\n自定义文件头\n(setq auto-insert-alist\n      \u0026#39;(((python-mode . \u0026#34;Python program\u0026#34;) nil\n         \u0026#34;#!/usr/bin/env python\\n\u0026#34;\n         \u0026#34;# -*- coding: utf-8 -*-\\n\u0026#34;\n         \u0026#34;# **************************************************************************\\n\u0026#34;\n         \u0026#34;# Copyright © \u0026#34; (substring (current-time-string) -4) \u0026#34; \u0026#34; (user-full-name) \u0026#34;\\n\u0026#34;\n         \u0026#34;# File Name: \u0026#34; (file-name-nondirectory buffer-file-name) \u0026#34;\\n\u0026#34;\n         \u0026#34;# Author: \u0026#34; (user-full-name)\u0026#34;\\n\u0026#34;\n         \u0026#34;# Email: \u0026#34; user-mail-address \u0026#34;\\n\u0026#34;\n         \u0026#34;# Created: \u0026#34; (format-time-string \u0026#34;%Y-%m-%d %T (%Z)\u0026#34; (current-time)) \u0026#34;\\n\u0026#34;\n         \u0026#34;# Last Update: \u0026#34; (format-time-string \u0026#34;%Y-%m-%d %T (%Z)\u0026#34; (current-time)) \u0026#34;\\n\u0026#34;\n         \u0026#34;#          By: \\n\u0026#34;\n         \u0026#34;# Description: \\n\u0026#34;\n         \u0026#34;# **************************************************************************\\n\u0026#34;)\n        ((c-mode . \u0026#34;C program\u0026#34;) nil\n         \u0026#34;/**************************************************************************\\n\u0026#34;\n         \u0026#34; Copyright © \u0026#34; (substring (current-time-string) -4) \u0026#34; \u0026#34; (user-full-name) \u0026#34;\\n\u0026#34;\n         \u0026#34; File Name: \u0026#34; (file-name-nondirectory buffer-file-name) \u0026#34;\\n\u0026#34;\n         \u0026#34; Author: \u0026#34; (user-full-name)\u0026#34;\\n\u0026#34;\n         \u0026#34; Email: \u0026#34; user-mail-address \u0026#34;\\n\u0026#34;\n         \u0026#34; Created: \u0026#34; (format-time-string \u0026#34;%Y-%m-%d %T (%Z)\u0026#34; (current-time)) \u0026#34;\\n\u0026#34;\n         \u0026#34; Last Update: \\n\u0026#34;\n         \u0026#34;           By: \\n\u0026#34;\n         \u0026#34; Description: \\n\u0026#34;\n         \u0026#34; **************************************************************************/\\n\u0026#34;\n         \u0026#34;#include\u0026lt;stdio.h\u0026gt;\\n\u0026#34;\n         \u0026#34;#include\u0026lt;string.h\u0026gt;\\n\u0026#34;)\n        ((sh-mode . \u0026#34;Shell script\u0026#34;) nil\n         \u0026#34;#!/bin/bash\\n\u0026#34;\n         \u0026#34;# **************************************************************************\\n\u0026#34;\n         \u0026#34;# Copyright © \u0026#34; (substring (current-time-string) -4) \u0026#34; \u0026#34; (user-full-name) \u0026#34;\\n\u0026#34;\n         \u0026#34;# File Name: \u0026#34; (file-name-nondirectory buffer-file-name) \u0026#34;\\n\u0026#34;\n         \u0026#34;# Author: \u0026#34; (user-full-name)\u0026#34;\\n\u0026#34;\n         \u0026#34;# Email: \u0026#34; user-mail-address \u0026#34;\\n\u0026#34;\n         \u0026#34;# Created: \u0026#34; (format-time-string \u0026#34;%Y-%m-%d %T (%Z)\u0026#34; (current-time)) \u0026#34;\\n\u0026#34;\n         \u0026#34;# Last Update: \\n\u0026#34;\n         \u0026#34;#          By: \\n\u0026#34;\n         \u0026#34;# Description: \\n\u0026#34;\n         \u0026#34;# **************************************************************************/\\n\u0026#34;)))\n\n提取文件头公共信息\n\n   之前的模板有很多重复的内容，写一个函数把公共的信息提取出来\n\n\n\n\n\n 基础信息\n\n(defun maple//insert-string()\n  (concat\n   (make-string 80 ?*)\n   \u0026#34;\\n\u0026#34;\n   \u0026#34;Copyright © \u0026#34; (substring (current-time-string) -4) \u0026#34; \u0026#34; (user-full-name) \u0026#34;\\n\u0026#34;\n   \u0026#34;File Name: \u0026#34; (file-name-nondirectory buffer-file-name) \u0026#34;\\n\u0026#34;\n   \u0026#34;Author: \u0026#34; (user-full-name)\u0026#34;\\n\u0026#34;\n   \u0026#34;Email: \u0026#34; user-mail-address \u0026#34;\\n\u0026#34;\n   \u0026#34;Created: \u0026#34; (format-time-string \u0026#34;%Y-%m-%d %T (%Z)\u0026#34; (current-time)) \u0026#34;\\n\u0026#34;\n   \u0026#34;Last Update: \\n\u0026#34;\n   \u0026#34;         By: \\n\u0026#34;\n   \u0026#34;Description: \\n\u0026#34;\n   (make-string 80 ?*)))\n\n\n\n 插入注释信息\n     \u0026lt;2018-03-16 五\u0026gt;更新:\n\n(defun maple/insert-string(\u0026amp;optional prefix)\n  (replace-regexp-in-string\n   \u0026#34;^\u0026#34; (or prefix comment-start)\n   (maple//insert-string)))\n\n\n     原代码:\n\n(defun maple/insert-string(\u0026amp;optional prefix)\n  (or prefix (setq prefix comment-start))\n  (mapconcat\n   (lambda (x) (concat prefix x))\n   (split-string (maple//insert-string) \u0026#34;\\n\u0026#34;) \u0026#34;\\n\u0026#34;))\n\n\n\n 更改模板\n\n(setq auto-insert-alist\n      \u0026#39;(((ruby-mode . \u0026#34;Ruby program\u0026#34;) nil\n         \u0026#34;#!/usr/bin/env ruby\\n\u0026#34;\n         \u0026#34;# -*- encoding: utf-8 -*-\\n\u0026#34;\n         (maple/insert-string) \u0026#34;\\n\u0026#34;)\n        ((python-mode . \u0026#34;Python program\u0026#34;) nil\n         \u0026#34;#!/usr/bin/env python\\n\u0026#34;\n         \u0026#34;# -*- coding: utf-8 -*-\\n\u0026#34;\n         (maple/insert-string) \u0026#34;\\n\u0026#34;)\n        ((c-mode . \u0026#34;C program\u0026#34;) nil\n         \u0026#34;/*\u0026#34;\n         (string-trim-left (maple/insert-string \u0026#34; \u0026#34;)) \u0026#34;*/\\n\u0026#34;\n         \u0026#34;#include\u0026lt;stdio.h\u0026gt;\\n\u0026#34;\n         \u0026#34;#include\u0026lt;string.h\u0026gt;\\n\u0026#34;)\n        ((sh-mode . \u0026#34;Shell script\u0026#34;) nil\n         \u0026#34;#!/bin/bash\\n\u0026#34;\n         (maple/insert-string) \u0026#34;\\n\u0026#34;)\n        ((go-mode . \u0026#34;Go program\u0026#34;) nil\n         \u0026#34;/*\u0026#34;\n         (string-trim-left (maple/insert-string \u0026#34; \u0026#34;)) \u0026#34;*/\\n\u0026#34;)))\n\n\n\n   相关的配置可以在我的github上找到","index":172,"permalink":"https://honmaple.me/articles/2018/01/emacs自动添加文件头.html","summary":"\n\u003cp\u003e\n想要在emacs中添加文件头有好几种方法:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 直接手打\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 使用模板yasnippet\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 使用header2\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 使用内置的package \u003cb\u003eauto-insert\u003c/b\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nheader2可能是最方便的一种自动添加文件头的方式，但我之前使用过，想要自定义自己想要的内容很难，而且白白浪费header2的功能\n\u003c/p\u003e\n\n\u003cp\u003e\n今天主要说一说emacs内置里\u003cb\u003eauto-insert\u003c/b\u003e,使用它在创建文件时自动添加文件头信息\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003e基础使用\u003c/h2\u003e\n\u003cp\u003e\n   直接\u003ccode\u003e(auto-insert-mode)\u003c/code\u003e\n   并且设置\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(setq auto-insert-query nil) ;; 不提醒\u003c/pre\u003e\n\n\u003ch2 id=\"heading-2\"\u003e自定义文件头\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(setq auto-insert-alist\n      \u003cspan style=\"color:#f92672\"\u003e\u0026#39;\u003c/span\u003e(((python-mode \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"emacs自动添加文件头"},{"content":"Table of Contents\n自动更新Last Updated\n自动更新Filename\n自动更新Email\n\n\n\n前面已经说过，可以使用auto-insert自动添加文件头，今天来说一说自动更新文件头，比如说每次保存时自动更新last updated字段\n\n\n自动更新Last Updated\n\n   如果使用的是header2,直接设置相关的变量就可，假如使用的是auto-insert，同样也可以使用emacs内置的time-stamp对Last Updated进行自动更新\n\n\n\n   time-stamp默认使用Time-stamp:,如果要对Last Updated进行自动更新，只需要简单的设置\n\n(setq time-stamp-active t)\n(setq time-stamp-line-limit 11)\n(setq time-stamp-start \u0026#34;[lL]ast[ -][uU]pdate[ \\t]*:?\u0026#34;)\n(setq time-stamp-end \u0026#34;\\n\u0026#34;)\n(setq time-stamp-format \u0026#34; %#A %Y-%02m-%02d %02H:%02M:%02S (%Z)\u0026#34;)\n\n\n   然后添加\n\n(add-hook \u0026#39;before-save-hook \u0026#39;time-stamp)\n\n\n   这样就能在每次保存时自动更新相应的字段了\n\n\n自动更新Filename\n\n   之前遇到过，使用auto-insert在每次创建新文件时自动添加了文件头，但后面文件名被修改了，文件头里的文件名却不会自动更改，基于这个原因需要自己实现一个函数(我没有找到可以使用的已经存在的package)\n\n\n\n   先理一理逻辑: 只需要查找当前文件前几行信息，如果找到File Name:字段，获取字段信息，与当前文件名进行对比，如果不一致则替换为当前文件名,直接给出代码吧\n\n\n\n\n\n 查找当前文件前几行\n\n(save-excursion\n    (goto-char (point-min)) ;;跳转到开头\n    (let ((lines 0))\n    (while (\u0026lt; lines line-limit)\n        ;; 查找\n        (setq lines (1+ lines))\n        (forward-line 1))))\n\n\n\n 获取当前文件名\n\n(file-name-nondirectory (buffer-file-name))\n\n\n\n 查找File Name\n\n(looking-at \u0026#34;.*\\\\(File Name:\\\\)\\\\(.*\\\\)\u0026#34;)\n\n\n\n 对文件名进行比对与替换\n\n(let ((beg (match-beginning 2))\n      (end (match-end 2)))\n  (when (not (string= 文件名 (string-trim-left (match-string 2))))\n    (goto-char beg)\n    (delete-region beg end)\n    (insert \u0026#34; \u0026#34; name)))\n\n\n     即可得到相关的完整函数(完整函数后面再讲)\n\n\n\n自动更新Email\n\n   工作和平时使用的邮箱不一样，我虽然设置了at_home变量区分工作与平时的邮箱,但不是每次我都记得要更新这个变量，所以有了这个需要，自动将文件头里的email信息更改为平时所用的邮箱，大致逻辑与自动更新Filename相同，所以我写了一个macro来自动生成相关的代码\n\n\n\n   直接给出代码\n\n(defun maple/header-update-action(name)\n  \u0026#34;A.\u0026#34;\n  (let ((beg (match-beginning 2))\n        (end (match-end 2)))\n    (when (not (string= name (string-trim-left (match-string 2))))\n      (goto-char beg)\n      (delete-region beg end)\n      (insert \u0026#34; \u0026#34; name))))\n(defun maple/header-update(regex default line-limit)\n  \u0026#34;B.\u0026#34;\n  (interactive)\n  (save-excursion\n    (goto-char (point-min))\n    (let ((lines 0))\n      (while (\u0026lt; lines line-limit)\n        (when (and (looking-at regex))\n          (maple/header-update-action default))\n        (setq lines (1+ lines))\n        (forward-line 1)))))\n(defmacro maple/header-update-engine (name regex default \u0026amp;optional line-limit)\n  \u0026#34;C.\u0026#34;\n  `(defun ,(intern (format \u0026#34;maple/header-update-%s\u0026#34; name)) ()\n     ,(format \u0026#34;Update %s with regex.\u0026#34; name)\n     (interactive)\n     (maple/header-update ,regex ,default ,(or line-limit 7))))\n\n\n   这样，我就可以调用macro来生成代码\n\n\n\n\n 自动更新Filename\n\n(maple/header-update-engine \u0026#34;filename\u0026#34;\n                            \u0026#34;.*\\\\(File Name:\\\\)\\\\(.*\\\\)\u0026#34;\n                            (file-name-nondirectory (buffer-file-name)) 7)\n\n\n     生成一个maple/header-update-filename的函数,只要调用它即可更新文件名信息\n\n\n\n\n 自动更新email\n     同样的\n\n(maple/header-update-engine \u0026#34;email\u0026#34;\n                            \u0026#34;.*\\\\(Email:\\\\)\\\\(.*\\\\)\u0026#34;\n                            \u0026#34;youemail@gmail.com\u0026#34; 7)\n\n     生成一个可供调用的maple/header-update-email\n\n\n\n\n   如果想要添加其它功能，只要使用maple/header-update-engine即可\n\n\n\n相关的配置可以在我的github上找到","index":173,"permalink":"https://honmaple.me/articles/2018/01/emacs自动更新文件头.html","summary":"\n\u003cp\u003e\n前面已经说过，可以使用\u003cb\u003eauto-insert\u003c/b\u003e自动添加文件头，今天来说一说自动更新文件头，比如说每次保存时自动更新\u003cb\u003elast updated\u003c/b\u003e字段\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1\"\u003e自动更新Last Updated\u003c/h2\u003e\n\u003cp\u003e\n   如果使用的是header2,直接设置相关的变量就可，假如使用的是\u003cb\u003eauto-insert\u003c/b\u003e，同样也可以使用emacs内置的\u003cb\u003etime-stamp\u003c/b\u003e对Last Updated进行自动更新\n\u003c/p\u003e\n\n\u003cp\u003e\n   time-stamp默认使用\u003ccode\u003eTime-stamp:\u003c/code\u003e,如果要对\u003ccode\u003eLast Updated\u003c/code\u003e进行自动更新，只需要简单的设置\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(setq time-stamp-active \u003cspan style=\"color:#66d9ef\"\u003et...\u003c/span\u003e\u003c/pre\u003e","title":"emacs自动更新文件头"},{"content":"Table of Contents\nLinux\nEvil\n\n粘贴替换的时候会复制替换的文本\n自动搜索已选中的字符\nevil-mc不忽略大小写\n\nFont\n\n设置中英文字体\n\nIvy\n\n指定目录或文件进行搜索\n查找当前目录以及子目录的某个文件\n当选中单词时，swiper使用已选单词进行搜索\n\nFile\n\n获取文件或目录的basename\n\nElisp\n\ngolang自动增加注释\n增加到hook但仅调用一次\n迭代并获取列表索引\n深拷贝function\n获取文件行数\n\n\n\nLinux\n\n  将emacs gui进程放置到后台\n\nEMACS=/usr/bin/emacs\nGUI=0\nARGS=\u0026#34;$@\u0026#34;\nARRAY=(\u0026#34;-nw\u0026#34; \u0026#34;--no-window-system\u0026#34; \u0026#34;--batch\u0026#34; \u0026#34;--help\u0026#34;)\n\nfor arg in $ARGS; do\n    for keyword in \u0026#34;${ARRAY[@]}\u0026#34;;do\n        if [ $keyword = $arg ];then\n            GUI=1\n            break\n        fi\n    done\n    if [ $GUI -eq 1 ]; then\n        break\n    fi\ndone\n\nif [ $GUI -eq 1 ]; then\n    $EMACS $ARGS\nelse\n    $EMACS $ARGS \u0026amp;\u0026gt; /dev/null \u0026amp;\n    # nohup $EMACS $ARGS \u0026amp;\u0026gt; /dev/null \u0026amp; disown\nfi\n\nEvil\n粘贴替换的时候会复制替换的文本\n(defun evil-paste-after-from-0 ()\n  (interactive)\n  (let ((evil-this-register ?0))\n    (call-interactively \u0026#39;evil-paste-after)))\n\n(define-key evil-visual-state-map \u0026#34;p\u0026#34; \u0026#39;evil-paste-after-from-0)\n自动搜索已选中的字符\n\n   经常使用 evil 中的 / 进行搜索, 但有时候想要搜索已有的字符, 在 evil-visual-state 下选中某个字符,按 / 时自动把选中的字符填入待搜索项中\n\n(use-package isearch\n  :ensure nil\n  :init\n  (defun maple/evil-search-paste()\n    (when (region-active-p)\n      (isearch-yank-string\n       (save-excursion\n         (buffer-substring-no-properties\n          (region-beginning) (1+ (region-end)))))\n      (deactivate-mark)))\n  :hook (isearch-mode . maple/evil-search-paste)\n  :bind (:map isearch-mode-map\n              ([remap isearch-delete-char] . isearch-del-char)))\nevil-mc不忽略大小写\n\n   evil-mc 默认会通过evil-ex-search进行搜索，可以通过设置(setq evil-ex-search-case \u0026#39;sensitive)来不忽略大小写, 但我只想在使用evil-mc时不忽略，其他时间忽略\n\n;; ignore case in evil-mc\n(add-hook \u0026#39;evil-mc-before-cursors-created (lambda() (setq evil-ex-search-case \u0026#39;sensitive)))\n(add-hook \u0026#39;evil-mc-after-cursors-deleted (lambda() (setq evil-ex-search-case \u0026#39;smart)))\n\nFont\n设置中英文字体\n;; 中英文表格对齐\n(defvar emacs-english-font \u0026#34;DejaVu Sans Mono\u0026#34;\n  \u0026#34;The font name of English.\u0026#34;)\n(defvar emacs-cjk-font \u0026#34;WenQuanYi Micro Hei Mono\u0026#34;\n  \u0026#34;The font name for CJK.\u0026#34;)\n(defvar emacs-font-size-pair \u0026#39;(15 . 18)\n  \u0026#34;Default font size pair for (english . chinese)\u0026#34;)\n\n(defvar emacs-font-size-pair-list\n  \u0026#39;(( 5 .  6) (10 . 12)\n    (13 . 16) (15 . 18) (17 . 20)\n    (19 . 22) (20 . 24) (21 . 26)\n    (24 . 28) (26 . 32) (28 . 34)\n    (30 . 36) (34 . 40) (36 . 44))\n  \u0026#34;This list is used to store matching (englis . chinese) font-size.\u0026#34;)\n(defun font-exist-p (fontname)\n  \u0026#34;Test if this font is exist or not.\u0026#34;\n  (if (or (not fontname) (string= fontname \u0026#34;\u0026#34;))\n      nil\n    (if (not (x-list-fonts fontname)) nil t)))\n\n(defun maple/set-font (english chinese size-pair)\n  \u0026#34;Setup emacs English and Chinese font on x window-system.\u0026#34;\n  (if (font-exist-p english)\n      (set-frame-font (format \u0026#34;%s:pixelsize=%d\u0026#34; english (car size-pair)) t))\n\n  (if (font-exist-p chinese)\n      (dolist (charset \u0026#39;(kana han symbol cjk-misc bopomofo))\n        (set-fontset-font (frame-parameter nil \u0026#39;font) charset\n                          (font-spec :family chinese :size (cdr size-pair))))))\n;; (add-hook \u0026#39;ctbl:table-mode-hook\n;;           (maple/set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))\nIvy\n指定目录或文件进行搜索\n(defun maple/counsel-ag-file()\n  (interactive)\n  (counsel-ag nil (read-file-name \u0026#34;Search in file(s): \u0026#34;)))\n\n查找当前目录以及子目录的某个文件\n(defun maple/counsel-find-file()\n  (interactive)\n  (ivy-read \u0026#34;Find file: \u0026#34;\n            (mapcar \u0026#39;file-relative-name\n                    (directory-files-recursively default-directory \u0026#34;\u0026#34;))\n            :matcher #\u0026#39;counsel--find-file-matcher\n            :action #\u0026#39;counsel-find-file-action\n            :preselect (counsel--preselect-file)\n            :require-match \u0026#39;confirm-after-completion\n            :history \u0026#39;file-name-history\n            :keymap counsel-find-file-map\n            :caller \u0026#39;counsel-find-file))\n\n当选中单词时，swiper使用已选单词进行搜索\n(defun maple/ivy-search-at-point (func)\n  (let* ((region (region-active-p))\n         (string (if (not region) \u0026#34;\u0026#34;\n                   (buffer-substring-no-properties\n                    (region-beginning) (region-end))))\n         (ivy-initial-inputs-alist\n          (list (cons func string))))\n    (when region (deactivate-mark))\n    (funcall func)))\n\n(defun maple/swiper()\n  (interactive)\n  (maple/ivy-search-at-point \u0026#39;swiper))\nFile\n获取文件或目录的basename\n(defun maple/basename (fname)\n  (if (or (file-directory-p fname)\n          (string-match \u0026#34;/$\u0026#34; fname))\n      (let ((dirname (directory-file-name fname)))\n        (file-name-nondirectory dirname))\n    (file-name-nondirectory fname)))\nElisp\ngolang自动增加注释\n\n   因为flycheck使用了golint, flycheck总是显示代码没有注释的警告\n\nexported method Raw should have comment or be unexported (go-golint)\n\n   也没找到什么方法来禁止它, 作为强迫症受不了，总不能一个一个去注释, 所以写了一个函数来自动注释整个文件的所有未注释函数:\n\n\n(defun maple/go-auto-comment()\n  (interactive)\n  (unless (featurep \u0026#39;imenu)\n    (require \u0026#39;imenu nil t))\n  (let* ((imenu-auto-rescan t)\n         (imenu-auto-rescan-maxout (if current-prefix-arg\n                                       (buffer-size)\n                                     imenu-auto-rescan-maxout))\n         (items (imenu--make-index-alist t))\n         (items (delete (assoc \u0026#34;*Rescan*\u0026#34; items) items)))\n    (cl-mapcan\n     (lambda(item)\n       (cl-mapcan\n        (if (string= (car item) \u0026#34;func\u0026#34;)\n            \u0026#39;maple/go-func-comment\n          \u0026#39;maple/go-type-comment)\n        (cdr item)))\n     items)))\n\n(defun maple/go-add-comment(func point)\n  (save-excursion\n    (goto-char point)\n    (forward-line -1)\n    (when (not (looking-at (concat \u0026#34;// \u0026#34; func)))\n      (end-of-line) (newline-and-indent)\n      (insert (concat \u0026#34;// \u0026#34; func \u0026#34; ..\u0026#34;)))))\n\n(defun maple/go-func-comment(f)\n  (let ((func (car f)))\n    (if (and (string-prefix-p \u0026#34;(\u0026#34; func)\n             (string-match \u0026#34;[)] \\\\(.*\\\\)[(]\\\\(.*\\\\)[)]\\\\(.*\\\\)$\u0026#34; func))\n        (maple/go-add-comment (match-string 1 func) (cdr f))\n      (if (string-match \u0026#34;\\\\(.*\\\\)[(]\\\\(.*\\\\)[)]\\\\(.*\\\\)$\u0026#34; func)\n          (maple/go-add-comment (match-string 1 func) (cdr f))\n        (maple/go-add-comment (car f) (cdr f))))))\n\n(defun maple/go-type-comment(f)\n  (maple/go-add-comment (car f) (cdr f)))\n\n\n   相关配置将持续更新: init-go.el\n\n\n增加到hook但仅调用一次\n(defmacro maple/add-hook-once (hook f \u0026amp;optional append local)\n  \u0026#34;Like `add-hook`, remove after call with HOOK F \u0026amp;OPTIONAL APPEND LOCAL.\u0026#34;\n  (let ((func (intern (format \u0026#34;maple/run-once-%s\u0026#34;\n                              (symbol-name f)))))\n    `(progn\n       (defun ,func ()\n         (remove-hook \u0026#39;,hook \u0026#39;,func ,local)\n         (funcall \u0026#39;,f))\n       (add-hook \u0026#39;,hook \u0026#39;,func ,append ,local))))\n迭代并获取列表索引\n(defmacro maple/dolist (spec \u0026amp;rest body)\n  \u0026#34;Like dolist but get INDEX, SPEC \u0026amp;REST BODY.\u0026#34;\n  (declare (indent 1) (debug ((symbolp form \u0026amp;optional form) body)))\n  `(let ((num 0))\n     (dolist ,(cdr spec)\n       (let ((,(car spec) num))\n         ,@body\n         (setq num (+ num 1))))))\n\n   这样就可以使用\n\n(maple/dolist (index item \u0026#39;(\u0026#34;aaa\u0026#34; \u0026#34;bbb\u0026#34;))\n              (print index))\n深拷贝function\n\n   www.gnu.org/software/emacs/manual/html_node/elisp/Function-Cells.html\n\n(fset \u0026#39;maple/put-text-property (symbol-function \u0026#39;put-text-property))\n\n获取文件行数\n\n\n\n emacs.stackexchange.com/questions/26721/display-max-line-in-bottom-line-nox-aka-mode-line/26724#26724\n\n\n\n emacs.stackexchange.com/questions/3821/a-faster-method-to-obtain-line-number-at-pos-in-large-buffers","index":174,"permalink":"https://honmaple.me/articles/2017/04/emacs笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eLinux\u003c/h1\u003e\n\u003cp\u003e\n  将\u003cb\u003eemacs gui\u003c/b\u003e进程放置到后台\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eEMACS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr/bin/emacs\nGUI\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\nARGS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$@\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\nARRAY\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-nw\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--no-window-system\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--batch\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--help\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e arg...\u003c/pre\u003e","title":"emacs笔记"},{"content":"Table of Contents\n基础设置\n使用shackle管理窗口\n窗口黄金分割zoom\nwindow-numbering显示当前窗口号\n\n\n\n\ninit-window.el\n\n\n\n基础设置\n;; 设置默认为左右分屏\n(setq split-width-threshold 1)\n\n(evil-leader/set-key\n  \u0026#34;ws\u0026#34;  \u0026#39;split-window-below  ;; 上下分屏\n  \u0026#34;wv\u0026#34;  \u0026#39;split-window-right) ;; 左右分屏\n\n使用shackle管理窗口\n\n  当设置了 (setq split-width-threshold 1) 后所有的窗口都会变成左右分屏，所以需要 shackle 或 popwin package对窗口进行管理, 对一些特殊的窗口或 buffer 比如 *Help* 和 flycheck error list 需要设置为显示在下方，并且默认选中\n\n\n(setq shackle-rules\n      \u0026#39;((\u0026#34;*Help*\u0026#34; :select t :align \u0026#39;below :autoclose t)\n        (flycheck-error-list-mode :select t :align \u0026#39;below :autoclose t)))\n\n\n  设置默认的参数\n\n(setq shackle-default-size 0.3\n      shackle-default-alignment \u0026#39;below\n      shackle-default-rule nil)\n\n窗口黄金分割zoom\n\n  窗口黄金分割是一个非常有用的效果，当选中某个buffer时，这个buffer的window会自动按比例放大，这样就不用手动对窗口进行调整, 之前一直使用 golden-ratio 这个package, 但看github上最近一次提交已经是两年前，加上使用需要定义很多的 golden-ratio-extra-commands, 所以切换到了 zoom\n\n\n\n  zoom 这个 package也有一些问题，比如我定义了\n\n(setq zoom-size \u0026#39;(0.618 . 0.618)\n      zoom-ignored-major-modes \u0026#39;(term-mode flycheck-error-list-mode))\n\n\n  但使用 flycheck-list-errors 时还是会自动缩放窗口大小，后来翻看源码时发现新建 window 是都会调用 balance-windows ,所以我稍微修改了一下\n\n(defun maple/balance-windows(func \u0026amp;optional window-or-frame)\n  (unless (zoom--window-ignored-p)\n    (funcall func window-or-frame)))\n\n(advice-add \u0026#39;balance-windows :around \u0026#39;maple/balance-windows)\n\n  这样在调用 flycheck-list-errors 就不会再自动缩放窗口大小了\n\n\n\n  另外有一些命令需要临时关闭 zoom-mode ,所以有添加了一个 marco 临时关闭 zoom-mode\n\n(defmacro with-zoom-disable(body)\n  (declare (indent defun))\n  (let ((zoom-mode-p (when (featurep \u0026#39;zoom) zoom-mode))\n        res)\n    (when zoom-mode-p (zoom-mode -1))\n    (setq res `,@body)\n    (when zoom-mode-p (zoom-mode zoom-mode-p))\n    res))\n\n  比如:\n\n(with-zoom-disable\n  (maple-imenu))\n\nwindow-numbering显示当前窗口号\n\n  为了更方便的在窗口间进行跳转，避免重复使用 evil-window-down, evil-window-right等命令\n\n(use-package window-numbering\n  :hook (maple-theme . window-numbering-mode))\n\n  maple-theme-hook: 加载 theme 后执行hook\n\n\n\n  然后设置(这里只设置到5,因为我大概不会开10个窗口的)\n\n(evil-leader/set-key\n  \u0026#34;w0\u0026#34;  \u0026#39;select-window-0\n  \u0026#34;w1\u0026#34;  \u0026#39;select-window-1\n  \u0026#34;w2\u0026#34;  \u0026#39;select-window-2\n  \u0026#34;w3\u0026#34;  \u0026#39;select-window-3\n  \u0026#34;w4\u0026#34;  \u0026#39;select-window-4\n  \u0026#34;w5\u0026#34;  \u0026#39;select-window-5)\n\n  这样就可以使用leader + w + {window number}或者 alt + {window number}跳转\n\n\n\n  另外window-number的显示需要mode-line的支持，比如在maple-modeline里可以这样定义\n\n(maple-modeline-define window-number\n  :if (bound-and-true-p window-numbering-mode)\n  :format\n  (let ((color (face-attribute \u0026#39;cursor :background)))\n    (maple-modeline--add-text-property\n     (maple-modeline--unicode-number\n      (int-to-string (window-numbering-get-number)))\n     \u0026#39;face `(:foreground ,color :distant-foreground \u0026#34;white\u0026#34;))))","index":175,"permalink":"https://honmaple.me/articles/2019/01/emacs窗口管理.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n\u003ca href=\"https://github.com/honmaple/dotfiles/tree/master/emacs.d/lisp/init-window.el\"\u003einit-window.el\u003c/a\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003e基础设置\u003c/h1\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#75715e\"\u003e;; 设置默认为左右分屏\u003c/span\u003e\n(setq split-width-threshold \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\u003c/pre\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(evil-leader/set-key\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ews\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;split-window-below\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e;; 上下分屏\u003c/span\u003e\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ewv\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;split-window-right\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e;; 左右分屏\u003c/span\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"heading-2\"\u003e使用shackle管理窗口\u003c/h1\u003e\n\u003cp\u003e\n  当设置了 \u003ccode\u003e(setq split-width-threshold...\u003c/code\u003e\u003c/p\u003e","title":"emacs窗口管理"},{"content":"之前使用emacs时遇到这么一个问题\n\n\n\n当前行存在代码折叠时,如果想要注释,必须先选中当前行,否则只能注释代码折叠块的第一行\n\n\n\n\n就像这样\n\n\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n基础注释函数来源于 stackoverflow\n\n(defun comment-or-uncomment-region-or-line ()\n  \u0026#34;Comments or uncomments the region or the current line if there\u0026#39;s no active region.\u0026#34;\n  (interactive)\n  (let (beg end)\n    (if (region-active-p)\n        (setq beg (region-beginning) end (region-end))\n      (setq beg (line-beginning-position) end (line-end-position)))\n    (comment-or-uncomment-region beg end)))\n\n\n在此函数的位置上进行修改,刚开始使用\n\n(when (hs-already-hidden-p)\n    (evil-visual-line))\n\n\n但是一直没得到想要的效果,后来修改了一下,使用\n\n(when (hs-already-hidden-p)\n  (progn\n    (end-of-visual-line)\n    (evil-visual-state)\n    (beginning-of-visual-line)))\n\n\n意思就是如果当前位置存在代码折叠,先选中当前行,然后注释整个选中区域\n\n\n\n因为光标被移动到首位,我对这个不太在意,如果有在意的话,可以使用 save-excursion\n\n(save-excursion\n(when (hs-already-hidden-p)\n  (progn\n    (end-of-visual-line)\n    (evil-visual-state)\n    (beginning-of-visual-line)))\n    ......)\n\n\n完整代码\n\n(defun comment-or-uncomment-region-or-line ()\n  \u0026#34;Comments or uncomments the region or the current line if there\u0026#39;s no active region.\u0026#34;\n  (interactive)\n  (save-excursion\n    (when (hs-already-hidden-p)\n      (progn\n        (end-of-visual-line)\n        (evil-visual-state)\n        (beginning-of-visual-line)))\n    (let (beg end)\n      (if (region-active-p)\n          (setq beg (region-beginning) end (region-end))\n        (setq beg (line-beginning-position) end (line-end-position)))\n      (comment-or-uncomment-region beg end))))\n\n\nok,就这样","index":176,"permalink":"https://honmaple.me/articles/2017/04/emacs实现智能注释.html","summary":"\n\u003cp\u003e\n之前使用emacs时遇到这么一个问题\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n当前行存在代码折叠时,如果想要注释,必须先选中当前行,否则只能注释代码折叠块的第一行\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n就像这样\n\u003c/p\u003e\n\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/2017/04/149274346737550.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2017/04/149274346737550.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n\n\u003ca href=\"https://static.honmaple.com/images/2017/04/149274352705945.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2017/04/149274352705945.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n基础注释函数来源于 \u003cb\u003estackoverflow\u003c/b\u003e\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(defun comment-or-uncomment-region-or-line ()\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eComments or uncomments the region or the current line if there\u0026#39;s no active region.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n  (interactive)\n  (let (beg...\u003c/pre\u003e","title":"emacs实现智能注释"},{"content":"Table of Contents\n渐变颜色\n生成XPM图片\n效果显示\n\n\n\n\n无意中看到 telephone-line 有一种渐变颜色的效果，看起来很棒，但telephone-line的源码有些难懂，所以自己动手实现类似的效果\n\n\n\n渐变颜色\n\n   渐变颜色的实现可使用color-gradient\n\n(color-gradient\n \u0026#39;(0 0 0)\n (color-name-to-rgb \u0026#34;red\u0026#34;) 10)\n\n\n   实现原理是对红(R)、绿(G)、蓝(B)三个颜色通道分别取 n + 2 个过渡值，n 为中间颜色过渡状态，所以对于red、#000、#a0a0a0等颜色需要转化为RGB色彩模式\n\n\n生成XPM图片\n\n   XPM图片格式参考 https://en.wikipedia.org/wiki/X_PixMap(XPM3)\n\n\n\n   大概是这样的\n\n/* XPM */\nstatic char * XFACE[] = {\n/* \u0026lt;Values\u0026gt; */\n/* \u0026lt;width/columns\u0026gt; \u0026lt;height/rows\u0026gt; \u0026lt;colors\u0026gt; \u0026lt;chars per pixel\u0026gt;*/\n\u0026#34;48 4 2 1\u0026#34;,\n/* \u0026lt;Colors\u0026gt; */\n\u0026#34;a c #ffffff\u0026#34;,\n\u0026#34;b c #000000\u0026#34;,\n/* \u0026lt;Pixels\u0026gt; */\n\u0026#34;abaabaababaaabaabababaabaabaababaabaaababaabaaab\u0026#34;,\n\u0026#34;abaabaababaaabaabababaabaabaababaabaaababaabaaab\u0026#34;,\n\u0026#34;abaabaababaaabaabababaabaabaababaabaaababaabaaab\u0026#34;,\n\u0026#34;abaabaababaaabaabababaabaabaababaabaaababaabaaab\u0026#34;\n};\n\n\n   渐变颜色XPM图片原理就是使用不同的字符代表不同状态的渐变颜色，当所使用的字符数越多，渐变效果越好，但同时XPM图片的宽度也就越大\n\n\n\n\n\n 生成不同字符\n\n;; 0～9\n(mapcar \u0026#39;number-to-string (number-sequence 0 9))\n;; a~z\n(mapcar \u0026#39;char-to-string (number-sequence ?a ?z))\n\n\n\n 不同字符对应不同颜色\n\n(let ((number -1))\n  (mapconcat\n   (lambda(x)\n     (setq number (+ number 1))\n     (format \u0026#34;\\\u0026#34;%s c %s\\\u0026#34;,\u0026#34; (nth number maple-xpm-chars) (apply \u0026#39;color-rgb-to-hex x)))\n   (color-gradient\n    (color-name-to-rgb color1)\n    (color-name-to-rgb color2) width) \u0026#34;\u0026#34;))\n\n\n效果显示\n\n   \n\n  \n\n\n\n\n   完整代码及更多XPM图片","index":177,"permalink":"https://honmaple.me/articles/2019/07/elisp生成渐变XPM图片.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n无意中看到 \u003ca href=\"https://github.com/dbordak/telephone-line\"\u003etelephone-line\u003c/a\u003e 有一种渐变颜色的效果，看起来很棒，但\u003cb\u003etelephone-line\u003c/b\u003e的源码有些难懂，所以自己动手实现类似的效果\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e渐变颜色\u003c/h2\u003e\n\u003cp\u003e\n   渐变颜色的实现可使用\u003ccode\u003ecolor-gradient\u003c/code\u003e\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(color-gradient\n \u003cspan style=\"color:#f92672\"\u003e\u0026#39;\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n (color-name-to-rgb \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ered\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\u003c/pre\u003e\n\n\u003cp\u003e\n   实现原理是对红(R)、绿(G)、蓝(B)三个颜色通道分别取 \u003cb\u003en...\u003c/b\u003e\u003c/p\u003e","title":"elisp生成渐变XPM图片"},{"content":"Table of Contents\nelasticsearch\n\n安装\n优化\n重启\n踩坑\n\nkibana\n\n安装\n优化\n踩坑\n\n\n\nelasticsearch\n安装\n优化\n\n\n\n 关闭swap\n\nswapoff -a\n# 注释 /etc/fstab swap\nsysctl -p\n\n\n unlimit调整\n\nsysctl -w vm.max_map_count=262144\necho \u0026#39;vm.max_map_count=262144\u0026#39; \u0026gt;\u0026gt; /etc/sysctl.conf\n\n\n 使用ssd\n\n\n重启\ncurl -X PUT \u0026#34;localhost:9200/_cluster/settings\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; -d\u0026#39;\n{\n  \u0026#34;persistent\u0026#34;: {\n    \u0026#34;cluster.routing.allocation.enable\u0026#34;: \u0026#34;none\u0026#34;\n  }\n}\n\u0026#39;\ncurl -X POST \u0026#34;localhost:9200/_flush/synced\u0026#34;\nsupervisorctl restart elasticsearch\ncurl -X GET \u0026#34;localhost:9200/_cat/health\u0026#34;\ncurl -X PUT \u0026#34;localhost:9200/_cluster/settings\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; -d\u0026#39;\n{\n  \u0026#34;persistent\u0026#34;: {\n    \u0026#34;cluster.routing.allocation.enable\u0026#34;: null\n  }\n}\n\u0026#39;\n踩坑\n\n\n\n 滚动重启\n     重启前\n\ncurl -XPUT http://192.168.67.14:9200/_cluster/settings -d \u0026#39;{\n    \u0026#34;transient\u0026#34; : {\n        \u0026#34;cluster.routing.allocation.enable\u0026#34; : \u0026#34;none\u0026#34;\n    }\n}\u0026#39;\n\n     重启后\n\ncurl -XPUT http://192.168.67.14:9200/_cluster/settings -d \u0026#39;{\n    \u0026#34;transient\u0026#34; : {\n        \u0026#34;cluster.routing.allocation.enable\u0026#34; : \u0026#34;all\u0026#34;\n    }\n}\u0026#39;\n\n\n 修改index.number_of_shards\n     需要设置模块, 已经存在的索引无法修改分片数量\n\ncurl -XPUT \u0026#34;http://elasticsearch-master.efk:9200/_template/local\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; -d\u0026#39;\n       {\n         \u0026#34;index_patterns\u0026#34;: [\u0026#34;local-*\u0026#34;],\n         \u0026#34;settings\u0026#34;: {\n           \u0026#34;index.number_of_replicas\u0026#34;: 0,\n           \u0026#34;index.number_of_shards\u0026#34;: 3\n         }\n       }\u0026#39;\n\n\n 磁盘损坏\n\ncurl -XPOST \u0026#39;http://192.168.60.32:9200/_cluster/reroute\u0026#39; -d \u0026#39;{\n        \u0026#34;commands\u0026#34; : [ {\n              \u0026#34;allocate\u0026#34; : {\n                  \u0026#34;index\u0026#34; : \u0026#34;.marvel-2018.10.10\u0026#34;,\n                  \u0026#34;shard\u0026#34; : 0,\n                  \u0026#34;node\u0026#34; : \u0026#34;1.7.5-192.168.67.14\u0026#34;,\n                  \u0026#34;allow_primary\u0026#34; : true\n              }\n            }\n        ]\n    }\u0026#39;\n\n\n\n unassigned shards\n\ncurl http://127.0.0.1:9200/_cat/shards?v 2\u0026gt;\u0026amp;1 | grep UNASSIGNED\ncurl http://127.0.0.1:9200/_nodes/process?pretty\ncurl -XPOST \u0026#39;http://192.168.60.32:9200/_cluster/reroute\u0026#39; -d \u0026#39;{\n        \u0026#34;commands\u0026#34; : [ {\n                \u0026#34;allocate\u0026#34; : {\n                    \u0026#34;index\u0026#34; : \u0026#34;logstash-xxx-up-2019.01.29\u0026#34;,\n                    \u0026#34;shard\u0026#34; : 9,\n                    \u0026#34;node\u0026#34; : \u0026#34;kzI0751OSJBcx_wmLQ\u0026#34;,\n                    \u0026#34;allow_primary\u0026#34; : true\n                }\n            }\n        ]\n    }\u0026#39;\n\n\n 修改@timestamp类型\n\ncurl -XPUT \u0026#34;http://127.0.0.1:9200/_template/uplog\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; -H \u0026#39;Host: elasticsearch.morgans\u0026#39; -d\u0026#39;\n{\n  \u0026#34;index_patterns\u0026#34;: [\u0026#34;uplog-*\u0026#34;],\n  \u0026#34;settings\u0026#34;: {\n    \u0026#34;index.number_of_replicas\u0026#34;: 0\n  },\n  \u0026#34;mappings\u0026#34;: {\n    \u0026#34;_default_\u0026#34;: {\n        \u0026#34;properties\u0026#34;: {\n            \u0026#34;@timestamp\u0026#34;: {\n                \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34;,\n                \u0026#34;doc_values\u0026#34;: true\n            }\n        }\n    }\n  }\n}\u0026#39;\n\n\nkibana\n安装\n优化\n踩坑\n\n\n\n 保存时kibana报错 Visualization Editor: blocked by: [FORBIDDEN/12/index read-only\n     参考 https://github.com/elastic/kibana/issues/13685\n\ncurl -XPUT -H \u0026#34;Content-Type: application/json\u0026#34; http://127.0.0.1:9200/.kibana/_settings -d \u0026#39;{\u0026#34;index.blocks.read_only_allow_delete\u0026#34;: null}\u0026#39;\n\n\n\n Timelion每次查询得到的数据不一样\n     参考 https://github.com/elastic/kibana/issues/23428 和 https://discuss.elastic.co/t/timelion-gives-different-result-when-it-auto-refreshes/155182\n     修改kibana.yml配置\n\nelasticsearch.shardTimeout = 30000","index":178,"permalink":"https://honmaple.me/articles/2018/09/elasticsearch笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eelasticsearch\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e安装\u003c/h2\u003e\n\u003ch2 id=\"heading-1.2\"\u003e优化\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 关闭swap\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eswapoff -a\n\u003cspan style=\"color:#75715e\"\u003e# 注释 /etc/fstab swap\u003c/span\u003e\nsysctl -p\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n unlimit调整\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003esysctl -w vm.max_map_count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e262144\u003c/span\u003e\necho \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;vm.max_map_count=262144\u0026#39;\u003c/span\u003e \u0026gt;\u0026gt; /etc/sysctl.conf\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 使用ssd\n\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"heading-1.3\"\u003e重启\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ecurl...\u003c/pre\u003e","title":"elasticsearch笔记"},{"content":"Table of Contents\nDocker-Compose\n\n重新创建\n更新镜像\n\nubuntu安装docker\ndocker删除硬盘残留的文件\ndocker构建时禁用缓存\ndocker配置国内源\ndocker权限\n常见问题FAQ\n\ncentos安装docker使用aliyun源\ndocker无法pull镜像\ndocker挂载磁盘后文件不可写\npip安装docker-compose时无法安装subprocess32\nerror storing credentials - err: exit status 1\nUnicodeEncodeError: \u0026#39;ascii\u0026#39; codec can\u0026#39;t encode character \u0026#39;u4eac\u0026#39; in position 14: ordinal not in range(128)\ndocker内部apt update时At least one invalid signature was encountered\ndocker info显示Backing Filesystem 为 \u0026lt;unknown\u0026gt;\nError response from daemon: readlink /var/lib/docker/overlay2/l: invalid argument\nDocker构建时替换为国内源\n\n\n\nDocker-Compose\n重新创建\ndocker-compose up --force-recreate --build -d api0\n更新镜像\ndocker-compose pull memos\ndocker-compose up -d --remove-orphans memos\n\nubuntu安装docker\n\n   基本安装方式在官方文档里有写，无奈使用官方镜像源速度太慢，改为使用国内镜像\n\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository \u0026#34;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\u0026#34;\n\napt-get install docker-ce docker-ce-cli containerd.io\n\ndocker删除硬盘残留的文件\n\n   使用 docker rmi ... 或者 docker image rm ... 并不能将镜像完全删除，还会一直占用硬盘空间\n\n\ndocker system prune\n\ndocker volume prune\n\n\n   该命令不会删除已存在镜像(不管是否正在运行)\n\n\n\n   (硬盘一下子多个好几个G, 心情不错)\n\n\ndocker构建时禁用缓存\n\n   dockerfile 中有多个 RUN 或者 ADD .. 命令时, 每个 RUN 都会创建一个 image, 下一个 image 会以上一个为基础（缓存）继续构建,\n\n\n\n   可以使用 docker images -a 看到很多 \u0026lt;none\u0026gt; 的 image\n\n\n\n   不过作为一名有洁癖的coder, 这种情况不能忍\n\n\ndocker build --no-cache -t hello .\n\ndocker配置国内源\n{\n  \u0026#34;registry-mirrors\u0026#34;: [\n    \u0026#34;https://mirror.ccs.tencentyun.com\u0026#34;,\n    \u0026#34;http://registry.docker-cn.com\u0026#34;,\n    \u0026#34;http://docker.mirrors.ustc.edu.cn\u0026#34;,\n    \u0026#34;http://hub-mirror.c.163.com\u0026#34;\n  ],\n  \u0026#34;debug\u0026#34;: true,\n  \u0026#34;experimental\u0026#34;: false,\n  \u0026#34;insecure-registries\u0026#34;: [\n    \u0026#34;registry.docker-cn.com\u0026#34;,\n    \u0026#34;docker.mirrors.ustc.edu.cn\u0026#34;,\n    \u0026#34;test-cdn-chengdu-office5:5000\u0026#34;,\n    \u0026#34;registry.k8s.cloud\u0026#34;\n  ]\n}\n\ndocker权限\nnginx:\n  cap_add:\n    - NET_ADMIN\n    - SYS_PTRACE\n常见问题FAQ\n\ncentos安装docker使用aliyun源\n\n    docs.docker.com/install/linux/docker-ce/centos/\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\ndocker无法pull镜像\n\n\n\n 现象\n      ping docker.io 不通\n      curl docker.io\n\n\ndocker pull myregistry.local:5000/testing/test-image\n\n\n      或者配置默认的docker仓库\n      www.jianshu.com/p/1a4025c5f186\n\n\n\n      ubuntu\n\nvi /etc/default/docker\n\nDOCKER_OPTS=\u0026#34;$DOCKER_OPTS --registry-mirror=https://xxxxx.mirror.aliyuncs.com\u0026#34;\n\n      然后重启docker\n\n\n\ndocker挂载磁盘后文件不可写\n\n    stackoverflow.com/questions/35760760/writable-folder-permissions-in-docker\n\nchmod a+rwx -R dir/\n\npip安装docker-compose时无法安装subprocess32\n\nERROR: Command errored out with exit status 1: /usr/bin/python2 -u -c \u0026#39;import sys, setuptools, tokenize; sys.argv[0] = \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;/tmp/pip-install-oX9c4h/subprocess32/setup.py\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;; __file__=\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;/tmp/pip-install-oX9c4h/subprocess32/setup.py\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;;f=getattr(tokenize, \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;open\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;, open)(__file__);code=f.read().replace(\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;\\r\\n\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;\\n\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;);f.close();exec(compile(code, __file__, \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;exec\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;))\u0026#39; install --record /tmp/pip-record-bccCWb/install-record.txt --single-version-externally-managed --compile --user --prefix= Check the logs for full command output.\n\n\n    一般情况下是由于docker-compose不支持python2导致的，需要在机器上安装python3\n    centos可直接使用yum安装docker-compose, python3作为依赖会自动安装\n\n\n\n    注: pip安装方式为\n\nyum -y install epel-release\nyum install python-pip\n# or yum install python2-pip\n\nerror storing credentials - err: exit status 1\nroot@ubuntu:~/kunpeng# docker login registry.k8s.cloud\nUsername: jsl\nPassword:\nError saving credentials: error storing credentials - err: exit status 1, out: `Cannot autolaunch D-Bus without X11 $DISPLAY`\n\nUnicodeEncodeError: \u0026#39;ascii\u0026#39; codec can\u0026#39;t encode character \u0026#39;u4eac\u0026#39; in position 14: ordinal not in range(128)\n\n    docker 内部使用python是编码问题, 需要设置 LANG 环境变量\n\nENV LANG \u0026#34;C.UTF-8\u0026#34;\n\ndocker内部apt update时At least one invalid signature was encountered\nW: GPG error: http://archive.ubuntu.com/ubuntu bionic InRelease: At least one invalid signature was encountered.\nE: The repository \u0026#39;http://archive.ubuntu.com/ubuntu bionic InRelease\u0026#39; is not signed.\nW: GPG error: http://archive.ubuntu.com/ubuntu bionic-updates InRelease: At least one invalid signature was encountered.\nE: The repository \u0026#39;http://archive.ubuntu.com/ubuntu bionic-updates InRelease\u0026#39; is not signed.\n\n\n    这是因为docker所需磁盘空间不足，mac下可通过ui调整docker磁盘大小，或者使用清理docker镜像\n\ndocker image prune\ndocker container prune\n\ndocker info显示Backing Filesystem 为 \u0026lt;unknown\u0026gt;\n\n\n    github.com/moby/moby/issues/40626\n\n\n\nClient:\n Debug Mode: false\n\nServer:\n Containers: 64\n  Running: 59\n  Paused: 0\n  Stopped: 5\n Images: 39\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: \u0026lt;unknown\u0026gt;\n  Supports d_type: true\n  ...\n\n\n    需要升级docker版本\n\nyum list docker-ce --showduplicates | sort -r\nyum install docker-ce-19.03.9-3.el7 docker-ce-cli-19.03.9-3.el7\n\nError response from daemon: readlink /var/lib/docker/overlay2/l: invalid argument\n[root@k8s-node-07 ~]# docker inspect registry.k8s.cloud/jsl-oms-client:dev4\n[]\nError response from daemon: readlink /var/lib/docker/overlay2/l: invalid argument\n\nDocker构建时替换为国内源\n\n\n\n alpine\n\nsed -i \u0026#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\u0026#39; /etc/apk/repositories\n\n\n debian\n\nsed -i \u0026#39;s/deb.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list","index":179,"permalink":"https://honmaple.me/articles/2018/02/docker笔记.html","summary":"\n\u003ch2 id=\"heading-1\"\u003eDocker-Compose\u003c/h2\u003e\n\u003ch3 id=\"heading-1.1\"\u003e重新创建\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edocker-compose up --force-recreate --build -d api0\u003c/pre\u003e\n\u003ch3 id=\"heading-1.2\"\u003e更新镜像\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edocker-compose pull memos\ndocker-compose up -d --remove-orphans memos\u003c/pre\u003e\n\n\u003ch2 id=\"heading-2\"\u003eubuntu安装docker\u003c/h2\u003e\n\u003cp\u003e\n   基本安装方式在官方文档里有写，无奈使用官方镜像源速度太慢，改为使用国内镜像\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ecurl -fsSL http://mirrors.aliyun.com/docker-ce/linux...\u003c/pre\u003e","title":"docker笔记"},{"content":"1.安装必要组建\n# yum inst\n\n刚搭建好，记录下来，用的是centos\n\n1.安装必要组建\n# yum install build-essential autoconf libtool openssl-devel gcc -y\n\n2.安装git\n# yum install git -y \n# git --version #安装完后查看版本\n\n3.下载shadowsocks-libev源码包并且编译安装\n$ git clone https://github.com/madeye/shadowsocks-libev.git\n$ cd shadowsocks-libev\n$ ./configure \n# make \u0026amp;\u0026amp; make install\n\n##.配置shadowsocks\n    # nohup /usr/local/bin/ss-server -s IP地址 -p 端口 -k 密码 -m 加密方式 \u0026amp;\n\n注：ip地址为当前服务器ip，端口随意，加密方式建议为aes-256-cfb\n\n5.加入开机启动\n# echo \u0026#34;nohup /usr/local/bin/ss-server -s IP地址 -p 端口 -k 密码 -m 加密方式 \u0026amp;\u0026#34; \u0026gt;\u0026gt; /etc/rc.local\n\n6.加入防火墙\n# vim /etc/sysconfig/iptables\n\n增加\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPT\n重启防火墙\n# service iptables restart\n\n7.客户端配置\n\n下载地址\n注：如果http://sourceforge.net/进不去可以http://sourceforge.jp\n客户端中两个端口，一个是服务端（自己设的端口)\n，另一个本地端口（默认1080），配置完成启用系统代理，并且选PAC模式\n\n\n\nok，就这样","index":180,"permalink":"https://honmaple.me/articles/2015/12/centos搭建shadowsocks服务端.html","summary":"\n\u003ch2\u003e1.安装必要组建\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# yum inst\n\u003c/pre\u003e\n\u003cp\u003e刚搭建好，记录下来，用的是centos\u003c/p\u003e\n\n\u003ch2\u003e1.安装必要组建\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# yum install build-essential autoconf libtool openssl-devel gcc -y\n\u003c/pre\u003e\n\u003ch2\u003e2.安装git\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e# yum install git -y \n# git --version #安装完后查看版本\n\u003c/pre\u003e\n\u003ch2\u003e3.下载shadowsocks-libev源码包并且编译安装\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ git clone https://github...\u003c/pre\u003e","title":"centos搭建shadowsocks服务端"},{"content":"Table of Contents\n安装Python3\n安装pip3\n\n\n安装Python3\n\n\n安装python3很简单\n\n\n\n\n\n 下载源码并且编译\n\n\n\n 安装epel\n\n\n\n\n这里采用第二种方法:\n\n\nyum install epel-release\n\n\n安装完成之后,yum list python3*,你就可以看见 python34\n\n\nyum install python34\n\n安装pip3\n\n  参考问题\n  如果在上述安装 python3时采用了第二种方法,pip默认未安装,而且无法通过yum install python34-pip来安装\n\n\n\n  正确的方法应该是:\n\nyum install python34-setuptools\neasy_install-3.4 pip # 这里可能有一些出入,总之是使用python3的easy_install\n\n\nok,就这样","index":181,"permalink":"https://honmaple.me/articles/2016/07/centos7安装python3及pip3.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e安装Python3\u003c/h1\u003e\n\n\u003cp\u003e\n安装python3很简单\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 下载源码并且编译\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 安装epel\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n这里采用第二种方法:\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eyum install epel-release\u003c/pre\u003e\n\n\u003cp\u003e\n安装完成之后,yum list python3*,你就可以看见 \u003cb\u003epython34\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eyum install python34\u003c/pre\u003e\n\n\u003ch1 id=\"heading-2\"\u003e安装pip3\u003c/h1\u003e\n\u003cp\u003e\n  \u003ca href=\"http://stackoverflow.com/questions/6587507/how-to-install-pip-with-python-3\"\u003e参考问题\u003c/a\u003e\n  如果在上述安装 \u003cb\u003epython3\u003c/b\u003e时采用了第二种方法,pip默认未安装,而且无法通过\u003ccode\u003eyum install python34-pip\u003c/code\u003e来安装\n\u003c/p\u003e\n\n\u003cp\u003e\n  正确的方法应该是:\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eyum install python34-setuptools\neasy...\u003c/pre\u003e","title":"centos7安装python3及pip3"},{"content":"celery是一个基于Python的分布式调度系统，文档在这 ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉\n\n\n\n为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样\n\n@app.task\ndef execute(func, *args, **kwargs):\n    return func(*args, **kwargs)\n\n\n很可惜，会出现这样的错误\n\nkombu.exceptions.EncodeError: Object of type \u0026#39;function\u0026#39; is not JSON serializable\n\n\n换一种序列化方式\n\n@app.task(serializer=\u0026#39;pickle\u0026#39;)\ndef execute(func, *args, **kwargs):\n    return func(*args, **kwargs)\n\n\n结果又出现一大串错误信息\n\nERROR/MainProcess] Pool callback raised exception: ContentDisallowed(\u0026#39;Refusing to deserialize untrusted content of type pickle (application/x-python-serialize)\u0026#39;,)\nTraceback (most recent call last):\n  File \u0026#34;/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py\u0026#34;, line 42, in __get__\n    return obj.__dict__[self.__name__]\nKeyError: \u0026#39;chord\u0026#39;\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \u0026#34;/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py\u0026#34;, line 42, in __get__\n    return obj.__dict__[self.__name__]\nKeyError: \u0026#39;_payload\u0026#39;\n\n\n换一种思路\n\nfunc = import_string(func)\n\n不知道这样是否可以，结果测试: No\n\n\n\n哎，流年不利.\n\n\n\n最后一直测试，一直测试，终于找到了一种办法,直接上代码\n\nfrom importlib import import_module, reload\n\napp.conf.CELERY_IMPORTS = [\u0026#39;task\u0026#39;, \u0026#39;task.all_task\u0026#39;]\n\ndef import_string(import_name):\n    import_name = str(import_name).replace(\u0026#39;:\u0026#39;, \u0026#39;.\u0026#39;)\n    modules = import_name.split(\u0026#39;.\u0026#39;)\n    mod = import_module(modules[0])\n    for comp in modules[1:]:\n        if not hasattr(mod, comp):\n            reload(mod)\n        mod = getattr(mod, comp)\n    return mod\n\n@app.task\ndef execute(func, *args, **kwargs):\n    func = import_string(func)\n    return func(*args, **kwargs)\n\n\n项目结构是这样的\n\n\n\n├── celery_app.py├── config.py├── task│   ├── all_task.py│   ├── init.py\n\n\n\n注意: 任务必须大于等于两层目录\n\n\n\n以后每次添加任务都可以先添加到all_task.py里，调用时不用再重启celery服务\n\n\n# task/all_task.py\n\ndef ee(c, d):\n    return c, d, \u0026#39;你好\u0026#39;\n\n# example\nfrom celery_app import execute\n\nexecute.delay(\u0026#39;task.all_task.ee\u0026#39;, 2, 444)\n\n\nok，另外发现celery也支持任务定时调用,就像这样\n\nexecute.apply_async(args=[\u0026#39;task.all_task.aa\u0026#39;], eta=datetime(2017, 7, 9, 8, 12, 0))\n\n\n简单实现一个任务重复调用的功能\n\n@app.task\ndef interval(func, seconds, args=(), task_id=None):\n    next_run_time = current_time() + timedelta(seconds=seconds)\n    kwargs = dict(args=(func, seconds, args), eta=next_run_time)\n    if task_id is not None:\n        kwargs.update(task_id=task_id)\n    interval.apply_async(**kwargs)\n    func = import_string(func)\n    return func(*args)\n\n大概意思就是先计算下次运行的时间,然后把任务添加到celery队列里,这里有个task_id有些问题,因为假设添加了每隔3s执行一个任务,\n它的task_id默认会使用uuid生成，如果想要再移除这个任务就不太方便，自定task_id可能会好一些，另外也许需要判断task_id是否存在\n\nAsyncResult(task_id).state\n\n\nok,再献上一个好用的函数\n\n\nfrom inspect import getmembers, isfunction\n\ndef get_tasks(module=\u0026#39;task\u0026#39;):\n    return [{\n        \u0026#39;name\u0026#39;: \u0026#39;task:{}\u0026#39;.format(f[1].__name__),\n        \u0026#39;doc\u0026#39;: f[1].__doc__,\n    } for f in getmembers(import_module(module), isfunction)]\n\n\n就这样.","index":182,"permalink":"https://honmaple.me/articles/2017/07/celery动态添加任务.html","summary":"\n\u003cp\u003e\ncelery是一个基于Python的分布式调度系统，\u003ca href=\"http://docs.celeryproject.org/en/latest/\"\u003e文档在这\u003c/a\u003e ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉\n\u003c/p\u003e\n\n\u003cp\u003e\n为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#a6e22e\"\u003e@app.task\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexecute\u003c/span\u003e(func, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ekwargs):\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e func(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ekwargs)\u003c/pre\u003e\n\n\u003cp\u003e\n很可惜，会出现这样的错误\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ekombu.exceptions.EncodeError: Object of type \u0026#39;function\u0026#39; is not JSON...\u003c/pre\u003e","title":"celery动态添加任务"},{"content":"：confuse: signature from \u0026#34;Thorsten Töpper atsutane@freethoughts.de\u0026#34; is unknown trust\n\n解决:\n$ sudo pacman-key --refresh-keys\n\narch错误：无法准备事务处理 (无法满足依赖关系) :: package-query: 要求 pacman\u0026lt;4.3\n\n解决:\n$ sudo pacman -R package-query yaourt\n\n更新python2-pip出现问题\n$ sudo pacman -Syu\n错误：无法提交处理 (有冲突的文件)\npython2-pip: 文件系统中已存在 /usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/contrib/socks.py \npython2-pip: 文件系统中已存在 /usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/contrib/socks.pyc \n发生错误，没有软件包被更新。 \n\n解决:\n $ sudo mv /usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/contrib/socks.py ~/\n $ sudo mv /usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/contrib/socks.py~ ~/\n $ sudo pacman -Syu     # 我也不清楚为什么会发生这个问题，只能这样解决了\n $ sudo cp ~/sock.py /usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/contrib/\n $ sudo cp ~/sock.py~ /usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/contrib/","index":183,"permalink":"https://honmaple.me/articles/2016/02/arch更新遇到的问题.html","summary":"\u003cp\u003e：confuse: signature from \u0026#34;Thorsten Töpper \u003ca href=\"mailto:atsutane@freethoughts.de\"\u003eatsutane@freethoughts.de\u003c/a\u003e\u0026#34; is unknown trust\u003c/p\u003e\n\n\u003cp\u003e解决:\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pacman-key --refresh-keys\n\u003c/pre\u003e\n\u003cp\u003earch错误：无法准备事务处理 (无法满足依赖关系) :: package-query: 要求 pacman\u0026lt;4.3\u003c/p\u003e\n\n\u003cp\u003e解决:\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pacman -R package...\u003c/pre\u003e","title":"arch更新遇到的问题"},{"content":"最近在整理文件时发现了以前记下的一些设置，但是单独记在一个文件里不好找，也占用空间，现在记在博客里\n\nvesa error\n\nfcitx输入法\nsudo pacman -S fcitx-im fcitx-configtool fcitx-sunpinyin\n\n使用\n\n增加内容到~/.xinitrc\nexport LANG=zh_CN.UTF-8\nexport XMODIFIERS=@im=fcitx\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexec startxfce4\n\n终端汉字显示\nsudo pacman -S fbterm fcitx-fbterm\nvim ~/fbtermrc\n\n输入内容input-method=fcitx-fbterm\n\n使用\n\n终端输入fbterm\n\n输入忽略大小写\nvim ~/.inputrc\n\n增加内容\nset completion-ignore-case on\n\nvirtualbox\nsudo pacman -S virtualbox\n\n手动加载模块 modprobe vboxdrv\n\n启动时加载模块\n/etc/modules-load.d/virtualbox.conf\nvboxdrv\n\n添加用户到vboxusers组\ngpsswd -a $USER vboxusers\n\n开机启动rc.local\n\nvim /usr/lib/systemd/system/rc-local.service\n增加内容\n\u0026gt;[Unit]\nDescription=\u0026#34;/etc/rc.local Compatibility\u0026#34;\nConditionFileIsExecutable=/etc/rc.local\n[Service]\nType=forking\nExecStart=/etc/rc.local start\nTimeoutSec=0\nStandardInput=tty\nRemainAfterExit=yes\nSysVStartPriority=99\n[Install]\nWantedBy=multi-user.target\n\n常用的一些软件\n\nack","index":184,"permalink":"https://honmaple.me/articles/2016/04/archlinux的一些设置.html","summary":"\u003cp\u003e最近在整理文件时发现了以前记下的一些设置，但是单独记在一个文件里不好找，也占用空间，现在记在博客里\u003c/p\u003e\n\n\u003ch3\u003evesa error\u003c/h3\u003e\n\n\u003ch3\u003efcitx输入法\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003esudo pacman -S fcitx-im fcitx-configtool fcitx-sunpinyin\n\u003c/pre\u003e\n\u003ch2\u003e使用\u003c/h2\u003e\n\n\u003cp\u003e增加内容到~/.xinitrc\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eexport LANG=zh_CN.UTF-8\nexport XMODIFIERS=@im=fcitx\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexec...\u003c/pre\u003e","title":"archlinux的一些设置"},{"content":"前几天更新内核到了 4.6.2 ，结果很不幸,电脑变得非常卡(貌似只有我遇到这个问题?),\n实在是找不到解决办法了，于是将内核更改为 linux-lts\n\n更改办法很简单，重装  linux-lts\n$ sudo pacman -S linux-lts\n\n重启之前，请确认安装了\n\n\n\n  \n\n\n(注：我的是双显卡，还需要安装 bbswitch-lts )","index":185,"permalink":"https://honmaple.me/articles/2016/06/archlinux更换默认内核为linux-lts.html","summary":"\u003cp\u003e前几天更新内核到了 \u003cstrong\u003e4.6.2\u003c/strong\u003e ，结果很不幸,电脑变得非常卡(貌似只有我遇到这个问题?),\n实在是找不到解决办法了，于是将内核更改为 \u003cem\u003elinux-lts\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e更改办法很简单，重装  \u003cem\u003elinux-lts\u003c/em\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo pacman -S linux-lts\n\u003c/pre\u003e\n\u003cp\u003e重启之前，请确认安装了\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca href=\"https://static.honmaple.com/images/2016/06/2016-06-12_16-09-09.png?type=show\" data-fancybox=\"image\"\u003e\n  \u003cimg data-src=\"https://static.honmaple.com/images/2016/06/2016-06-12_16-09-09.png?type=thumb\" class=\"lazyload\" /\u003e\n\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e(注：我的是双显卡，还需要安装 \u003cem\u003ebbswitch-lts\u003c/em\u003e )\u003c/p\u003e\n","title":"archlinux更换默认内核为linux-lts"},{"content":"最近想要玩会儿游戏，但是又不想切换到windows,所以准备安装steam,在linux下玩游戏,\n参考文档Steam\n\n准备工作\n\n因为我的是64位操作系统,所以需要启用 multilib\n$ sudo vim /etc/pacman.conf\n# 取消下面注释\n[multilib]\nInclude = /etc/pacman.d/mirrorlist\n\n双显卡bumblebee\n\n我的又是双显卡,需要安装32位驱动\nlib32-nvidia-utils\nlib32-mesa-libgl\nlib32-mesa\n\n注意\n除此之外，参考 bumblebee报错信息\n还需要安装 virtualgl-libs:i386 ( arch上是lib32-virtualgl )\n否则报错\nERROR: ld.so: object \u0026#39;libdlfaker.so\u0026#39; from LD_PRELOAD cannot be preloaded: ignored.\n\n安装steam\n$ sudo pacman -Syu steam\n\n打开steam\n\n直接启动报错\n$ steam\n/home/jianglin/.local/share/Steam/steam.sh:行161: VERSION_ID: 未绑定的变量\n/home/jianglin/.local/share/Steam/steam.sh:行161: VERSION_ID: 未绑定的变量\nRunning Steam on arch  64-bit\n/home/jianglin/.local/share/Steam/steam.sh:行161: VERSION_ID: 未绑定的变量\nSTEAM_RUNTIME is enabled automatically\nInstalling breakpad exception handler for appid(steam)/version(1459463254)\nlibGL error: unable to load driver: i965_dri.so\nlibGL error: driver pointer missing\nlibGL error: failed to load driver: i965\nlibGL error: unable to load driver: swrast_dri.so\nlibGL error: failed to load driver: swrast\n....\n\n换个方式启动\n$ optirun steam\n\n虽然也有报错，但是总算能启动了\n/home/jianglin/.local/share/Steam/steam.sh:行161: VERSION_ID: 未绑定的变量\n/home/jianglin/.local/share/Steam/steam.sh:行161: VERSION_ID: 未绑定的变量\nRunning Steam on arch  64-bit\n/home/jianglin/.local/share/Steam/steam.sh:行161: VERSION_ID: 未绑定的变量\nSTEAM_RUNTIME is enabled automatically\nInstalling breakpad exception handler for appid(steam)/version(1459463254)\nInstalling breakpad exception handler for appid(steam)/version(1459463254)\nInstalling breakpad exception handler for appid(steam)/version(1459463254)\nFontconfig error: \u0026#34;/etc/fonts/conf.d/10-scale-bitmap-fonts.conf\u0026#34;, line 72: non-double matrix element\nFontconfig error: \u0026#34;/etc/fonts/conf.d/10-scale-bitmap-fonts.conf\u0026#34;, line 72: non-double matrix element\nFontconfig warning: \u0026#34;/etc/fonts/conf.d/10-scale-bitmap-fonts.conf\u0026#34;, line 80: saw unknown, expected number\n[0425/180353:ERROR:main_delegate.cc(777)] Could not load cef_extensions.pak\n[0425/180353:ERROR:browser_main_loop.cc(203)] Running without the SUID sandbox! See https://code.google.com/p/chromium/wiki/LinuxSUIDSandboxDevelopment for more information on developing with the sandbox on.\n....\n\nok，就这样","index":186,"permalink":"https://honmaple.me/articles/2016/04/archlinux安装steam.html","summary":"\u003cp\u003e最近想要玩会儿游戏，但是又不想切换到windows,所以准备安装steam,在linux下玩游戏,\n参考文档\u003ca href=\"https://wiki.archlinux.org/index.php/Steam\"\u003eSteam\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e准备工作\u003ca id=\"orgheadline1\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e因为我的是64位操作系统,所以需要启用 \u003cstrong\u003emultilib\u003c/strong\u003e\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e$ sudo vim /etc/pacman.conf\n# 取消下面注释\n[multilib]\nInclude = /etc/pacman.d/mirrorlist\n\u003c/pre\u003e\n\u003ch3\u003e双显卡bumblebee\u003ca id=\"orgheadline2\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003e我的又是双显卡,需要安装32位驱动\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003elib32-nvidia-utils\nlib32-mesa-libgl\nlib32-mesa\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e注意...\u003c/strong\u003e\u003c/p\u003e","title":"archlinux安装steam"},{"content":"Table of Contents\nansible动态解析inventory\nansible自定义模块传递list变量会变成字符串\n常见问题FAQ\n\n\nansible动态解析inventory\n\n  ansible调用inventory模块时总会调用一个文件或脚本来进行处理, 但我想要动态的解析inventory, 即直接传入一个字符串而不是文件, 直接调用ansible的接口来进行解析（不同格式的inventory也可以手动解析，比如yaml格式可以使用pyyaml解析，不过直接使用ansible接口会更方便一些）\n\n\n\n  但问题是ansible没有直接可供调用的接口, 不过可以直接查看ansible源码，找到相应的解析函数，封装一下即可\n\n\n\n  查找源码, 根据 InventoryManager 传递的source变量找到parse_sources这个函数\n\nclass InventoryManager(object):\n    def parse_sources(self, cache=False):\n        \u0026#39;\u0026#39;\u0026#39; iterate over inventory sources and parse each one to populate it\u0026#39;\u0026#39;\u0026#39;\n\n        self._setup_inventory_plugins()\n        ...\n\n\n  然后再根据\n\ndef _setup_inventory_plugins(self):\n    \u0026#39;\u0026#39;\u0026#39; sets up loaded inventory plugins for usage \u0026#39;\u0026#39;\u0026#39;\n\n    inventory_loader = PluginLoader(\u0026#39;InventoryModule\u0026#39;, \u0026#39;ansible.plugins.inventory\u0026#39;, C.DEFAULT_INVENTORY_PLUGIN_PATH, \u0026#39;inventory_plugins\u0026#39;)\n    ...\n\n  找到对应的解析plugin, 我使用的是ini格式的inventory, 所以自定义一下ansible.plugins.inventory.ini.InventoryModule这个模块即可\n\n\nfrom ansible.plugins.inventory.ini import InventoryModule\nfrom ansible.inventory.data import InventoryData\nfrom ansible.parsing.dataloader import DataLoader\nfrom ansible.module_utils._text import to_text\nfrom ansible.template import Templar\n\n\nclass InventoryCustomModule(InventoryModule):\n    def mine_parse(self, b_data):\n        self.loader = DataLoader()\n        self.inventory = InventoryData()\n        self.templar = Templar(loader=self.loader)\n        try:\n            data = to_text(b_data, errors=\u0026#39;surrogate_or_strict\u0026#39;).splitlines()\n        except UnicodeError:\n            data = []\n            for line in b_data.splitlines():\n                if line and line[0] in self.b_COMMENT_MARKERS:\n                    data.append(u\u0026#39;\u0026#39;)\n                else:\n                    data.append(to_text(line, errors=\u0026#39;surrogate_or_strict\u0026#39;))\n        return self._parse(\u0026#34;\u0026#34;, data)\n\n\n\n\n 如何使用:\n\ntext = \u0026#39;\u0026#39;\u0026#39;\\\n[MY-HOST]\nMY_HOST-1 ansible_ssh_host=127.0.0.1\nMY_HOST-2 ansible_ssh_host=127.0.0.2\nMY_HOST-3 ansible_ssh_host=127.0.0.3\nMY_HOST-4 ansible_ssh_host=127.0.0.4\n\n[MY-HOST:vars]\nvip=127.0.0.10\nppp=test\n\n[MY-HOST1]\nMY_HOST1-1 ansible_ssh_host=127.0.0.11\nMY_HOST1-2 ansible_ssh_host=127.0.0.12\n\n[MY-HOST:children]\nMY-HOST1\n\u0026#39;\u0026#39;\u0026#39;\nmodule = InventoryCustomModule()\nmodule.mine_parse(text)\n\nfor _, group in module.inventory.groups.items():\n    print(group, group.child_groups, group.vars)\n    for host in group.hosts:\n        print(host, host.vars)\n\n    结果:\n\n(ungrouped, [], {})\n(all, [ungrouped], {})\n(MY-HOST, [MY-HOST1], {u\u0026#39;vip\u0026#39;: u\u0026#39;127.0.0.10\u0026#39;, u\u0026#39;ppp\u0026#39;: u\u0026#39;test\u0026#39;})\n(MY_HOST-1, {u\u0026#39;ansible_ssh_host\u0026#39;: u\u0026#39;127.0.0.1\u0026#39;, \u0026#39;inventory_file\u0026#39;: None, \u0026#39;inventory_dir\u0026#39;: None})\n(MY_HOST-2, {u\u0026#39;ansible_ssh_host\u0026#39;: u\u0026#39;127.0.0.2\u0026#39;, \u0026#39;inventory_file\u0026#39;: None, \u0026#39;inventory_dir\u0026#39;: None})\n(MY_HOST-3, {u\u0026#39;ansible_ssh_host\u0026#39;: u\u0026#39;127.0.0.3\u0026#39;, \u0026#39;inventory_file\u0026#39;: None, \u0026#39;inventory_dir\u0026#39;: None})\n(MY_HOST-4, {u\u0026#39;ansible_ssh_host\u0026#39;: u\u0026#39;127.0.0.4\u0026#39;, \u0026#39;inventory_file\u0026#39;: None, \u0026#39;inventory_dir\u0026#39;: None})\n(MY-HOST1, [], {})\n(MY_HOST1-1, {u\u0026#39;ansible_ssh_host\u0026#39;: u\u0026#39;127.0.0.11\u0026#39;, \u0026#39;inventory_file\u0026#39;: None, \u0026#39;inventory_dir\u0026#39;: None})\n(MY_HOST1-2, {u\u0026#39;ansible_ssh_host\u0026#39;: u\u0026#39;127.0.0.12\u0026#39;, \u0026#39;inventory_file\u0026#39;: None, \u0026#39;inventory_dir\u0026#39;: None})\n\n\n    可以看出已经没什么大的问题了, 但有一个点, all组下的groups列表只有ungrouped, 正常情况下MY-HOST组也应该继承all组, 可能是还需要一些其他的操作吧，继续翻源码，找到了InventoryData的reconcile_inventory方法, 修改一下即可\n\nmodule = InventoryCustomModule()\nmodule.mine_parse(text)\nmodule.inventory.reconcile_inventory()\n\n\nansible自定义模块传递list变量会变成字符串\n\n  我自定义了一个模块，需要传入一个list变量group_names\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(group_names={\n            \u0026#34;required\u0026#34;: True\n        }))\n\n    i = module.params.get(\u0026#39;group_names\u0026#39;)\n    msg = {\u0026#34;group_names\u0026#34;: i, \u0026#34;type\u0026#34;: str(type(i))}\n    module.fail_json(changed=False, msg=msg)\n\n\nif __name__ == \u0026#34;__main__\u0026#34;:\n    main()\n\n  但发现传入的变量最后变成的str type\n\nFAILED! =\u0026gt; {\u0026#34;changed\u0026#34;: false, \u0026#34;failed\u0026#34;: true, \u0026#34;msg\u0026#34;: {\u0026#34;group_names\u0026#34;: \u0026#34;[\u0026#39;test\u0026#39;]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;\u0026lt;type \u0026#39;str\u0026#39;\u0026gt;\u0026#34;}}\n\n  最后查找资料后才知道, 传递的变量需要增加type参数, 否则都是str\n\nmodule = AnsibleModule(\n    argument_spec=dict(group_names={\n        \u0026#34;required\u0026#34;: True,\n        \u0026#34;type\u0026#34;: \u0026#34;list\u0026#34;\n    }))\n\n常见问题FAQ\nAborting, target uses selinux but python bindings (libselinux-python) aren\u0026#39;t installed!\n\n\n  查看目标机器是否安装 libselinux-python\n\nyum install libselinux-python\n\n\n  修改ansible.cfg\n\ninterpreter_python = /usr/bin/python","index":187,"permalink":"https://honmaple.me/articles/2018/09/ansible笔记.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eansible动态解析inventory\u003c/h1\u003e\n\u003cp\u003e\n  \u003cb\u003eansible\u003c/b\u003e调用inventory模块时总会调用一个文件或脚本来进行处理, 但我想要动态的解析inventory, 即直接传入一个字符串而不是文件, 直接调用ansible的接口来进行解析（不同格式的inventory也可以手动解析，比如yaml格式可以使用pyyaml解析，不过直接使用ansible接口会更方便一些）\n\u003c/p\u003e\n\n\u003cp\u003e\n  但问题是\u003cb\u003eansible\u003c/b\u003e没有直接可供调用的接口, 不过可以直接查看ansible源码，找到相应的解析函数，封装一下即可\n\u003c/p\u003e\n\n\u003cp\u003e\n  查找源码, 根据 \u003ccode\u003eInventoryManager\u003c/code\u003e 传递的\u003cb\u003esource\u003c/b\u003e变量找到\u003ccode\u003eparse_sources\u003c/code\u003e这个函数\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInventoryManager\u003c/span\u003e(object):\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eparse_sources\u003c/span\u003e(self, cache\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFalse):\n        \u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;...\u003c/span\u003e\u003c/pre\u003e","title":"ansible笔记"},{"content":"Table of Contents\n加速\n\n问题\n方案\n\n目标\n\nweb界面\n任务队列\n\n\n\n\nansible是基于Python的 自动化部署 方案,但是目前只是通过命令行\n\nansible -i hosts all -a \u0026#39;uptime\u0026#39;\n# or\nansible-playbook -i hosts playbook.yml -e \u0026#39;args\u0026#39; -t deploy\n\n实现自动化部署.\n\n\n\n长此以往，虽然可以实现所谓的自动化，但产品业务线多且杂的情况下，项目很难维护，更不用说以文件为存储的表现形式很差,针对目前使用ansible的经验以及使用中的困难,可以针对性的提出一些解决方案\n\n\n加速\n\n问题\n\n  自动化部署其中最大的障碍就是 网络 的原因\n\n\n\n  其中需要通过网络上传一些模板文件,有的甚至还需要上传一些压缩包,虽然说几MB的东西很快就能上传成功，但如果把这上传文件所需要的2秒乘以上百，上千台主机呢,更不用说ansible的表现形式就是一个任务一个任务的往下执行,假如在上传模板这一步卡住(等待所有服务器上传成功),这时某台未模板化的服务器的某服务需要重启，是不是会出问题呢\n\n\n方案\n\n  针对这一问题,目前想到的解决方案如下:\n\n\n\n\n 适当增加fork数\n    目前fork数默认为50，可以适当增加\n\n\n\n 大文件使用内网(外网)下载\n    从部署机上上传文件可能会出现这样那样的问题，尤其是上传到国外服务器时经常会出现ansible playbook的任务卡住问题(其实是正在以几KB/s的龟速运行)，所以其中大于xxMB的文件(压缩包)全部使用从远程服务器上下载方式,并且全部进行加密处理\n\n\n\n 把超过几百台服务器的节点分组多进程运行\n    服务器一旦多了，对应任务的等待时间也就多了，所以将500台的节点分为十组，每组50台,使用多进程分别同时运行，这样可以有效减少任务等待时间,需要注意每组运行失败的服务器。\n\n\n\n 把经常出问题或者网络不太好的节点放到最后运行\n    像中国移动以及香港，国外的某些节点在运行ansible playbook的时候总会或多或少的出些问题,这些节点可以考虑放到最后,并且需要找出问题原因进行优化\n\n\n\n目标\n\nweb界面\n\n   使用过ansible的同学一定知道ansible-tower，它是ansible的web方式部署，通过web界面就可以添加删除任务,并且运行ansible playbook,可惜，它是收费的 /捂脸\n\n\n任务队列\n\n   把ansible playbook放到任务队列里，由消费者去消费对应的任务\n\n\n\n   未完待续...","index":188,"permalink":"https://honmaple.me/articles/2017/10/ansible快速部署加速方案.html","summary":"\n\u003cp\u003e\nansible是基于Python的 \u003cb\u003e自动化部署\u003c/b\u003e 方案,但是目前只是通过命令行\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eansible -i hosts all -a \u0026#39;uptime\u0026#39;\n# or\nansible-playbook -i hosts playbook.yml -e \u0026#39;args\u0026#39; -t deploy\u003c/pre\u003e\n\u003cp\u003e\n实现自动化部署.\n\u003c/p\u003e\n\n\u003cp\u003e\n长此以往，虽然可以实现所谓的自动化，但产品业务线多且杂的情况下，项目很难维护，更不用说以文件为存储的表现形式很差,针对目前使用ansible的经验以及使用中的困难,可以针对性的提出一些解决方案\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-1\"\u003e加速\u003c/h1\u003e\n\n\u003ch2 id=\"heading-1.1\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e\n  自动化部署其中最大的障碍就是...\u003c/p\u003e","title":"ansible快速部署加速方案"},{"content":"之前有一个需求,ansible-playbook中需要某一步单步执行,也就是说在有多台服务器时,某个任务只能一台服务器执行完后,另一台服务器才能执行,否者对应集群的服务会出问题\n\n\n\n这是一个很简单的需求,ansible中也有对应的实现, --fork 1 或者 使用 serial\n\n\n\n但是如果有人忘记加 --fork 1 了呢，而且该任务是在子任务中，使用 include 加载, serial 关键字无法在某一特定任务中使用,只能与 hosts 同级\n\n\n\n所幸，在这里 https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task 找到了解决办法,使用 delegate_to\n\n\n- name: service restart\n  # serial: 1 would be the proper solution here, but that can only be set on play level\n  # upstream issue: https://github.com/ansible/ansible/issues/12170\n  run_once: true\n  with_items: \u0026#39;{{play_hosts}}\u0026#39;\n  delegate_to: \u0026#34;{{ item }}\u0026#34;\n  command: \u0026#34;/bin/service restart\u0026#34;","index":189,"permalink":"https://honmaple.me/articles/2017/09/ansible-playbook中tasks单进程.html","summary":"\n\u003cp\u003e\n之前有一个需求,ansible-playbook中需要某一步单步执行,也就是说在有多台服务器时,某个任务只能一台服务器执行完后,另一台服务器才能执行,否者对应集群的服务会出问题\n\u003c/p\u003e\n\n\u003cp\u003e\n这是一个很简单的需求,ansible中也有对应的实现, \u003ccode\u003e--fork 1\u003c/code\u003e 或者 使用 \u003ccode\u003eserial\u003c/code\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n但是如果有人忘记加 \u003ccode\u003e--fork 1\u003c/code\u003e 了呢，而且该任务是在子任务中，使用 \u003cb\u003einclude\u003c/b\u003e 加载, \u003ccode\u003eserial\u003c/code\u003e 关键字无法在某一特定任务中使用,只能与 \u003cb\u003ehosts\u003c/b\u003e 同级\n\u003c/p\u003e\n\n\u003cp\u003e\n所幸，在这里 \u003ca href=\"https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task\"\u003ehttps://www.bountysource.com/issues/26342862-support...\u003c/a\u003e\u003c/p\u003e","title":"ansible-playbook中tasks单进程"},{"content":"Table of Contents\n相关概念\n部署教程\n\nUI界面\nZerotier客户端\n私有Planet\n私有Planet服务器加入组网\nUI和Zerotier分开部署\n\n组网教程\n\n创建网络\n加入网络\n跨网段访问\n安全限制\n\nFAQ\n\n如何修改默认的9993端口?\n\n参考资料\n\n\n\n\nzerotier 可谓是慕名许久，但之前一直没有太多内网穿透和异地组网的需求，此次准备在外网访问家里NAS部署的部分应用，所以也调研了一些相关的应用，最终选择了 zerotier 来对我现有的机器进行组网\n\n\n\n\n\n FRP: 需要将服务器的端口映射出去，不太喜欢这种暴力的方式。我目前的服务基本上只会在 0.0.0.0 监听80、443等常用端口，其它服务一律监听 127.0.0.1，通过nginx访问内部的服务\n\n\n\n DDNS: 家里的NAS直接暴露在公网，这非常不安全，而且家用宽带无法使用80，443端口，只能使用高位端口\n\n\n\n ZEROTIER: 使用 P2P 的方式对多台服务器进行组网，映射的端口只允许加入组网的设备访问，这在速度和安全性上确实是我所需要的\n\n\n\n\n相关概念\n\n\n\n Planet: 行星服务器，也称根服务器。主要用于管理 zerotier 客户端的地址信息\n\n\n\n Moon: 月亮服务器，也称中继服务器、跳转服务器。主要用于当两台设备无法直连时，可以通过Moon中转连接\n\n\n\n Leaf: 组网使用的设备，可以是一台服务器，一台NAS，甚至一台手机\n\n\n\n部署教程\n\n   现在我有三台设备需要进行组网，一台A在国外， 一台B在国内(腾讯云)，还有一台C在家里(NAS)。我准备将私有Planet部署到机器A，同时机器A也会加入到内网里，A、B、C三台设备可以通过内网相互访问\n\n\nUI界面\n\n    以 jonnyan404/zerotier-planet 为例\n\n\n\n\n 创建目录\n\nmkdir /opt/zerotier /opt/ztncui\n\n\n 部署服务\n\ndocker run -d --name ztncui --restart always \\\n-p 4000:4000 -p 9993:9993/tcp -p 9993:9993/udp \\\n-e MYADDR={服务器公网IP} \\\n-e HTTP_PORT=4000 \\\n-e HTTP_ALL_INTERFACES=yes \\\n-e ZTNCUI_PASSWD=mrdoc.fun \\\n-v /opt/zerotier:/var/lib/zerotier-one \\\n-v /opt/ztncui:/opt/key-networks/ztncui/etc \\\nkeynetworks/ztncui\n\n       然后就可以通过 服务器公网IP:4000 访问UI管理界面，默认的用户名和密码: admin,mrdoc.fun\n\n\n\nZerotier客户端\n\n\n\n Linux: 部署方式很简单，注意区分 host网络 和 bridge网络，这两个在安全性有所区别(具体在下面讲)\n\ndocker run --name zerotier -d \\\n--restart always \\\n--net host \\\n--cap-add NET_ADMIN \\\n--device /dev/net/tun \\\n-v /opt/zerotier:/var/lib/zerotier-one \\\nzerotier/zerotier:latest\n\n      如果使用私有Planet，记得替换 /opt/zerotier/planet 文件\n\n\n\n Android: 推荐使用 github.com/kaaass/ZerotierFix\n\n\n\n私有Planet\n\n    默认的Planet信息是硬编码在zertier代码里，如果安装好客户端后会在 zerotier-cli peers 看到官方的Planet服务器。\n\n\n\n    而部署私有的Planet的目的:\n\n\n\n\n 官方的服务器基本都位于国外或者香港，服务连通性无法得到保证\n\n\n\n 安全性。试想一个陌生的设备加入到网络，而这个设备的许可只需要得到官方的认证即可。当然，官方是基本不可能发生这样的情况，但如果有一个完全控制的网络，何乐而不为呢\n\n\n\n\n    如何生成私有Planet文件?\n\ngit clone https://github.com/jonnyan404/zerotier-planet --depth=1\ncd zerotier-planet\ndocker cp mkmoonworld-x86_64 ztncui:/tmp\ndocker cp patch.sh ztncui:/tmp\ndocker exec -it ztncui bash /tmp/patch.sh\ndocker restart ztncui\n\n    这样就会在挂载目录 /opt/zerotier 下生成一个新的 planet 文件，记得下载并备份。所有加入组网的客户端都需要替换该文件\n\n\n私有Planet服务器加入组网\n\n    如果按照上述部署流程也可以正常使用 zerotier 组网，但是，如果想要把部署了私有Planet的设备也加入到内网，貌似没有一篇文章说到。 所以我专门研究了一下，想要把私有Planet的机器也加入到内网，大概是可以分为下面几种方式:\n\n\n\n\n (不推荐) 修改ztncui内部zerotier的默认端口9993 \n       在 /opt/zerotier 目录下添加一个 local.conf，并设置\n\n{\n    \u0026#34;settings\u0026#34;: {\n        \u0026#34;primaryPort\u0026#34;: 9995\n    }\n}\n\n       然后修改 patch.sh 文件里的 9993 端口，以及 /start_ztncui.sh 添加一行\n\necho \u0026#34;ZT_ADDR=localhost:$ZT_PORT\u0026#34; \u0026gt; /opt/key-networks/ztncui/.env\n\n\n 部署两个zerotier: 除了ztncui容器内部的一个zerotier，再在机器上部署一个客户端，并修改端口，避免端口冲突\n\n\n\n (推荐) ztncui镜像的UI和zerotier分开部署\n       我研究后才发现 ztncui 的相关镜像把事情弄的很复杂，都把 ztncui 和 zerotier 放到同一个镜像，专门去连接 localhost:9993 。其实是可以把两个镜像分开的，UI 只做 UI ，使用 API 去连接 zerotier 官方的镜像\n\n\n\nUI和Zerotier分开部署\n\n    如果想要自己构建Docker镜像，可以参考 honmaple/ztncui-aio\n\n\n\n\n\n 部署 zerotier 的客户端(部署过的可以忽略)\n\ndocker run -d --name zerotier --restart always --net=host --cap-add NET_ADMIN --device /dev/net/tun -v /opt/zerotier:/var/lib/zerotier-one zerotier/zerotier:latest\n\n\n 部署 UI\n\ndocker run -d --name ztncui --restart always \\\n-e MYADDR={服务器IP} \\\n-e HTTP_PORT=4000 \\\n-e HTTP_ALL_INTERFACES=yes \\\n-e ZT_ADDR={zerotier地址, 比如Docker网关:9993} \\\n-e ZT_TOKEN={可以为空，但需要挂载zerotier-one的配置路径} \\\n-v /opt/ztncui:/opt/ztncui/etc \\\n-v /opt/zerotier:/var/lib/zerotier-one \\\n-p 4000:4000 \\\nhonmaple/ztncui:latest\n\n       ZT_ADDR: 由于 zerotier 和 ztncui 没有部署在一个容器，所以需要从UI内部访问宿主机的 9993 端口，这里可以使用UI容器的网关访问，比如UI容器的IP是 172.17.0.12，则访问 172.17.0.1\n\n\n\n       另外，zerotier 默认的API接口只允许 127.0.0.1 访问，所以需要在挂载目录 /opt/zerotier 下新建一个 local.conf\n\n{\n    \u0026#34;settings\u0026#34;: {\n        \u0026#34;allowManagementFrom\u0026#34;: [\u0026#34;127.0.0.1/24\u0026#34;, \u0026#34;::1\u0026#34;, \u0026#34;172.17.0.1/24\u0026#34;]\n    }\n}\n\n\n 修改归属的用户和用户组\n\ndocker exec -it zerotier bash\ncd /var/lib/zerotier-one\nchown zerotier-one:zerotier-one local.conf\nexit\n\n\n 生成私有Planet文件\n\ngit clone https://github.com/honmaple/ztncui-aio --depth=1\ncd ztncui-aio\ndocker cp script/mkmoonworld-x86_64 zerotier:/tmp\ndocker cp script/patch.sh zerotier:/tmp\ndocker exec -it zerotier bash /tmp/patch.sh {服务器IP}\n\n\n 重启\n\ndocker restart zerotier\n\n       这样就能使私有Planet和zerotier客户端共存，让Planet服务器也能加入到内网环境了\n\n\n\n组网教程\n创建网络\n\n\n\n 使用浏览器打开UI管理界面 {服务器公网IP}:4000，honmaple/ztncui 默认用户名密码是 admin,password\n       \n\n  \n\n\n\n\n\n 点击 Add network，输入一个网络名称，比如 testlab。然后选择 Easy setup\n       \n\n  \n\n\n\n\n\n 添加一个内网网段，记得这个内网网段不能和需要加入组网的设备网段相同，比如我的设备C网段是 192.168.31.0/24 ，就不能添加该网段，另外Docker所使用的网段 172.0.0.0/8 也需要避免添加，所以我这里选择 10.8.230.0/24。不同的设备内网网段不同，请根据实际添加\n       \n\n  \n\n\n\n\n加入网络\n\n    创建好网络后就会得到一串网络ID，登录到设备，然后使用\n\ndocker exec zerotier zerotier-cli join {网络ID}\n\n\n    加入网络，正常情况下会得到\n\n200 join OK\n\n    刷新管理界面就会出现一个新的成员\n    \n\n  \n\n    然后勾选 Authorizerd 允许加入，再次刷新，就能看到该设备分配了一个新的IP 10.8.230.170\n    \n\n  \n\n\n\n\n    返回设备，可以看到设备多了一个新的IP\n    \n\n  \n\n\n\n跨网段访问\n\n    什么是跨网段访问? 比如现在我可以通过 10.8.230.0/24 访问已经加入组网的设备，但我想要在设备B上访问我家里的其它设备，但是，我家里设备的网段是 192.168.31.0/24，正常是无法访问的，只能访问已经加入组网的Nas。这时需要配置静态路由，让设备B访问 192.168.31.0/24 网段时走zerotier配置好的IP。\n\n\n\n    如果手动添加就是\n\nip route add 192.168.31.0/24 via 10.8.230.170 dev {zerotier建立的网卡}\n\n\n    当然，也可以直接使用zerotier管理界面添加，选择 Routes\n    \n\n  \n\n\n\n\n    Target 输入想要访问的网段：192.168.31.0/24，Gateway 输入之前分配的IP：10.8.230.170。\n    \n\n  \n\n\n\n\n    创建好后可以在设备B上执行\n\nping 192.168.31.XX(除设备C之外的内网设备IP)\n\n    查看网络是否连通\n\n\n安全限制\n\n    正因为跨网段访问只需要添加一个静态路由，就能访问我家里的其它设备，这无疑是非常不安全的。如果私有Planet服务器遭到入侵，我家里的所有联网设备都会暴露出去，即使加入组网只是其中的一台。基于此原因，我专门调整了一下zerotier的部署方式，不再使用 host网络 的方式部署，而是创建一个新的Docker网络 zerotier\n\ndocker network create --driver=bridge --subnet=192.168.100.0/24 --gateway=192.168.100.1 zerotier\n\n    注: 192.168.100.0/24 是一个全新的网段，不要使用172网段\n\n\n\n    然后删除之前部署的 zerotier 客户端，并使用 zerotier网络 重新部署\n\ndocker stop zerotier\ndocker rm zerotier\ndocker run -d --name zerotier --restart always --net zerotier --cap-add NET_ADMIN --device /dev/net/tun -v /opt/zerotier:/var/lib/zerotier-one zerotier/zerotier:latest\n\n    细心的朋友应该会发现我这里没有将 9993 端口映射给宿主机，这是由于我测试发现两台设备只需要其中一台开放 9993 端口，两台设备之间就能直连。如果两台设备都不开放端口，则会通过开放了端口的其它设备进行跳转，查看 peers 会看到一直是 RELAY 状态\n\nroot@cf5f973bd294:/# zerotier-cli peers\n200 peers\n\u0026lt;ztaddr\u0026gt;   \u0026lt;ver\u0026gt;  \u0026lt;role\u0026gt; \u0026lt;lat\u0026gt; \u0026lt;link\u0026gt;   \u0026lt;lastTX\u0026gt; \u0026lt;lastRX\u0026gt; \u0026lt;path\u0026gt;\nxxxxxxxxx  1.12.1 LEAF      -1 RELAY\n\n\n    这时想要从设备B访问我家里其它联网的设备已是不可能，除非突破Docker的限制。而正常情况下，我想要从设备B上访问的是部署在设备C的其它服务(以Docker服务为主)，所以，现在可以添加一个新的路由 192.168.100.0/24 指向 10.8.230.170，然后修改其它镜像使用的网络为 zerotier\n\ndocker run -d --rm --name=test-nginx --net=zerotier nginx:stable-alpine\ndocker exec -it test-nginx ip a\n\n\n    接着在设备B上执行\n\nping 192.168.100.3(test-nginx的IP)\ncurl 192.168.100.3\n\n\n    如果无法访问，需要在Docker所在宿主机上添加路由\n\nip route add 10.8.230.0/24 via 192.168.100.2(zerotier客户端的IP)\n\n\n    另外，由于Docker的IP可能会发生改变，除创建容器时指定 --ip 外，还可以将服务的端口映射出去，比如 NasTools 使用端口为 3000，那么可以在创建容器时指定\n\n-p 11300:3000\n\n    然后在设备B上访问 192.168.100.1:11300，即网关地址+映射的端口，这样就能避免Docker重启后IP发生改变而导致服务异常的情况\n\n\nFAQ\n如何修改默认的9993端口?\n\n    在 zerotier 挂载的目录下新建一个 local.conf 文件，并设置\n\n{\n    \u0026#34;settings\u0026#34;: {\n        \u0026#34;primaryPort\u0026#34;: 9995\n    }\n}\n\n参考资料\n\n\n\n github.com/honmaple/ztncui-aio\n\n\n\n github.com/jonnyan404/zerotier-planet\n\n\n\n github.com/zerotier/ZeroTierOne/blob/dev/README.docker.md\n\n\n\n docs.zerotier.com/zerotier/zerotier.conf/","index":190,"permalink":"https://honmaple.me/articles/2023/09/zerotier-note.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n\u003cb\u003ezerotier\u003c/b\u003e 可谓是慕名许久，但之前一直没有太多内网穿透和异地组网的需求，此次准备在外网访问家里NAS部署的部分应用，所以也调研了一些相关的应用，最终选择了 \u003cb\u003ezerotier\u003c/b\u003e 来对我现有的机器进行组网\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003cb\u003eFRP\u003c/b\u003e: 需要将服务器的端口映射出去，不太喜欢这种暴力的方式。我目前的服务基本上只会在 \u003ccode\u003e0.0.0.0\u003c/code\u003e 监听80、443等常用端口，其它服务一律监听 \u003ccode\u003e127.0.0.1\u003c/code\u003e，通过nginx访问内部的服务\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003cb\u003eDDNS\u003c/b\u003e: 家里的NAS直接暴露在公网，这非常不安全，而且家用宽带无法使用80，443端口，只能使用高位端口\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n \u003cb\u003eZEROTIER\u003c/b\u003e: 使用 \u003cb\u003eP2P\u003c/b\u003e 的方式对多台服务器进行组网，映射的端口只允许加入组网的设备访问，这在速度和安全性上确实是我所需要的...\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/blockquote\u003e","title":"Zerotier笔记"},{"content":"Table of Contents\n快速开始\n\n开始(Quickstart)\n\n创建新的站点\n编译和预览\n\n安装(Installation)\n编译(Build)\n命令行(Cli usage)\n\ninit\nbuild\nserver\n\n目录结构(Driectory structure)\n配置文件(Configuration)\n\n内容管理\n\nSection\n\n配置\n路径变量(sections.xxx.path)\n模版变量(sections.xxx.template)\n\n页面(Page)\n\n元数据\n配置\n路径变量(sections.xxx.page_path)\n模版变量(sections.xxx.page_template)\n\n分类系统(Taxonomy)\n\n配置\n路径变量\n模版变量\n\n归档页(Archive)\n分页(Pagination)\n\n路径变量\n模版变量\n\n草稿(Draft)\n输出格式(Atom,Rss,JSON)\n\n配置\n模版变量\n\n静态文件(Static)\n\n主题静态文件\n指定的静态文件\n\n多语言(Multilingual)\n\n模版(templates)\n主题(theme)\n\n安装\n开发\n\n主题目录结构\n配置\nTODO默认配置\n\n\n插件(hooks)\n\ni18n\nencrypt\nshortcode\nassets\nsofile\n\n本地测试和正式发布\n\n\n\n\n一个简单却可配置的静态博客生成器。\n很早之前(三年前)就想写一个静态博客生成器，但苦于一直没有时间，最近把之前写的重构了一下，让其可以支持更多的定制化配置。\n\n\n\n至于为什么要重新写一个:\n\n\n\n\n 大概是因为想要把之前未完成的轮子补充完整\n\n\n\n 我目前使用的博客系统使用的是 pelican，一个基于 Python 的静态博客生成器，目前里面包括了很多我自己写的插件，比如 Emacs org mode 的支持、文章加密、模版定制等，因为需要大量遍历所有文章，导致生成速度越来越慢，还有一点就是因为使用的是 Python，每次本地预览时都需要切换到虚拟环境\n\n\n\n 我习惯使用 Emacs + Org，除了前期的几篇文章，后面都是使用 org mode 书写，之前是因为 Python 没有一个好用的 org mode 解析库，所以专门写了一个 org-python 用来解析 org mode；最近我也是完善了另一个我很早之前就写的 org-golang 解析库(轮子+1)，准备趁次机会利用一下这个库\n\n\n\n 至于为什么不用最近几年流行的 Hugo, 因为我想要保持和我使用 Pelican 时一样的功能，比如文章加密，而 hugo 并不支持插件，想要自定义插件必须复制大段大段的启动函数, 甚至需要修改源代码。同样我想要定制一个相同的模版，而对于使用过其它模版系统如Django，jinja2, 再来使用 Go内置模版 的人来说, hugo 的内置模版除了难用就是难用，这也是我此次选用 pongo2 的原因\n\n\n\n 我的设想是提供插件的接口，并提供一个足够简单的启动函数, 在有用户需要自定义插件时只需要自己创建一个包, 使用三两行代码就能注册自定义插件并重新编译自己的snow\n\n\n\n\n快速开始\n开始(Quickstart)\n创建新的站点\n──╼ ./snow init\nWelcome to snow 0.1.0.\n\u0026gt; Where do you want to create your new web site? [.] mysnow\n\u0026gt; What will be the title of this web site? [snow]\n\u0026gt; Who will be the author of this web site?\nThe input is required\n\u0026gt; Who will be the author of this web site? honmaple\n\u0026gt; What is your URL prefix? (no trailing slash) [http://127.0.0.1:8000]\n\u0026gt; Do you want to create first page? [Y/n]\n\n编译和预览\n└──╼ cd mysnow\n└──╼ ../snow server -D\nDEBU Copying @theme/static/css/main.css to output/static/css/main.css\nINFO Done: Static Processed 1 static files in 588.705µs\nDEBU Writing output/categories/index.html\nDEBU Writing output/authors/index.html\nDEBU Writing output/tags/index.html\nDEBU Writing output/posts/index.html\nDEBU Writing output/authors/snow/index.html\nDEBU Writing output/tags/snow/index.html\nDEBU Writing output/categories/linux/index.html\nDEBU Writing output/tags/linux/index.html\nDEBU Writing output/tags/emacs/index.html\nDEBU Writing output/categories/linux/emacs/index.html\nINFO Done: Page Processed 1 normal pages, 0 hidden pages, 0 section pages in 10.087804ms\nINFO Done: Section Processed 1 posts in 10.1831ms\nINFO Done: Taxonomy Processed 1 authors, 3 tags, 1 categories in 10.18788ms\n\n安装(Installation)\n└──╼ git install https://github.com/honmaple/snow\n\n编译(Build)\n└──╼ git clone https://github.com/honmaple/snow --depth=1\n└──╼ cd snow\n└──╼ go mod tidy\n└──╼ go build .\n\n命令行(Cli usage)\n└──╼ ./snow --help\nNAME:\n   snow - snow is a static site generator.\n\nUSAGE:\n   snow [global options] command [command options] [arguments...]\n\nVERSION:\n   0.1.0\n\nCOMMANDS:\n   init     init a new site\n   build    build and output\n   server   server local files\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --config FILE, -c FILE  load configuration from FILE (default: \u0026#34;config.yaml\u0026#34;)\n   --help, -h            show help (default: false)\n   --version, -v         print the version (default: false)\ninit\n└──╼ ./snow init\n└──╼ ./snow init myblog\n\n     如果不指定 myblog 目录，默认会在当前目录下生成一个 config.yaml 文件和一个 content 目录\n\nbuild\n\n     该命令会构建站点内容内写入到 {output_dir} 目录, 如果该目录已经有文件存在，除非制定 -C 参数，否则不会自动清理\n\n\n\n\n 清理输出目录\n\n└──╼ ./snow build --clean\n└──╼ ./snow build -C\n\n\n 显示输出详情\n\n└──╼ ./snow build --debug\n└──╼ ./snow build -D\n\n\n 指定输出目录\n\n└──╼ ./snow build --output {output_dir}\n└──╼ ./snow build -o {output_dir}\n\n\n 指定mode\n\n└──╼ ./snow build --mode {mode}\n└──╼ ./snow build -m {mode}\n\n\n 筛选页面\n\n└──╼ ./snow build --filter {build_filter}\n└──╼ ./snow build -F {build_filter}\n\n\n 显示所有hooks\n\n└──╼ ./snow build --hooks\n\nserver\n\n     build 支持的命令 server也同样支持, 除此之外，还有\n\n\n\n\n 指定监听地址\n\n└──╼ ./snow server --listen 127.0.0.1:8088\n└──╼ ./snow server -l 127.0.0.1:8088\n\n       默认监听地址是 site.url\n\n\n\n 监听文件修改并重新构建\n\n└──╼ ./snow server --autoload\n└──╼ ./snow server -r\n\n\n目录结构(Driectory structure)\n.\n├── config.yaml\n├── content\n│   └── posts\n│       └── first-page.md\n├── static\n├── layouts\n└── themes\n│   └── snow\n│       └── static\n│       └── template\n\n\n\n config.yaml:\n      使用的配置文件\n\n\n\n content:\n      包括所有的页面内容, 比如 .md, .org 等,如果一个子目录包括 index.{md,org} 文件，那么这个目录将会成为一个页面，否则每一个子目录都是一个 section, 同样的，子目录下 _index.{md,org} 文件也是该 section 的配置文件\n\n\n\n static:\n      statics 指定的静态文件或目录，名称可修改\n\n\n\n layouts: 主题模版覆盖目录\n      theme.override 指定的主题覆盖文件，比如有一个主题模版 {theme}/templates/post.html, 当指定了 override 目录后就可以在该目录创建一个同样名称为 post.html 的文件进行覆盖\n\n\n\n themes:\n      主题目录, 该目录下包括的子目录就是主题名称，可以在 theme.name 里指定\n\n\n配置文件(Configuration)\n# 站点配置信息\nsite:\n  url: \u0026#34;http://127.0.0.1:8000\u0026#34;\n  title: \u0026#34;snow\u0026#34;\n  subtitle: \u0026#34;Snow is a static generator.\u0026#34;\n  language: \u0026#34;zh\u0026#34;\n  author: \u0026#34;honmaple\u0026#34;\n\n# 发布时使用的配置\nmode.publish:\n  site:\n    url: \u0026#34;https://honmaple.me\u0026#34;\n\noutput_dir: \u0026#34;output\u0026#34;\ncontent_dir: \u0026#34;content\u0026#34;\nbuild_filter: \u0026#34;not draft\u0026#34;\n\ntheme:\n  name: \u0026#34;snow\u0026#34;\n\n# 按照主题需要进行配置\nparams.extra:\n  menus:\n    - name: \u0026#34;关于\u0026#34;\n      url: \u0026#34;/pages/about.html\u0026#34;\n内容管理\nSection\ncontent/\n├── pages             // no url, because sections.pages.path is \u0026#34;\u0026#34;\n│   └── about         // \u0026lt;- http://127.0.0.1:8000/pages/about.html\n│       └── index.org // no url\n│   └── contact.org   // \u0026lt;- http://127.0.0.1:8000/pages/contact.html\n└── posts             // \u0026lt;- http://127.0.0.1:8000/posts/index.html\n    ├── post1.org     // \u0026lt;- http://127.0.0.1:8000/posts/2022/02/post1.html\n    └── subposts      // \u0026lt;- http://127.0.0.1:8000/posts/subposts/index.html\n        └── post2.org // \u0026lt;- http://127.0.0.1:8000/posts/2023/02/post2.html\n配置\nsections:\n  _default:\n    # 页面默认排序, 多字段使用逗号分隔\n    orderby: \u0026#34;date desc\u0026#34;\n    # 自定义某个section下的页面筛选\n    filter: \u0026#34;\u0026#34;\n    # 页面默认分页, path必须使用{number}变量, 0表示不分页\n    paginate: 10\n    # 分页路径\n    paginate_path: \u0026#34;{name}{number}{extension}\u0026#34;\n    # 分页前筛选pages\n    paginate_filter: \u0026#34;\u0026#34;\n    # 生成路径, 为空表示禁止生成相关页面\n    path: \u0026#34;{section}/index.html\u0026#34;\n    # 使用的模版\n    template: \u0026#34;section.html\u0026#34;\n    # 当前section下所有页面生成路径\n    page_path: \u0026#34;{section}/{slug}/index.html\u0026#34;\n    # 页面使用的模版\n    page_template: \u0026#34;post.html\u0026#34;\n    formats.atom:\n      path: \u0026#34;{section:slug}/atom.xml\u0026#34;\n  posts:\n    page_path: \u0026#34;posts/{date:%Y}/{date:%m}/{slug}.html\u0026#34;\n  pages:\n    path: \u0026#34;\u0026#34;\n  pages/about:\n    # 自定义pages/about下的页面生成路径，同时继承pages.path不会生成所有页面\n    page_path: \u0026#34;{slug}/index.html\u0026#34;\n\n     filter 格式(下同):\n\n\u0026#39;emacs\u0026#39; in tags and not draft or weight \u0026gt; 1\n\n     其中 tags, draft 等都是page元数据\n\n\n路径变量(sections.xxx.path)\n\n\n\n变量\n描述\n\n\n\n{section}\nsection名称\n\n\n{section:slug}\nsection slug, 中国 -\u0026gt; zhong-guo\n\n\n\n模版变量(sections.xxx.template)\n\n\n\n变量\n描述\n\n\n\nsection\n\n\n\nsection.Title\nsection标题\n\n\nsection.Path\nsection相对链接\n\n\nsection.Permalink\nsection绝对链接\n\n\nsection.Content\nsection内容\n\n\nsection.Pages\n当前section下的页面列表\n\n\nsection.Children\n子section\n\n\nsection.Parent\n父section\n\n\n\n页面(Page)\n元数据\n\n\n\n markdown\n\n---\ntitle: \u0026#34;title\u0026#34;\ncategories:\n  - Snow/Templates\ntags:\n  - linux\n  - snow\n---\n\n\n orgmode\n\n#+TITLE: title\n#+DATE: 2022-02-26 17:14:46\n#+CATEGORIES: Snow/Templates\n#+PROPERTY: TAGS linux,snow\n#+PROPERTY: MODIFIED 2023-02-26 14:35:37\n\n\n html\n\n\u0026lt;head\u0026gt;\n  \u0026lt;title\u0026gt;Project\u0026lt;/title\u0026gt;\n  \u0026lt;meta name=\u0026#34;categories\u0026#34; content=\u0026#34;Snow/Templates\u0026#34; /\u0026gt;\n  \u0026lt;meta name=\u0026#34;tags\u0026#34; content=\u0026#34;linux,snow\u0026#34; /\u0026gt;\n  \u0026lt;meta name=\u0026#34;date\u0026#34; content=\u0026#34;2015-12-22\u0026#34; /\u0026gt;\n\u0026lt;/head\u0026gt;\n\n配置\n# 页面目录所在, 其中该目录下应该包括一系列子目录，这些子目录的名称对应为 *页面的类型*, 比如 *content/drafts/* 目录下的 页面类型为 *drafts*, 当然也可以直接在 页面文件头添加 =type: drafts=\ncontent_dir: \u0026#34;content\u0026#34;\n路径变量(sections.xxx.page_path)\n\n\n\n变量\n描述\n\n\n\n{date:%Y}\n创建页面的年份\n\n\n{date:%m}\n创建页面的月份\n\n\n{date:%d}\n创建页面的日期\n\n\n{date:%H}\n创建页面的小时\n\n\n{lang}\n页面语言\n\n\n{slug}\n页面标题或自定义slug\n\n\n{filename}\n文件名称(不带后缀名)\n\n\n\n模版变量(sections.xxx.page_template)\n\n\n\n变量\n描述\n\n\n\npage\n\n\n\npage.Title\n页面标题\n\n\npage.Lang\n页面语言\n\n\npage.Date\n页面创建时间\n\n\npage.Modified\n页面修改时间\n\n\npage.Aliases\n页面其它链接\n\n\npage.Path\n页面相对链接\n\n\npage.Permalink\n页面绝对链接\n\n\npage.Summary\n页面简介\n\n\npage.Content\n页面内容\n\n\npage.Meta.xxx\n自定义的元数据\n\n\npage.Prev\n上一篇\n\n\npage.Next\n下一篇\n\n\npage.HasPrev()\n是否有上一篇\n\n\npage.HasNext()\n是否有下一篇\n\n\npage.PrevInType\n同一类型上一篇\n\n\npage.NextInType\n同一类型下一篇\n\n\npage.HasPrevInType()\n是否有同一类型上一篇\n\n\npage.HasNextInType()\n是否有同一类型下一篇\n\n\n\n分类系统(Taxonomy)\n配置\ntaxonomies:\n  _default:\n    path: \u0026#34;{taxonomy}/index.html\u0026#34;\n    # terms排序, 可选name,count\n    orderby: \u0026#34;\u0026#34;\n    template: \u0026#34;{taxonomy}/list.html\u0026#34;\n    term_path: \u0026#34;{taxonomy}/{term:slug}/index.html\u0026#34;\n    term_template: \u0026#34;{taxonomy}/single.html\u0026#34;\n    # 页面列表筛选\n    term_filter: \u0026#34;\u0026#34;\n    # 页面列表排序\n    term_orderby: \u0026#34;date desc\u0026#34;\n    # 页面列表分页\n    term_paginate: 0\n    term_paginate_path: \u0026#34;\u0026#34;\n    term_paginate_filter: \u0026#34;\u0026#34;\n  categories:\n  authors:\n  tags:\n\n路径变量\n\n\n\n taxonomies.xxx.path\n\n\n\n\n变量\n描述\n\n\n\n{taxonomy}\n分类系统名称\n\n\n\n\n taxonomies.xxx.term_path\n\n\n\n\n变量\n描述\n\n\n\n{taxonomy}\n分类系统名称\n\n\n{term}\n分类具体名称\n\n\n{term:slug}\n分类slug\n\n\n\n\n模版变量\n\n\n\n taxonomies.xxx.template\n\n\n\n\n变量\n描述\n\n\n\ntaxonomy\n\n\n\ntaxonomy.Name\n分类系统名称, 如:categories,tags,authors\n\n\ntaxonomy.Terms\n\n\n\n\n\n taxonomies.xxx.term_template\n\n\n\n\n变量\n描述\n\n\n\nterm\n\n\n\nterm.Name\n分类名称\n\n\nterm.Path\n相对链接\n\n\nterm.Permalink\n绝对链接\n\n\nterm.List\n页面列表\n\n\nterm.Children\n子分类\n\n\n\n\n归档页(Archive)\n\n    snow 中的分类系统是基于归档实现的，该功能类似 SQL 中的 group by, 所以如果要实现归档页可以有两种方式:\n\n\n\n\n 添加 taxonomies.{key}, {key} 可以是页面元数据里的任意字段, 比如 categories, tags, 如果需要按照时间归档, 格式为 date:2006/01, 其中 2006/01 为Go时间格式，表示按年月归档, 并生成链接 /archives/2022/10/index.html\n\ntaxonomies:\n  date:2006/01:\n    path: \u0026#34;archives/index.html\u0026#34;\n    template: \u0026#34;archives.html\u0026#34;\n    term_path: \u0026#34;archives/{term}/index.html\u0026#34;\n    term_template: \u0026#34;period_archives.html\u0026#34;\n\n\n 在 {content_dir} 下添加一个 archives.md 的文件\n\npath: archives.html\ntemplate: archives.html\nsection: true\n\n       然后在模板 {templates}/archives.html 使用 pages.GroupBy({key})\n\n{%- for subterm in pages.GroupBy(\u0026#34;date:2006-01\u0026#34;).OrderBy(\u0026#34;name desc\u0026#34;) %}\n  {%- set date = subterm.Name | split:\u0026#34;-\u0026#34; %}\n  {%- set year = date[0] %}\n  {%- set month = date[1] %}\n   ...\n{%- endfor %}\n\n\n分页(Pagination)\n路径变量\n\n\n\n变量\n描述\n\n\n\n{name}\n路径名称\n\n\n{extension}\n路径扩展\n\n\n{number}\n页码, 第一页为空\n\n\n{number:one}\n页码, 第一页为\u0026#34;1\u0026#34;\n\n\n\n\n\n 示例一:\n\npath: \u0026#34;section/index.html\u0026#34;\npaginate_path: \u0026#34;{name}{number}{extension}\u0026#34;\n\n\n\n 第一页: section/index.html\n\n\n\n 第二页: section/index2.html\n\n\n\n 第三页: section/index3.html\n\n\n\n\n 示例二:\n\npath: \u0026#34;section/index.html\u0026#34;\npaginate_path: \u0026#34;page/{number:one}{extension}\u0026#34;\n\n\n\n 第一页: section/page/1.html\n\n\n\n 第二页: section/page/2.html\n\n\n\n 第三页: section/page/3.html\n\n\n\n模版变量\n\n\n\n变量\n描述\n\n\n\npaginator\n\n\n\npaginator.URL\n分页链接\n\n\npaginator.PageNum\n当前页\n\n\npaginator.Total\n总页数\n\n\npaginator.HasPrev()\n是否有上一页\n\n\npaginator.Prev\n上一页\n\n\npaginator.Prev.URL\n上一页链接\n\n\npaginator.HasNext()\n是否有下一页\n\n\npaginator.Next\n下一页\n\n\npaginator.Next.URL\n下一页链接\n\n\npaginator.All\n所有页\n\n\npaginator.List\n当前分页下的页面列表\n\n\n\n草稿(Draft)\n\n    使用者可以自定义草稿标志，但推荐使用两种形式:\n\n\n\n\n 添加元数据 draft: true, 构建时增加筛选条件\n\n\n\n\n 草稿\n\nsnow build --filter \u0026#39;draft = true\u0026#39;\n\n\n 非草稿\n\nsnow build -F \u0026#39;not draft\u0026#39;\n\n\n\n 创建一个单独的 drafts 目录存放草稿\n\n\n\n\n 草稿\n\nsnow build -F \u0026#39;type = \u0026#34;drafts\u0026#34;\u0026#39;\n\n\n 非草稿\n\nsnow build -F \u0026#39;type != \u0026#34;drafts\u0026#34;\u0026#39;\n\n\n\n\n    注: 默认筛选条件可以写入配置 build_filter\n\n输出格式(Atom,Rss,JSON)\n\n    可以生成 rss ，atom 或者其它任意格式(需要自定义模版)\n\n配置\n# 设置rss格式的默认值\nformats.rss:\n  template: \u0026#34;_internal/rss.xml\u0026#34;\n\nformats.atom:\n  template: \u0026#34;_internal/atom.xml\u0026#34;\n\nsections:\n  _default:\n    # rss生成路径, 模版将会使用默认模版\n    formats.rss.path: \u0026#34;{section:slug}/index.xml\u0026#34;\n    # 为空时禁止生成\n    formats.atom.path: \u0026#34;\u0026#34;\n\ntaxonomies:\n  tags:\n    formats.atom:\n      path: \u0026#34;tags/{term:slug}/index.xml\u0026#34;\n      # 自定义模版\n      template: \u0026#34;custom.atom.xml\u0026#34;\n模版变量\n\n\n\n变量\n描述\n\n\n\nsection\n仅生成section 有效\n\n\nterm\n仅生成taxonomy term 有效\n\n\npages\n页面列表\n\n\n\n静态文件(Static)\n\n    静态文件分 主题静态文件 和 配置指定的静态文件\n\n\n主题静态文件\n├── themes\n│   └── snow\n│       └── static\n│           └── main.css\n\n     主题目录下的所有文件默认会复制到 output 目录, 除非设置 statics.@theme/static.path 为空\n\n\n指定的静态文件\n\n     该文件需要在配置指定\n\nstatics:\n  # 根目录下static目录下的文件将会拷贝到{output_dir}/static\n  static:\n    # 拷贝的路径, 为空时表示不写入, 如果以\u0026#34;/\u0026#34;结尾, 表示拷贝到该目录\n    # static  -\u0026gt; {output_dir}/static\n    # static/ -\u0026gt; {output_dir}/static/static\n    path: \u0026#34;/\u0026#34;\n    # 指定扩展，不配置将会使用目录下的所有文件\n    exts:\n      - \u0026#34;.js\u0026#34;\n      - \u0026#34;.css\u0026#34;\n    # 如果指定的静态文件是一个目录，可以设置忽略文件, 比如忽略static目录下的images子目录\n    ignore_files:\n      - \u0026#34;^images/\u0026#34;\n  # 以@theme/开头表示主题目录, 以@theme/_internal/开头表示内置的主题目录\n  @theme/static:\n    path: \u0026#34;static\u0026#34;\n  @theme/_internal/static:\n    path: \u0026#34;static\u0026#34;\n  # 同样可以指定任意静态文件或目录\n  content/pages/css:\n    path: \u0026#34;static/css\u0026#34;\n\n多语言(Multilingual)\n\n    需要配置 languages\n\nlanguages.en:\n  translations: \u0026#34;i18n/en.yaml\u0026#34;\nlanguages.fr:\n  translations: \u0026#34;i18n/fr.yaml\u0026#34;\n\n    页面格式:\n\n\n\n\n {title}.en.md\n\n\n\n {title}.fr.md\n\n\n\n    或者可以在文件头指定 lang: en\n\n\n模版(templates)\n\n   https://github.com/flosch/pongo2\n\n主题(theme)\n安装\n开发\n主题目录结构\n\n     其中 templates 和 static 名称不可修改\n\nsimple/\n├── templates\n│   ├── post.html\n│   ├── index.html\n│   ├── archives.html\n├── static\n│   ├── main.css\n配置\ntheme:\n  # 主题名称, 未设置将使用默认主题\n  name: \u0026#34;test-theme\u0026#34;\n  # 主题模版覆盖, 增加同名的文件到 *override* 配置的目录, snow将会优先使用该文件\n  override: \u0026#34;layouts\u0026#34;\n\nTODO默认配置\n\n插件(hooks)\nhooks:\n  - \u0026#34;i18n\u0026#34;\n  - \u0026#34;assets\u0026#34;\n  - \u0026#34;encrypt\u0026#34;\n  - \u0026#34;shortcode\u0026#34;\ni18n\n\n\n\n 模版\n\n{% i18n \u0026#34;tags\u0026#34; %}\n{% T \u0026#34;tags %d\u0026#34; 12 %}\n{{ i18n(\u0026#34;authors\u0026#34;) }}\n{{ T(\u0026#34;authors\u0026#34;) }}\n{{ _(\u0026#34;authors %f\u0026#34;, 3.14) }}\n\n       甚至可以直接使用变量\n       {{ _(term.Name) }}\n\n\n\n 翻译文件\n       默认会加载主题下 i18n 目录下的文件\n\ni18n\n├── en.yaml\n└── zh.yaml\n\n       文件内容\n\n---\n- id: \u0026#34;authors\u0026#34;\n  tr: \u0026#34;作者\u0026#34;\n- id: \u0026#34;tags\u0026#34;\n  tr: \u0026#34;标签\u0026#34;\n\n\n       也可以自定义文件位置或翻译内容覆盖主题原有的翻译\n\nlanguages.en:\n  translations: \u0026#34;i18n/en.yaml\u0026#34;\nlanguages.zh:\n  translations:\n    - id: \u0026#34;authors\u0026#34;\n      tr: \u0026#34;作者\u0026#34;\n\n\nencrypt\n\n     内容加密, 需要一个密码\n\n{{ page.Content | encrypt:\u0026#34;123456\u0026#34; }}\n\nshortcode\n\n     用于快速插入已有模版, 示例:\n\n\u0026lt;shortcode _name=\u0026#34;encrypt\u0026#34; password=\u0026#34;1234567\u0026#34;\u0026gt;\nhello *markdown*\n\u0026lt;/shortcode\u0026gt;\n\n\u0026lt;shortcode _name=\u0026#34;gist\u0026#34; author=\u0026#34;spf13\u0026#34; id=\u0026#34;7896402\u0026#34; /\u0026gt;\n\n\n     可以自定义 shortcode 到主题的 templates/shortcodes 目录下, 目前内置 gist, encrypt\n\nassets\n\n     静态文件处理\n\nparams.assets:\n  css:\n    files:\n      - \u0026#34;@theme/static/scss/main.scss\u0026#34;\n      - \u0026#34;@theme/static/scss/entry.scss\u0026#34;\n    filters:\n      - libscss:\n          path: [\u0026#34;@theme/static/scss/\u0026#34;]\n      - cssmin:\n    output: \u0026#34;static/lib.min.css\u0026#34;\n{% assets files=\u0026#34;css/style.scss\u0026#34; filters=\u0026#34;libsass,cssmin\u0026#34; output=\u0026#34;css/style.min.css\u0026#34; %}\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ config.site.url }}/{{ asset_url }}\u0026#34;\u0026gt;\n{% endassets %}\n\n{% assets css %}\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ config.site.url }}/{{ asset_url }}\u0026#34;\u0026gt;\n{% endassets %}\nsofile\n\n    sofile 允许使用Go的 Plugin 系统支持自定义插件\n\n\n\n\n 创建一个 sofile.go 的文件\n\npackage main\n\nimport (\n    \u0026#34;fmt\u0026#34;\n\n    \u0026#34;github.com/honmaple/snow/builder/hook\u0026#34;\n    \u0026#34;github.com/honmaple/snow/builder/page\u0026#34;\n    \u0026#34;github.com/honmaple/snow/builder/theme\u0026#34;\n    \u0026#34;github.com/honmaple/snow/config\u0026#34;\n)\n\ntype testHook struct {\n    hook.BaseHook\n}\n\nfunc (testHook) Name() string {\n    return \u0026#34;test\u0026#34;\n}\n\nfunc (testHook) AfterPageParse(page *page.Page) *page.Page {\n    fmt.Println(page.Title)\n    return page\n}\n\nfunc NewHook(conf config.Config, theme theme.Theme) hook.Hook {\n    return \u0026amp;testHook{}\n}\n\n\n 编译为so文件\n\ngo build -buildmode=plugin sofile.go\n\n\n 注册插件\n\nhooks:\n  - \u0026#34;sofile\u0026#34;\nparams.sofiles:\n  - \u0026#34;sofile.so\u0026#34;\n\n\n本地测试和正式发布\n\n   snow 提供了 mode 配置用于区分本地测试和正式发布\n\nsite:\n  url: \u0026#34;http://127.0.0.1:8000\u0026#34;\n  output_dir: \u0026#34;output\u0026#34;\n\nmode.publish:\n  site:\n    url: \u0026#34;https://example.com\u0026#34;\n    output_dir: \u0026#34;xxx\u0026#34;\n\nmode.develop:\n  include: \u0026#34;develop.yaml\u0026#34;\n\n   只要在构建时使用 snow build --mode publish 即可覆盖本地默认配置","index":191,"permalink":"https://honmaple.me/articles/2022/10/Snow静态博客生成器.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n一个\u003cb\u003e简单却可配置\u003c/b\u003e的静态博客生成器。\n很早之前(三年前)就想写一个静态博客生成器，但苦于一直没有时间，最近把之前写的重构了一下，让其可以支持更多的定制化配置。\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003cb\u003e至于为什么要重新写一个\u003c/b\u003e:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\n 大概是因为想要把之前未完成的轮子补充完整\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 我目前使用的博客系统使用的是 \u003cb\u003epelican\u003c/b\u003e，一个基于 \u003cb\u003ePython\u003c/b\u003e 的静态博客生成器，目前里面包括了很多我自己写的插件，比如 \u003ccode\u003eEmacs org mode\u003c/code\u003e 的支持、文章加密、模版定制等，因为需要大量遍历所有文章，导致生成速度越来越慢，还有一点就是因为使用的是 \u003cb\u003ePython\u003c/b\u003e，每次本地预览时都需要切换到虚拟环境\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 我习惯使用 \u003cb\u003eEmacs + Org\u003c/b\u003e，除了前期的几篇文章，后面都是使用 \u003cb\u003eorg...\u003c/b\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003c/blockquote\u003e","title":"Snow静态博客生成器"},{"content":"Table of Contents\nmain\n总结一下：\n\n\nmain\n\n\n   转自 这里\n\n\n\n   很多新手刚开始学习python的时候经常会看到python 中 name = \u0026#39;main\u0026#39;\n   这样的代码，可能很多新手一开始学习的时候都比较疑惑，python 中name = \u0026#39;main\u0026#39; 的作用，到底干嘛的？\n\n\n\n   有句话经典的概括了这段代码的意义：\n\n\n\n\n   “Make a script both importable and executable”\n\n\n\n\n   意思就是说让你写的脚本模块既可以导入到别的模块中用，另外该模块自己也可执行。\n   这句话，可能一开始听的还不是很懂。下面举例说明：\n   先写一个模块：\n\n#module.py\ndef main():\n    print(\u0026#34;we are in %s\u0026#34; % __name__)\n\nif __name__ == \u0026#39;__main__\u0026#39;:\n    main()\n\n\n   这个函数定义了一个main函数，我们执行一下该py文件发现结果是打印出\n\nwe are in __main__\n\n   说明我们的if语句中的内容被执行了，调用了 main()：\n   但是如果我们从另我一个模块导入该模块，并调用一次main()函数会是怎样的结果呢？\n\n\n#anothermodle.py\nfrom module import main\nmain()\n\n\n   其执行的结果是：\n\nwe are in module\n\n\n   但是没有显示\n\n\u0026#34;we are in __main__\u0026#34;\n\n   也就是说模块name = \u0026#39;main\u0026#39; 下面的函数没有执行。\n   这样既可以让“模块”文件运行，也可以被其他模块引入，而且不会执行函数2次。这才是关键。\n\n\n总结一下：\n\n   如果我们是直接执行某个.py文件的时候，该文件中那么\n\n__name__ == \u0026#39;__main__\u0026#39;\n\n   是True,\n   但是我们如果从另外一个.py文件通过import导入该文件的时候，这时name的值就是我们这个py文件的名字而不是main。\n   这个功能还有一个用处：调试代码的时候，在\n\nif __name__ == \u0026#39;__main__\u0026#39;\n\n   中加入一些我们的调试代码，\n   我们可以让外部模块调用的时候不执行我们的调试代码，但是如果我们想排查问题的时候，直接执行该模块文件，调试代码能够正常运行！","index":192,"permalink":"https://honmaple.me/articles/2016/12/Python中的__main__函数.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e\u003cspan style=\"text-decoration:underline\"\u003e\u003cspan style=\"text-decoration:underline\"\u003emain\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003e\n   转自 \u003ca href=\"http://www.jb51.net/article/51892.html\"\u003e这里\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n   很多新手刚开始学习python的时候经常会看到python 中 \u003cb\u003e\u003cspan style=\"text-decoration:underline\"\u003e\u003cspan style=\"text-decoration:underline\"\u003ename\u003c/span\u003e\u003c/span\u003e = \u0026#39;\u003cspan style=\"text-decoration:underline\"\u003e\u003cspan style=\"text-decoration:underline\"\u003emain\u003c/span\u003e\u003c/span\u003e\u0026#39;\u003c/b\u003e\n   这样的代码，可能很多新手一开始学习的时候都比较疑惑，python 中\u003cb\u003e\u003cspan style=\"text-decoration:underline\"\u003e\u003cspan style=\"text-decoration:underline\"\u003ename\u003c/span\u003e\u003c/span\u003e = \u0026#39;\u003cspan style=\"text-decoration:underline\"\u003e\u003cspan style=\"text-decoration:underline\"\u003emain\u003c/span\u003e\u003c/span\u003e\u0026#39;\u003c/b\u003e 的作用，到底干嘛的？\n\u003c/p\u003e\n\n\u003cp\u003e\n   有句话经典的概括了这段代码的意义：\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n   “Make a script both importable and executable”\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n   意思就是说让你写的脚本模块既可以导入到别的模块中用，另外该模块自己也可执行。\n   这句话，可能一开始听的还不是很懂。下面举例说明：\n   先写一个模块：\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#75715e\"\u003e#module...\u003c/span\u003e\u003c/pre\u003e","title":"Python中的__main__函数"},{"content":"Table of Contents\n安装\n配置\n\n\n\n\n最近购买了一个2K显示器，到手后才发现macos默认对2K分辨率支持不足，导致字体很小，无法像windows对字体进行缩放，尤其是终端字体，简直不忍直视。网上一搜才知道，这已经是陈年问题，网上也有很多解决办法，本次采用 BetterDisplay 开启 HiDPI， 不用关闭 SIP\n\n\n\n安装\n\n   安装可以直接从 BetterDisplay 下载，手动安装，不过我推荐使用 brew 安装，这样对于软件的管理也更方便\n\n──╼ brew info BetterDisplay\n==\u0026gt; betterdisplay: 1.3.4 (auto_updates)\nhttps://betterdisplay.pro/\n/usr/local/Caskroom/betterdisplay/1.3.4 (127B)\nFrom: https://mirrors.ustc.edu.cn/homebrew-cask.git\n==\u0026gt; Name\nBetterDisplay\n==\u0026gt; Description\nDisplay management tool\n==\u0026gt; Artifacts\nBetterDisplay.app (App)\n==\u0026gt; Analytics\ninstall: 553 (30 days), 1,329 (90 days), 2,166 (365 days)\n──╼ brew install betterdisplay\n\n   安装后打开可能会提示更新，忽略即可\n\n\n配置\n\n   在菜单栏选择 betterdisplay -\u0026gt; 点击齿轮(设置) -\u0026gt; Displays, 然后选择显示器，比如我这选择 AG273QG3R3B, Color LCD 则是笔记本自带屏幕\n\n\n\n   \n\n  \n\n\n\n\n   勾选 Edit the default system configuration of this display 和 Set up native smooth resolution scaling, 然后点击 Apply Changes 按钮, 输入管理员密码并且重启, 重启完成后选择 系统设置 -\u0026gt; 显示器, 选择适合自己的分辨率(这里发现只能选择4种，更多分辨率可通过betterdisplay设置)","index":193,"permalink":"https://honmaple.me/articles/2022/11/MacOS适配2K显示器.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n最近购买了一个2K显示器，到手后才发现macos默认对2K分辨率支持不足，导致字体很小，无法像windows对字体进行缩放，尤其是终端字体，简直不忍直视。网上一搜才知道，这已经是陈年问题，网上也有很多解决办法，本次采用 \u003cb\u003eBetterDisplay\u003c/b\u003e 开启 \u003cb\u003eHiDPI\u003c/b\u003e， 不用关闭 \u003cb\u003eSIP\u003c/b\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"heading-1\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e\n   安装可以直接从 \u003ca href=\"https://github.com/waydabber/BetterDisplay\"\u003eBetterDisplay\u003c/a\u003e 下载，手动安装，不过我推荐使用 \u003cb\u003ebrew\u003c/b\u003e 安装，这样对于软件的管理也更方便\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e──╼ brew info BetterDisplay\n==\u0026gt; betterdisplay: 1.3.4 (auto_updates...\u003c/pre\u003e","title":"MacOS适配2K显示器"},{"content":"Table of Contents\nLinux发展历史\nLinux的最小组成\nLinux的安装与启动\n\n\nLinux发展历史\n\n  Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，\n  后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,\n  推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,\n  UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds\n  于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展\n\n\nLinux的最小组成\n\n  Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，\n  进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。\n\n\n\n  语言:一般有头文件与库文件,头文件为实现,库文件为声明\n\n\nLinux的安装与启动\n\n  当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,\n  然后运行/etc/rc.d/init.d中运行级别的启动脚本。\n\n\n\n  分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便\n\n\n\n  文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等,\n  其中ext4单个分区最大可管理16TB磁盘,xfs单分区最大支持2PB磁盘\n\n\n\n  内存管理：当内存不够时,linux会杀死内存占用最高的进程,像mongodb就是一个占内存大户\n\n\n\n  常用命令:\n\n\n\n\n file: 识别文件类型与编码格式\n\n\n\n ldd:用于打印程序或者库文件所依赖的共享库列表\n\n\n\n\n  运行级别:\n\n\n\n\n\n 0: 停机\n\n\n\n　　- 1: 单用户模式\n　　- 2: 多用户，没有 NFS\n　　- 3: 完全多用户模式(标准的运行级)\n　　- 4: 没有用到\n　　- 5: X11\n　　- 6: 重新启动","index":194,"permalink":"https://honmaple.me/articles/2017/07/Linux伪总结.html","summary":"\n\u003ch1 id=\"heading-1\"\u003eLinux发展历史\u003c/h1\u003e\n\u003cp\u003e\n  Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，\n  后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,\n  推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,\n  UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds\n  于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003eLinux的最小组成\u003c/h1\u003e\n\u003cp\u003e\n  Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，\n  进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。\n\u003c/p\u003e\n\n\u003cp\u003e\n  语言:一般有头文件与库文件,头文件为实现,库文件为声明\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-3\"\u003eLinux的安装与启动\u003c/h1\u003e\n\u003cp\u003e\n  当linux启动时，首先启动内核，内核调用init来完成引导进程...\u003c/p\u003e","title":"Linux总结(草稿)"},{"content":"Table of Contents\n磁盘扩容\n\n关闭KVM虚拟机\n扩容磁盘\n\n查看磁盘位置\n查看磁盘信息\n扩容磁盘大小\n\n扩容虚拟机分区\n\n启动虚拟机\n查看磁盘大小和格式\n扩容磁盘\nDONELVM磁盘扩容\n\n\n磁盘挂载\n\n创建磁盘\n挂载磁盘\n\n挂载命令\n卸载命令\n\n格式化磁盘\n\n格式化分区\n格式化文件系统\n挂载磁盘\n\n\nFAQ\n\nunexpected output in sfdisk --version \nDOS partition table format cannot be used on drives for volumes larger than 2T\n\n参考链接\n\n\n磁盘扩容\n关闭KVM虚拟机\nvirsh shutdown vm-ubuntu-04\n\n扩容磁盘\n查看磁盘位置\n# virsh domblklist vm-ubuntu-04\nTarget     Source\n------------------------------------------------\nvda        /home/kvm/images/ubuntu-04.qcow2\n\n查看磁盘信息\n# qemu-img info /home/kvm/images/ubuntu-04.qcow2\nimage: /home/kvm/images/ubuntu-04.qcow2\nfile format: qcow2\nvirtual size: 2.0G (2147483648 bytes)\ndisk size: 1.7G\ncluster_size: 65536\nFormat specific information:\ncompat: 0.10\nrefcount bits: 16\n\n    可以看出现在虚拟机磁盘大小为 2G\n\n\n扩容磁盘大小\n# qemu-img resize /home/kvm/images/ubuntu-04.qcow2 +28G\nImage resized.\n\n# qemu-img info /home/kvm/images/ubuntu-04.qcow2 \nimage: /home/kvm/images/ubuntu-04.qcow2\nfile format: qcow2\nvirtual size: 30G (32212254720 bytes)\ndisk size: 1.7G\ncluster_size: 65536\nFormat specific information:\ncompat: 0.10\nrefcount bits: 16\n\n    现在磁盘大小已增加到 30G\n\n\n扩容虚拟机分区\n启动虚拟机\nvirsh start vm-ubuntu-04\n\n查看磁盘大小和格式\nroot@vm-ubuntu-04:~# lsblk\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nloop0    7:0    0 88.5M  1 loop /snap/core/7270\nvda    252:0    0   30G  0 disk\n├─vda1 252:1    0    1M  0 part\n└─vda2 252:2    0    2G  0 part /\n\n    现在跟分区只分配了 2G 的大小，而当前 vda 磁盘总量为 30G\n\n\nroot@vm-ubuntu-04:~# df -T\nFilesystem     Type     1K-blocks    Used Available Use% Mounted on\nudev           devtmpfs   4053076       0   4053076   0% /dev\ntmpfs          tmpfs       816784     936    815848   1% /run\n/dev/vda2      ext4       2028368 1634136    273144  86% /\ntmpfs          tmpfs      4083912       0   4083912   0% /dev/shm\ntmpfs          tmpfs         5120       0      5120   0% /run/lock\ntmpfs          tmpfs      4083912       0   4083912   0% /sys/fs/cgroup\n/dev/loop0     squashfs     90624   90624         0 100% /snap/core/7270\ntmpfs          tmpfs       816780       0    816780   0% /run/user/0\n\n    注意 :不同格式的文件系统扩容磁盘命令 有所不同，比如我的根分区格式为 ext4, 以下将以 ext4 为例\n\n\n扩容磁盘\n\n\n\n 安装 cloud-guest-utils\n\napt -y install cloud-guest-utils\n\n\n\n 扩容磁盘\n\nroot@vm-ubuntu-base:~# growpart /dev/vda 2\nCHANGED: partition=2 start=4096 old: size=4188160 end=4192256 new: size=62910431,end=62914527\n\n      2 为跟分区所在磁盘\n\n\nroot@vm-ubuntu-base:~# lsblk\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nloop0    7:0    0 88.5M  1 loop /snap/core/7270\nvda    252:0    0   30G  0 disk\n├─vda1 252:1    0    1M  0 part\n└─vda2 252:2    0   30G  0 part /\n\n\n\n 更新且格式化分区\n      resize2fs 扩容 ext4 文件系统, 其它可参考 https://computingforgeeks.com/extending-root-filesystem-using-lvm-linux/\n\nroot@vm-ubuntu-base:~# resize2fs /dev/vda2\nresize2fs 1.44.1 (24-Mar-2018)\nFilesystem at /dev/vda2 is mounted on /; on-line resizing required\nold_desc_blocks = 1, new_desc_blocks = 4\nThe filesystem on /dev/vda2 is now 7863803 (4k) blocks long.\n\nroot@vm-ubuntu-base:~# lsblk\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nloop0    7:0    0 88.5M  1 loop /snap/core/7270\nvda    252:0    0   30G  0 disk\n├─vda1 252:1    0    1M  0 part\n└─vda2 252:2    0   30G  0 part /\nroot@vm-ubuntu-base:~# df -hT | grep /dev/vda\n/dev/vda2      ext4       30G  1.6G   27G   6% /\n\n\nDONELVM磁盘扩容\n\n    CLOSED: [2020-12-17 四 10:26]\n\n\n\n\n State \u0026#34;DONE\u0026#34;       from              [2020-12-17 四 10:26]\n\n\nroot@jsl-ml:~# lsblk\nNAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda                         8:0    0 14.6T  0 disk \nsdb                         8:16   0  3.5T  0 disk \n├─sdb1                      8:17   0  512M  0 part /boot/efi\n├─sdb2                      8:18   0    1G  0 part /boot\n└─sdb3                      8:19   0  3.5T  0 part \n  └─ubuntu--vg-ubuntu--lv 253:0    0  200G  0 lvm  /\nsdc                         8:32   0 14.6T  0 disk \nsdd                         8:48   0 14.6T  0 disk \nsr0                        11:0    1 1024M  0 rom  \n\nroot@jsl-ml:~# vgdisplay \n  /dev/sde: open failed: No medium found\n  /dev/sde: open failed: No medium found\n  --- Volume group ---\n  VG Name               ubuntu-vg\n  System ID             \n  Format                lvm2\n  Metadata Areas        1\n  Metadata Sequence No  2\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                1\n  Open LV               1\n  Max PV                0\n  Cur PV                1\n  Act PV                1\n  VG Size               3.49 TiB\n  PE Size               4.00 MiB\n  Total PE              915322\n  Alloc PE / Size       51200 / 200.00 GiB\n  Free  PE / Size       864122 / \u0026lt;3.30 TiB\n  VG UUID               EAgRRa-u0VB-0MjL-gnk5-KDCC-YlYw-vAMwOS\n\nroot@jsl-ml:~# lvdisplay \n  /dev/sde: open failed: No medium found\n  /dev/sde: open failed: No medium found\n  --- Logical volume ---\n  LV Path                /dev/ubuntu-vg/ubuntu-lv\n  LV Name                ubuntu-lv\n  VG Name                ubuntu-vg\n  LV UUID                PrxjnN-ELNU-peoA-JH6E-BFle-KclP-Gt07U4\n  LV Write Access        read/write\n  LV Creation host, time ubuntu-server, 2020-12-03 15:13:07 +0000\n  LV Status              available\n  # open                 1\n  LV Size                200.00 GiB\n  Current LE             51200\n  Segments               1\n  Allocation             inherit\n  Read ahead sectors     auto\n  - currently set to     256\n  Block device           253:0\n\nroot@jsl-ml:~# lvcreate -n ubuntu-lv-home --extents +100%FREE  ubuntu-vg\n  /dev/sde: open failed: No medium found\n  /dev/sde: open failed: No medium found\n  Logical volume \u0026#34;ubuntu-lv-home\u0026#34; created.\n   \nroot@jsl-ml:~# lvdisplay \n  /dev/sde: open failed: No medium found\n  /dev/sde: open failed: No medium found\n  --- Logical volume ---\n  LV Path                /dev/ubuntu-vg/ubuntu-lv\n  LV Name                ubuntu-lv\n  VG Name                ubuntu-vg\n  LV UUID                PrxjnN-ELNU-peoA-JH6E-BFle-KclP-Gt07U4\n  LV Write Access        read/write\n  LV Creation host, time ubuntu-server, 2020-12-03 15:13:07 +0000\n  LV Status              available\n  # open                 1\n  LV Size                200.00 GiB\n  Current LE             51200\n  Segments               1\n  Allocation             inherit\n  Read ahead sectors     auto\n  - currently set to     256\n  Block device           253:0\n   \n  --- Logical volume ---\n  LV Path                /dev/ubuntu-vg/ubuntu-lv-home\n  LV Name                ubuntu-lv-home\n  VG Name                ubuntu-vg\n  LV UUID                4dHuSb-yGla-pcdp-0tfg-hnAL-j0xZ-h2aiNr\n  LV Write Access        read/write\n  LV Creation host, time jsl-ml, 2020-12-04 09:37:56 +0000\n  LV Status              available\n  # open                 0\n  LV Size                \u0026lt;3.30 TiB\n  Current LE             864122\n  Segments               1\n  Allocation             inherit\n  Read ahead sectors     auto\n  - currently set to     256\n  Block device           253:1\n\nroot@jsl-ml:~# lsblk\nNAME                            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda                               8:0    0 14.6T  0 disk \nsdb                               8:16   0  3.5T  0 disk \n├─sdb1                            8:17   0  512M  0 part /boot/efi\n├─sdb2                            8:18   0    1G  0 part /boot\n└─sdb3                            8:19   0  3.5T  0 part \n  ├─ubuntu--vg-ubuntu--lv       253:0    0  200G  0 lvm  /\n  └─ubuntu--vg-ubuntu--lv--home 253:1    0  3.3T  0 lvm  \nsdc                               8:32   0 14.6T  0 disk \nsdd                               8:48   0 14.6T  0 disk \nsr0                              11:0    1 1024M  0 rom  \nroot@jsl-ml:~# mkfs.ext4 /dev/ubuntu-vg/ubuntu-lv-home\n\nroot@jsl-ml:~# mount /dev/ubuntu-vg/ubuntu-lv-home /home/data\n\n磁盘挂载\n创建磁盘\n\n   创建一块大小为 100G，格式为 qcow2 的磁盘\n\n# qemu-img create -f qcow2 ubuntu-04-disk.qcow2 100G\nFormatting \u0026#39;ubuntu-04-disk.qcow2\u0026#39;, fmt=qcow2 size=107374182400 cluster_size=65536 lazy_refcounts=off refcount_bits=16\n\n\n   查看磁盘大小\n\n# qemu-img info ubuntu-04-disk.qcow2\nimage: ubuntu-04-disk.qcow2\nfile format: qcow2\nvirtual size: 100G (107374182400 bytes)\ndisk size: 196K\ncluster_size: 65536\nFormat specific information:\ncompat: 1.1\nlazy refcounts: false\nrefcount bits: 16\ncorrupt: false\n\n挂载磁盘\n挂载命令\nvirsh attach-disk vm-ubuntu-04 /home/kvm/images/ubuntu-04-disk.qcow2 --driver qemu --subdriver qcow2 vdb --persistent\n\n    注: \n\n\n\n\n vm-ubuntu-04 为需要扩展的虚拟机名称\n\n\n\n /home/kvm/images/ubuntu-04-disk.qcow2 为刚创建好的扩展磁盘\n\n\n\n vdb 为新扩展磁盘的名称\n\n\n\n卸载命令\nvirsh detach-disk vm-ubuntu-04 /home/kvm/images/ubuntu-04-disk.qcow2 --persistent\n\n格式化磁盘\n\n   虚拟机内执行\n\n\n格式化分区\n[root@vm-ubuntu-04 ~]# fdisk /dev/vdb\n欢迎使用 fdisk (util-linux 2.23.2)。\n\n更改将停留在内存中，直到您决定将更改写入磁盘。\n使用写入命令前请三思。\n\nDevice does not contain a recognized partition table\n使用磁盘标识符 0xd01c1c86 创建新的 DOS 磁盘标签。\n\n命令(输入 m 获取帮助)：n\nPartition type:\n   p   primary (0 primary, 0 extended, 4 free)\n   e   extended\nSelect (default p): p\n分区号 (1-4，默认 1)：\n起始 扇区 (2048-209715199，默认为 2048)：\n将使用默认值 2048\nLast 扇区, +扇区 or +size{K,M,G} (2048-209715199，默认为 209715199)：\n将使用默认值 209715199\n分区 1 已设置为 Linux 类型，大小设为 100 GiB\n\n命令(输入 m 获取帮助)：w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\n正在同步磁盘\n\n格式化文件系统\n[root@vm-ubuntu-04 ~]# lsblk\n[root@vm-ubuntu-04 ~]# mkfs.ext4 /dev/vdb1\n\n挂载磁盘\nmkdir /home/data\nmount /dev/vdb1 /home/data\n\nFAQ\nunexpected output in sfdisk --version \n\n   在执行 growpart /dev/vda 1 时报错\n\nunexpected output in sfdisk --version [sfdisk，来自 util-linux 2.23.2]\n\n\n   解决方案\n\nLANG=en_US.UTF-8 growpart /dev/vda 1\n\nDOS partition table format cannot be used on drives for volumes larger than 2T\n\n   在使用 fdisk /dev/sdd 时, 当/dev/sdd的大小超过2T, 会有警告\n\nDevice does not contain a recognized partition table.\nThe size of this disk is 14.6 TiB (16000900661248 bytes). DOS partition table format cannot be used on drives for volumes larger than 2199023255040 bytes for 512-byte sectors. Use GUID partition table format (GPT).\n\n\n   解决方案\n\n# gdisk /dev/sdd\n\nGPT fdisk (gdisk) version 1.0.5\n\nPartition table scan:\n  MBR: not present\n  BSD: not present\n  APM: not present\n  GPT: not present\n\nCreating new GPT entries in memory.\n\nCommand (? for help): o\nThis option deletes all partitions and creates a new protective MBR.\nProceed? (Y/N): Y\n\nCommand (? for help): n\nPartition number (1-128, default 1): \nFirst sector (34-31251759070, default = 2048) or {+-}size{KMGTP}: \nLast sector (2048-31251759070, default = 31251759070) or {+-}size{KMGTP}: \nCurrent type is 8300 (Linux filesystem)\nHex code or GUID (L to show codes, Enter = 8300): \nChanged type of partition to \u0026#39;Linux filesystem\u0026#39;\n\nCommand (? for help): w\n\nFinal checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING\nPARTITIONS!!\n\nDo you want to proceed? (Y/N): Y\nOK; writing new GUID partition table (GPT) to /dev/sdd.\nThe operation has completed successfully.\n\n\n   然后格式化即可\n\nmkfs.ext4 /dev/sdd1\n\n参考链接\n\n\n\n computingforgeeks.com/how-to-extend-increase-kvm-virtual-machine-disk-size/\n\n\n\n computingforgeeks.com/resize-ext-and-xfs-root-partition-without-lvm/","index":195,"permalink":"https://honmaple.me/articles/2020/01/KVM笔记之磁盘扩容.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e磁盘扩容\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e关闭KVM虚拟机\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003evirsh shutdown vm-ubuntu-04\u003c/pre\u003e\n\n\u003ch2 id=\"heading-1.2\"\u003e扩容磁盘\u003c/h2\u003e\n\u003ch3 id=\"heading-1.2.1\"\u003e查看磁盘位置\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#75715e\"\u003e# virsh domblklist vm-ubuntu-04\u003c/span\u003e\nTarget     Source\n------------------------------------------------\nvda        /home/kvm/images/ubuntu-04.qcow2\u003c/pre\u003e\n\n\u003ch3 id=\"heading-1.2.2\"\u003e查看磁盘信息\u003c/h3\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#75715e\"\u003e# qemu-img info /home/kvm/images/ubuntu-04.qcow2\u003c/span\u003e\nimage: /home/kvm...\u003c/pre\u003e","title":"KVM笔记之磁盘扩容"},{"content":"Table of Contents\n增量镜像\n\n基础环境准备\n创建增量镜像\n创建KVM虚拟机\n\n手动创建\n使用virt-install创建\n\n测试增量镜像\n\nTODO快照与增量镜像\n参考资料\n\n\n增量镜像\n\n  增量镜像即保持一个基础的镜像不变，在此基础镜像上安装或修改相应的服务所创建的一个单独的镜像，增量镜像类似GIT，只记录当前KVM的修改记录，这样可以节省磁盘空间，快速复制虚拟机\n\n\n基础环境准备\n\n\n\n KVM基础环境\n\n\n\n 基础镜像 ubuntu-base.qcow2\n\n\n\n创建增量镜像\n\n   首先基于基础镜像 ubuntu-base.qcow2 创建一个增量镜像 ubuntu-test.qcow2\n\n\n(宿主机) # qemu-img info /home/kvm/images/ubuntu-base.qcow2\nimage: ubuntu-base.qcow2\nfile format: qcow2\nvirtual size: 4.0G (4294967296 bytes)\ndisk size: 2.4G\ncluster_size: 65536\nFormat specific information:\n    compat: 1.1\n    lazy refcounts: true\n    refcount bits: 16\n    corrupt: false\n\n(宿主机) #:/home/kvm/images# qemu-img create -b ubuntu-base.qcow2 -f qcow2 ubuntu-test.qcow2\nFormatting \u0026#39;ubuntu-test.qcow2\u0026#39;, fmt=qcow2 size=4294967296 backing_file=ubuntu-base.qcow2 cluster_size=65536 lazy_refcounts=off refcount_bits=16\n\n(宿主机) #:/home/kvm/images# qemu-img info ubuntu-test.qcow2\nimage: ubuntu-test.qcow2\nfile format: qcow2\nvirtual size: 4.0G (4294967296 bytes)\ndisk size: 196K\ncluster_size: 65536\nbacking file: ubuntu-base.qcow2\nFormat specific information:\n    compat: 1.1\n    lazy refcounts: false\n    refcount bits: 16\n    corrupt: false\n\n(宿主机) #:/home/kvm/images# du -sh *\n2.4G\tubuntu-base.qcow2\n196K\tubuntu-test.qcow2\n\n创建KVM虚拟机\n手动创建\n# 注: 我基于基础镜像创建的KVM虚拟机名称为*vm-ubuntu-base*, 请根据实际进行修改\n(宿主机) # cp /etc/libvirt/qemu/vm-ubuntu-base.xml /etc/libvirt/qemu/vm-ubuntu-test.xml\n(宿主机) # vim /etc/libvirt/qemu/vm-ubuntu-test.xml\n\n\u0026lt;domain type=\u0026#39;kvm\u0026#39;\u0026gt;\n  \u0026lt;name\u0026gt;vm-ubuntu-base\u0026lt;/name\u0026gt;                                  # 虚拟机名，必须修改，否则与基本镜像虚拟机冲突\n  \u0026lt;uuid\u0026gt;xxxx\u0026lt;/uuid\u0026gt;                                            # UUID，必须修改，否则与基本虚拟机冲突\n  ...\n  \u0026lt;devices\u0026gt;                                                                     \n     \u0026lt;emulator\u0026gt;/usr/bin/kvm-spice\u0026lt;/emulator\u0026gt;                                     \n     \u0026lt;disk type=\u0026#39;file\u0026#39; device=\u0026#39;disk\u0026#39;\u0026gt;                                            \n       \u0026lt;driver name=\u0026#39;qemu\u0026#39; type=\u0026#39;qcow2\u0026#39;/\u0026gt;                                        \n       \u0026lt;source file=\u0026#39;/home/kvm/images/ubuntu-test.qcow2\u0026#39;/\u0026gt;     # 改成增量镜像文件位置\n       \u0026lt;target dev=\u0026#39;vda\u0026#39; bus=\u0026#39;virtio\u0026#39;/\u0026gt;                                          \n       \u0026lt;address type=\u0026#39;pci\u0026#39; domain=\u0026#39;0x0000\u0026#39; bus=\u0026#39;0x00\u0026#39; slot=\u0026#39;0x05\u0026#39; function=\u0026#39;0x0\u0026#39;/\u0026gt;\n     \u0026lt;/disk\u0026gt;     \n     ...\n     \u0026lt;interface type=\u0026#39;bridge\u0026#39;\u0026gt;                                                   \n        \u0026lt;mac address=\u0026#39;52:54:00:83:5f:e6\u0026#39;/\u0026gt;                     # MAC地址，必须修改\n        \u0026lt;source bridge=\u0026#39;br0\u0026#39;/\u0026gt;                                                    \n        \u0026lt;model type=\u0026#39;virtio\u0026#39;/\u0026gt;                                                    \n        \u0026lt;address type=\u0026#39;pci\u0026#39; domain=\u0026#39;0x0000\u0026#39; bus=\u0026#39;0x00\u0026#39; slot=\u0026#39;0x03\u0026#39; function=\u0026#39;0x0\u0026#39;/\u0026gt;\n     \u0026lt;/interface\u0026gt; \n     ....\n\u0026lt;/domain\u0026gt;\n\n(宿主机) # virsh define /etc/libvirt/qemu/vm-ubuntu-test.xml\n(宿主机) # virsh start vm-ubuntu-test\n(宿主机) # virsh list\n\n使用virt-install创建\n(宿主机) # qemu-img create -b ubuntu-base.qcow2 -f qcow2 ubuntu-test01.qcow2\n(宿主机) # virt-install --name vm-ubuntu-test01 --memory 8192 --vcpus 4 --disk /home/kvm/images/ubuntu-test.qcow2 --import --virt-type kvm --os-type linux --os-variant ubuntu18.04 --network bridge=virbr0,model=virtio --graphics vnc,listen=0.0.0.0,password=foobar,port=5910 --noautoconsole --hvm\n\n测试增量镜像\n\n\n\n 进入 vm-ubuntu-test 虚拟机, 并创建一个200M的文件\n\ndd if=/dev/zero of=test.img bs=1M count=200\n\n\n\n 在宿主机上查看镜像大小\n\n2.4G\tubuntu-base.qcow2\n294M\tubuntu-test.qcow2\n\n     可以看出基础镜像大小保持不变, 增量镜像大小发生变化(为什么不是增加200M大小？)\n\n\n\n\n 进入 vm-ubuntu-base 虚拟机, 并创建一个800M的文件\n\ndd if=/dev/zero of=base.img bs=1M count=800\n\n\n\n 在宿主机上查看镜像大小\n\n3.0G\tubuntu-base.qcow2\n294M\tubuntu-test.qcow2\n\n     可以看出基础镜像大小发生变化, 增量镜像大小不变\n\n\n\nTODO快照与增量镜像\n参考资料\n\n\n\n yq.aliyun.com/articles/461356\n\n\n\n www.361way.com/snapshots-blockcommit-blockpull/3194.html","index":196,"permalink":"https://honmaple.me/articles/2020/01/KVM笔记之增量镜像.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e增量镜像\u003c/h1\u003e\n\u003cp\u003e\n  增量镜像即保持一个基础的镜像不变，在此基础镜像上安装或修改相应的服务所创建的一个单独的镜像，增量镜像类似GIT，只记录当前KVM的修改记录，这样可以节省磁盘空间，快速复制虚拟机\n\u003c/p\u003e\n\n\u003ch2 id=\"heading-1.1\"\u003e基础环境准备\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n KVM基础环境\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 基础镜像 \u003cb\u003eubuntu-base.qcow2\u003c/b\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"heading-1.2\"\u003e创建增量镜像\u003c/h2\u003e\n\u003cp\u003e\n   首先基于基础镜像 \u003cb\u003eubuntu-base.qcow2\u003c/b\u003e 创建一个增量镜像 \u003cb\u003eubuntu-test.qcow2\u003c/b\u003e\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e宿主机\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# qemu-img info /home/kvm/images/ubuntu-base.qcow2\u003c/span\u003e\nimage: ubuntu-base.qcow2...\u003c/pre\u003e","title":"KVM笔记之增量镜像"},{"content":"Table of Contents\n创建PV\n搭建仓库\n\n命名空间\nhttps验证\n用户名密码验证\n\n创建service\n创建ingress\n测试Docker仓库\n\n修改host\n更新Docker证书\n登陆仓库\n测试上传与下载\n\nFAQ\n\nx509: certificate is valid for ingress.local, not registry.k8s.cloud\nx509: certificate signed by unknown authority\n413 Request Entity Too Large\n\n参考资料\n\n\n创建PV\n\n  关于PV的创建参考 《K8S笔记之持久化存储》\n\n\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: docker-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 80Gi\n  storageClassName: local-volume\n\n搭建仓库\n\n  Docker 私有化仓库的搭建可参考官方文档, 并且将相关的配置转化为K8S所需要的yaml文件\n\n---\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: registry\n  namespace: default\n  labels:\n    k8s-app: registry\nspec:\n  replicas: 1\n  selector:\n    k8s-app: registry\n  template:\n    metadata:\n      labels:\n        k8s-app: registry\n    spec:\n      containers:\n        - name: registry\n          image: registry:2\n          ports:\n            - containerPort: 5000\n          env:\n            - name: REGISTRY_HTTP_ADDR\n              value: :5000\n            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY\n              value: /var/lib/registry\n            - name: REGISTRY_HTTP_TLS_CERTIFICATE\n              value: /certs/tls.crt\n            - name: REGISTRY_HTTP_TLS_KEY\n              value: /certs/tls.key\n            - name: REGISTRY_AUTH\n              value: htpasswd\n            - name: REGISTRY_AUTH_HTPASSWD_REALM\n              value: Registry Realm\n            - name: REGISTRY_AUTH_HTPASSWD_PATH\n              value: /auth/htpasswd\n          volumeMounts:\n            - name: registry-storage\n              mountPath: /var/lib/registry\n              subPath: registry\n            - name: registry-secret\n              mountPath: /certs\n            - name: registry-passwd\n              mountPath: /auth\n      volumes:\n        - name: registry-storage\n          persistentVolumeClaim:\n            claimName: docker-claim\n        - name: registry-secret\n          secret:\n            secretName: registry-tls-secret\n        - name: registry-passwd\n          secret:\n            secretName: registry-passwd-secret\n\n\n  需要注意的几个点\n\n\n命名空间\n\n   这里我指定的命名空间为 default， 包括前面的PV以及后续所创建的 service, secret, ingress等服务也需要指定相同的命名空间\n\n\nhttps验证\n\n   https验证所需要的ca文件命名为tls.crt, tls.key是为了后面可以方便的配置 ingress\n\n\n\n\n\n 创建ca证书与私钥\n\n# openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/tls.key -x509 -days 365 -out certs/tls.crt\nGenerating a 4096 bit RSA private key\n.......................................................................................................++\n................................................++\nwriting new private key to \u0026#39;certs/tls.key\u0026#39;\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter \u0026#39;.\u0026#39;, the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:CN\nState or Province Name (full name) []:sichuan\nLocality Name (eg, city) [Default City]:chengdu\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:software\nCommon Name (eg, your name or your server\u0026#39;s hostname) []:registry.k8s.cloud\nEmail Address []:registry@xxx.com\n\n\n     需要注意的是 Common Name 字段, 后续配置 ingress 的 host 要与该字段保持一致\n\n\n\n\n 创建 secret\n\nkubectl --namespace=default create secret tls registry-tls-secret --cert ./certs/tls.crt --key ./certs/tls.key\n\n     该密钥创建后会生成 data 下的两个文件，一个 tls.crt, 一个 tls.key, 这两个名字总是固定的，与执行命令中的文件名无关\n\n\n\n用户名密码验证\n\n   Docker仓库默认未开启账号验证，需要添加三个环境变量\n\n- name: REGISTRY_AUTH\n  value: htpasswd\n- name: REGISTRY_AUTH_HTPASSWD_REALM\n  value: Registry Realm\n- name: REGISTRY_AUTH_HTPASSWD_PATH\n  value: /auth/htpasswd\n\n\n   其中 /auth/htpasswd 将会被挂载在 secret 上\n\n\n\n\n\n 生成密码文件\n\ndocker run --entrypoint htpasswd registry:2 -Bbn username password \u0026gt; certs/htpasswd\n\n\n     或者\n\nyum install httpd\nhtpasswd -Bbn user passwd \u0026gt; certs/passwd\n\n\n\n 创建 secret\n\nkubectl --namespace=default create secret generic registry-passwd-secret --from-file=htpasswd=./certs/passwd\n\n\n创建service\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: registry\n  namespace: default\n  labels:\n    k8s-app: registry\n    kubernetes.io/name: \u0026#34;KubeRegistry\u0026#34;\nspec:\n  selector:\n    k8s-app: registry\n  ports:\n    - port: 5000\n      protocol: TCP\n\n\n  注: 我也不知道 label 中的 kubernetes.io/name 有什么作用\n\n\n创建ingress\n\n  由于该私有仓库需要对外服务, 我采用 ingress 方式\n\n---\nkind: Ingress\napiVersion: extensions/v1beta1\nmetadata:\n  name: ingress.registry\n  namespace: default\n  annotations:\n    nginx.ingress.kubernetes.io/backend-protocol: HTTPS\n    nginx.ingress.kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-passthrough: \u0026#34;true\u0026#34;\nspec:\n  tls:\n    - hosts:\n        - registry.k8s.cloud\n      secretName: registry-tls-secret\n  rules:\n    - host: registry.k8s.cloud\n      http:\n        paths:\n          - path: /\n            backend:\n              serviceName: registry\n              servicePort: 5000\n\n\n\n\n 命名空间必须与之前保持一致\n\n\n\n host 必须与之前创建证书时的 CN 保持一致\n\n\n\n测试Docker仓库\n\n修改host\n\n   由于 registry.k8s.cloud 并不是一个真实的域名，所以采用修改 /etc/hosts 方式进行测试和访问\n\necho \u0026#34;10.8.235.202 registry.k8s.cloud\u0026#34; \u0026gt;\u0026gt; /etc/hosts\n\n更新Docker证书\nmkdir -p /etc/docker/certs.d/registry.k8s.cloud\ncp certs/tls.crt /etc/docker/certs.d/registry.k8s.cloud/ca.crt\n\n   如果是不同机器，复制 certs/tls.crt 的内容到另一台机器上即可\n\n\n\n   注：不需要重启Docker\n\n\n登陆仓库\ndocker login registry.k8s.cloud\n\n\n   输入之前创建时用的用户名，密码, 一般就可以登陆成功\n\n# docker login registry.k8s.cloud\nUsername: xxxx\nPassword: \nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n\n测试上传与下载\n\n   准备任意 Dockerfile\n\n\n\n\n\n 构建本地镜像\n\ndocker build -t registry.k8s.cloud/mytest .\n\n\n\n 上传镜像\n\n# docker push registry.k8s.cloud/mytest:latest\nThe push refers to repository [registry.k8s.cloud/mytest]\n1357220cb89: Layer already exists\na965e1c532c: Pushed\nbeaee123df5: Layer already exists\n2568a15e513: Layer already exists\nbadc4d6e828: Pushed\n3c730fdba93: Pushed\n9d9e1e59db0: Pushed\n9dfa0a0da3b: Pushed\nlatest: digest: sha256:c20c32ba413e6555159aa0722a866a576481fe4a177116c4919xxxxxxx2a5a size: 1995\n\n\n\n 拉取镜像\n     当镜像上传成功，可在另一台机器上测试下载\n\n# docker pull registry.k8s.cloud/mytest:latest\nlatest: Pulling from mytest\n605cebd3f31: Pull complete\nd08402297b9: Pull complete\n68c3b3bcbd0: Pull complete\n9ee925a87cc: Pull complete\nebb13422b6b: Pull complete\n59c8302ac13: Pull complete\n7149c344f10: Pull complete\n7d8abdd4c32: Pull complete\nDigest: sha256:c20c32ba1e6555159aa0722a866a576481fe4a177116419ade0708652a5a\nStatus: Downloaded newer image for registry.k8s.cloud/mytest:latest\nregistry.k8s.cloud/mytest:latest\n\n\nFAQ\n\nx509: certificate is valid for ingress.local, not registry.k8s.cloud\nError response from daemon: Get https://registry.k8s.cloud/v2/: x509: certificate is valid for ingress.local, not registry.k8s.cloud\n\n   这一般是 ingress tls 的配置问题, 比如创建 secret 时采用 generic 而不是 tls\n\n\nx509: certificate signed by unknown authority\nError response from daemon: Get https://registry.k8s.cloud/v2/: x509: certificate signed by unknown authority\n\n   这是未更新Docker证书导致的, 需要更新\n\n/etc/docker/certs.d/registry.k8s.cloud/ca.crt\n\n413 Request Entity Too Large\nerror parsing HTTP 413 response body: invalid character \u0026#39;\u0026lt;\u0026#39; looking for beginning of value: \u0026#34;\u0026lt;html\u0026gt;\\r\\n\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;413 Request Entity Too Large\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\\r\\n\u0026lt;body\u0026gt;\\r\\n\u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;413 Request Entity Too Large\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt;\\r\\n\u0026lt;hr\u0026gt;\u0026lt;center\u0026gt;nginx/1.17.7\u0026lt;/center\u0026gt;\\r\\n\u0026lt;/body\u0026gt;\\r\\n\u0026lt;/html\u0026gt;\\r\\n\u0026#34;\n\n\n   当上传镜像时遇到413, 需要更新 ingress 配置\n\nnginx.ingress.kubernetes.io/proxy-body-size: 1024m\n\n参考资料\n\n\n\n docs.docker.com/registry/deploying/\n\n\n\n www.huamo.online/2017/06/07/Kubernetes%E6%90%AD%E5%BB%BATLS%E7%A7%81%E6%9C%89docker%E4%BB%93%E5%BA%93/","index":197,"permalink":"https://honmaple.me/articles/2020/02/K8S笔记之私有仓库搭建.html","summary":"\n\u003ch1 id=\"heading-1\"\u003e创建PV\u003c/h1\u003e\n\u003cp\u003e\n  关于PV的创建参考 《K8S笔记之持久化存储》\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eapiVersion\u003c/span\u003e: v1\n\u003cspan style=\"color:#66d9ef\"\u003ekind\u003c/span\u003e: PersistentVolumeClaim\n\u003cspan style=\"color:#66d9ef\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#66d9ef\"\u003ename\u003c/span\u003e: docker-claim\n\u003cspan style=\"color:#66d9ef\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#66d9ef\"\u003eaccessModes\u003c/span\u003e:\n    - ReadWriteOnce\n  \u003cspan style=\"color:#66d9ef\"\u003eresources\u003c/span\u003e:\n    \u003cspan style=\"color:#66d9ef\"\u003erequests\u003c/span\u003e:\n      \u003cspan style=\"color:#66d9ef\"\u003estorage\u003c/span\u003e: 80Gi\n  \u003cspan style=\"color:#66d9ef\"\u003estorageClassName\u003c/span\u003e: local-volume\u003c/pre\u003e\n\n\u003ch1 id=\"heading-2\"\u003e搭建仓库\u003c/h1\u003e\n\u003cp\u003e\n  Docker 私有化仓库的搭建可参考官方文档, 并且将相关的配置转化为K8S所需要的yaml文件\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e---\n\u003cspan style=\"color:#66d9ef\"\u003eapiVersion\u003c/span\u003e: v1\n\u003cspan style=\"color:#66d9ef\"\u003ekind\u003c/span\u003e: ReplicationController\n\u003cspan style=\"color:#66d9ef\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#66d9ef\"\u003ename\u003c/span\u003e: registry\n  \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e: default\n  \u003cspan style=\"color:#66d9ef\"\u003elabels\u003c/span\u003e:\n    \u003cspan style=\"color:#66d9ef\"\u003ek8s...\u003c/span\u003e\u003c/pre\u003e","title":"K8S笔记之私有仓库搭建"},{"content":"Table of Contents\n创建账户密码\n修改ingress\nAuthorization请求头传递到后端server\n参考资料\n\n\n创建账户密码\n\n\n\n 生成密码\n\nPASSWORD=$(base64 \u0026lt; /dev/urandom | head -c8); echo \u0026#34;$PASSWORD\u0026#34;\n\n\n 生成hash值\n\ndocker run --rm --entrypoint htpasswd httpd:2 -Bbn username password \u0026gt;\u0026gt; auth\n\n\n修改ingress\nnginx.ingress.kubernetes.io/auth-realm=\u0026#39;Authentication Required \u0026#39;\nnginx.ingress.kubernetes.io/auth-type=basic\nnginx.ingress.kubernetes.io/auth-secret=basic-auth\nnginx.ingress.kubernetes.io/auth-secret-type=auth-map\n\nAuthorization请求头传递到后端server\n\n   现有一个 django server 需要根据不同用户名配置不同的权限, django 可以通过 request.META.get(\u0026#34;HTTP_AUTHORIZATION\u0026#34;) 获取basic auth 时的用户信息, 但默认 Authorization 请求头无法直接传递到后端, 所以需要配置\n\nnginx.ingress.kubernetes.io/configuration-snippet: |\n    proxy_set_header Authorization $http_authorization;\n    proxy_pass_header Authorization;\n\n   参考资料:\n\n\n\n\n serverfault.com/questions/977426/how-to-keep-authentication-header-with-redirect-using-nginx-ingress-annotations\n\n\n\n github.com/kubernetes/dashboard/issues/5105\n\n\n\n参考资料\n\n\n\n https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/\n\n\n\n https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#authentication","index":198,"permalink":"https://honmaple.me/articles/2021/07/K8S笔记之ingress增加验证.html","summary":"\n\u003ch2 id=\"heading-1\"\u003e创建账户密码\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 生成密码\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ePASSWORD\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003ebase64 \u0026lt; /dev/urandom | head -c8\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e; echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$PASSWORD\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n 生成hash值\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003edocker run --rm --entrypoint htpasswd httpd:2 -Bbn username password \u0026gt;\u0026gt; auth\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"heading-2\"\u003e修改ingress\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003enginx.ingress.kubernetes.io/auth...\u003c/pre\u003e","title":"K8S笔记之ingress增加验证"},{"content":"I have not loved the world, nor the world me;I have not flatter\u0026#39;d its rank breath, nor bow\u0026#39;dTo its idolatries a patient knee, --Nor coin\u0026#39;d my cheek to smiles, -- nor cried aloudIn worship of an echo; in the crowdThey could not deem me one of such; I stoodAmong them, but not of them; in a shroudOf thoughts which were not their thoughts, and still could,Had I not filed my mind, which thus itself subdued.I have not loved the world, nor the world me, --But let us part fair foes; I do believe,Though I have found them not, that there may beWords which are things, -- hopes which will not deceive,And virtues which are merciful, nor weaveSnares for the failing: I would also deemO\u0026#39;er others\u0026#39; griefs that some sincerely grieve;That two, or one, are almost what they seem, --That goodness is no name, and happiness no dream.--George · Gordon · Byron\n\n\n\n\n\n\n我从未爱过这世界，  它对我也一样；  我没有阿谀过它腐臭的气息，  也不曾忍从地屈膝，  膜拜它的各种偶像；  我没有在脸上堆着笑，  更没有高声叫嚷着，  崇拜一种回音；  纷纭的世人不能把我看作他们一伙；  我站在人群中却不属于他们；  也没有把头脑放进  那并非而又算作他们的思想的尸衣中，  一齐列队行进，  因此才被压抑而至温顺。  我没有爱过这世界，它对我也一样;但是，尽管彼此敌视，  让我们方方便便分手吧；  虽然我自己不曾看到，  在这世上我相信或许会有不骗人的希望，  真实的语言，  也许还有些美德，  它们的确怀有仁心，  并不给失败的人安排陷阱；  我还这样想：  当人们伤心的时候，  有些人真的在伤心，  有那么一两个，几乎就是所表现的那样——  我还认为：  善不只是空话，幸福并不只是梦想  ——拜伦《I Have Not Loved the World》","index":199,"permalink":"https://honmaple.me/articles/2015/12/I Have Not Loved the World.html","summary":"\n\u003cblockquote\u003e\n\u003cdiv style=\"text-align:center;\"\u003e\n\u003cp\u003e\nI have not loved the world, nor the world me;\u003cbr/\u003eI have not flatter\u0026#39;d its rank breath, nor bow\u0026#39;d\u003cbr/\u003eTo its idolatries a patient knee, --\u003cbr/\u003eNor coin\u0026#39;d my cheek to...\u003c/p\u003e\u003c/div\u003e\u003c/blockquote\u003e","title":"I Have Not Loved the World"},{"content":"Table of Contents\nGNS3 VM导入\n禁用广告与数据采集\n启用basic auth\n\n\nGNS3 VM导入\nvirt-install  --name gns3  --memory 8192  --vcpus 4  --disk /home/kvm/GNS3/GNS3VM-disk001.qcow2  --disk /home/kvm/GNS3/GNS3VM-disk002.qcow2  --import --virt-type kvm --os-type linux --os-variant ubuntu18.04 --network default --graphics vnc,listen=0.0.0.0,password=foobar,port=5910 --noautoconsole --hvm\n\n禁用广告与数据采集\n\n\n\n 禁用错误报告\n\n\n\n     找到 ~/.config/GNS3/2.2/gns3_server.conf, 在 [Server] 块中添加\n\n[Server]\n...\nreport_errors = False\n\n\n\n 禁用google分析\n\n\n\n     找到 /usr/local/lib/python3.8/dist-packages/gns3server/static/web-ui/index.html , 注释google分析相关代码\n\n\u0026lt;!-- \u0026lt;script async=\u0026#34;\u0026#34; src=\u0026#34;https://www.googletagmanager.com/gtag/js?id=G-5D6FZL9923\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt;\n\u0026lt;script\u0026gt;\n  window.dataLayer = window.dataLayer || [];\n  function gtag() {\n  dataLayer.push(arguments);\n  }\n  gtag(\u0026#39;js\u0026#39;, new Date());\n\n  // gtag(\u0026#39;config\u0026#39;, \u0026#39;G-5D6FZL9923\u0026#39;);\n\u0026lt;/script\u0026gt;\n\n\n\n 禁用错误跟踪\n\n\n\n     找到 /usr/local/lib/python3.8/dist-packages/gns3server/static/web-ui 目录下的 main.xxxx.js\n\nsudo sed -i \u0026#39;s%https://d8be3a98530f49eb90968ff396db326c@o19455.ingest.sentry.io/842726%%g\u0026#39; main.2f0314a517dded67879c.js\n\n\n\n 禁用广告\n\n\n\n     同样找到 /usr/local/lib/python3.8/dist-packages/gns3server/static/web-ui 目录下的 main.xxxx.js\n\nsudo sed -i \u0026#39;s%https://servedbyadbutler.com/adserve/;ID=165803;size=0x0;setID=371476;type=json;%%g\u0026#39; main.2f0314a517dded67879c.js\n\n\n\n   然后重启服务即可 sudo systemctl restart gns3\n\n\n启用basic auth\n\n     找到 ~/.config/GNS3/2.2/gns3_server.conf, 在 [Server] 块中添加\n\n[Server]\n...\nauth = True\nuser = gns3\npassword = gns3","index":200,"permalink":"https://honmaple.me/articles/2021/05/GNS3笔记.html","summary":"\n\u003ch2 id=\"heading-1\"\u003eGNS3 VM导入\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003evirt-install  --name gns3  --memory \u003cspan style=\"color:#ae81ff\"\u003e8192\u003c/span\u003e  --vcpus \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e  --disk /home/kvm/GNS3/GNS3VM-disk001.qcow2  --disk /home/kvm/GNS3/GNS3VM-disk002.qcow2  --import --virt-type kvm --os-type linux --os-variant ubuntu18.04 --network...\u003c/pre\u003e","title":"GNS3笔记"},{"content":"Table of Contents\n使用nginx重定向uri\n使用uri获取对应非302响应\n使用url_map复制并alias路由\n演示效果\n\n\n\n\nFlask的多语言国际化可以使用Flask-Babel插件，在此不再细述，但对于所谓的多语言站点(即形如example.com/zh/uri、example.com/en/uri或者zh.example.com、en.example.com)文档上却未作细述\n\n\n\n有一个 Flask URL Processors 需要对所有的uri都额外增加一个lang_code的前缀，路由数较少时没什么问题，但路由数较多时太过麻烦\n\n\n\n\n实现example.com/en/uri可以有多种方式，除了使用Flask URL Processors中介绍的外，还可以\n\n\n使用nginx重定向uri\n\n   这应该是各种方式里最简单的一种\n\nlocation ~ ^/en/ {\n    rewrite ^/en/(.*)$ /$1 last;\n}\nlocation = /en {\n    rewrite ^/(.*)$ /index last;\n}\n\n使用uri获取对应非302响应\n\n   即增加一个url为/en/\u0026lt;path:uri\u0026gt;的路由，在此路由func中，根据\u0026lt;path:uri\u0026gt;信息获取已注册路由的view_function，不使用重定向，而是直接调用view_function返回实际响应\n\n\n# https://stackoverflow.com/questions/38488134/get-the-flask-view-function-that-matches-a-url\ndef get_view_function(url, method=\u0026#39;GET\u0026#39;):\n    adapter = current_app.url_map.bind(\u0026#39;localhost\u0026#39;)\n    try:\n        match = adapter.match(url, method=method)\n    except RequestRedirect as e:\n        # recursively match redirects\n        return get_view_function(e.new_url, method)\n    except (MethodNotAllowed, NotFound):\n        # no match\n        return None\n\n    try:\n        # return the view function and arguments\n        return current_app.view_functions[match[0]], match[1]\n    except KeyError:\n        # no view is associated with the endpoint\n        return None\n\n\n   提高查找对应view-function的性能，增加缓存到内存中\n\nFUNCTION = dict()\n\ndef view_function_cache(func):\n    @wraps(func)\n    def _view_function(url, method=\u0026#39;GET\u0026#39;):\n        # 避免故意访问\n        if len(FUNCTION) \u0026gt; 100:\n            for k, v in FUNCTION.items():\n                if v is None:\n                    FUNCTION.pop(k)\n\n        key = method + url\n        key = str(hashlib.md5(key.encode(\u0026#34;UTF-8\u0026#34;)).hexdigest())\n        if key in FUNCTION:\n            return FUNCTION[key]\n        FUNCTION[key] = func(url, method)\n        return FUNCTION[key]\n\n    return _view_function\n\n\n   这样就可以定义/en/\u0026lt;uri\u0026gt;实际的view_function\n\ndef redirect_en(uri):\n    view_function = get_view_function(\n        \u0026#34;/\u0026#34; + uri,\n        request.method,\n    )\n    if view_function is None:\n        abort(404)\n    # 注：因为我使用Flask-Babel是根据accept_language来区别不同语言\n    request.environ[\u0026#34;HTTP_ACCEPT_LANGUAGE\u0026#34;] = \u0026#34;en-US,en;q=0.5\u0026#34;\n    return view_function[0](**view_function[1])\n\n使用url_map复制并alias路由\n\n   原理同Flask URL Processors ，为所有的路由都额外增加/en前缀，并在before_request中匹配到以/en开头的请求就修改对应accept_language信息\n\n\n@app.before_request\ndef before_request():\n    if request.path.startswith(\u0026#34;/en/\u0026#34;):\n        request.environ[\u0026#34;HTTP_ACCEPT_LANGUAGE\u0026#34;] = \u0026#34;en-US,en;q=0.5\u0026#34;\n\nurl_map = list(app.url_map.iter_rules())\nfor rule in url_map:\n    app.add_url_rule(\u0026#34;/en\u0026#34; + rule.rule, rule.endpoint, alias=True)\n\n\n   咦，感觉这种方式更简单一些，但最好还是能够对一些特殊的路由比如: static, admin, subdomain等进行特殊处理\n\n\n演示效果\n\n   切换成English","index":201,"permalink":"https://honmaple.me/articles/2019/01/Flask支持多语言站点.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\nFlask的多语言国际化可以使用\u003cb\u003eFlask-Babel\u003c/b\u003e插件，在此不再细述，但对于所谓的多语言站点(即形如\u003cb\u003eexample.com/zh/uri、example.com/en/uri\u003c/b\u003e或者\u003cb\u003ezh.example.com、en.example.com\u003c/b\u003e)文档上却未作细述\n\u003c/p\u003e\n\n\u003cp\u003e\n有一个 \u003ca href=\"https://flask.palletsprojects.com/en/1.1.x/patterns/urlprocessors/\"\u003eFlask URL Processors\u003c/a\u003e 需要对所有的\u003cb\u003euri\u003c/b\u003e都额外增加一个\u003cb\u003elang_code\u003c/b\u003e的前缀，路由数较少时没什么问题，但路由数较多时太过麻烦\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n实现...\u003c/p\u003e","title":"Flask支持多语言站点"},{"content":"Table of Contents\n安装\n\n使用quelpa\n克隆到本地\n\n配置\n\n基础配置\n自定义模版\n自定义更新\n\n相关文章\n\n\n\n\n一个简单的插件，可以在文件创建时自动插入文件头，或者文件更新时自动更新文件头信息，虽然已经用了好几年，这次把相关代码提取并精简一下做成了插件 maple-header\n\n\n\n安装\n使用quelpa\n(use-package maple-header\n  :quelpa (:fetcher github :repo \u0026#34;honmaple/emacs-maple-header\u0026#34;)\n  :hook (after-init . maple-header-mode))\n克隆到本地\ngit clone https://github.com/honmaple/emacs-maple-header --depth=1 ~/.emacs/site-lisp/maple-header\n\n配置\n(use-package maple-header\n  :ensure nil\n  :hook (after-init . maple-header-mode))\n基础配置\n;; 更新文件头时搜索的文件函数, 9代表只会搜索前9行\n(setq maple-header:lines 9)\n;; 创建新文件时是否自动插入文件头信息\n(setq maple-header:auto-insert t)\n;; 更新文件时是否自动更新文件头信息\n(setq maple-header:auto-update t)\n自定义模版\n\n   比如我要自定义Python文件的文件头\n\n(add-to-list \u0026#39;maple-header:auto-insert-alist\n             \u0026#39;((python-mode . \u0026#34;Python program\u0026#34;) nil\n               \u0026#34;#!/usr/bin/env python\\n\u0026#34;\n               \u0026#34;# -*- coding: utf-8 -*-\\n\u0026#34;))\n自定义更新\n\n   目前内置了 filename, email, modify 三个字段, 可以通过调用 maple-header:update-xxx 手动更新指定的字段, 如果需要增加新的或者覆盖原字段,可以使用\n\n(add-to-list \u0026#39;maple-header:auto-update-alist \u0026#39;(author . custom-update-author))\n\n(defun custom-update-author(\u0026amp;optional current-line)\n  (interactive)\n  (maple-header:update-action\n   \u0026#34;.*\\\\(Author:\\\\)\\\\(.*\\\\)\u0026#34;\n   user-full-name current-line))\n\n   使用 maple-header:update 会更新所有字段(包括：filename，email，modify，author), 如果只需要更新部分，需要修改为\n\n(setq maple-header:auto-update-alist\n      \u0026#39;((filename . maple-header:update-filename)\n        (modify . maple-header:update-modify)))\n\n相关文章\n\n\n\n emacs自动添加文件头\n\n\n\n emacs自动更新文件头","index":202,"permalink":"https://honmaple.me/articles/2021/10/Emacs自动插入更新文件头——maple-header.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n一个简单的插件，可以在文件创建时自动插入文件头，或者文件更新时自动更新文件头信息，虽然已经用了好几年，这次把相关代码提取并精简一下做成了插件 \u003ca href=\"https://github.com/honmaple/emacs-maple-header\"\u003emaple-header\u003c/a\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003e安装\u003c/h1\u003e\n\u003ch2 id=\"heading-1.1\"\u003e使用quelpa\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(use-package maple-header\n  :quelpa (:fetcher github :repo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ehonmaple/emacs-maple-header\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n  :hook (after-init \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e maple-header-mode))\u003c/pre\u003e\n\u003ch2 id=\"heading-1.2\"\u003e克隆到本地\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003egit clone https://github.com/honmaple...\u003c/pre\u003e","title":"Emacs自动插入更新文件头——maple-header"},{"content":"更新时间\n备注\n\n\n\n2023-02-26\n增加更多判断逻辑, 比如上一行是列表，当前行也是列表，则按正常缩进计算\n\n\n\n\n一直以来 yaml-mode 都有一个问题，在使用 (indent-region (point-min) (point-max)) 时已经格式好的内容总是会得到错误的缩进，比如一个简单的配置\n\ntest1: \u0026#34;val\u0026#34;\ntest2:\n  - \u0026#34;val1\u0026#34;\n  - \u0026#34;val2\u0026#34;\ntest3:\n  test4: \u0026#34;val4\u0026#34;\n\n在调用 indent-regin 后就会变成\n\ntest1: \u0026#34;val\u0026#34;\ntest2:\n  - \u0026#34;val1\u0026#34;\n  - \u0026#34;val2\u0026#34;\n  test3:\n    test4: \u0026#34;val4\u0026#34;\n\n而我又总是手痒，写好的配置文件总是会忍不住 indent-region 一番，结果本来正确的格式立马变得各种乱七八糟，当初为了解决这个问题，还专门为 yaml-mode 激活了 lsp-mode, 并且使用 lsp-format-buffer 来进行处理。\n\n\n\n本来一切都还正常，但最近发现了另外一个问题，如果在 org-mode 中插入 yaml 的代码片段，调用 indent-region 还是还有之前的问题, org-mode 中又无法直接调用 lsp-format-buffer, 所以专门研究了一下 yaml-mode\n\n\n\n发现 yaml-mode 只是定义了 indent-line-function 变量，没有定义 indent-region-function, 导致调用 indent-region 时其实是逐行调用 yaml-indent-line, 这里面有一个计算当前缩进的 yaml-compute-indentation 函数，计算方式有些简单粗暴，如果上一行是一个 hash key, 当前行的缩进就是上一行的缩进加 yaml-indent-offset 的值, 这里并没有判断当前行是新建行还是已经有相关内容，如果是新建行那么缩进就是对的，如果是已有的内容就是错的，所以我修改了这一部分逻辑，如果是 已有内容并且当前行的缩进小于上一行 则不进行处理, 比如:\n\n  - \u0026#34;val2\u0026#34;\ntest3:\n\n虽然增加的判断逻辑很简单，但至少在使用 indent-region 时已经格式好的内容就不会出现混乱的情况了, 也不用专门为 yaml 文件激活一个 lsp 进程。\n\n\n\n目前处理的方式还是采用 advice + letf 形式，否则需要修改很多内容，有兴趣的同道可以参考一下\n\n(defun maple/yaml-compute-indentation()\n  (let ((ci (current-indentation))\n        (cm (looking-at yaml-hash-key-re))\n        (cl (looking-at \u0026#34;^\\s*-\\s+.*$\u0026#34;)))\n    (save-excursion\n      (beginning-of-line)\n      (if (looking-at yaml-document-delimiter-re) 0\n        (forward-line -1)\n        (while (and (looking-at yaml-blank-line-re)\n                    (\u0026gt; (point) (point-min)))\n          (forward-line -1))\n        (let ((li (current-indentation))\n              (ll (looking-at \u0026#34;^\\s*-\\s+.*$\u0026#34;)))\n          ;; 如果上一行的缩进大于当前行, 上一行是列表，当前行也是是列表 - 正常缩进\n          ;; 如果上一行的缩进大于当前行, 上一行和当前行有一个不是列表 - 原有缩进\n          ;; 如果上一行的缩进等于当前行, 上一行是字典，当前行是列表 - 正常缩进\n          ;; 如果上一行的缩进等于当前行, 上一行是字典，当前行是不是列表 - 原有缩进\n          ;; 如果上一行的缩进小于当前行, 上一行是字典 - 正常缩进\n          ;; 如果上一行的缩进小于当前行, 上一行是列表，当前行也是列表 - 正常缩进\n          ;; 如果上一行的缩进小于当前行, 上一行是列表，当前行是字典 - 错误/正常缩进\n          (if (or (and (\u0026gt; li ci) (or (not cl) (not ll))) (and (= li ci) cm (not ll))) ci\n            (+ li\n               (if (looking-at yaml-nested-map-re) yaml-indent-offset 0)\n               (if (looking-at yaml-nested-sequence-re) yaml-indent-offset 0)\n               (if (looking-at yaml-block-literal-re) yaml-indent-offset 0))))))))\n\n(defun maple/yaml-indent-region(func \u0026amp;rest args)\n  (if (derived-mode-p \u0026#39;yaml-mode)\n      (letf (((symbol-function \u0026#39;yaml-compute-indentation) \u0026#39;maple/yaml-compute-indentation))\n        (apply func args))\n    (apply func args)))\n\n(advice-add \u0026#39;indent-region :around \u0026#39;maple/yaml-indent-region)","index":203,"permalink":"https://honmaple.me/articles/2023/02/Emacs笔记之修复yaml-mode的格式化问题.html","summary":"\n\u003ctable\u003e\n\u003ctr\u003e\n\u003cth\u003e更新时间\u003c/th\u003e\n\u003cth\u003e备注\u003c/th\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e2023-02-26\u003c/td\u003e\n\u003ctd\u003e增加更多判断逻辑, 比如上一行是列表，当前行也是列表，则按正常缩进计算\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\n一直以来 \u003cb\u003eyaml-mode\u003c/b\u003e 都有一个问题，在使用 \u003ccode\u003e(indent-region (point-min) (point-max))\u003c/code\u003e 时已经格式好的内容总是会得到错误的缩进，比如一个简单的配置\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e\u003cspan style=\"color:#66d9ef\"\u003etest1\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;val\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003etest2\u003c/span\u003e:\n  - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;val1\u0026#34;\u003c/span\u003e\n  - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;val2\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003etest3\u003c/span\u003e:\n  \u003cspan style=\"color:#66d9ef\"\u003etest4\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;...\u003c/span\u003e\u003c/pre\u003e","title":"Emacs笔记之修复yaml-mode的格式化问题"},{"content":"在使用 evil-ex，也就是冒号+命令时，有一个非常有趣的功能，输入冒号后，minibuffer 会显示上一次执行的命令，比如 :wq, 确认可以直接执行这个命令，但是输入任意字符，就会把原先的 wq 直接覆盖，接收新的命令输入\n\n\n\n\n我觉得这是一个非常有趣且有用的功能，像 read-string 函数，如果我想要一个默认的输入，可以直接使用\n\n(let ((input (read-string \u0026#34;prompt: \u0026#34; \u0026#34;默认内容\u0026#34;)))\n  (message input))\n\n但我想覆盖这个默认, 则需要先把 默认内容 删除，再输入我想要的字符, 如果不想先删除默认再输入，还可以使用\n\n(let ((input (read-string \u0026#34;prompt: \u0026#34; nil nil \u0026#34;默认内容\u0026#34;)))\n  (message input))\n\n但是这样的话我无法看到默认的内容，当然，也许可以把默认内容追加到 prompt 里，我认为这样不太好看，不是吗\n\n(let* ((default \u0026#34;默认内容\u0026#34;)\n       (input (read-string (format \u0026#34;prompt (default %s): \u0026#34; default) nil nil default)))\n  (message input))\n\n\nevil-ex 提示我一个新的解决方式, 通过查看 evil-ex 源码，可以发现它是使用 minibuffer-with-setup-hook 和 after-change-functions 在minibuffer里插入新内容时先清理默认内容, 再插入新内容, 我简化了相关代码\n\n(let ((input (minibuffer-with-setup-hook \u0026#39;maple-input-setup\n               (read-string \u0026#34;prompt: \u0026#34; (propertize \u0026#34;默认内容\u0026#34; \u0026#39;face \u0026#39;shadow)))))\n  (message input))\n\n(defun maple-input-setup()\n  (add-hook \u0026#39;after-change-functions \u0026#39;maple-input-update nil t))\n\n(defun maple-input-update(\u0026amp;optional beg end len string)\n  (let ((string (buffer-substring-no-properties beg end)))\n    (delete-minibuffer-contents)\n    (insert string)\n    (remove-hook \u0026#39;after-change-functions \u0026#39;maple-input-update t)))\n\n\nOK, 就这样","index":204,"permalink":"https://honmaple.me/articles/2021/11/Emacs笔记之minibuffer默认输入.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n在使用 \u003cb\u003eevil-ex\u003c/b\u003e，也就是冒号+命令时，有一个非常有趣的功能，输入冒号后，\u003cb\u003eminibuffer\u003c/b\u003e 会显示上一次执行的命令，比如 \u003ccode\u003e:wq\u003c/code\u003e, 确认可以直接执行这个命令，但是输入任意字符，就会把原先的 \u003ccode\u003ewq\u003c/code\u003e 直接覆盖，接收新的命令输入\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n我觉得这是一个非常有趣且有用的功能，像 \u003ccode\u003eread-string\u003c/code\u003e 函数，如果我想要一个默认的输入，可以直接使用\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(let ((input (\u003cspan style=\"color:#a6e22e\"\u003eread-string\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eprompt: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e默认内容\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)))\n  (\u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e input))\u003c/pre\u003e\n\u003cp\u003e\n但我想覆盖这个默认...\u003c/p\u003e","title":"Emacs笔记之minibuffer默认输入"},{"content":"在使用Emacs时，会有很多依赖，比如:\n\n\n\n\n Python依赖于flake8，isort，python-language-server等\n\n\n\n Golang依赖于golang.org/x/tools/cmd/gopls，github.com/haya14busa/gopkgs/cmd/gopkgs等\n\n\n\n\n想要安装这些依赖，必须手动进行安装，use-package用户可使用ensure-system-package，但非常不幸的是，这些依赖很大程度上会污染我的电脑环境，毕竟像python-language-server，flake8这类的package，我除了在Emacs里会用到，平时根本用不到（除非同时使用Emacs和其它编辑器或IDE）\n\n\n\n所以，我写了一个maple-env用来实现Emacs依赖环境隔离，使用方式:\n\n\n\n\n\n 安装\n\ngit clone https://github.com/honmaple/emacs-maple-env ~/.emacs/site-lisp/maple-env\n\n\n 配置\n\n(use-package maple-env\n  :ensure nil\n  :hook (after-init . maple-env-mode)\n  :config\n  (setq maple-env:python-packages\n        \u0026#39;(\u0026#34;yapf\u0026#34; \u0026#34;flake8\u0026#34; \u0026#34;isort\u0026#34; \u0026#34;python-language-server\u0026#34;)\n        maple-env:golang-packages\n        \u0026#39;(\u0026#34;github.com/rogpeppe/godef\u0026#34;\n          \u0026#34;github.com/golang/lint/golint\u0026#34;\n          \u0026#34;github.com/haya14busa/gopkgs/cmd/gopkgs\u0026#34;\n          \u0026#34;golang.org/x/tools/cmd/gopls\u0026#34;)\n        maple-env:npm-packages\n        \u0026#39;(\u0026#34;js-beautify\u0026#34;))\n  ;; 手动调用(maple-env:init)以安装依赖环境\n  )\n\n\n更多自定义详见customize-group maple-env","index":205,"permalink":"https://honmaple.me/articles/2019/07/Emacs环境隔离之——maple-env.html","summary":"\n\u003cp\u003e\n在使用Emacs时，会有很多依赖，比如:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n Python依赖于\u003ccode\u003eflake8\u003c/code\u003e，\u003ccode\u003eisort\u003c/code\u003e，\u003ccode\u003epython-language-server\u003c/code\u003e等\n\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\n Golang依赖于\u003ccode\u003egolang.org/x/tools/cmd/gopls\u003c/code\u003e，\u003ccode\u003egithub.com/haya14busa/gopkgs/cmd/gopkgs\u003c/code\u003e等\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n想要安装这些依赖，必须手动进行安装，\u003cb\u003euse-package\u003c/b\u003e用户可使用\u003cb\u003eensure-system-package\u003c/b\u003e，但非常不幸的是，这些依赖很大程度上会污染我的电脑环境，毕竟像\u003ccode\u003epython...\u003c/code\u003e\u003c/p\u003e","title":"Emacs环境隔离之——maple-env"},{"content":"闲着没事又造了一个轮子，:smile:\n\n\n\nmaple-explorer 是一个用于快速创建类似neotree文件浏览，或者类似maple-imenu的变量函数浏览的侧边栏的插件，让每个人都能写一个属于自己的侧边栏\n\n\n\nemacs-maple-explorer\n\n\n\n\n\n\n 快速创建一个侧边栏: 只需要定义一个maple-explorer-NAME-list的函数，并且返回一个列表\n\n(list\n :name name\n :value value\n :face face\n :click click\n :status \u0026#39;close ;; or \u0026#39;open\n :children \u0026#39;((child1 child2 ...))\n\n  其中child1，child2格式与父列表格式一致，child1中也可以嵌套下一组children，比如我定义一个名为aaa的list的函数:\n\n(defun maple-explorer-aaa-list(\u0026amp;optional isroot)\n  \u0026#34;Get recentf file list ISROOT mean first call.\u0026#34;\n  (list\n   :name \u0026#34;aaa\u0026#34;\n   :value \u0026#34;aaa\u0026#34;\n   :face \u0026#39;font-lock-constant-face\n   :click \u0026#39;maple-explorer-fold\n   :status \u0026#39;open\n   :children\n   (list\n    (list :name \u0026#34;aaa_child1\u0026#34;\n          :face \u0026#39;font-lock-keyword-face\n          :click (lambda() (interactive) (message \u0026#34;bbb\u0026#34;)))\n    (list :name \u0026#34;aaa_child2\u0026#34;\n          :face \u0026#39;font-lock-comment-face\n          :click (lambda() (interactive) (message \u0026#34;aaaa\u0026#34;))))))\n\n  定义好后只要使用 (maple-explorer-define aaa) 就能快速创建一个maple-explorer-aaa的函数，使用它就能打开一个侧边栏，效果是这样的\n\n\n\n  \n\n  \n\n\n\n\n\n 自定义内容显示: maple-explorer提供了一个maple-explorer-NAME-name-function的变量，可用于自定义内容的显示，比如对于一个文件列表，我可以增加自定义图标\n\n(defun maple-explorer-icon (str icon)\n  \u0026#34;The ICON of maple-explorer STR.\u0026#34;\n  (format \u0026#34;%s %s\u0026#34; (propertize \u0026#34;\\t\u0026#34; \u0026#39;display icon) str))\n\n(defun maple-explorer-icon-file-name(info)\n  \u0026#34;Custom maple-explorer-file INFO icon name.\u0026#34;\n  (let ((name  (plist-get info :name))\n        (value (plist-get info :value)))\n    (plist-put info :indent 5)\n    (cond ((or (string= name \u0026#34;.\u0026#34;) (string= name \u0026#34;..\u0026#34;))\n           (maple-explorer-icon name (all-the-icons-faicon \u0026#34;folder\u0026#34;)))\n          ((file-directory-p value)\n           (maple-explorer-icon\n            name\n            (if (maple-explorer--is-open info)\n                (all-the-icons-faicon \u0026#34;folder-open\u0026#34;)\n              (all-the-icons-faicon \u0026#34;folder\u0026#34;))))\n          (t (maple-explorer-icon name (all-the-icons-icon-for-file value))))))\n\n(setq maple-explorer-file-name-function \u0026#39;maple-explorer-icon-file-name)\n\n  自定义之前是这样的\n\n\n\n  \n\n  \n\n  自定义之后是这样的\n\n\n\n  \n\n  \n\n\n\n\n 更多信息\n  maple-explorer目前已实现了\n\nmaple-explorer-file      ;; 文件浏览\nmaple-explorer-imenu     ;; 函数变量名浏览\nmaple-explorer-buffer    ;; 已打开buffer浏览\nmaple-explorer-recentf   ;; 最近文件浏览\nmaple-explorer-project   ;; 已打开的项目浏览\n\n  欢迎各位emacs同道测试","index":206,"permalink":"https://honmaple.me/articles/2019/11/Emacs快速创建侧边栏——maple-explorer.html","summary":"\n\u003cp\u003e\n闲着没事又造了一个轮子，:smile:\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n\u003cb\u003emaple-explorer\u003c/b\u003e 是一个用于快速创建类似neotree文件浏览，或者类似maple-imenu的变量函数浏览的侧边栏的插件，让每个人都能写一个属于自己的侧边栏\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca href=\"https://github.com/honmaple/emacs-maple-explorer\"\u003eemacs-maple-explorer\u003c/a\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\n 快速创建一个侧边栏: 只需要定义一个\u003ccode\u003emaple-explorer-NAME-list\u003c/code\u003e的函数，并且返回一个列表\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e\n :name name\n :value value\n :face face\n :click click\n :status \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;close\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e;; or \u0026#39;open\u003c/span\u003e\n :children \u003cspan style=\"color:#f92672\"\u003e\u0026#39;...\u003c/span\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e","title":"Emacs快速创建侧边栏——maple-explorer"},{"content":"之前一直使用quickrun来执行一些代码片段，但quickrun有一个问题就是无法输入，比如python代码\n\na = input(\u0026#34;aaaaa: \u0026#34;)\nprint(a)\n\n需要建立一个qrinput的文件，太过麻烦，所以我平时测试一些需要输入的python代码时会使用\n\n\n(defun maple/run-python ()\n  (interactive)\n  (or (python-shell-get-process) (call-interactively \u0026#39;run-python))\n  (if (use-region-p)\n      (python-shell-send-region (region-beginning) (region-end) t)\n    (python-shell-send-buffer t)))\n\n但退出python shell又需要手动输入exit()，我是一个怕麻烦的人，所以写了一个可供输入的 emacs-maple-run\n来一键执行当前buffer的代码(后面发现quickrun其实也可以通过quickrun-shell来提供实时输入，不过使用的是eshell)\n\n\n\n目前只加了python,go,lua,html的执行命令，自定义只需要使用\n\n(add-to-list \u0026#39;maple-run:alist \u0026#39;(python-mode :command \u0026#34;python %F\u0026#34;))\n(add-to-list \u0026#39;maple-run:alist \u0026#39;(c-mode :command \u0026#34;gcc %F -o %b \u0026amp;\u0026amp; ./%b\u0026#34;))\n(add-to-list \u0026#39;maple-run:alist \u0026#39;((html-mode web-mode) :command browse-url-of-file))\n\n\n另外，maple-run也提供了一个非常方便的函数 (maple-run:script process-name program prgram-args) 来供用户自定义命令，比如:\n\n\n\n\n 打开一个bash shell\n\n(maple-run:script nil \u0026#34;bash\u0026#34;)\n\n\n 打开一个ipython shell\n\n(maple-run:script nil \u0026#34;ipython\u0026#34;)\n\n\n 执行golang代码\n\n(maple-run:script nil \u0026#34;go\u0026#34; \u0026#34;run\u0026#34; (buffer-file-name))\n\n\n 默认的执行方式\n\n(maple-run:script nil \u0026#34;bash\u0026#34; \u0026#34;-c\u0026#34; \u0026#34;python file.py\u0026#34;)","index":207,"permalink":"https://honmaple.me/articles/2019/09/Emacs下一键执行代码(可输入)——maple-run.html","summary":"\n\u003cp\u003e\n之前一直使用\u003cb\u003equickrun\u003c/b\u003e来执行一些代码片段，但\u003cb\u003equickrun\u003c/b\u003e有一个问题就是无法输入，比如python代码\n\u003c/p\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e input(\u003cspan style=\"color:#e6db74\"\u003e\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eaaaaa: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(a)\u003c/pre\u003e\n\u003cp\u003e\n需要建立一个\u003cb\u003eqrinput\u003c/b\u003e的文件，太过麻烦，所以我平时测试一些需要输入的python代码时会使用\n\u003c/p\u003e\n\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003e(defun maple/run-python ()\n  (interactive)\n  (or (python-shell-get-process) (\u003cspan style=\"color:#a6e22e\"\u003ecall-interactively\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;run-python\u003c/span\u003e))\n  (if...\u003c/pre\u003e","title":"Emacs下一键执行代码(可输入)——maple-run"},{"content":"Table of Contents\n前言\n清理\n\n列出所有镜像\n找出分层(push次数)最多的几个镜像\n删除某个镜像的untagged的数据\n\n参考资料\n\n\n\n\n尝试了几种方式, 算是找到了一个比较方便的清理docker registry的方式\n\n\n\n前言\n\n  两年前分给了 docker registry 1T的磁盘，虽然有预感磁盘空间会被用完, 没想过能够坚持这么久。\n  而且期间一直想把 registry 迁移到 harbor，也能对不同账户的权限进行分配和限制，但几百G的磁盘占用也不好迁移，所以一直被耽搁(迁移方式都准备好了 https://blog.k8s.li/docker-registry-to-harbor.html)\n\n\n清理\n列出所有镜像\nregistry garbage-collect --dry-run /etc/docker/registry/config.yml \u0026gt;\u0026gt; res.txt\n\n找出分层(push次数)最多的几个镜像\ncat res.txt | awk -F : \u0026#39;{print $1}\u0026#39; | sort | uniq -c | sort -rn -k1 | head -10\n  25871 image1\n  25649 image2\n  16815 image3\n  ...\n\n删除某个镜像的untagged的数据\n\n   注意 -u 参数, 仅删除 untagger 的数据\n\n\n\n\n dry-run\n\nREGISTRY_DATA_DIR=/var/lib/registry/docker/registry/v2 python delete_docker_registry_image.py --image image1 -u --dry-run\n\n\n 实际删除(需要先暂停registry)\n\nREGISTRY_DATA_DIR=/var/lib/registry/docker/registry/v2 python delete_docker_registry_image.py --image image1 -u\n\n\n 查看磁盘占用(恢复registry)\n\n\n\n      发现磁盘占用的大头还是这些 untagged 的数据， 仅仅处理了几个分层数量最多的镜像，一下子多了几百G的空间\n\n\n\n参考资料\n\n\n\n https://zhuanlan.zhihu.com/p/48009377\n\n\n\n https://github.com/burnettk/delete-docker-registry-image","index":208,"permalink":"https://honmaple.me/articles/2021/08/Docker笔记之registry清理.html","summary":"\n\u003cblockquote\u003e\n\u003cp\u003e\n尝试了几种方式, 算是找到了一个比较方便的清理docker registry的方式\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"heading-1\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e\n  两年前分给了 \u003cb\u003edocker registry\u003c/b\u003e 1T的磁盘，虽然有预感磁盘空间会被用完, 没想过能够坚持这么久。\n  而且期间一直想把 \u003cb\u003eregistry\u003c/b\u003e 迁移到 \u003cb\u003eharbor\u003c/b\u003e，也能对不同账户的权限进行分配和限制，但几百G的磁盘占用也不好迁移，所以一直被耽搁(迁移方式都准备好了 \u003ca href=\"https://blog.k8s.li/docker-registry-to-harbor.html\"\u003ehttps://blog.k8s.li/docker-registry-to-harbor.html\u003c/a\u003e)\n\u003c/p\u003e\n\n\u003ch1 id=\"heading-2\"\u003e清理\u003c/h1\u003e\n\u003ch2 id=\"heading-2.1\"\u003e列出所有镜像\u003c/h2\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822\"\u003eregistry garbage-collect --dry-run /etc/docker...\u003c/pre\u003e","title":"Docker笔记之registry清理"}]