<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>honmaple's blog</title><link href="http://honmaple.org/" rel="alternate"></link><link href="http://honmaple.org/feeds/all.rss.xml" rel="self"></link><id>http://honmaple.org/</id><updated>2017-07-30T00:00:00+08:00</updated><entry><title>手机与Linux桌面文件共享</title><link href="http://honmaple.org/articles/2017/07/%E6%89%8B%E6%9C%BA%E4%B8%8ELinux%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB.html" rel="alternate"></link><published>2017-07-30T00:00:00+08:00</published><updated>2017-07-30T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-30:/articles/2017/07/手机与Linux桌面文件共享.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257239671"&gt;手机共享文件到电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257239672"&gt;电脑共享文件到手机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;手机: 某米
电脑: archlinux
环境: 同一wifi下&lt;/p&gt;

&lt;h1 id="org-15014257239671"&gt;手机共享文件到电脑&lt;/h1&gt;
&lt;p&gt;最近才发现手机可以开启ftp服务对文件进行共享,直接进入文件管理器开启就行,电脑上使用

&lt;pre class="example"&gt;
  ftp target
&lt;/pre&gt;

进行连接&lt;/p&gt;

&lt;p&gt;注：&lt;b&gt;get&lt;/b&gt; 下载&lt;b&gt;put&lt;/b&gt; 上传&lt;/p&gt;


&lt;h1 id="org-15014257239672"&gt;电脑共享文件到手机&lt;/h1&gt;
&lt;p&gt;这里采用python搭建一个简单的web服务(python3)供手机下载文件

&lt;pre class="example"&gt;
  # 首先 cd 到要共享的目录
  python -m http.server --bind 0.0.0.0
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;查看本机IP

&lt;pre class="example"&gt;
  ifconfig
  # 或者
  ip addr
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;重要&lt;/b&gt;: 请确保关闭防火墙,否则手机无法连接

&lt;pre class="example"&gt;
  sudo systemctl stop iptables
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;然后手机浏览器访问&lt;b&gt;ip:8000&lt;/b&gt; 就能下载电脑端的文件了&lt;/p&gt;


&lt;p&gt;&lt;b&gt;非同一wifi环境下&lt;/b&gt; : 可以先在电脑端开启wifi热点(可以不联网),我是直接使用networkmanger进行创建的
&lt;img src="https://images.honmaple.com/images/admin/show/2017/07/150142558495491.png"/&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257239671"&gt;手机共享文件到电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257239672"&gt;电脑共享文件到手机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;手机: 某米
电脑: archlinux
环境: 同一wifi下&lt;/p&gt;

&lt;h1 id="org-15014257239671"&gt;手机共享文件到电脑&lt;/h1&gt;
&lt;p&gt;最近才发现手机可以开启ftp服务对文件进行共享,直接进入文件管理器开启就行,电脑上使用

&lt;pre class="example"&gt;
  ftp target
&lt;/pre&gt;

进行连接&lt;/p&gt;

&lt;p&gt;注：&lt;b&gt;get&lt;/b&gt; 下载&lt;b&gt;put&lt;/b&gt; 上传&lt;/p&gt;


&lt;h1 id="org-15014257239672"&gt;电脑共享文件到手机&lt;/h1&gt;
&lt;p&gt;这里采用python搭建一个简单的web服务(python3)供手机下载文件

&lt;pre class="example"&gt;
  # 首先 cd 到要共享的目录
  python -m http.server --bind 0.0.0.0
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;查看本机IP

&lt;pre class="example"&gt;
  ifconfig
  # 或者
  ip addr
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;重要&lt;/b&gt;: 请确保关闭防火墙,否则手机无法连接

&lt;pre class="example"&gt;
  sudo systemctl stop iptables
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;然后手机浏览器访问&lt;b&gt;ip:8000&lt;/b&gt; 就能下载电脑端的文件了&lt;/p&gt;


&lt;p&gt;&lt;b&gt;非同一wifi环境下&lt;/b&gt; : 可以先在电脑端开启wifi热点(可以不联网),我是直接使用networkmanger进行创建的
&lt;img src="https://images.honmaple.com/images/admin/show/2017/07/150142558495491.png"/&gt;&lt;/p&gt;</content><category term="linux"></category><category term="ftp"></category></entry><entry><title>Linux总结(草稿)</title><link href="http://honmaple.org/articles/2017/07/Linux%E4%BC%AA%E6%80%BB%E7%BB%93.html" rel="alternate"></link><published>2017-07-12T00:00:00+08:00</published><updated>2017-07-12T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-12:/articles/2017/07/Linux伪总结.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257227636"&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257227638"&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257227638"&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014257227636"&gt;Linux发展历史&lt;/h1&gt;
&lt;p&gt;Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展&lt;/p&gt;

&lt;h1 id="org-15014257227638"&gt;Linux的最小组成&lt;/h1&gt;
&lt;p&gt;Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。&lt;/p&gt;

&lt;p&gt;语言:一般有头文件与库文件,头文件为实现,库文件为声明&lt;/p&gt;


&lt;h1 id="org-15014257227638"&gt;Linux的安装与启动&lt;/h1&gt;
&lt;p&gt;当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
然后运行/etc/rc.d/init.d中运行级别的启动脚本。&lt;/p&gt;

&lt;p&gt;分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便&lt;/p&gt;

&lt;p&gt;文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等 …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257227636"&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257227638"&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257227638"&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014257227636"&gt;Linux发展历史&lt;/h1&gt;
&lt;p&gt;Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展&lt;/p&gt;

&lt;h1 id="org-15014257227638"&gt;Linux的最小组成&lt;/h1&gt;
&lt;p&gt;Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。&lt;/p&gt;

&lt;p&gt;语言:一般有头文件与库文件,头文件为实现,库文件为声明&lt;/p&gt;


&lt;h1 id="org-15014257227638"&gt;Linux的安装与启动&lt;/h1&gt;
&lt;p&gt;当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
然后运行/etc/rc.d/init.d中运行级别的启动脚本。&lt;/p&gt;

&lt;p&gt;分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便&lt;/p&gt;

&lt;p&gt;文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等,
其中ext4单个分区最大可管理16TB磁盘,xfs单分区最大支持2PB磁盘&lt;/p&gt;

&lt;p&gt;内存管理：当内存不够时,linux会杀死内存占用最高的进程,像mongodb就是一个占内存大户&lt;/p&gt;

&lt;p&gt;常用命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file: 识别文件类型与编码格式&lt;/li&gt;
&lt;li&gt;ldd:用于打印程序或者库文件所依赖的共享库列表

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行级别:
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;0: 停机&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;1: 单用户模式&lt;/li&gt;
&lt;li&gt;2: 多用户，没有 NFS&lt;/li&gt;
&lt;li&gt;3: 完全多用户模式(标准的运行级)&lt;/li&gt;
&lt;li&gt;4: 没有用到&lt;/li&gt;
&lt;li&gt;5: X11&lt;/li&gt;
&lt;li&gt;6: 重新启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>celery动态添加任务</title><link href="http://honmaple.org/articles/2017/07/celery%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1.html" rel="alternate"></link><published>2017-07-09T00:00:00+08:00</published><updated>2017-07-09T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-09:/articles/2017/07/celery动态添加任务.html</id><summary type="html">

&lt;p&gt;celery是一个基于Python的分布式调度系统，&lt;a href="http://docs.celeryproject.org/en/latest/"&gt;文档在这&lt;/a&gt; ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉&lt;/p&gt;

&lt;p&gt;为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样
&lt;pre class="python"&gt;
@app.task
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;很可惜，会出现这样的错误

&lt;pre class="example"&gt;
kombu.exceptions.EncodeError: Object of type 'function' is not JSON serializable
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;换一种序列化方式
&lt;pre class="python"&gt;
@app.task(serializer='pickle')
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;结果又出现一大串错误信息

&lt;pre class="example"&gt;
ERROR/MainProcess] Pool callback raised exception: ContentDisallowed('Refusing to deserialize untrusted content of type …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">

&lt;p&gt;celery是一个基于Python的分布式调度系统，&lt;a href="http://docs.celeryproject.org/en/latest/"&gt;文档在这&lt;/a&gt; ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉&lt;/p&gt;

&lt;p&gt;为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样
&lt;pre class="python"&gt;
@app.task
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;很可惜，会出现这样的错误

&lt;pre class="example"&gt;
kombu.exceptions.EncodeError: Object of type 'function' is not JSON serializable
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;换一种序列化方式
&lt;pre class="python"&gt;
@app.task(serializer='pickle')
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;结果又出现一大串错误信息

&lt;pre class="example"&gt;
ERROR/MainProcess] Pool callback raised exception: ContentDisallowed('Refusing to deserialize untrusted content of type pickle (application/x-python-serialize)',)
Traceback (most recent call last):
  File "/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py", line 42, in __get__
    return obj.__dict__[self.__name__]
KeyError: 'chord'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py", line 42, in __get__
    return obj.__dict__[self.__name__]
KeyError: '_payload'
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;换一种思路
&lt;pre class="python"&gt;
func = import_string(func)
&lt;/pre&gt;
不知道这样是否可以，结果测试:&lt;b&gt;No&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;哎，流年不利.&lt;/p&gt;

&lt;p&gt;最后一直测试，一直测试，终于找到了一种办法,直接上代码
&lt;pre class="python"&gt;
from importlib import import_module, reload

app.conf.CELERY_IMPORTS = ['task', 'task.all_task']

def import_string(import_name):
    import_name = str(import_name).replace(':', '.')
    modules = import_name.split('.')
    mod = import_module(modules[0])
    for comp in modules[1:]:
        if not hasattr(mod, comp):
            reload(mod)
        mod = getattr(mod, comp)
    return mod

@app.task
def execute(func, *args, **kwargs):
    func = import_string(func)
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;项目结构是这样的
&lt;blockquote&gt;
&lt;p&gt;├── celery_app.py
├── config.py
├── task
│   ├── all_task.py
│   ├──&lt;span style="text-decoration:underline"&gt;_init_&lt;/span&gt;.py&lt;/p&gt;
&lt;/blockquote&gt;
注意:&lt;b&gt;任务必须大于等于两层目录&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;以后每次添加任务都可以先添加到*all_task.py*里，调用时不用再重启celery服务&lt;/p&gt;


&lt;pre class="example"&gt;
# task/all_task.py

def ee(c, d):
    return c, d, '你好'

# example
from celery_app import execute

execute.delay('task.all_task.ee', 2, 444)
&lt;/pre&gt;


&lt;p&gt;ok，另外发现celery也支持任务定时调用,就像这样
&lt;pre class="python"&gt;
execute.apply_async(args=['task.all_task.aa'], eta=datetime(2017, 7, 9, 8, 12, 0))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;简单实现一个任务重复调用的功能
&lt;pre class="python"&gt;
@app.task
def interval(func, seconds, args=(), task_id=None):
    next_run_time = current_time() + timedelta(seconds=seconds)
    kwargs = dict(args=(func, seconds, args), eta=next_run_time)
    if task_id is not None:
        kwargs.update(task_id=task_id)
    interval.apply_async(**kwargs)
    func = import_string(func)
    return func(*args)
&lt;/pre&gt;
大概意思就是先计算下次运行的时间,然后把任务添加到celery队列里,这里有个task_id有些问题,因为假设添加了每隔3s执行一个任务,
它的task_id默认会使用uuid生成，如果想要再移除这个任务就不太方便，自定task_id可能会好一些，另外也许需要判断task_id是否存在
&lt;pre class="python"&gt;
AsyncResult(task_id).state
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ok,再献上一个好用的函数&lt;/p&gt;

&lt;pre class="python"&gt;
from inspect import getmembers, isfunction

def get_tasks(module='task'):
    return [{
        'name': 'task:{}'.format(f[1].__name__),
        'doc': f[1].__doc__,
    } for f in getmembers(import_module(module), isfunction)]
&lt;/pre&gt;

&lt;p&gt;就这样.&lt;/p&gt;</content><category term="linux"></category><category term="celery"></category><category term="python"></category></entry><entry><title>我的Linux历程</title><link href="http://honmaple.org/articles/2017/07/%E6%88%91%E7%9A%84Linux%E5%8E%86%E7%A8%8B.html" rel="alternate"></link><published>2017-07-05T00:00:00+08:00</published><updated>2017-07-05T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-05:/articles/2017/07/我的Linux历程.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257228097"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228098"&gt;Linux发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228098"&gt;Linux历程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228100"&gt;Linux的娱乐性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228101"&gt;Linux上的实用性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228102"&gt;深入了解Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014257228097"&gt;Linux&lt;/h1&gt;
&lt;p&gt;是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统&lt;/p&gt;

&lt;p&gt;Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。&lt;/p&gt;

&lt;h1 id="org-15014257228098"&gt;Linux发行版&lt;/h1&gt;
&lt;p&gt;简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版&lt;/p&gt;

&lt;h1 id="org-15014257228098"&gt;Linux历程&lt;/h1&gt;
&lt;p&gt;曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,
大概是这样的 centos --&gt; kali --&gt; ubuntu --&gt; fedora --&gt; ubuntu kylin --&gt; mint --&gt; debian --&gt; fedora --&gt; archlinux ......,Linux发行版大概分为3系,
debain系,包括ubuntu,mint,kali等,使用包管理器apt-get、aptitude、dpkg;centos或者说红帽系，包括众所周知的小白鼠版本fedora，
如果不是每半年要重装一次，我会一直使用它,而不是archlinux,所使用的包管理器yum,fedora已更换成dnf;
还有其它系，因为它们所占份额太小,包括archlinux …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257228097"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228098"&gt;Linux发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228098"&gt;Linux历程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228100"&gt;Linux的娱乐性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228101"&gt;Linux上的实用性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257228102"&gt;深入了解Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014257228097"&gt;Linux&lt;/h1&gt;
&lt;p&gt;是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统&lt;/p&gt;

&lt;p&gt;Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。&lt;/p&gt;

&lt;h1 id="org-15014257228098"&gt;Linux发行版&lt;/h1&gt;
&lt;p&gt;简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版&lt;/p&gt;

&lt;h1 id="org-15014257228098"&gt;Linux历程&lt;/h1&gt;
&lt;p&gt;曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,
大概是这样的 centos --&gt; kali --&gt; ubuntu --&gt; fedora --&gt; ubuntu kylin --&gt; mint --&gt; debian --&gt; fedora --&gt; archlinux ......,Linux发行版大概分为3系,
debain系,包括ubuntu,mint,kali等,使用包管理器apt-get、aptitude、dpkg;centos或者说红帽系，包括众所周知的小白鼠版本fedora，
如果不是每半年要重装一次，我会一直使用它,而不是archlinux,所使用的包管理器yum,fedora已更换成dnf;
还有其它系，因为它们所占份额太小,包括archlinux,gentoo等&lt;/p&gt;

&lt;h1 id="org-15014257228100"&gt;Linux的娱乐性&lt;/h1&gt;
&lt;p&gt;说实话，Linux上的游戏对比windows上就是渣，大致是因为Linux上驱动的问题，这也难怪Linus会对nvidia竖中指，虽说有开源的实现,但与nvidia在windows上性能的对比还相差甚远，
不过Linux上还是有很多可玩的游戏的,steam对Linux的支持尤为重要,
推荐几个steam上的游戏,正好这几天夏促打折:无主之地2,饥荒，cs:go等&lt;/p&gt;

&lt;h1 id="org-15014257228101"&gt;Linux上的实用性&lt;/h1&gt;
&lt;p&gt;Linux在个人桌面上属于小众市场,使用Linux的大多是程序员，或者是工作需要才会使用，虽说对比windows，Linux也足够应付日常生活,但并不是所有公司都会照顾这小众的Linux用户,
非常感谢网易云音乐与深度团队合作开发了网易云音乐Linux客户端，非常鄙视腾讯放弃对LinuxQQ的维护&lt;/p&gt;

&lt;h1 id="org-15014257228102"&gt;深入了解Linux&lt;/h1&gt;
&lt;p&gt;linux由内核,shell,文件系统和应用软件组成，没有扩展名的概念，分为普通文件，目录，链接，设备,管道文件,其文件系统结构:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bin  存放二进制可执行文件(ls,cat,mkdir等)&lt;/li&gt;
&lt;li&gt;boot  存放用于系统引导时使用的各种文件&lt;/li&gt;
&lt;li&gt;dev 用于存放设备文件&lt;/li&gt;
&lt;li&gt;etc  存放系统配置文件&lt;/li&gt;
&lt;li&gt;home 存放所有用户文件的根目录&lt;/li&gt;
&lt;li&gt;lib  存放跟文件系统中的程序运行所需要的共享库及内核模块&lt;/li&gt;
&lt;li&gt;mnt  系统管理员安装临时文件系统的安装点&lt;/li&gt;
&lt;li&gt;opt  额外安装的可选应用程序包所放置的位置&lt;/li&gt;
&lt;li&gt;proc  虚拟文件系统，存放当前内存的映射&lt;/li&gt;
&lt;li&gt;root  超级用户目录&lt;/li&gt;
&lt;li&gt;sbin  存放二进制可执行文件，只有root才能访问&lt;/li&gt;
&lt;li&gt;tmp  用于存放各种临时文件&lt;/li&gt;
&lt;li&gt;usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录&lt;/li&gt;
&lt;li&gt;var  用于存放运行时需要改变数据的文件&lt;/li&gt;
&lt;/ul&gt;</content><category term="Linux"></category></entry><entry><title>关于网易云音乐个性推荐无法显示的问题</title><link href="http://honmaple.org/articles/2017/06/%E5%85%B3%E4%BA%8E%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%AA%E6%80%A7%E6%8E%A8%E8%8D%90%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2017-06-02T00:00:00+08:00</published><updated>2017-06-02T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-06-02:/articles/2017/06/关于网易云音乐个性推荐无法显示的问题.html</id><summary type="html">
&lt;p&gt;最近在使用网易云音乐时首页的个性推荐总是无法显示，一直在*正在为你生成个性化推荐*,网上也没找到什么办法,偶然间使用
&lt;pre class="sh"&gt;
┌─[jianglin]─[~]
└──╼ rm -rf .cache/netease-cloud-music/
┌─[jianglin]─[~]
└──╼ rm -rf .config/netease-cloud-music/
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;重新打开登陆后个性推荐就出现了，特此记录&lt;/p&gt;</summary><content type="html">
&lt;p&gt;最近在使用网易云音乐时首页的个性推荐总是无法显示，一直在*正在为你生成个性化推荐*,网上也没找到什么办法,偶然间使用
&lt;pre class="sh"&gt;
┌─[jianglin]─[~]
└──╼ rm -rf .cache/netease-cloud-music/
┌─[jianglin]─[~]
└──╼ rm -rf .config/netease-cloud-music/
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;重新打开登陆后个性推荐就出现了，特此记录&lt;/p&gt;</content><category term="linux"></category><category term="netease"></category></entry><entry><title>方便的切换emacs主题</title><link href="http://honmaple.org/articles/2017/05/%E6%96%B9%E4%BE%BF%E7%9A%84%E5%88%87%E6%8D%A2emacs%E4%B8%BB%E9%A2%98.html" rel="alternate"></link><published>2017-05-23T00:00:00+08:00</published><updated>2017-05-23T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-05-23:/articles/2017/05/方便的切换emacs主题.html</id><summary type="html">

&lt;p&gt;作为一个主题控，经常会切换主题，之前切换主题的方式是这样的，*M-x*,`load-theme`,选中,但是个人认为不够便捷，正好前几天发现了*hydra*这个插件,也想实践一下&lt;/p&gt;

&lt;p&gt;获取主题列表
&lt;pre class="elisp"&gt;
  (setq maple-cycle-themes (mapcar 'symbol-name (custom-available-themes)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取当前主题索引
&lt;pre class="elisp"&gt;
  (cl-position (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取下一个主题
&lt;pre class="elisp"&gt;
  (setq maple-current-theme-index
        (+ 1 maple-current-theme-index))
  (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;加载主题
&lt;pre class="elisp"&gt;
  (load-theme (intern maple-current-theme) t)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;最后得到这样的函数
&lt;pre class="elisp"&gt;
  (defun maple/cycle-theme (num)
    (interactive)
    (setq maple-current-theme-index
          (+ num
             (cl-position
              (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)))
    (when (&gt;= maple-current-theme-index (length maple-cycle-themes))
      (setq maple-current-theme-index …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">

&lt;p&gt;作为一个主题控，经常会切换主题，之前切换主题的方式是这样的，*M-x*,`load-theme`,选中,但是个人认为不够便捷，正好前几天发现了*hydra*这个插件,也想实践一下&lt;/p&gt;

&lt;p&gt;获取主题列表
&lt;pre class="elisp"&gt;
  (setq maple-cycle-themes (mapcar 'symbol-name (custom-available-themes)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取当前主题索引
&lt;pre class="elisp"&gt;
  (cl-position (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取下一个主题
&lt;pre class="elisp"&gt;
  (setq maple-current-theme-index
        (+ 1 maple-current-theme-index))
  (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;加载主题
&lt;pre class="elisp"&gt;
  (load-theme (intern maple-current-theme) t)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;最后得到这样的函数
&lt;pre class="elisp"&gt;
  (defun maple/cycle-theme (num)
    (interactive)
    (setq maple-current-theme-index
          (+ num
             (cl-position
              (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)))
    (when (&gt;= maple-current-theme-index (length maple-cycle-themes))
      (setq maple-current-theme-index 0))
    (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))
    (mapc 'disable-theme custom-enabled-themes)
    (let ((progress-reporter
           (make-progress-reporter
            (format "Loading theme %s..." maple-current-theme))))
      (load-theme (intern maple-current-theme) t)
      (progress-reporter-done progress-reporter)))
  (defun maple/next-theme()
    (interactive)
    (maple/cycle-theme 1))
  (defun maple/previous-theme()
    (interactive)
    (maple/cycle-theme -1))
  (defhydra maple/cycle-themes ()
    ("n" maple/next-theme "next theme")
    ("p" maple/previous-theme "prev theme"))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ok,绑定一个快捷键吧&lt;/p&gt;</content><category term="linux"></category><category term="emacs"></category><category term="elisp"></category></entry><entry><title>那些年我们一起写的诗</title><link href="http://honmaple.org/articles/2017/05/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%86%99%E7%9A%84%E8%AF%97.html" rel="alternate"></link><published>2017-05-17T00:00:00+08:00</published><updated>2017-05-17T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-05-17:/articles/2017/05/那些年我们一起写的诗.html</id><summary type="html">
&lt;ul&gt;
&lt;li&gt;其实世界上本没有试，考得人多了，也便成了试
&lt;/li&gt;
&lt;li&gt;喝自己的水，让别人喝酒去吧！
&lt;/li&gt;
&lt;li&gt;春游只是一场旅行，不在乎目的地（呈贡新校区）在乎的只是周末的作业和做作业的心情，让作业去旅行…
&lt;/li&gt;
&lt;li&gt;忘记或是失忆…都是一场美丽
&lt;/li&gt;
&lt;li&gt;黑夜如此短暂，仅在闭眼睁眼之间，却不知黑暗之中，已有人迷失方向，正在苦苦寻觅黎明前的光亮
&lt;/li&gt;
&lt;li&gt;人生总有欢乐，亦有痛苦，我们本是为了活着而活着，活着，才有希望，死亡，或许能够躲避痛苦，但也将永远长眠于墓地，无法品味人生的酸甜苦辣
&lt;/li&gt;
&lt;li&gt;问君能有几多愁，恰似一江春水向东流；问君能有几多愁，恰似一群太监上青楼；问君能有几多愁，恰似一代天骄热泪流 ；问君能有几多愁，恰似三中作业多如牛。作业多，愁啊！
&lt;/li&gt;
&lt;li&gt;对内宣传实力如虎，对外抗议胆小如鼠
&lt;/li&gt;
&lt;li&gt;天朗、气清、月明、人中：夜迹…血月
&lt;/li&gt;
&lt;li&gt;众人皆白，唯我独黑
&lt;/li&gt;
&lt;li&gt;众人皆醉，唯我独醒
&lt;/li&gt;
&lt;li&gt;战争中出英雄，和平中出贪官，不在战争中爆发，就在和平中灭亡
&lt;/li&gt;
&lt;li&gt;人生就像是在走一条很长很长的路，两只脚唯有不断超越对方，才能前进；两只脚不断躲避对方，只能后退
&lt;/li&gt;
&lt;li&gt;生命如鸡肋，食之无味，弃之可惜
&lt;/li&gt;
&lt;li&gt;拎起屠刀，让佛祖说去吧
&lt;/li&gt;
&lt;li&gt;山脚有雨山无雨，眼中有泪眼无泪 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">
&lt;ul&gt;
&lt;li&gt;其实世界上本没有试，考得人多了，也便成了试
&lt;/li&gt;
&lt;li&gt;喝自己的水，让别人喝酒去吧！
&lt;/li&gt;
&lt;li&gt;春游只是一场旅行，不在乎目的地（呈贡新校区）在乎的只是周末的作业和做作业的心情，让作业去旅行…
&lt;/li&gt;
&lt;li&gt;忘记或是失忆…都是一场美丽
&lt;/li&gt;
&lt;li&gt;黑夜如此短暂，仅在闭眼睁眼之间，却不知黑暗之中，已有人迷失方向，正在苦苦寻觅黎明前的光亮
&lt;/li&gt;
&lt;li&gt;人生总有欢乐，亦有痛苦，我们本是为了活着而活着，活着，才有希望，死亡，或许能够躲避痛苦，但也将永远长眠于墓地，无法品味人生的酸甜苦辣
&lt;/li&gt;
&lt;li&gt;问君能有几多愁，恰似一江春水向东流；问君能有几多愁，恰似一群太监上青楼；问君能有几多愁，恰似一代天骄热泪流 ；问君能有几多愁，恰似三中作业多如牛。作业多，愁啊！
&lt;/li&gt;
&lt;li&gt;对内宣传实力如虎，对外抗议胆小如鼠
&lt;/li&gt;
&lt;li&gt;天朗、气清、月明、人中：夜迹…血月
&lt;/li&gt;
&lt;li&gt;众人皆白，唯我独黑
&lt;/li&gt;
&lt;li&gt;众人皆醉，唯我独醒
&lt;/li&gt;
&lt;li&gt;战争中出英雄，和平中出贪官，不在战争中爆发，就在和平中灭亡
&lt;/li&gt;
&lt;li&gt;人生就像是在走一条很长很长的路，两只脚唯有不断超越对方，才能前进；两只脚不断躲避对方，只能后退
&lt;/li&gt;
&lt;li&gt;生命如鸡肋，食之无味，弃之可惜
&lt;/li&gt;
&lt;li&gt;拎起屠刀，让佛祖说去吧
&lt;/li&gt;
&lt;li&gt;山脚有雨山无雨，眼中有泪眼无泪。山顶无雨山有雨，心头无泪心有泪 -- 题目《心雨》
&lt;/li&gt;
&lt;li&gt;世界没有真正意义上的阴天，只有被乌云遮住的蓝天
&lt;/li&gt;
&lt;li&gt;風中无叶楓中叶，铃中无音林中音。
&lt;/li&gt;
&lt;li&gt;冬天到了，春天还早吗？春天来了，冬天还不走吗？
&lt;/li&gt;
&lt;li&gt;风中无叶枫中叶，磷中无龙林中龙
&lt;/li&gt;
&lt;li&gt;战争中出英雄，战争中更出汉奸
&lt;/li&gt;
&lt;li&gt;夜观风象起，星河四海一。八方欲归队，人道几时回？
&lt;/li&gt;
&lt;li&gt;人生何处不逢君，天蓝海自清。
&lt;/li&gt;
&lt;li&gt;我本将心向光明，奈何光明不待人：朝朝窗帘起，时时四海一。浮云遮望眼，天道似无心。梦醒君莫问，谁言伤心泪。帘外窗更明，只是在人间。
&lt;/li&gt;
&lt;li&gt;无情之路有情惘，有情之苦无情殇
&lt;/li&gt;
&lt;li&gt;无情之路无情殇，有情之苦有情惘。
&lt;/li&gt;
&lt;li&gt;两袖清风拂黄泉，半缕微光照奈何。
&lt;/li&gt;
&lt;li&gt;今夜无过后月明，是故还情总相生。
&lt;/li&gt;
&lt;li&gt;夜很美，月很美。有夜而无月，有月而无夜，前生有夜而后生无月，后生有月而前生无夜。有夜何月，有月何夜，夜月何存！
&lt;/li&gt;
&lt;li&gt;城市的喧嚣渐渐影响着森林的寂静，叨扰着森林里的生物。
&lt;/li&gt;
&lt;li&gt;天道轮回为权，人道轮回为忍，修罗道轮回为无，饿鬼道轮回为贪，畜生道轮回为邪，地狱道轮回为苦
&lt;/li&gt;
&lt;li&gt;大地一摇，四川跌倒全国扶;天空三怒，云南渴死无人问
&lt;/li&gt;
&lt;li&gt;其天坚若此，其心不可为，其民坚若此，有道者何谁？
&lt;/li&gt;
&lt;li&gt;世人皆知吾为汉唐人，然焉知宋乃吾心之所向者也，心之所向，道之所依，人之所为，根之所存。
&lt;/li&gt;
&lt;li&gt;今朝有酒今朝醉，今夜有泪今夜流。
&lt;/li&gt;
&lt;li&gt;天不再蓝，海不再清，即使没有窗帘的遮挡，光明也将隐于天岸
&lt;/li&gt;
&lt;li&gt;夜游梦醒不知路，寻问琴声行何处
&lt;/li&gt;
&lt;li&gt;我看到了希望，却隐藏于黑暗，我看到了曙光，却消失在彼岸。
&lt;/li&gt;
&lt;li&gt;所谓天，为之天，所谓人，为之人。
&lt;/li&gt;
&lt;li&gt;天不蓝，海不深，心不静，脑不清，手不稳，愤不平
&lt;/li&gt;
&lt;li&gt;刀已折，人已弯，魂已断……
&lt;/li&gt;
&lt;li&gt;你已经忘记我是谁，我已经忘记你是谁，你已经忘记你是谁，我已经忘记我是谁
&lt;/li&gt;
&lt;li&gt;今夜梦醒君莫问，明月当空，何日返故乡？昨日忆兮难言语，为此，时时到天明。
&lt;/li&gt;
&lt;li&gt;人生似无意，落花流水，通向天梯。 梦想终成空，梦醒梦落，开往地狱。
&lt;/li&gt;
&lt;li&gt;无迟疑为无过，无过汝云定错，定错无外分寸，分寸识为务心
&lt;/li&gt;
&lt;li&gt;风儿总在帮助蓝天反抗窗帘的遮挡好让阳光照耀每个人的心房风儿反抗了窗帘的遮挡却无法反抗人类躲避阳光的欲望
&lt;/li&gt;
&lt;li&gt;何民清理近天零，轻盈湖畔汝为饮
&lt;/li&gt;
&lt;li&gt;没有阳光的日子里，我的身体变得虚弱不堪，即使内心黑暗，也阻挡不了我享受阳光的欲望。
&lt;/li&gt;
&lt;li&gt;云分，等雨，云聚，临雨，云淡，不见雨
&lt;/li&gt;
&lt;li&gt;雨还是那雨，雷还是那雷，只是不同的时间，不同的地点，没有泥土的芳香，没有朦胧的山影，更没有雷雨中畅快的奔跑，有的只是这颗心，经历了沧海桑田，阻隔了天涯海角。
&lt;/li&gt;
&lt;li&gt;伤人者，人恒伤之;杀人者，得不偿失。
&lt;/li&gt;
&lt;li&gt;一出门，就是鸟叫蝉躁蛙鸣，这是家乡的声音，一出门，便是晴空万里，蓝天高挂，这是家乡的景象，一出门，便是泥土的芳香，这是家乡的味道……
&lt;/li&gt;
&lt;li&gt;人生就如这月亮，即使没有乌云白云的遮挡，也总是这般模糊不清。
&lt;/li&gt;
&lt;li&gt;若相遇，需无意，若有意，何时遇？凭天意。
&lt;/li&gt;
&lt;li&gt;爬山爬山，一爬便是山，不爬也是山，爬山不是山，爬山还是山。
&lt;/li&gt;
&lt;li&gt;医者老矣，尚医心否？
&lt;/li&gt;
&lt;li&gt;空即是色，色即是空，空无一色，色无一空，空即是空，色即是色，空空色色，岂乎我哉。
&lt;/li&gt;
&lt;li&gt;人生多梦，光明泪，夜自多情，友为罪。
&lt;/li&gt;
&lt;li&gt;醉池轻舞种欢笑，怨柳飘飞祈逍遥。酒酣闻雨不知泪，梦醒晓月痕将退。
&lt;/li&gt;
&lt;li&gt;醉问天涯何处留，天变，无明月，笑看红尘柳。拂风晓月众芳树，无觅处，寻归路，墨中归宿，问谁墓？
&lt;/li&gt;
&lt;li&gt;山风归来，抚柳掩面朝阳好，黯然离去，仰天长叹落日殇。
&lt;/li&gt;
&lt;li&gt;拂晓闻雨心管弦，日出江山难忘言。天上人间寻何处，雨过天晴有蓝天。
&lt;/li&gt;
&lt;li&gt;天若有情天亦老，少不更事，何处无芳草
&lt;/li&gt;
&lt;li&gt;时间，为谁而成长，又为谁而孤单……,更为谁而悲伤
&lt;/li&gt;
&lt;li&gt;酒不醉人人自醉，夜不迷人人自迷，落花无情，流水无意……
&lt;/li&gt;
&lt;li&gt;他爱她，她爱他，原来不是她，原来不是他
&lt;/li&gt;
&lt;li&gt;雨中漫步行，夜深無人听。悄然歸故裡，卧龍不知情。
&lt;/li&gt;
&lt;li&gt;月光墓，塞上霜，黑夜明，杜康殤……
&lt;/li&gt;
&lt;li&gt;原来错过了便真的是错过了，他爱她，她爱他，原来不是他，原来不是她
&lt;/li&gt;
&lt;li&gt;黑暗中前行，却不知，那是永远的黑夜；光明中静止，却不知，那是短暂的白昼……
&lt;/li&gt;
&lt;li&gt;寻路不问路，追梦不留梦。爱恨一念间，相失一片天。 我是寻路者，却不是问路人！ 我是追梦者，却不是留梦人！
&lt;/li&gt;
&lt;li&gt;夜尽天明，何人眠，悔不当初，竟惹柳树，望断天涯无觅路，奈何自掘坟墓
&lt;/li&gt;
&lt;li&gt;静流风动谁能狂，杀心渐起染风云，封欲离人平如漠，断袖为仇似生袍，道望无涯天明云，剑芒一指斩红尘，刀横黄河断流水，心系天下有奈何。
&lt;/li&gt;
&lt;li&gt;大漠孤烟无边关，地上重楼忘记人，天涯海角难磨灭，夜迹血月(万千奴隶)怎奈何
&lt;/li&gt;
&lt;li&gt;星空太美，手机拍不了也放不下，只能放在记忆里，看不清也摸不着，最后只能慢慢流逝，留不了也抓不到
&lt;/li&gt;
&lt;li&gt;焚舟破釜天，唯命弃我岸上前，惘顾神州情碎，山水一念，勿镜天下红尘，在人间&lt;/li&gt;
&lt;/ul&gt;</content><category term="生活随笔"></category><category term="诗"></category></entry><entry><title>晒晒我的Linux及桌面</title><link href="http://honmaple.org/articles/2017/05/%E6%99%92%E6%99%92%E6%88%91%E7%9A%84Linux%E5%8F%8A%E6%A1%8C%E9%9D%A2.html" rel="alternate"></link><published>2017-05-01T00:00:00+08:00</published><updated>2017-05-01T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-05-01:/articles/2017/05/晒晒我的Linux及桌面.html</id><summary type="html">
&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364033937825.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364138162872.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364171386276.png"/&gt;&lt;/p&gt;

&lt;p&gt;ps:真TM的闲着蛋疼&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364033937825.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364138162872.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364171386276.png"/&gt;&lt;/p&gt;

&lt;p&gt;ps:真TM的闲着蛋疼&lt;/p&gt;</content><category term="linux"></category><category term="i3wm"></category></entry><entry><title>emacs实现智能注释</title><link href="http://honmaple.org/articles/2017/04/emacs%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%B3%A8%E9%87%8A.html" rel="alternate"></link><published>2017-04-21T00:00:00+08:00</published><updated>2017-04-21T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-04-21:/articles/2017/04/emacs实现智能注释.html</id><summary type="html">
&lt;p&gt;之前使用emacs时遇到这么一个问题
&lt;blockquote&gt;
&lt;p&gt;当前行存在代码折叠时,如果想要注释,必须先选中当前行,否则只能注释代码折叠块的第一行&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;就像这样&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274346737550.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274352705945.png"/&gt;&lt;/p&gt;

&lt;p&gt;基础注释函数来源于&lt;b&gt;stackoverflow&lt;/b&gt;
&lt;pre class="elisp"&gt;
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;在此函数的位置上进行修改,刚开始使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
      (evil-visual-line))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;但是一直没得到想要的效果,后来修改了一下,使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
    (progn
      (end-of-visual-line)
      (evil-visual-state)
      (beginning-of-visual-line)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;意思就是如果当前位置存在代码折叠,先选中当前行,然后注释整个选中区域&lt;/p&gt;

&lt;p&gt;因为光标被移动到首位,我对这个不太在意,如果有在意的话,可以使用 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;之前使用emacs时遇到这么一个问题
&lt;blockquote&gt;
&lt;p&gt;当前行存在代码折叠时,如果想要注释,必须先选中当前行,否则只能注释代码折叠块的第一行&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;就像这样&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274346737550.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274352705945.png"/&gt;&lt;/p&gt;

&lt;p&gt;基础注释函数来源于&lt;b&gt;stackoverflow&lt;/b&gt;
&lt;pre class="elisp"&gt;
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;在此函数的位置上进行修改,刚开始使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
      (evil-visual-line))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;但是一直没得到想要的效果,后来修改了一下,使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
    (progn
      (end-of-visual-line)
      (evil-visual-state)
      (beginning-of-visual-line)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;意思就是如果当前位置存在代码折叠,先选中当前行,然后注释整个选中区域&lt;/p&gt;

&lt;p&gt;因为光标被移动到首位,我对这个不太在意,如果有在意的话,可以使用&lt;b&gt;save-excursion&lt;/b&gt;
&lt;pre class="elisp"&gt;
  (save-excursion
  (when (hs-already-hidden-p)
    (progn
      (end-of-visual-line)
      (evil-visual-state)
      (beginning-of-visual-line)))
      ......)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;完整代码
&lt;pre class="elisp"&gt;
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (save-excursion
    (when (hs-already-hidden-p)
      (progn
        (end-of-visual-line)
        (evil-visual-state)
        (beginning-of-visual-line)))
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end))))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ok,就这样&lt;/p&gt;</content><category term="emacs"></category><category term="elisp"></category><category term="linux"></category></entry><entry><title>基于whoosh实现的flask全文搜索插件</title><link href="http://honmaple.org/articles/2017/04/%E5%9F%BA%E4%BA%8Ewhoosh%E5%AE%9E%E7%8E%B0%E7%9A%84flask%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6.html" rel="alternate"></link><published>2017-04-16T00:00:00+08:00</published><updated>2017-04-16T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-04-16:/articles/2017/04/基于whoosh实现的flask全文搜索插件.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257229930"&gt;Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257229931"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257229931"&gt;创建更新删除索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257229932"&gt;自定义analyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257229932"&gt;Configure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;flask 貌似很少全文搜索的插件,有一个 https://github.com/gyllstromk/Flask-WhooshAlchemy , 但试了几次都用不了,所以参考 Flask-WhooshAlchemy 自己写了一个&lt;/p&gt;

&lt;h1 id="org-15014257229930"&gt;Quickstart&lt;/h1&gt;
&lt;p&gt;插件基于 whoosh,纯 python 编写,使用上很简单
&lt;pre class="python"&gt;
    from flask_msearch import Search
    [...]
    search = Search()
    search.init_app(app)

    # models.py
    class Post(db.Model):
        __tablename__ = 'post'
        __searchable__ = ['title', 'content']

    # views.py
    @app.route("/search")
    def w_search():
        keyword = request.args.get('keyword')
        results = search.whoosh_search(Post,query …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257229930"&gt;Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257229931"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014257229931"&gt;创建更新删除索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257229932"&gt;自定义analyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014257229932"&gt;Configure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;flask 貌似很少全文搜索的插件,有一个 https://github.com/gyllstromk/Flask-WhooshAlchemy , 但试了几次都用不了,所以参考 Flask-WhooshAlchemy 自己写了一个&lt;/p&gt;

&lt;h1 id="org-15014257229930"&gt;Quickstart&lt;/h1&gt;
&lt;p&gt;插件基于 whoosh,纯 python 编写,使用上很简单
&lt;pre class="python"&gt;
    from flask_msearch import Search
    [...]
    search = Search()
    search.init_app(app)

    # models.py
    class Post(db.Model):
        __tablename__ = 'post'
        __searchable__ = ['title', 'content']

    # views.py
    @app.route("/search")
    def w_search():
        keyword = request.args.get('keyword')
        results = search.whoosh_search(Post,query=keyword,fields=['title'],limit=20)
        return ''
&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id="org-15014257229931"&gt;Usage&lt;/h1&gt;
&lt;h2 id="org-15014257229931"&gt;创建更新删除索引&lt;/h2&gt;
&lt;p&gt;如果要对已存在的数据创建索引(全部)
&lt;pre class="python"&gt;
    # 创建
    search.create_index()
    # 更新
    search.create_index(update=True)
    # 删除
    search.create_index(delete=True)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;如果只想要为指定的表创建索引
&lt;pre class="python"&gt;
    search.create_index(Model)
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id="org-15014257229932"&gt;自定义analyzer&lt;/h2&gt;

&lt;p&gt;比如使用jieba的中文分词
&lt;pre class="python"&gt;
     from jieba.analyse import ChineseAnalyzer
     search = Search(analyzer=ChineseAnalyzer())
&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id="org-15014257229932"&gt;Configure&lt;/h1&gt;
&lt;pre class="python"&gt;
    WHOOSH_BASE = 'whoosh_index'
    WHOOSH_ENABLE = True
&lt;/pre&gt;

&lt;p&gt;项目地址:https://github.com/honmaple/flask-msearch&lt;/p&gt;</content><category term="python"></category><category term="flask"></category><category term="whoosh"></category></entry></feed>