<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>honmaple's blog - Linux</title><link href="http://honmaple.me/" rel="alternate"></link><link href="http://honmaple.me/feeds/linux.rss.xml" rel="self"></link><id>http://honmaple.me/</id><updated>2018-01-17T14:17:19+08:00</updated><entry><title>emacs自动更新文件头</title><link href="http://honmaple.me/articles/2018/01/emacs%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%96%87%E4%BB%B6%E5%A4%B4.html" rel="alternate"></link><published>2018-01-09T16:00:45+08:00</published><updated>2018-01-14T16:42:06+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2018-01-09:/articles/2018/01/emacs自动更新文件头.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-50921028"&gt;自动更新Last Updated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-61602970"&gt;自动更新Filename&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-9870572"&gt;自动更新Email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;前面已经说过，可以使用&lt;b&gt;auto-insert&lt;/b&gt;自动添加文件头，今天来说一说自动更新文件头，比如说每次保存时自动更新&lt;b&gt;last updated&lt;/b&gt;字段&lt;/p&gt;


&lt;h4 id="org-50921028"&gt;自动更新Last Updated&lt;/h4&gt;
&lt;p&gt;如果使用的是header2,直接设置相关的变量就可，假如使用的是&lt;b&gt;auto-insert&lt;/b&gt;，同样也可以使用emacs内置的&lt;b&gt;time-stamp&lt;/b&gt;对Last Updated进行自动更新&lt;/p&gt;

&lt;p&gt;time-stamp默认使用&lt;code&gt;Time-stamp:&lt;/code&gt;,如果要对&lt;code&gt;Last Updated&lt;/code&gt;进行自动更新，只需要简单的设置
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-active&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-line-limit&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-start&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[lL]ast[ -][uU]pdate[ \t]*:?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-end&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-50921028"&gt;自动更新Last Updated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-61602970"&gt;自动更新Filename&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-9870572"&gt;自动更新Email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;前面已经说过，可以使用&lt;b&gt;auto-insert&lt;/b&gt;自动添加文件头，今天来说一说自动更新文件头，比如说每次保存时自动更新&lt;b&gt;last updated&lt;/b&gt;字段&lt;/p&gt;


&lt;h4 id="org-50921028"&gt;自动更新Last Updated&lt;/h4&gt;
&lt;p&gt;如果使用的是header2,直接设置相关的变量就可，假如使用的是&lt;b&gt;auto-insert&lt;/b&gt;，同样也可以使用emacs内置的&lt;b&gt;time-stamp&lt;/b&gt;对Last Updated进行自动更新&lt;/p&gt;

&lt;p&gt;time-stamp默认使用&lt;code&gt;Time-stamp:&lt;/code&gt;,如果要对&lt;code&gt;Last Updated&lt;/code&gt;进行自动更新，只需要简单的设置
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-active&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-line-limit&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-start&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[lL]ast[ -][uU]pdate[ \t]*:?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-end&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;time-stamp-format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; %#A %Y-%02m-%02d %02H:%02M:%02S (%Z)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;然后添加
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;before-save-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;time-stamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;这样就能在每次保存时自动更新相应的字段了&lt;/p&gt;

&lt;h4 id="org-61602970"&gt;自动更新Filename&lt;/h4&gt;
&lt;p&gt;之前遇到过，使用&lt;b&gt;auto-insert&lt;/b&gt;在每次创建新文件时自动添加了文件头，但后面文件名被修改了，文件头里的文件名却不会自动更改，基于这个原因需要自己实现一个函数(我没有找到可以使用的已经存在的package)&lt;/p&gt;

&lt;p&gt;先理一理逻辑: 只需要查找当前文件前几行信息，如果找到&lt;code&gt;File Name:&lt;/code&gt;字段，获取字段信息，与当前文件名进行对比，如果不一致则替换为当前文件名,直接给出代码吧&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;查找当前文件前几行
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;save-excursion&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;;;跳转到开头&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="nv"&gt;line-limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;;; 查找&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;1+&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forward-line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;获取当前文件名
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-nondirectory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;查找File Name
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;looking-at&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.*\\(File Name:\\)\\(.*\\)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;对文件名进行比对与替换
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;beg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match-beginning&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match-end&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string=&lt;/span&gt; &lt;span class="nv"&gt;文件名&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-trim-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="nv"&gt;beg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt; &lt;span class="nv"&gt;beg&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可得到相关的完整函数(完整函数后面再讲)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="org-9870572"&gt;自动更新Email&lt;/h4&gt;
&lt;p&gt;工作和平时使用的邮箱不一样，我虽然设置了&lt;i&gt;at_home&lt;/i&gt;变量区分工作与平时的邮箱,但不是每次我都记得要更新这个变量，所以有了这个需要，自动将文件头里的email信息更改为平时所用的邮箱，大致逻辑与自动更新Filename相同，所以我写了一个&lt;b&gt;macro&lt;/b&gt;来自动生成相关的代码&lt;/p&gt;

&lt;p&gt;直接给出代码
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;maple/header-update-action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;A.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;beg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match-beginning&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match-end&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string=&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-trim-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="nv"&gt;beg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt; &lt;span class="nv"&gt;beg&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;maple/header-update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="nv"&gt;line-limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;B.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;save-excursion&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="nv"&gt;line-limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;looking-at&lt;/span&gt; &lt;span class="nv"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/header-update-action&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;1+&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forward-line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;maple/header-update-engine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="kp"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;line-limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;C.&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;intern&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;maple/header-update-%s&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Update %s with regex.&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/header-update&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;line-limit&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;这样，我就可以调用&lt;b&gt;macro&lt;/b&gt;来生成代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动更新Filename
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/header-update-engine&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;quot;.*\\(File Name:\\)\\(.*\\)&amp;quot;&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-nondirectory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成一个&lt;code&gt;maple/header-update-filename&lt;/code&gt;的函数,只要调用它即可更新文件名信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;自动更新email
&lt;p&gt;同样的
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/header-update-engine&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;quot;.*\\(Email:\\)\\(.*\\)&amp;quot;&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;quot;youemail@gmail.com&amp;quot;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

生成一个可供调用的&lt;code&gt;maple/header-update-email&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要添加其它功能，只要使用&lt;code&gt;maple/header-update-engine&lt;/code&gt;即可&lt;/p&gt;

&lt;p&gt;相关的配置可以在我的&lt;a href="https://github.com/honmaple/dotfiles/blob/master/emacs.d/site-lisp/header/header.el"&gt;github&lt;/a&gt;上找到&lt;/p&gt;</content><category term="linux"></category><category term="emacs"></category></entry><entry><title>emacs自动添加文件头</title><link href="http://honmaple.me/articles/2018/01/emacs%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B4.html" rel="alternate"></link><published>2018-01-08T15:08:51+08:00</published><updated>2018-01-14T16:42:15+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2018-01-08:/articles/2018/01/emacs自动添加文件头.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-51703537"&gt;基础使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-5207131"&gt;自定义文件头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-74786389"&gt;提取文件头公共信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;想要在emacs中添加文件头有好几种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接手打&lt;/li&gt;
&lt;li&gt;使用模板yasnippet&lt;/li&gt;
&lt;li&gt;使用header2&lt;/li&gt;
&lt;li&gt;使用内置的package &lt;b&gt;auto-insert&lt;/b&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;header2可能是最方便的一种自动添加文件头的方式，但我之前使用过，想要自定义自己想要的内容很难，而且白白浪费header2的功能&lt;/p&gt;

&lt;p&gt;今天主要说一说emacs内置里&lt;b&gt;auto-insert&lt;/b&gt;,使用它在创建文件时自动添加文件头信息&lt;/p&gt;

&lt;h4 id="org-51703537"&gt;基础使用&lt;/h4&gt;
&lt;p&gt;直接&lt;code&gt;(auto-insert-mode)&lt;/code&gt;
并且设置
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(setq auto-insert-query nil) ;; 不提醒
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id="org-5207131"&gt;自定义文件头&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;auto-insert-alist&lt;/span&gt;
      &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nv"&gt;python-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Python program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#!/usr/bin/env python\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# -*- coding: utf-8 -*-\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# **************************************************************************\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Copyright © &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-51703537"&gt;基础使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-5207131"&gt;自定义文件头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-74786389"&gt;提取文件头公共信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;想要在emacs中添加文件头有好几种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接手打&lt;/li&gt;
&lt;li&gt;使用模板yasnippet&lt;/li&gt;
&lt;li&gt;使用header2&lt;/li&gt;
&lt;li&gt;使用内置的package &lt;b&gt;auto-insert&lt;/b&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;header2可能是最方便的一种自动添加文件头的方式，但我之前使用过，想要自定义自己想要的内容很难，而且白白浪费header2的功能&lt;/p&gt;

&lt;p&gt;今天主要说一说emacs内置里&lt;b&gt;auto-insert&lt;/b&gt;,使用它在创建文件时自动添加文件头信息&lt;/p&gt;

&lt;h4 id="org-51703537"&gt;基础使用&lt;/h4&gt;
&lt;p&gt;直接&lt;code&gt;(auto-insert-mode)&lt;/code&gt;
并且设置
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(setq auto-insert-query nil) ;; 不提醒
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id="org-5207131"&gt;自定义文件头&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;auto-insert-alist&lt;/span&gt;
      &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nv"&gt;python-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Python program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#!/usr/bin/env python\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# -*- coding: utf-8 -*-\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# **************************************************************************\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Copyright © &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# File Name: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-nondirectory&lt;/span&gt; &lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Author: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Email: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Created: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-%d %T (%Z)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Last Update: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-%d %T (%Z)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#          By: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Description: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# **************************************************************************\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;c-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;/**************************************************************************\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; Copyright © &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; File Name: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-nondirectory&lt;/span&gt; &lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; Author: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; Email: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; Created: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-%d %T (%Z)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; Last Update: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;           By: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; Description: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot; **************************************************************************/\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#include&amp;lt;stdio.h&amp;gt;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#include&amp;lt;string.h&amp;gt;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;sh-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Shell script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#!/bin/bash\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# **************************************************************************\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Copyright © &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# File Name: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-nondirectory&lt;/span&gt; &lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Author: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Email: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Created: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-%d %T (%Z)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Last Update: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#          By: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# Description: \n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# **************************************************************************/\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="org-74786389"&gt;提取文件头公共信息&lt;/h4&gt;
&lt;p&gt;之前的模板有很多重复的内容，写一个函数把公共的信息提取出来&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基础信息
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;maple//insert-string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-string&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="sc"&gt;?*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;Copyright © &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;File Name: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-nondirectory&lt;/span&gt; &lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;Author: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-full-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;Email: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;Created: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-%d %T (%Z)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;Last Update: \n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;         By: \n&amp;quot;&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;Description: \n&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-string&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="sc"&gt;?*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;插入注释信息
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;maple/insert-string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt; &lt;span class="nv"&gt;comment-start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapconcat&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;split-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple//insert-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;更改模板
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;auto-insert-alist&lt;/span&gt;
      &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nv"&gt;ruby-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ruby program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#!/usr/bin/env ruby\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# -*- encoding: utf-8 -*-\n&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/insert-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;python-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Python program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#!/usr/bin/env python\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;# -*- coding: utf-8 -*-\n&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/insert-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;c-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-trim-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/insert-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#include&amp;lt;stdio.h&amp;gt;\n&amp;quot;&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#include&amp;lt;string.h&amp;gt;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;sh-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Shell script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;#!/bin/bash\n&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/insert-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;go-mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Go program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-trim-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maple/insert-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关的配置可以在我的&lt;a href="https://github.com/honmaple/dotfiles/blob/master/emacs.d/lisp/init-auto-insert.el"&gt;github&lt;/a&gt;上找到&lt;/p&gt;</content><category term="linux"></category><category term="emacs"></category></entry><entry><title>linux tips</title><link href="http://honmaple.me/articles/2017/12/linux%20tips.html" rel="alternate"></link><published>2017-12-19T17:30:18+08:00</published><updated>2018-01-17T14:17:19+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-12-19:/articles/2017/12/linux tips.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-52456753"&gt;获取文件压缩后的md5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-87860792"&gt;zip打包排除文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-54751335"&gt;linux下gif播放&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h3 id="org-52456753"&gt;获取文件压缩后的md5&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cf - action_plugins/ group_vars/ | md5sum
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="org-87860792"&gt;zip打包排除文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip -r -x=.git/* -x=*.pyc ../release.py *
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="org-54751335"&gt;linux下gif播放&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;feh&lt;/b&gt;只支持静态文件,可用
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;animate output.gif
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-52456753"&gt;获取文件压缩后的md5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-87860792"&gt;zip打包排除文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-54751335"&gt;linux下gif播放&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h3 id="org-52456753"&gt;获取文件压缩后的md5&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cf - action_plugins/ group_vars/ | md5sum
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="org-87860792"&gt;zip打包排除文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip -r -x=.git/* -x=*.pyc ../release.py *
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="org-54751335"&gt;linux下gif播放&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;feh&lt;/b&gt;只支持静态文件,可用
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;animate output.gif
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>lua中匪夷所思的table长度</title><link href="http://honmaple.me/articles/2017/10/lua%E4%B8%AD%E5%8C%AA%E5%A4%B7%E6%89%80%E6%80%9D%E7%9A%84table%E9%95%BF%E5%BA%A6.html" rel="alternate"></link><published>2017-10-10T00:00:00+08:00</published><updated>2017-10-10T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-10-10:/articles/2017/10/lua中匪夷所思的table长度.html</id><summary type="html">
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 3&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 3&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 3&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 3&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;-- output: 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Lua 5.3.4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;输出就是这么匪夷所思,所以, &lt;b&gt;不要在Lua的table中使用nil值，如果一个元素要删除，直接remove&lt;/b&gt;&lt;/p&gt;</content><category term="lua"></category></entry><entry><title>ansible快速部署加速方案</title><link href="http://honmaple.me/articles/2017/10/ansible%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88.html" rel="alternate"></link><published>2017-10-08T00:00:00+08:00</published><updated>2017-10-08T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-10-08:/articles/2017/10/ansible快速部署加速方案.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-2847809"&gt;加速&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-40828725"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-49851788"&gt;方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-2901432"&gt;目标&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-81793856"&gt;web界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-43254016"&gt;任务队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;ansible是基于Python的 &lt;b&gt;自动化部署&lt;/b&gt; 方案,但是目前只是通过命令行
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible -i hosts all -a &amp;#39;uptime&amp;#39;
# or
ansible-playbook -i hosts playbook.yml -e &amp;#39;args&amp;#39; -t deploy
&lt;/pre&gt;&lt;/div&gt;

实现自动化部署.&lt;/p&gt;

&lt;p&gt;长此以往，虽然可以实现所谓的自动化，但产品业务线多且杂的情况下，项目很难维护，更不用说以文件为存储的表现形式很差,针对目前使用ansible的经验以及使用中的困难,可以针对性的提出一些解决方案&lt;/p&gt;

&lt;h3 id="org-2847809"&gt;加速&lt;/h3&gt;

&lt;h4 id="org-40828725"&gt;问题&lt;/h4&gt;
&lt;p&gt;自动化部署其中最大的障碍就是 &lt;b&gt;网络&lt;/b&gt; 的原因&lt;/p&gt;

&lt;p&gt;其中需要通过网络上传一些模板文件,有的甚至还需要上传一些压缩包,虽然说几MB的东西很快就能上传成功，但如果把这上传文件所需要的2秒乘以上百，上千台主机呢,更不用说ansible的表现形式就是一个任务一个任务的往下执行,假如在上传模板这一步卡住 …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-2847809"&gt;加速&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-40828725"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-49851788"&gt;方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-2901432"&gt;目标&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-81793856"&gt;web界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-43254016"&gt;任务队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;ansible是基于Python的 &lt;b&gt;自动化部署&lt;/b&gt; 方案,但是目前只是通过命令行
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible -i hosts all -a &amp;#39;uptime&amp;#39;
# or
ansible-playbook -i hosts playbook.yml -e &amp;#39;args&amp;#39; -t deploy
&lt;/pre&gt;&lt;/div&gt;

实现自动化部署.&lt;/p&gt;

&lt;p&gt;长此以往，虽然可以实现所谓的自动化，但产品业务线多且杂的情况下，项目很难维护，更不用说以文件为存储的表现形式很差,针对目前使用ansible的经验以及使用中的困难,可以针对性的提出一些解决方案&lt;/p&gt;

&lt;h3 id="org-2847809"&gt;加速&lt;/h3&gt;

&lt;h4 id="org-40828725"&gt;问题&lt;/h4&gt;
&lt;p&gt;自动化部署其中最大的障碍就是 &lt;b&gt;网络&lt;/b&gt; 的原因&lt;/p&gt;

&lt;p&gt;其中需要通过网络上传一些模板文件,有的甚至还需要上传一些压缩包,虽然说几MB的东西很快就能上传成功，但如果把这上传文件所需要的2秒乘以上百，上千台主机呢,更不用说ansible的表现形式就是一个任务一个任务的往下执行,假如在上传模板这一步卡住(等待所有服务器上传成功),这时某台未模板化的服务器的某服务需要重启，是不是会出问题呢&lt;/p&gt;

&lt;h4 id="org-49851788"&gt;方案&lt;/h4&gt;
&lt;p&gt;针对这一问题,目前想到的解决方案如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;适当增加fork数&lt;/b&gt;
&lt;p&gt;目前fork数默认为50，可以适当增加&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;大文件使用内网(外网)下载&lt;/b&gt;
&lt;p&gt;从部署机上上传文件可能会出现这样那样的问题，尤其是上传到国外服务器时经常会出现ansible playbook的任务卡住问题(其实是正在以几KB/s的龟速运行)，所以其中大于xxMB的文件(压缩包)全部使用从远程服务器上下载方式,并且全部进行加密处理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;把超过几百台服务器的节点分组多进程运行&lt;/b&gt;
&lt;p&gt;服务器一旦多了，对应任务的等待时间也就多了，所以将500台的节点分为十组，每组50台,使用多进程分别同时运行，这样可以有效减少任务等待时间,需要注意每组运行失败的服务器。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;把经常出问题或者网络不太好的节点放到最后运行&lt;/b&gt;
&lt;p&gt;像中国移动以及香港，国外的某些节点在运行ansible playbook的时候总会或多或少的出些问题,这些节点可以考虑放到最后,并且需要找出问题原因进行优化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="org-2901432"&gt;目标&lt;/h3&gt;

&lt;h4 id="org-81793856"&gt;web界面&lt;/h4&gt;
&lt;p&gt;使用过ansible的同学一定知道ansible-tower，它是ansible的web方式部署，通过web界面就可以添加删除任务,并且运行ansible playbook,可惜，它是收费的 /捂脸&lt;/p&gt;

&lt;h4 id="org-43254016"&gt;任务队列&lt;/h4&gt;
&lt;p&gt;把ansible playbook放到任务队列里，由消费者去消费对应的任务&lt;/p&gt;

&lt;p&gt;未完待续...&lt;/p&gt;</content><category term="linux"></category><category term="ansible"></category></entry><entry><title>ansible-playbook中tasks单进程</title><link href="http://honmaple.me/articles/2017/09/ansible-playbook%E4%B8%ADtasks%E5%8D%95%E8%BF%9B%E7%A8%8B.html" rel="alternate"></link><published>2017-09-19T00:00:00+08:00</published><updated>2017-09-19T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-09-19:/articles/2017/09/ansible-playbook中tasks单进程.html</id><summary type="html">
&lt;p&gt;之前有一个需求,ansible-playbook中需要某一步单步执行,也就是说在有多台服务器时,某个任务只能一台服务器执行完后,另一台服务器才能执行,否者对应集群的服务会出问题&lt;/p&gt;

&lt;p&gt;这是一个很简单的需求,ansible中也有对应的实现, &lt;code&gt;--fork 1&lt;/code&gt; 或者 使用 &lt;code&gt;serial&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是如果有人忘记加 &lt;code&gt;--fork 1&lt;/code&gt; 了呢，而且该任务是在子任务中，使用 &lt;b&gt;include&lt;/b&gt; 加载, &lt;code&gt;serial&lt;/code&gt; 关键字无法在某一特定任务中使用,只能与 &lt;b&gt;hosts&lt;/b&gt; 同级&lt;/p&gt;

&lt;p&gt;所幸，在这里 &lt;a href="https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task"&gt;https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task&lt;/a&gt; 找到了解决办法,使用 &lt;b&gt;delegate_to&lt;/b&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
  &lt;span class="c1"&gt;# serial: 1 would be the proper solution here, but …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;之前有一个需求,ansible-playbook中需要某一步单步执行,也就是说在有多台服务器时,某个任务只能一台服务器执行完后,另一台服务器才能执行,否者对应集群的服务会出问题&lt;/p&gt;

&lt;p&gt;这是一个很简单的需求,ansible中也有对应的实现, &lt;code&gt;--fork 1&lt;/code&gt; 或者 使用 &lt;code&gt;serial&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是如果有人忘记加 &lt;code&gt;--fork 1&lt;/code&gt; 了呢，而且该任务是在子任务中，使用 &lt;b&gt;include&lt;/b&gt; 加载, &lt;code&gt;serial&lt;/code&gt; 关键字无法在某一特定任务中使用,只能与 &lt;b&gt;hosts&lt;/b&gt; 同级&lt;/p&gt;

&lt;p&gt;所幸，在这里 &lt;a href="https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task"&gt;https://www.bountysource.com/issues/26342862-support-for-serial-on-an-individual-task&lt;/a&gt; 找到了解决办法,使用 &lt;b&gt;delegate_to&lt;/b&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
  &lt;span class="c1"&gt;# serial: 1 would be the proper solution here, but that can only be set on play level&lt;/span&gt;
  &lt;span class="c1"&gt;# upstream issue: https://github.com/ansible/ansible/issues/12170&lt;/span&gt;
  &lt;span class="n"&gt;run_once&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{play_hosts}}&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;delegate_to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ item }}&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/bin/service restart&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="linux"></category><category term="ansible"></category></entry><entry><title>redis集群搭建</title><link href="http://honmaple.me/articles/2017/08/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html" rel="alternate"></link><published>2017-08-13T00:00:00+08:00</published><updated>2017-08-13T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-08-13:/articles/2017/08/redis集群搭建.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-40969078"&gt;准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-84451951"&gt;创建集群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-50876275"&gt;测试集群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.redis.cn/topics/cluster-tutorial.html"&gt;参考资料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis 集群是一个提供在多个Redis间&lt;b&gt;节点间共享数据&lt;/b&gt;的程序集&lt;/p&gt;

&lt;h3 id="org-40969078"&gt;准备&lt;/h3&gt;

&lt;p&gt;集群开始需要运行redis集群实例，而且要让集群正常运作至少需要三个主节点,这里创建六个节点，三个为主节点，三个为从节点,端口号分别为9001,9002,9003,9004,9005,9006&lt;/p&gt;

&lt;p&gt;并创建六个以端口号为名字的目录， 在每个目录中运行一个Redis实例
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p redis/9001
&lt;span class="nb"&gt;cd&lt;/span&gt; redis
mkdir &lt;span class="m"&gt;9002&lt;/span&gt;
mkdir &lt;span class="m"&gt;9003&lt;/span&gt;
mkdir &lt;span class="m"&gt;9004&lt;/span&gt;
mkdir &lt;span class="m"&gt;9005&lt;/span&gt;
mkdir &lt;span class="m"&gt;9006&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;然后将对应的配置&lt;b&gt;redis.conf&lt;/b&gt;放入相应的目录中(记得修改端口号)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最小配置选项:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;port 9001 …&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-40969078"&gt;准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-84451951"&gt;创建集群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-50876275"&gt;测试集群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.redis.cn/topics/cluster-tutorial.html"&gt;参考资料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis 集群是一个提供在多个Redis间&lt;b&gt;节点间共享数据&lt;/b&gt;的程序集&lt;/p&gt;

&lt;h3 id="org-40969078"&gt;准备&lt;/h3&gt;

&lt;p&gt;集群开始需要运行redis集群实例，而且要让集群正常运作至少需要三个主节点,这里创建六个节点，三个为主节点，三个为从节点,端口号分别为9001,9002,9003,9004,9005,9006&lt;/p&gt;

&lt;p&gt;并创建六个以端口号为名字的目录， 在每个目录中运行一个Redis实例
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p redis/9001
&lt;span class="nb"&gt;cd&lt;/span&gt; redis
mkdir &lt;span class="m"&gt;9002&lt;/span&gt;
mkdir &lt;span class="m"&gt;9003&lt;/span&gt;
mkdir &lt;span class="m"&gt;9004&lt;/span&gt;
mkdir &lt;span class="m"&gt;9005&lt;/span&gt;
mkdir &lt;span class="m"&gt;9006&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;然后将对应的配置&lt;b&gt;redis.conf&lt;/b&gt;放入相应的目录中(记得修改端口号)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最小配置选项:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;port 9001
cluster-enabled yes
cluster-config-file node9001.conf
cluster-node-timeout 5000
appendonly yes
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后就可以启动redis实例了
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server redis/9001/redis.conf
redis-server redis/9002/redis.conf
redis-server redis/9003/redis.conf
redis-server redis/9004/redis.conf
redis-server redis/9005/redis.conf
redis-server redis/9006/redis.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;由于这个过程很简单而且重复,所以我写了一个脚本进行创建:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@cli.command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click.option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--dirs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click.option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;port {0}&lt;/span&gt;
&lt;span class="s1"&gt;cluster-enabled yes&lt;/span&gt;
&lt;span class="s1"&gt;cluster-config-file nodes{0}.conf&lt;/span&gt;
&lt;span class="s1"&gt;cluster-node-timeout 5000&lt;/span&gt;
&lt;span class="s1"&gt;appendonly yes&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redis-server {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id="org-84451951"&gt;创建集群&lt;/h3&gt;
&lt;p&gt;使用redis的官方脚本&lt;a href="https://github.com/antirez/redis/blob/unstable/src/redis-trib.rb"&gt;redis-trib&lt;/a&gt;进行创建
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruby redis-trib.rb create --replicas &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001 &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9002 &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9003 &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9004 &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9005 &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9006
&lt;/pre&gt;&lt;/div&gt;

或者接上面的脚本
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1:{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ruby redis-trib.rb create --replicas 1 {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;–replicas 1&lt;/b&gt;:表示为集群中的每个主节点创建一个从节点&lt;/p&gt;

&lt;p&gt;结果如图所示:
&lt;a href="https://images.honmaple.com/images/admin/show/2017/08/150264027839037.png" data-fancybox="image"&gt;&lt;img data-src="https://images.honmaple.com/images/admin/show/2017/08/150264027839037.png" class="lazyload" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;输入&lt;b&gt;yes&lt;/b&gt;
最后查看集群是否启动成功
&lt;a href="https://images.honmaple.com/images/admin/show/2017/08/150264059108046.png" data-fancybox="image"&gt;&lt;img data-src="https://images.honmaple.com/images/admin/show/2017/08/150264059108046.png" class="lazyload" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="org-50876275"&gt;测试集群&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;-c&lt;/b&gt; 选项以集群方式启动
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redis-cli -c -p &lt;span class="m"&gt;7000&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001&amp;gt; keys *
  &lt;span class="o"&gt;(&lt;/span&gt;empty list or &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001&amp;gt; &lt;span class="nb"&gt;set&lt;/span&gt; hello world
  OK
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001&amp;gt; get hello
  &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001&amp;gt; &lt;span class="nb"&gt;set&lt;/span&gt; hello1 world1
  -&amp;gt; Redirected to slot &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11613&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; located at &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9003
  OK
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9003&amp;gt; get hello1
  &lt;span class="s2"&gt;&amp;quot;world1&amp;quot;&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9003&amp;gt; &lt;span class="nb"&gt;set&lt;/span&gt; hello2 world2
  -&amp;gt; Redirected to slot &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;7486&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; located at &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9002
  OK
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9002&amp;gt; get hello2
  &lt;span class="s2"&gt;&amp;quot;world2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;进入另一个实例&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redis-cli -c -p &lt;span class="m"&gt;9002&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9002&amp;gt; get hello
  -&amp;gt; Redirected to slot &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;866&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; located at &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001
  &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9001&amp;gt; get hello1
  -&amp;gt; Redirected to slot &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11613&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; located at &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9003
  &lt;span class="s2"&gt;&amp;quot;world1&amp;quot;&lt;/span&gt;
  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9003&amp;gt; get hello2
  -&amp;gt; Redirected to slot &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;7486&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; located at &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9002
  &lt;span class="s2"&gt;&amp;quot;world2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok,先这样&lt;/p&gt;</content><category term="linux"></category><category term="redis"></category></entry><entry><title>手机与Linux桌面文件共享</title><link href="http://honmaple.me/articles/2017/07/%E6%89%8B%E6%9C%BA%E4%B8%8ELinux%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB.html" rel="alternate"></link><published>2017-07-30T00:00:00+08:00</published><updated>2017-07-30T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-07-30:/articles/2017/07/手机与Linux桌面文件共享.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-72199421"&gt;手机共享文件到电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-56722688"&gt;电脑共享文件到手机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;手机: 某米
电脑: archlinux
环境: 同一wifi下&lt;/p&gt;

&lt;h3 id="org-72199421"&gt;手机共享文件到电脑&lt;/h3&gt;
&lt;p&gt;最近才发现手机可以开启ftp服务对文件进行共享,直接进入文件管理器开启就行,电脑上使用
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ftp target
&lt;/pre&gt;&lt;/div&gt;

进行连接&lt;/p&gt;

&lt;p&gt;注： &lt;b&gt;get&lt;/b&gt; 下载 &lt;b&gt;put&lt;/b&gt; 上传&lt;/p&gt;


&lt;h3 id="org-56722688"&gt;电脑共享文件到手机&lt;/h3&gt;
&lt;p&gt;这里采用python搭建一个简单的web服务(python3)供手机下载文件
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 首先 cd 到要共享的目录
python -m http.server --bind 0.0.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;查看本机IP
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig
# 或者
ip addr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;重要&lt;/b&gt;: 请确保关闭防火墙,否则手机无法连接
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl …&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-72199421"&gt;手机共享文件到电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-56722688"&gt;电脑共享文件到手机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;手机: 某米
电脑: archlinux
环境: 同一wifi下&lt;/p&gt;

&lt;h3 id="org-72199421"&gt;手机共享文件到电脑&lt;/h3&gt;
&lt;p&gt;最近才发现手机可以开启ftp服务对文件进行共享,直接进入文件管理器开启就行,电脑上使用
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ftp target
&lt;/pre&gt;&lt;/div&gt;

进行连接&lt;/p&gt;

&lt;p&gt;注： &lt;b&gt;get&lt;/b&gt; 下载 &lt;b&gt;put&lt;/b&gt; 上传&lt;/p&gt;


&lt;h3 id="org-56722688"&gt;电脑共享文件到手机&lt;/h3&gt;
&lt;p&gt;这里采用python搭建一个简单的web服务(python3)供手机下载文件
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 首先 cd 到要共享的目录
python -m http.server --bind 0.0.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;查看本机IP
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig
# 或者
ip addr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;重要&lt;/b&gt;: 请确保关闭防火墙,否则手机无法连接
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl stop iptables
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;然后手机浏览器访问 &lt;b&gt;ip:8000&lt;/b&gt; 就能下载电脑端的文件了&lt;/p&gt;


&lt;p&gt;&lt;b&gt;非同一wifi环境下&lt;/b&gt; : 可以先在电脑端开启wifi热点(可以不联网),我是直接使用networkmanger进行创建的
&lt;a href="https://images.honmaple.com/images/admin/show/2017/07/150142558495491.png" data-fancybox="image"&gt;&lt;img data-src="https://images.honmaple.com/images/admin/show/2017/07/150142558495491.png" class="lazyload" /&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="linux"></category><category term="ftp"></category></entry><entry><title>Linux总结(草稿)</title><link href="http://honmaple.me/articles/2017/07/Linux%E4%BC%AA%E6%80%BB%E7%BB%93.html" rel="alternate"></link><published>2017-07-12T00:00:00+08:00</published><updated>2017-07-12T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-07-12:/articles/2017/07/Linux伪总结.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-14380497"&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-58963807"&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-35350341"&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h3 id="org-14380497"&gt;Linux发展历史&lt;/h3&gt;
&lt;p&gt;Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展&lt;/p&gt;

&lt;h3 id="org-58963807"&gt;Linux的最小组成&lt;/h3&gt;
&lt;p&gt;Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。&lt;/p&gt;

&lt;p&gt;语言:一般有头文件与库文件,头文件为实现,库文件为声明&lt;/p&gt;


&lt;h3 id="org-35350341"&gt;Linux的安装与启动&lt;/h3&gt;
&lt;p&gt;当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
然后运行/etc/rc …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-14380497"&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-58963807"&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-35350341"&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h3 id="org-14380497"&gt;Linux发展历史&lt;/h3&gt;
&lt;p&gt;Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展&lt;/p&gt;

&lt;h3 id="org-58963807"&gt;Linux的最小组成&lt;/h3&gt;
&lt;p&gt;Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。&lt;/p&gt;

&lt;p&gt;语言:一般有头文件与库文件,头文件为实现,库文件为声明&lt;/p&gt;


&lt;h3 id="org-35350341"&gt;Linux的安装与启动&lt;/h3&gt;
&lt;p&gt;当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
然后运行/etc/rc.d/init.d中运行级别的启动脚本。&lt;/p&gt;

&lt;p&gt;分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便&lt;/p&gt;

&lt;p&gt;文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等,
其中ext4单个分区最大可管理16TB磁盘,xfs单分区最大支持2PB磁盘&lt;/p&gt;

&lt;p&gt;内存管理：当内存不够时,linux会杀死内存占用最高的进程,像mongodb就是一个占内存大户&lt;/p&gt;

&lt;p&gt;常用命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file: 识别文件类型与编码格式&lt;/li&gt;
&lt;li&gt;ldd:用于打印程序或者库文件所依赖的共享库列表

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行级别:
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;0: 停机&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;1: 单用户模式&lt;/li&gt;
&lt;li&gt;2: 多用户，没有 NFS&lt;/li&gt;
&lt;li&gt;3: 完全多用户模式(标准的运行级)&lt;/li&gt;
&lt;li&gt;4: 没有用到&lt;/li&gt;
&lt;li&gt;5: X11&lt;/li&gt;
&lt;li&gt;6: 重新启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>celery动态添加任务</title><link href="http://honmaple.me/articles/2017/07/celery%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1.html" rel="alternate"></link><published>2017-07-09T00:00:00+08:00</published><updated>2017-07-09T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.me,2017-07-09:/articles/2017/07/celery动态添加任务.html</id><summary type="html">

&lt;p&gt;celery是一个基于Python的分布式调度系统，&lt;a href="http://docs.celeryproject.org/en/latest/"&gt;文档在这&lt;/a&gt; ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉&lt;/p&gt;

&lt;p&gt;为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;很可惜，会出现这样的错误
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kombu.exceptions.EncodeError: Object of type &amp;#39;function&amp;#39; is not JSON serializable
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;换一种序列化方式
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pickle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</summary><content type="html">

&lt;p&gt;celery是一个基于Python的分布式调度系统，&lt;a href="http://docs.celeryproject.org/en/latest/"&gt;文档在这&lt;/a&gt; ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉&lt;/p&gt;

&lt;p&gt;为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;很可惜，会出现这样的错误
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kombu.exceptions.EncodeError: Object of type &amp;#39;function&amp;#39; is not JSON serializable
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;换一种序列化方式
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pickle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;结果又出现一大串错误信息
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ERROR/MainProcess] Pool callback raised exception: ContentDisallowed(&amp;#39;Refusing to deserialize untrusted content of type pickle (application/x-python-serialize)&amp;#39;,)
Traceback (most recent call last):
  File &amp;quot;/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py&amp;quot;, line 42, in __get__
    return obj.__dict__[self.__name__]
KeyError: &amp;#39;chord&amp;#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &amp;quot;/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py&amp;quot;, line 42, in __get__
    return obj.__dict__[self.__name__]
KeyError: &amp;#39;_payload&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;换一种思路
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

不知道这样是否可以，结果测试: &lt;b&gt;No&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;哎，流年不利.&lt;/p&gt;

&lt;p&gt;最后一直测试，一直测试，终于找到了一种办法,直接上代码
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;reload&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CELERY_IMPORTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;task.all_task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;import_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;import_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;项目结构是这样的
&lt;blockquote&gt;
&lt;p class="org-verse"&gt;
├── celery_app.py&lt;br/&gt;
├── config.py&lt;br/&gt;
├── task&lt;br/&gt;
│   ├── all_task.py&lt;br/&gt;
│   ├── &lt;span style="text-decoration:underline"&gt;&lt;/span&gt;init__.py
&lt;/p&gt;
&lt;/blockquote&gt;
注意: &lt;b&gt;任务必须大于等于两层目录&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;以后每次添加任务都可以先添加到&lt;b&gt;all_task.py&lt;/b&gt;里，调用时不用再重启celery服务&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# task/all_task.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# example&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery_app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;

&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task.all_task.ee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;444&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok，另外发现celery也支持任务定时调用,就像这样
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task.all_task.aa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;eta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;简单实现一个任务重复调用的功能
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;next_run_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next_run_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task_id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

大概意思就是先计算下次运行的时间,然后把任务添加到celery队列里,这里有个task_id有些问题,因为假设添加了每隔3s执行一个任务,
它的task_id默认会使用uuid生成，如果想要再移除这个任务就不太方便，自定task_id可能会好一些，另外也许需要判断task_id是否存在
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;ok,再献上一个好用的函数&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isfunction&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;task:{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;doc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;isfunction&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就这样.&lt;/p&gt;</content><category term="linux"></category><category term="celery"></category><category term="python"></category></entry></feed>