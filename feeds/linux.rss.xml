<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>honmaple's blog - Linux</title><link href="http://honmaple.org/" rel="alternate"></link><link href="http://honmaple.org/feeds/linux.rss.xml" rel="self"></link><id>http://honmaple.org/</id><updated>2017-07-12T00:00:00+08:00</updated><entry><title>Linux总结(草稿)</title><link href="http://honmaple.org/articles/2017/07/Linux%E4%BC%AA%E6%80%BB%E7%BB%93.html" rel="alternate"></link><published>2017-07-12T00:00:00+08:00</published><updated>2017-07-12T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-12:/articles/2017/07/Linux伪总结.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310143"&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310145"&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310146"&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014130310143"&gt;Linux发展历史&lt;/h1&gt;
&lt;p&gt;Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展&lt;/p&gt;

&lt;h1 id="org-15014130310145"&gt;Linux的最小组成&lt;/h1&gt;
&lt;p&gt;Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。&lt;/p&gt;

&lt;p&gt;语言:一般有头文件与库文件,头文件为实现,库文件为声明&lt;/p&gt;


&lt;h1 id="org-15014130310146"&gt;Linux的安装与启动&lt;/h1&gt;
&lt;p&gt;当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
然后运行/etc/rc.d/init.d中运行级别的启动脚本。&lt;/p&gt;

&lt;p&gt;分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便&lt;/p&gt;

&lt;p&gt;文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等 …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310143"&gt;Linux发展历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310145"&gt;Linux的最小组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310146"&gt;Linux的安装与启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014130310143"&gt;Linux发展历史&lt;/h1&gt;
&lt;p&gt;Linux是由BSD发展而来，BSD又起源于UNIX。UNIX由贝尔实验室开发，
后来开放给各大学教学使用,其中伯克利大学通过对UNIX源码的研究以及不断的改进与扩展,
推出BSD,并于BSD 4.3版本加入网络模块,极大推进UNIX的发展。但后面由于版权等原因,
UNIX与BSD之间发生冲突与法律纠纷,直到1998年,在此期间,芬兰大学生Linus Torvalds
于1991年发布首个Linux版本,linux也趁UNIX与BSD纠纷之际,得到非常快速的发展&lt;/p&gt;

&lt;h1 id="org-15014130310145"&gt;Linux的最小组成&lt;/h1&gt;
&lt;p&gt;Linux最小由内核kernel,文件层次结构FHS,系统启动器bootloader组成,其中内存调度，
进程调度等由内核管理,内核可单独运行，但需要与其它组成相配合。&lt;/p&gt;

&lt;p&gt;语言:一般有头文件与库文件,头文件为实现,库文件为声明&lt;/p&gt;


&lt;h1 id="org-15014130310146"&gt;Linux的安装与启动&lt;/h1&gt;
&lt;p&gt;当linux启动时，首先启动内核，内核调用init来完成引导进程，init启动时，它会在/etc/inittab内查找默认的运行级别,
然后运行/etc/rc.d/init.d中运行级别的启动脚本。&lt;/p&gt;

&lt;p&gt;分区:一般分根分区/与swap交换分区,根分区的设置是为了备份方便&lt;/p&gt;

&lt;p&gt;文件系统:在存储设备上组织文件的方法,负责文件的增删改查,linux上常用文件系统有ext2,ext3,ext4,xfs,btrfs等,
其中ext4单个分区最大可管理16TB磁盘,xfs单分区最大支持2PB磁盘&lt;/p&gt;

&lt;p&gt;内存管理：当内存不够时,linux会杀死内存占用最高的进程,像mongodb就是一个占内存大户&lt;/p&gt;

&lt;p&gt;常用命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file: 识别文件类型与编码格式&lt;/li&gt;
&lt;li&gt;ldd:用于打印程序或者库文件所依赖的共享库列表

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行级别:
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;0: 停机&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;1: 单用户模式&lt;/li&gt;
&lt;li&gt;2: 多用户，没有 NFS&lt;/li&gt;
&lt;li&gt;3: 完全多用户模式(标准的运行级)&lt;/li&gt;
&lt;li&gt;4: 没有用到&lt;/li&gt;
&lt;li&gt;5: X11&lt;/li&gt;
&lt;li&gt;6: 重新启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>celery动态添加任务</title><link href="http://honmaple.org/articles/2017/07/celery%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1.html" rel="alternate"></link><published>2017-07-09T00:00:00+08:00</published><updated>2017-07-09T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-09:/articles/2017/07/celery动态添加任务.html</id><summary type="html">

&lt;p&gt;celery是一个基于Python的分布式调度系统，&lt;a href="http://docs.celeryproject.org/en/latest/"&gt;文档在这&lt;/a&gt; ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉&lt;/p&gt;

&lt;p&gt;为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样
&lt;pre class="python"&gt;
@app.task
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;很可惜，会出现这样的错误

&lt;pre class="example"&gt;
kombu.exceptions.EncodeError: Object of type 'function' is not JSON serializable
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;换一种序列化方式
&lt;pre class="python"&gt;
@app.task(serializer='pickle')
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;结果又出现一大串错误信息

&lt;pre class="example"&gt;
ERROR/MainProcess] Pool callback raised exception: ContentDisallowed('Refusing to deserialize untrusted content of type …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">

&lt;p&gt;celery是一个基于Python的分布式调度系统，&lt;a href="http://docs.celeryproject.org/en/latest/"&gt;文档在这&lt;/a&gt; ,最近有个需求,想要动态的添加任务而不用重启celery服务,找了一圈没找到什么好办法(也有可能是文档没看仔细)，所以只能自己实现囉&lt;/p&gt;

&lt;p&gt;为celery动态添加任务，首先我想到的是传递一个函数进去，让某个特定任务去执行这个传递过去的函数，就像这样
&lt;pre class="python"&gt;
@app.task
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;很可惜，会出现这样的错误

&lt;pre class="example"&gt;
kombu.exceptions.EncodeError: Object of type 'function' is not JSON serializable
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;换一种序列化方式
&lt;pre class="python"&gt;
@app.task(serializer='pickle')
def execute(func, *args, **kwargs):
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;结果又出现一大串错误信息

&lt;pre class="example"&gt;
ERROR/MainProcess] Pool callback raised exception: ContentDisallowed('Refusing to deserialize untrusted content of type pickle (application/x-python-serialize)',)
Traceback (most recent call last):
  File "/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py", line 42, in __get__
    return obj.__dict__[self.__name__]
KeyError: 'chord'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/jl/.virtualenvs/test/lib/python3.6/site-packages/kombu/utils/objects.py", line 42, in __get__
    return obj.__dict__[self.__name__]
KeyError: '_payload'
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;换一种思路
&lt;pre class="python"&gt;
func = import_string(func)
&lt;/pre&gt;
不知道这样是否可以，结果测试:&lt;b&gt;No&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;哎，流年不利.&lt;/p&gt;

&lt;p&gt;最后一直测试，一直测试，终于找到了一种办法,直接上代码
&lt;pre class="python"&gt;
from importlib import import_module, reload

app.conf.CELERY_IMPORTS = ['task', 'task.all_task']

def import_string(import_name):
    import_name = str(import_name).replace(':', '.')
    modules = import_name.split('.')
    mod = import_module(modules[0])
    for comp in modules[1:]:
        if not hasattr(mod, comp):
            reload(mod)
        mod = getattr(mod, comp)
    return mod

@app.task
def execute(func, *args, **kwargs):
    func = import_string(func)
    return func(*args, **kwargs)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;项目结构是这样的
&lt;blockquote&gt;
&lt;p&gt;├── celery_app.py
├── config.py
├── task
│   ├── all_task.py
│   ├──&lt;span style="text-decoration:underline"&gt;_init_&lt;/span&gt;.py&lt;/p&gt;
&lt;/blockquote&gt;
注意:&lt;b&gt;任务必须大于等于两层目录&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;以后每次添加任务都可以先添加到*all_task.py*里，调用时不用再重启celery服务&lt;/p&gt;


&lt;pre class="example"&gt;
# task/all_task.py

def ee(c, d):
    return c, d, '你好'

# example
from celery_app import execute

execute.delay('task.all_task.ee', 2, 444)
&lt;/pre&gt;


&lt;p&gt;ok，另外发现celery也支持任务定时调用,就像这样
&lt;pre class="python"&gt;
execute.apply_async(args=['task.all_task.aa'], eta=datetime(2017, 7, 9, 8, 12, 0))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;简单实现一个任务重复调用的功能
&lt;pre class="python"&gt;
@app.task
def interval(func, seconds, args=(), task_id=None):
    next_run_time = current_time() + timedelta(seconds=seconds)
    kwargs = dict(args=(func, seconds, args), eta=next_run_time)
    if task_id is not None:
        kwargs.update(task_id=task_id)
    interval.apply_async(**kwargs)
    func = import_string(func)
    return func(*args)
&lt;/pre&gt;
大概意思就是先计算下次运行的时间,然后把任务添加到celery队列里,这里有个task_id有些问题,因为假设添加了每隔3s执行一个任务,
它的task_id默认会使用uuid生成，如果想要再移除这个任务就不太方便，自定task_id可能会好一些，另外也许需要判断task_id是否存在
&lt;pre class="python"&gt;
AsyncResult(task_id).state
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ok,再献上一个好用的函数&lt;/p&gt;

&lt;pre class="python"&gt;
from inspect import getmembers, isfunction

def get_tasks(module='task'):
    return [{
        'name': 'task:{}'.format(f[1].__name__),
        'doc': f[1].__doc__,
    } for f in getmembers(import_module(module), isfunction)]
&lt;/pre&gt;

&lt;p&gt;就这样.&lt;/p&gt;</content><category term="linux"></category><category term="celery"></category><category term="python"></category></entry><entry><title>我的Linux历程</title><link href="http://honmaple.org/articles/2017/07/%E6%88%91%E7%9A%84Linux%E5%8E%86%E7%A8%8B.html" rel="alternate"></link><published>2017-07-05T00:00:00+08:00</published><updated>2017-07-05T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-07-05:/articles/2017/07/我的Linux历程.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310361"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310363"&gt;Linux发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310363"&gt;Linux历程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310365"&gt;Linux的娱乐性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310366"&gt;Linux上的实用性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310367"&gt;深入了解Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014130310361"&gt;Linux&lt;/h1&gt;
&lt;p&gt;是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统&lt;/p&gt;

&lt;p&gt;Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。&lt;/p&gt;

&lt;h1 id="org-15014130310363"&gt;Linux发行版&lt;/h1&gt;
&lt;p&gt;简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版&lt;/p&gt;

&lt;h1 id="org-15014130310363"&gt;Linux历程&lt;/h1&gt;
&lt;p&gt;曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,
大概是这样的 centos --&gt; kali --&gt; ubuntu --&gt; fedora --&gt; ubuntu kylin --&gt; mint --&gt; debian --&gt; fedora --&gt; archlinux ......,Linux发行版大概分为3系,
debain系,包括ubuntu,mint,kali等,使用包管理器apt-get、aptitude、dpkg;centos或者说红帽系，包括众所周知的小白鼠版本fedora，
如果不是每半年要重装一次，我会一直使用它,而不是archlinux,所使用的包管理器yum,fedora已更换成dnf;
还有其它系，因为它们所占份额太小,包括archlinux …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310361"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310363"&gt;Linux发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310363"&gt;Linux历程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310365"&gt;Linux的娱乐性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310366"&gt;Linux上的实用性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310367"&gt;深入了解Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;h1 id="org-15014130310361"&gt;Linux&lt;/h1&gt;
&lt;p&gt;是一种计算机操作系统内核,以C语言和汇编语言写成，匹配POSIX标准，以GNU通用公共许可证(GPL2)发布,最早是由林纳斯·托瓦兹开发的类UNIX系统&lt;/p&gt;

&lt;p&gt;Linux与UNIX的区别: UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上。UNIX是商业软件，而Linux自由免费。&lt;/p&gt;

&lt;h1 id="org-15014130310363"&gt;Linux发行版&lt;/h1&gt;
&lt;p&gt;简单的来说将Linux内核与一些系统软件，应用软件进行整合，有的发行版还包括图形界面(x11，wayland),目前所说的Linux大多代表Linux发行版&lt;/p&gt;

&lt;h1 id="org-15014130310363"&gt;Linux历程&lt;/h1&gt;
&lt;p&gt;曾经在某论坛看到linux这个名词，立马装上虚拟机然后安装了我的第一个Linux版本--centos，并且装上了gnome桌面环境，随后开始了Linux折腾之旅,
大概是这样的 centos --&gt; kali --&gt; ubuntu --&gt; fedora --&gt; ubuntu kylin --&gt; mint --&gt; debian --&gt; fedora --&gt; archlinux ......,Linux发行版大概分为3系,
debain系,包括ubuntu,mint,kali等,使用包管理器apt-get、aptitude、dpkg;centos或者说红帽系，包括众所周知的小白鼠版本fedora，
如果不是每半年要重装一次，我会一直使用它,而不是archlinux,所使用的包管理器yum,fedora已更换成dnf;
还有其它系，因为它们所占份额太小,包括archlinux,gentoo等&lt;/p&gt;

&lt;h1 id="org-15014130310365"&gt;Linux的娱乐性&lt;/h1&gt;
&lt;p&gt;说实话，Linux上的游戏对比windows上就是渣，大致是因为Linux上驱动的问题，这也难怪Linus会对nvidia竖中指，虽说有开源的实现,但与nvidia在windows上性能的对比还相差甚远，
不过Linux上还是有很多可玩的游戏的,steam对Linux的支持尤为重要,
推荐几个steam上的游戏,正好这几天夏促打折:无主之地2,饥荒，cs:go等&lt;/p&gt;

&lt;h1 id="org-15014130310366"&gt;Linux上的实用性&lt;/h1&gt;
&lt;p&gt;Linux在个人桌面上属于小众市场,使用Linux的大多是程序员，或者是工作需要才会使用，虽说对比windows，Linux也足够应付日常生活,但并不是所有公司都会照顾这小众的Linux用户,
非常感谢网易云音乐与深度团队合作开发了网易云音乐Linux客户端，非常鄙视腾讯放弃对LinuxQQ的维护&lt;/p&gt;

&lt;h1 id="org-15014130310367"&gt;深入了解Linux&lt;/h1&gt;
&lt;p&gt;linux由内核,shell,文件系统和应用软件组成，没有扩展名的概念，分为普通文件，目录，链接，设备,管道文件,其文件系统结构:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bin  存放二进制可执行文件(ls,cat,mkdir等)&lt;/li&gt;
&lt;li&gt;boot  存放用于系统引导时使用的各种文件&lt;/li&gt;
&lt;li&gt;dev 用于存放设备文件&lt;/li&gt;
&lt;li&gt;etc  存放系统配置文件&lt;/li&gt;
&lt;li&gt;home 存放所有用户文件的根目录&lt;/li&gt;
&lt;li&gt;lib  存放跟文件系统中的程序运行所需要的共享库及内核模块&lt;/li&gt;
&lt;li&gt;mnt  系统管理员安装临时文件系统的安装点&lt;/li&gt;
&lt;li&gt;opt  额外安装的可选应用程序包所放置的位置&lt;/li&gt;
&lt;li&gt;proc  虚拟文件系统，存放当前内存的映射&lt;/li&gt;
&lt;li&gt;root  超级用户目录&lt;/li&gt;
&lt;li&gt;sbin  存放二进制可执行文件，只有root才能访问&lt;/li&gt;
&lt;li&gt;tmp  用于存放各种临时文件&lt;/li&gt;
&lt;li&gt;usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录&lt;/li&gt;
&lt;li&gt;var  用于存放运行时需要改变数据的文件&lt;/li&gt;
&lt;/ul&gt;</content><category term="Linux"></category></entry><entry><title>关于网易云音乐个性推荐无法显示的问题</title><link href="http://honmaple.org/articles/2017/06/%E5%85%B3%E4%BA%8E%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%AA%E6%80%A7%E6%8E%A8%E8%8D%90%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2017-06-02T00:00:00+08:00</published><updated>2017-06-02T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-06-02:/articles/2017/06/关于网易云音乐个性推荐无法显示的问题.html</id><summary type="html">
&lt;p&gt;最近在使用网易云音乐时首页的个性推荐总是无法显示，一直在*正在为你生成个性化推荐*,网上也没找到什么办法,偶然间使用
&lt;pre class="sh"&gt;
┌─[jianglin]─[~]
└──╼ rm -rf .cache/netease-cloud-music/
┌─[jianglin]─[~]
└──╼ rm -rf .config/netease-cloud-music/
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;重新打开登陆后个性推荐就出现了，特此记录&lt;/p&gt;</summary><content type="html">
&lt;p&gt;最近在使用网易云音乐时首页的个性推荐总是无法显示，一直在*正在为你生成个性化推荐*,网上也没找到什么办法,偶然间使用
&lt;pre class="sh"&gt;
┌─[jianglin]─[~]
└──╼ rm -rf .cache/netease-cloud-music/
┌─[jianglin]─[~]
└──╼ rm -rf .config/netease-cloud-music/
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;重新打开登陆后个性推荐就出现了，特此记录&lt;/p&gt;</content><category term="linux"></category><category term="netease"></category></entry><entry><title>方便的切换emacs主题</title><link href="http://honmaple.org/articles/2017/05/%E6%96%B9%E4%BE%BF%E7%9A%84%E5%88%87%E6%8D%A2emacs%E4%B8%BB%E9%A2%98.html" rel="alternate"></link><published>2017-05-23T00:00:00+08:00</published><updated>2017-05-23T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-05-23:/articles/2017/05/方便的切换emacs主题.html</id><summary type="html">

&lt;p&gt;作为一个主题控，经常会切换主题，之前切换主题的方式是这样的，*M-x*,`load-theme`,选中,但是个人认为不够便捷，正好前几天发现了*hydra*这个插件,也想实践一下&lt;/p&gt;

&lt;p&gt;获取主题列表
&lt;pre class="elisp"&gt;
  (setq maple-cycle-themes (mapcar 'symbol-name (custom-available-themes)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取当前主题索引
&lt;pre class="elisp"&gt;
  (cl-position (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取下一个主题
&lt;pre class="elisp"&gt;
  (setq maple-current-theme-index
        (+ 1 maple-current-theme-index))
  (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;加载主题
&lt;pre class="elisp"&gt;
  (load-theme (intern maple-current-theme) t)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;最后得到这样的函数
&lt;pre class="elisp"&gt;
  (defun maple/cycle-theme (num)
    (interactive)
    (setq maple-current-theme-index
          (+ num
             (cl-position
              (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)))
    (when (&gt;= maple-current-theme-index (length maple-cycle-themes))
      (setq maple-current-theme-index …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">

&lt;p&gt;作为一个主题控，经常会切换主题，之前切换主题的方式是这样的，*M-x*,`load-theme`,选中,但是个人认为不够便捷，正好前几天发现了*hydra*这个插件,也想实践一下&lt;/p&gt;

&lt;p&gt;获取主题列表
&lt;pre class="elisp"&gt;
  (setq maple-cycle-themes (mapcar 'symbol-name (custom-available-themes)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取当前主题索引
&lt;pre class="elisp"&gt;
  (cl-position (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;获取下一个主题
&lt;pre class="elisp"&gt;
  (setq maple-current-theme-index
        (+ 1 maple-current-theme-index))
  (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;加载主题
&lt;pre class="elisp"&gt;
  (load-theme (intern maple-current-theme) t)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;最后得到这样的函数
&lt;pre class="elisp"&gt;
  (defun maple/cycle-theme (num)
    (interactive)
    (setq maple-current-theme-index
          (+ num
             (cl-position
              (car (mapcar 'symbol-name custom-enabled-themes)) maple-cycle-themes :test 'equal)))
    (when (&gt;= maple-current-theme-index (length maple-cycle-themes))
      (setq maple-current-theme-index 0))
    (setq maple-current-theme (nth maple-current-theme-index maple-cycle-themes))
    (mapc 'disable-theme custom-enabled-themes)
    (let ((progress-reporter
           (make-progress-reporter
            (format "Loading theme %s..." maple-current-theme))))
      (load-theme (intern maple-current-theme) t)
      (progress-reporter-done progress-reporter)))
  (defun maple/next-theme()
    (interactive)
    (maple/cycle-theme 1))
  (defun maple/previous-theme()
    (interactive)
    (maple/cycle-theme -1))
  (defhydra maple/cycle-themes ()
    ("n" maple/next-theme "next theme")
    ("p" maple/previous-theme "prev theme"))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ok,绑定一个快捷键吧&lt;/p&gt;</content><category term="linux"></category><category term="emacs"></category><category term="elisp"></category></entry><entry><title>晒晒我的Linux及桌面</title><link href="http://honmaple.org/articles/2017/05/%E6%99%92%E6%99%92%E6%88%91%E7%9A%84Linux%E5%8F%8A%E6%A1%8C%E9%9D%A2.html" rel="alternate"></link><published>2017-05-01T00:00:00+08:00</published><updated>2017-05-01T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-05-01:/articles/2017/05/晒晒我的Linux及桌面.html</id><summary type="html">
&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364033937825.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364138162872.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364171386276.png"/&gt;&lt;/p&gt;

&lt;p&gt;ps:真TM的闲着蛋疼&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364033937825.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364138162872.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/05/149364171386276.png"/&gt;&lt;/p&gt;

&lt;p&gt;ps:真TM的闲着蛋疼&lt;/p&gt;</content><category term="linux"></category><category term="i3wm"></category></entry><entry><title>emacs实现智能注释</title><link href="http://honmaple.org/articles/2017/04/emacs%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E6%B3%A8%E9%87%8A.html" rel="alternate"></link><published>2017-04-21T00:00:00+08:00</published><updated>2017-04-21T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-04-21:/articles/2017/04/emacs实现智能注释.html</id><summary type="html">
&lt;p&gt;之前使用emacs时遇到这么一个问题
&lt;blockquote&gt;
&lt;p&gt;当前行存在代码折叠时,如果想要注释,必须先选中当前行,否则只能注释代码折叠块的第一行&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;就像这样&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274346737550.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274352705945.png"/&gt;&lt;/p&gt;

&lt;p&gt;基础注释函数来源于&lt;b&gt;stackoverflow&lt;/b&gt;
&lt;pre class="elisp"&gt;
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;在此函数的位置上进行修改,刚开始使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
      (evil-visual-line))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;但是一直没得到想要的效果,后来修改了一下,使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
    (progn
      (end-of-visual-line)
      (evil-visual-state)
      (beginning-of-visual-line)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;意思就是如果当前位置存在代码折叠,先选中当前行,然后注释整个选中区域&lt;/p&gt;

&lt;p&gt;因为光标被移动到首位,我对这个不太在意,如果有在意的话,可以使用 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;之前使用emacs时遇到这么一个问题
&lt;blockquote&gt;
&lt;p&gt;当前行存在代码折叠时,如果想要注释,必须先选中当前行,否则只能注释代码折叠块的第一行&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;就像这样&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274346737550.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/04/149274352705945.png"/&gt;&lt;/p&gt;

&lt;p&gt;基础注释函数来源于&lt;b&gt;stackoverflow&lt;/b&gt;
&lt;pre class="elisp"&gt;
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;在此函数的位置上进行修改,刚开始使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
      (evil-visual-line))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;但是一直没得到想要的效果,后来修改了一下,使用
&lt;pre class="elisp"&gt;
  (when (hs-already-hidden-p)
    (progn
      (end-of-visual-line)
      (evil-visual-state)
      (beginning-of-visual-line)))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;意思就是如果当前位置存在代码折叠,先选中当前行,然后注释整个选中区域&lt;/p&gt;

&lt;p&gt;因为光标被移动到首位,我对这个不太在意,如果有在意的话,可以使用&lt;b&gt;save-excursion&lt;/b&gt;
&lt;pre class="elisp"&gt;
  (save-excursion
  (when (hs-already-hidden-p)
    (progn
      (end-of-visual-line)
      (evil-visual-state)
      (beginning-of-visual-line)))
      ......)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;完整代码
&lt;pre class="elisp"&gt;
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (save-excursion
    (when (hs-already-hidden-p)
      (progn
        (end-of-visual-line)
        (evil-visual-state)
        (beginning-of-visual-line)))
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end))))
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ok,就这样&lt;/p&gt;</content><category term="emacs"></category><category term="elisp"></category><category term="linux"></category></entry><entry><title>修改agetty启动参数自动登陆linux</title><link href="http://honmaple.org/articles/2017/02/%E4%BF%AE%E6%94%B9agetty%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86linux.html" rel="alternate"></link><published>2017-02-26T00:00:00+08:00</published><updated>2017-02-26T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-02-26:/articles/2017/02/修改agetty启动参数自动登陆linux.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311759"&gt;需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311760"&gt;实现&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311760"&gt;自动登陆系统(用户名密码都不用输)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311760"&gt;自动登陆系统(仅输入密码)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;环境: archlinux
&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=198097"&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="org-15014130311759"&gt;需求&lt;/h1&gt;
&lt;p&gt;想要Linux启动后默认以指定用户登陆,不用输入用户名,可以直接输入密码进入系统&lt;/p&gt;

&lt;h1 id="org-15014130311760"&gt;实现&lt;/h1&gt;
&lt;pre class="shell"&gt;
  man agetty
&lt;/pre&gt;
&lt;p&gt;修改以下文件

&lt;pre class="example"&gt;
  /sudo:root@localhost:/etc/systemd/system/getty.target.wants/getty@tty1.service
&lt;/pre&gt;

&lt;pre class="conf"&gt;
   ExecStart=-/sbin/agetty -a username --noclear %I $TERM
&lt;/pre&gt;&lt;/p&gt;
&lt;h2 id="org-15014130311760"&gt;自动登陆系统(用户名密码都不用输)&lt;/h2&gt;

&lt;h2 id="org-15014130311760"&gt;自动登陆系统(仅输入密码)&lt;/h2&gt;
&lt;pre class="conf"&gt;
   ExecStart=-/sbin/agetty --skip-login --login-options "username" --noclear %I $TERM
&lt;/pre&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311759"&gt;需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311760"&gt;实现&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311760"&gt;自动登陆系统(用户名密码都不用输)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311760"&gt;自动登陆系统(仅输入密码)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;环境: archlinux
&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=198097"&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="org-15014130311759"&gt;需求&lt;/h1&gt;
&lt;p&gt;想要Linux启动后默认以指定用户登陆,不用输入用户名,可以直接输入密码进入系统&lt;/p&gt;

&lt;h1 id="org-15014130311760"&gt;实现&lt;/h1&gt;
&lt;pre class="shell"&gt;
  man agetty
&lt;/pre&gt;
&lt;p&gt;修改以下文件

&lt;pre class="example"&gt;
  /sudo:root@localhost:/etc/systemd/system/getty.target.wants/getty@tty1.service
&lt;/pre&gt;

&lt;pre class="conf"&gt;
   ExecStart=-/sbin/agetty -a username --noclear %I $TERM
&lt;/pre&gt;&lt;/p&gt;
&lt;h2 id="org-15014130311760"&gt;自动登陆系统(用户名密码都不用输)&lt;/h2&gt;

&lt;h2 id="org-15014130311760"&gt;自动登陆系统(仅输入密码)&lt;/h2&gt;
&lt;pre class="conf"&gt;
   ExecStart=-/sbin/agetty --skip-login --login-options "username" --noclear %I $TERM
&lt;/pre&gt;</content><category term="linux"></category><category term="agetty"></category></entry><entry><title>linux终端常用快捷键</title><link href="http://honmaple.org/articles/2017/02/linux%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.html" rel="alternate"></link><published>2017-02-16T00:00:00+08:00</published><updated>2017-02-16T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-02-16:/articles/2017/02/linux终端常用快捷键.html</id><summary type="html">
&lt;ol&gt;
&lt;li&gt;移动光标快捷键

&lt;pre class="example"&gt;
    ctrl+f	向前移动一个字符
    ctrl+b	向后移动一个字符
    alt+f	向前移动一个单词
    alt+b	向后移动一个单词
    ctrl+a	移动到当前行首
    ctrl+e	移动到当前行尾
    ctrl+l	清屏，并在屏幕最上面开始一个新行
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;编辑命令行快捷键

&lt;pre class="example"&gt;
   ctrl+d	删除当前的字符
   ctrl+t	交换当前字符和前一个字符的位置
   alt+t	交换当前单词和前一个单词的位置
   alt+u	把当前单词变成大写
   alt+l	把当前单词变成小写
   alt+c	把当前单词变成首字母大写的单词
   ctrl+v	添加一个特殊字符，例如，要添加一个制表符，按ctrl+v+tab
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;剪切、粘贴快捷键

&lt;pre class="example"&gt;
   ctrl+k	剪切文本直到行的末尾
   ctrl+u	剪切文本直到行的起始
   ctrl+w	剪切光标前的单词
   alt+d	剪切光标后的单词 …&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">
&lt;ol&gt;
&lt;li&gt;移动光标快捷键

&lt;pre class="example"&gt;
    ctrl+f	向前移动一个字符
    ctrl+b	向后移动一个字符
    alt+f	向前移动一个单词
    alt+b	向后移动一个单词
    ctrl+a	移动到当前行首
    ctrl+e	移动到当前行尾
    ctrl+l	清屏，并在屏幕最上面开始一个新行
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;编辑命令行快捷键

&lt;pre class="example"&gt;
   ctrl+d	删除当前的字符
   ctrl+t	交换当前字符和前一个字符的位置
   alt+t	交换当前单词和前一个单词的位置
   alt+u	把当前单词变成大写
   alt+l	把当前单词变成小写
   alt+c	把当前单词变成首字母大写的单词
   ctrl+v	添加一个特殊字符，例如，要添加一个制表符，按ctrl+v+tab
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;剪切、粘贴快捷键

&lt;pre class="example"&gt;
   ctrl+k	剪切文本直到行的末尾
   ctrl+u	剪切文本直到行的起始
   ctrl+w	剪切光标前的单词
   alt+d	剪切光标后的单词
   ctrl+y	粘贴最近剪切的文本
   alt+y	回退到先前剪切的文本并粘贴它
   ctrl+c	删除整行
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="linux"></category></entry><entry><title>升级至python3.6导致环境出错解决</title><link href="http://honmaple.org/articles/2017/01/%E5%8D%87%E7%BA%A7%E8%87%B3python3.6%E5%AF%BC%E8%87%B4%E7%8E%AF%E5%A2%83%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3.html" rel="alternate"></link><published>2017-01-09T00:00:00+08:00</published><updated>2017-01-09T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-01-09:/articles/2017/01/升级至python3.6导致环境出错解决.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310305"&gt;事故（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310306"&gt;事故（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;最近archlinux升级至了&lt;b&gt;python3.6&lt;/b&gt; ，直接导致了我的开发环境失效,唉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;archlinux 果然不适合开发&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然后面都已经解决了&lt;/p&gt;

&lt;h2 id="org-15014130310305"&gt;事故（一）&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;virtualenv不可用&lt;/b&gt;,原先使用python3.5创建的环境直接不能用了,只好删了原有了东西,重新使用python3.6创建&lt;/p&gt;

&lt;pre class="python"&gt;
   pip freeze &gt; requestments.txt
   pip install -r requestments.txt
&lt;/pre&gt;

&lt;h2 id="org-15014130310306"&gt;事故（二）&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;py3status&lt;/b&gt; 报错

&lt;pre class="example"&gt;
   Traceback (most recent call last):
  File "/usr/bin/py3status", line 11, in &lt;module&gt;
    load_entry_point('py3status==3.3', 'console_scripts', 'py3status')()
  File "/usr/lib/python3.6/site-packages/pkg_resources/__init__.py", line …&lt;/module&gt;&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310305"&gt;事故（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310306"&gt;事故（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;最近archlinux升级至了&lt;b&gt;python3.6&lt;/b&gt; ，直接导致了我的开发环境失效,唉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;archlinux 果然不适合开发&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然后面都已经解决了&lt;/p&gt;

&lt;h2 id="org-15014130310305"&gt;事故（一）&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;virtualenv不可用&lt;/b&gt;,原先使用python3.5创建的环境直接不能用了,只好删了原有了东西,重新使用python3.6创建&lt;/p&gt;

&lt;pre class="python"&gt;
   pip freeze &gt; requestments.txt
   pip install -r requestments.txt
&lt;/pre&gt;

&lt;h2 id="org-15014130310306"&gt;事故（二）&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;py3status&lt;/b&gt; 报错

&lt;pre class="example"&gt;
   Traceback (most recent call last):
  File "/usr/bin/py3status", line 11, in &lt;module&gt;
    load_entry_point('py3status==3.3', 'console_scripts', 'py3status')()
  File "/usr/lib/python3.6/site-packages/pkg_resources/__init__.py", line 561, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File "/usr/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2631, in load_entry_point
    return ep.load()
  File "/usr/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2291, in load
    return self.resolve()
  File "/usr/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2297, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File "/usr/lib/python3.6/site-packages/py3status/__init__.py", line 4, in &lt;module&gt;
    from py3status.core import Py3statusWrapper
  File "/usr/lib/python3.6/site-packages/py3status/core.py", line 22, in &lt;module&gt;
    from py3status.parse_config import process_config
  File "/usr/lib/python3.6/site-packages/py3status/parse_config.py", line 23, in &lt;module&gt;
    from py3status.private import PrivateHide, PrivateBase64
  File "/usr/lib/python3.6/site-packages/py3status/private.py", line 124, in &lt;module&gt;
    class PrivateBase64(Private):
TypeError: _catch() missing 1 required positional argument: 's'
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;py3status是i3wm status的python 替代品,用着还成,找了一下,在&lt;a href="https://github.com/ultrabug/py3status/pull/610"&gt;https://github.com/ultrabug/py3status/pull/610&lt;/a&gt;
找到解决办法,在以下目录&lt;/p&gt;

&lt;pre class="shell"&gt;
   /sudo:root@localhost:/usr/lib/python3.6/site-packages/py3status/private.py
&lt;/pre&gt;

&lt;p&gt;修改&lt;b&gt;116行&lt;/b&gt;
&lt;pre class="python"&gt;
    EXCLUDE = ['__init__', '__getattribute__', '__new__', '__setattr__']
&lt;/pre&gt;
为
&lt;pre class="python"&gt;
    EXCLUDE = ['__init__', '__getattribute__', '__new__', '__setattr__','__init_subclass__']
&lt;/pre&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;super + shift + r 重载i3wm&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;不管怎样，恭喜python发布新的版本&lt;/p&gt;
</content><category term="linux"></category><category term="i3wm"></category><category term="python"></category><category term="py3status"></category></entry></feed>