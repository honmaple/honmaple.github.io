<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>HonMaple's Blog</title><link>http://honmaple.org/</link><description></description><lastBuildDate>Mon, 07 Mar 2016 00:00:00 +0800</lastBuildDate><item><title>python复习(二)</title><link>http://honmaple.org/articles/2016/03/python%E5%A4%8D%E4%B9%A0(%E4%BA%8C).html</link><description>&lt;p&gt;map()函数接收两个参数，一个是函数，一个是Iterable，
map将传入的&lt;/p&gt;
&lt;h3&gt;map&lt;/h3&gt;
&lt;p&gt;map()函数接收两个参数，一个是函数，一个是Iterable，
map将传入的函数依次作用到序列的每个元素，
并把结果作为新的Iterator返回。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def f(x):
...     return x * x
...
&amp;gt;&amp;gt;&amp;gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
&amp;gt;&amp;gt;&amp;gt; list(r)
[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
[&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;reduce&lt;/h3&gt;
&lt;p&gt;reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，
这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;filter&lt;/h3&gt;
&lt;p&gt;filter()把传入的函数依次作用于每个元素，
然后根据返回值是True还是False决定保留还是丢弃该元素。&lt;br /&gt;
例如，在一个list中，删掉偶数，只保留奇数，可以这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_odd(n):
    return n % 2 == 1

list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
# 结果: [1, 5, 9, 15]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;sorted&lt;/h3&gt;
&lt;p&gt;sorted()可以对list进行排序  &lt;/p&gt;
&lt;h4&gt;key&lt;/h4&gt;
&lt;p&gt;接收&lt;em&gt;key&lt;/em&gt;实现自定义排序  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对&lt;strong&gt;字符串排序&lt;/strong&gt;，是按照&lt;strong&gt;ASCII&lt;/strong&gt;的大小比较的&lt;br /&gt;
排序忽略大小写  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted([&amp;#39;bob&amp;#39;, &amp;#39;about&amp;#39;, &amp;#39;Zoo&amp;#39;, &amp;#39;Credit&amp;#39;], key=str.lower)
[&amp;#39;about&amp;#39;, &amp;#39;bob&amp;#39;, &amp;#39;Credit&amp;#39;, &amp;#39;Zoo&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;reverse&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;reverse = True&lt;/code&gt;反向排序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted([&amp;#39;bob&amp;#39;, &amp;#39;about&amp;#39;, &amp;#39;Zoo&amp;#39;, &amp;#39;Credit&amp;#39;], key=str.lower, reverse=True)
[&amp;#39;Zoo&amp;#39;, &amp;#39;Credit&amp;#39;, &amp;#39;bob&amp;#39;, &amp;#39;about&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;返回函数&lt;/h3&gt;
&lt;p&gt;返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，
或者后续会发生变化的变量。&lt;/p&gt;
&lt;h3&gt;匿名函数lambda&lt;/h3&gt;
&lt;p&gt;可以把匿名函数赋值给一个变量，再利用变量来调用该函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f = lambda x: x * x
&amp;gt;&amp;gt;&amp;gt; f
&amp;lt;function &amp;lt;lambda&amp;gt; at 0x101c6ef28&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f(5)
25
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把匿名函数作为返回值返回:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def build(x, y):
    return lambda: x * x + y * y
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">2016-03-07 12:07:12.147581</dc:creator><pubDate>Mon, 07 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:honmaple.org,2016-03-07:articles/2016/03/python复习(二).html</guid><category>python</category></item></channel></rss>