<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>HonMaple's Blog</title><link>http://honmaple.org/</link><description></description><lastBuildDate>Sat, 05 Mar 2016 00:00:00 +0800</lastBuildDate><item><title>python复习(一)</title><link>http://honmaple.org/articles/2016/03/python%E5%A4%8D%E4%B9%A0(%E4%B8%80).html</link><description>&lt;p&gt;·&lt;a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000"&gt;参考&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;循环&lt;/h3&gt;
&lt;p&gt;ranger(100)表示0到99这一百个数&lt;br /&gt;
可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。&lt;br /&gt;
把list、dict、str等Iterable变成Iterator可以使用iter()函数&lt;/p&gt;
&lt;h3&gt;不可变对象&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;abc&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a.replace(&amp;#39;a&amp;#39;, &amp;#39;A&amp;#39;)
&amp;#39;Abc&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;abc&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;列表(list)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 向列表追加元素  
a = [&amp;#39;hello&amp;#39;,&amp;#39;h&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;]
a.append(&amp;#39;world&amp;#39;)
# 删除列表最后一个元素
a.pop()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;切片&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 从a[0]开始到a[2]
a[0:3]
# 或者,省略0
a[:3]
# 省略-1
a[-2:]
# 每两个取一个
a[::2]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;迭代&lt;/h4&gt;
&lt;p&gt;判断是否可迭代&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;isinstance(x, Iterable)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下标循环&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for i, value in enumerate([&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]):
...     print(i, value)
...
0 A
1 B
2 C
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;列表生成式&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
# 或者
&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
# 使用两层循环，生成全排列
&amp;gt;&amp;gt;&amp;gt; [m + n for m in &amp;#39;ABC&amp;#39; for n in &amp;#39;XYZ&amp;#39;]
[&amp;#39;AX&amp;#39;, &amp;#39;AY&amp;#39;, &amp;#39;AZ&amp;#39;, &amp;#39;BX&amp;#39;, &amp;#39;BY&amp;#39;, &amp;#39;BZ&amp;#39;, &amp;#39;CX&amp;#39;, &amp;#39;CY&amp;#39;, &amp;#39;CZ&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;元组(tuple)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 只有一个元素时
a = (&amp;#39;hello&amp;#39;,)
# 而不是
a = (&amp;#39;hello&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;字典(dict)&lt;/h3&gt;
&lt;h4&gt;key不存在&lt;/h4&gt;
&lt;p&gt;如果key不存在,dict会报错
    &amp;gt;&amp;gt;&amp;gt; a['hello']
    Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    KeyError: 'hello'
可以用&lt;strong&gt;get&lt;/strong&gt;方式避免报错,如果key不存在，返回None,或者自己指定的value
    &amp;gt;&amp;gt;&amp;gt; a.get('hello')
    &amp;gt;&amp;gt;&amp;gt; a.get('hello', -1)
    -1&lt;/p&gt;
&lt;h4&gt;删除key&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.pop(&amp;#39;hello&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;set&lt;/h4&gt;
&lt;p&gt;key不会重复  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = set([1,2,3])
# 添加key到set
a.add(4)
# 删除key从set
a.add(4)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s1 = set([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; s2 = set([2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s1 &amp;amp; s2
{2, 3}
&amp;gt;&amp;gt;&amp;gt; s1 | s2
{1, 2, 3, 4}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;迭代key和value&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for k,v in a.items():
    print(k,v)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数据类型转化及内置函数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 转换函数
int float str bool
# 数据类型检查
isinstance(x, (int, float))
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;generator&lt;/h3&gt;
&lt;p&gt;生成一个generator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; g = (x * x for x in range(2))
&amp;gt;&amp;gt;&amp;gt; g
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x1022ef630&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;输出generator&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; next(g)
0
&amp;gt;&amp;gt;&amp;gt; next(g)
1
&amp;gt;&amp;gt;&amp;gt; next(g)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者使用for&lt;/p&gt;
&lt;h4&gt;yield&lt;/h4&gt;
&lt;p&gt;可将函数输出转化为generator&lt;/p&gt;
&lt;h3&gt;函数&lt;/h3&gt;
&lt;p&gt;函数没有return，默认return None,简写为return&lt;br /&gt;
返回多个数&lt;code&gt;return 'hello','world'&lt;/code&gt;其实质是一个tuple&lt;/p&gt;
&lt;h4&gt;可变参数&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用是需要使用list或tuple,&lt;code&gt;calc([1,2,3])&lt;/code&gt;或&lt;code&gt;calc((1,2,3))&lt;/code&gt;&lt;br /&gt;
使用可变参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用时就可以&lt;code&gt;calc(1,2,3)&lt;/code&gt;&lt;br /&gt;
也可以将list或tuple传入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; calc(*nums)
14
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;关键字参数&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def person(name, age, **kw):
    print(&amp;#39;name:&amp;#39;, name, &amp;#39;age:&amp;#39;, age, &amp;#39;other:&amp;#39;, kw)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用时可以只传入&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;,或者传入任意个数的关键字参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Michael&amp;#39;, 30)
name: Michael age: 30 other: {}
&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Adam&amp;#39;, 45, gender=&amp;#39;M&amp;#39;, job=&amp;#39;Engineer&amp;#39;)
name: Adam age: 45 other: {&amp;#39;gender&amp;#39;: &amp;#39;M&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可这样调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; extra = {&amp;#39;city&amp;#39;: &amp;#39;Beijing&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Jack&amp;#39;, 24, **extra)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;命名关键字参数&lt;/h4&gt;
&lt;p&gt;如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def person(name, age, *, city, job):
    print(name, age, city, job)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;参数组合&lt;/h4&gt;
&lt;p&gt;参数定义的顺序必须是：必选参数、默认参数、可变参数/命名关键字参数和关键字参数&lt;/p&gt;
&lt;h3&gt;尾递归&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">2016-03-05 21:46:57.056881</dc:creator><pubDate>Sat, 05 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:honmaple.org,2016-03-05:articles/2016/03/python复习(一).html</guid><category>python</category></item></channel></rss>