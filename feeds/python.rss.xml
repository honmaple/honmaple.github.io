<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>honmaple's blog - Python</title><link href="http://honmaple.org/" rel="alternate"></link><link href="http://honmaple.org/feeds/python.rss.xml" rel="self"></link><id>http://honmaple.org/</id><updated>2017-04-16T00:00:00+08:00</updated><entry><title>基于whoosh实现的flask全文搜索插件</title><link href="http://honmaple.org/articles/2017/04/%E5%9F%BA%E4%BA%8Ewhoosh%E5%AE%9E%E7%8E%B0%E7%9A%84flask%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6.html" rel="alternate"></link><published>2017-04-16T00:00:00+08:00</published><updated>2017-04-16T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-04-16:/articles/2017/04/基于whoosh实现的flask全文搜索插件.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311658"&gt;Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311658"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311659"&gt;创建更新删除索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311659"&gt;自定义analyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311660"&gt;Configure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;flask 貌似很少全文搜索的插件,有一个 https://github.com/gyllstromk/Flask-WhooshAlchemy , 但试了几次都用不了,所以参考 Flask-WhooshAlchemy 自己写了一个&lt;/p&gt;

&lt;h1 id="org-15014130311658"&gt;Quickstart&lt;/h1&gt;
&lt;p&gt;插件基于 whoosh,纯 python 编写,使用上很简单
&lt;pre class="python"&gt;
    from flask_msearch import Search
    [...]
    search = Search()
    search.init_app(app)

    # models.py
    class Post(db.Model):
        __tablename__ = 'post'
        __searchable__ = ['title', 'content']

    # views.py
    @app.route("/search")
    def w_search():
        keyword = request.args.get('keyword')
        results = search.whoosh_search(Post,query …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311658"&gt;Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311658"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311659"&gt;创建更新删除索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311659"&gt;自定义analyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311660"&gt;Configure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;flask 貌似很少全文搜索的插件,有一个 https://github.com/gyllstromk/Flask-WhooshAlchemy , 但试了几次都用不了,所以参考 Flask-WhooshAlchemy 自己写了一个&lt;/p&gt;

&lt;h1 id="org-15014130311658"&gt;Quickstart&lt;/h1&gt;
&lt;p&gt;插件基于 whoosh,纯 python 编写,使用上很简单
&lt;pre class="python"&gt;
    from flask_msearch import Search
    [...]
    search = Search()
    search.init_app(app)

    # models.py
    class Post(db.Model):
        __tablename__ = 'post'
        __searchable__ = ['title', 'content']

    # views.py
    @app.route("/search")
    def w_search():
        keyword = request.args.get('keyword')
        results = search.whoosh_search(Post,query=keyword,fields=['title'],limit=20)
        return ''
&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id="org-15014130311658"&gt;Usage&lt;/h1&gt;
&lt;h2 id="org-15014130311659"&gt;创建更新删除索引&lt;/h2&gt;
&lt;p&gt;如果要对已存在的数据创建索引(全部)
&lt;pre class="python"&gt;
    # 创建
    search.create_index()
    # 更新
    search.create_index(update=True)
    # 删除
    search.create_index(delete=True)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;如果只想要为指定的表创建索引
&lt;pre class="python"&gt;
    search.create_index(Model)
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id="org-15014130311659"&gt;自定义analyzer&lt;/h2&gt;

&lt;p&gt;比如使用jieba的中文分词
&lt;pre class="python"&gt;
     from jieba.analyse import ChineseAnalyzer
     search = Search(analyzer=ChineseAnalyzer())
&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id="org-15014130311660"&gt;Configure&lt;/h1&gt;
&lt;pre class="python"&gt;
    WHOOSH_BASE = 'whoosh_index'
    WHOOSH_ENABLE = True
&lt;/pre&gt;

&lt;p&gt;项目地址:https://github.com/honmaple/flask-msearch&lt;/p&gt;</content><category term="python"></category><category term="flask"></category><category term="whoosh"></category></entry><entry><title>himawari8图片下载改进版</title><link href="http://honmaple.org/articles/2017/03/himawari8%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E6%94%B9%E8%BF%9B%E7%89%88.html" rel="alternate"></link><published>2017-03-23T00:00:00+08:00</published><updated>2017-03-23T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-03-23:/articles/2017/03/himawari8图片下载改进版.html</id><summary type="html">
&lt;p&gt;第一版下载图片后设为壁纸,四周都是黑黑的不好看,
所以结合本地壁纸将两张图片进行合成&lt;/p&gt;

&lt;p&gt;只要计算一下要缩减的大小与要放置的位置
&lt;blockquote&gt;
&lt;p&gt;我的方法是:打开&lt;b&gt;gimp&lt;/b&gt;,合成两张图片,记下缩减的大小(214,214)与位置(160,160)&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;每次只要运行一下

&lt;pre class="example"&gt;
python himawari8.py
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;源码
&lt;pre class="python"&gt;
from PIL import Image, ImageOps, ImageDraw
from io import BytesIO
from urllib.request import Request, urlopen
from datetime import datetime, timedelta
import json

SCALE = 2
WIDTH = 1368
HEIGHT = 768


def get_info():
    url = "http://himawari8-dl.nict.go.jp/himawari8/img/D531106/latest.json"
    request = Request(url …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">
&lt;p&gt;第一版下载图片后设为壁纸,四周都是黑黑的不好看,
所以结合本地壁纸将两张图片进行合成&lt;/p&gt;

&lt;p&gt;只要计算一下要缩减的大小与要放置的位置
&lt;blockquote&gt;
&lt;p&gt;我的方法是:打开&lt;b&gt;gimp&lt;/b&gt;,合成两张图片,记下缩减的大小(214,214)与位置(160,160)&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;每次只要运行一下

&lt;pre class="example"&gt;
python himawari8.py
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;源码
&lt;pre class="python"&gt;
from PIL import Image, ImageOps, ImageDraw
from io import BytesIO
from urllib.request import Request, urlopen
from datetime import datetime, timedelta
import json

SCALE = 2
WIDTH = 1368
HEIGHT = 768


def get_info():
    url = "http://himawari8-dl.nict.go.jp/himawari8/img/D531106/latest.json"
    request = Request(url)
    response = urlopen(request, timeout=10)
    return json.loads(response.read())


def download():
    png = Image.new('RGB', (550 * SCALE, 550 * SCALE))
    # desktop = Image.new('RGB', (WIDTH, HEIGHT))
    desktop = Image.open('/home/jianglin/Pictures/308556.png')
    url_format = 'http://himawari8-dl.nict.go.jp/himawari8/img/D531106/{}d/{}/{}_{}_{}.png'
    info = get_info()
    # date = datetime.strptime(info['date'], '%Y-%m-%d %H:%M:%S') + timedelta(
    #     hours=-8)
    date = datetime.strptime(info['date'], '%Y-%m-%d %H:%M:%S')
    for x in range(SCALE):
        for y in range(SCALE):
            url = url_format.format(SCALE, 550,
                                    date.strftime("%Y/%m/%d/%H%M%S"), x, y)
            print(url)
            request = Request(url)
            response = urlopen(request, timeout=10)
            img = Image.open(BytesIO(response.read()))
            png.paste(img, (550 * x, 550 * y, 550 * (x + 1), 550 * (y + 1)))
    png = circle(png)
    desktop.paste(png, (160, 160), png)
    desktop.save('/tmp/earth.png', "PNG")
    set_background()


def circle(img):
    width = SCALE * 550
    height = SCALE * 550
    size = (width, height)
    mask = Image.new('L', size, 0)
    draw = ImageDraw.Draw(mask)
    draw.ellipse((3, 3, width - 3, height - 3), fill=255)
    output = ImageOps.fit(img, mask.size, centering=(0.5, 0.5))
    output.putalpha(mask)
    output.thumbnail((214, 214), Image.ANTIALIAS)
    return output


def convert():
    # size = (768, 768)
    # mask = Image.new('L', size, 0)
    # draw = ImageDraw.Draw(mask)
    # draw.ellipse((3, 3, 765, 765), fill=255)
    # im = Image.open('/tmp/earth.png')
    # output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
    # output.putalpha(mask)
    # output.thumbnail((256, 256), Image.ANTIALIAS)
    # output.save('output.png')
    # output.convert("RGBA")
    output = Image.open('output.png')
    output.thumbnail((214, 214), Image.ANTIALIAS)
    desktop = Image.open('/home/jianglin/Pictures/308556.png')
    desktop.paste(output, (160, 160), output)
    desktop.save('/tmp/earch.png', "PNG")


def set_background():
    import os
    os.system('feh --bg-scale /tmp/earth.png')


if __name__ == '__main__':
    download()
&lt;/pre&gt;
&lt;img src="https://images.honmaple.com/images/admin/show/2017/03/149023917874284.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/03/149023928036061.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/show/2017/03/149023934880774.png"/&gt;&lt;/p&gt;</content><category term="python"></category><category term="earth"></category><category term="himawari8"></category></entry><entry><title>下载Himawari8拍摄的实时地球图片</title><link href="http://honmaple.org/articles/2017/03/%E4%B8%8B%E8%BD%BDHimawari8%E6%8B%8D%E6%91%84%E7%9A%84%E5%AE%9E%E6%97%B6%E5%9C%B0%E7%90%83%E5%9B%BE%E7%89%87.html" rel="alternate"></link><published>2017-03-22T00:00:00+08:00</published><updated>2017-03-22T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-03-22:/articles/2017/03/下载Himawari8拍摄的实时地球图片.html</id><summary type="html">
&lt;p&gt;直接给出源码&lt;/p&gt;

&lt;p&gt;设置壁纸
&lt;pre class="sh"&gt;
feh --bg-scale /tmp/earth.png
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;设置桌面大小,及图片放大倍数
&lt;pre class="python"&gt;
SCALE = 4
WIDTH = 1368
HEIGHT = 768
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class="python"&gt;
from PIL import Image
from io import BytesIO
from urllib.request import Request, urlopen
from datetime import datetime
import json

SCALE = 4
WIDTH = 1368
HEIGHT = 768


def get_info():
    url = "http://himawari8-dl.nict.go.jp/himawari8/img/D531106/latest.json"
    request = Request(url)
    response = urlopen(request, timeout=10)
    return json …&lt;/pre&gt;</summary><content type="html">
&lt;p&gt;直接给出源码&lt;/p&gt;

&lt;p&gt;设置壁纸
&lt;pre class="sh"&gt;
feh --bg-scale /tmp/earth.png
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;设置桌面大小,及图片放大倍数
&lt;pre class="python"&gt;
SCALE = 4
WIDTH = 1368
HEIGHT = 768
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class="python"&gt;
from PIL import Image
from io import BytesIO
from urllib.request import Request, urlopen
from datetime import datetime
import json

SCALE = 4
WIDTH = 1368
HEIGHT = 768


def get_info():
    url = "http://himawari8-dl.nict.go.jp/himawari8/img/D531106/latest.json"
    request = Request(url)
    response = urlopen(request, timeout=10)
    return json.loads(response.read())


def download():
    png = Image.new('RGB', (550 * SCALE, 550 * SCALE))
    desktop = Image.new('RGB', (WIDTH, HEIGHT))
    url_format = 'http://himawari8-dl.nict.go.jp/himawari8/img/D531106/{}d/{}/{}_{}_{}.png'
    info = get_info()
    date = datetime.strptime(info['date'], '%Y-%m-%d %H:%M:%S')
    for x in range(SCALE):
        for y in range(SCALE):
            url = url_format.format(SCALE, 550,
                                    date.strftime("%Y/%m/%d/%H%M%S"), x, y)
            print(url)
            request = Request(url)
            response = urlopen(request, timeout=10)
            img = Image.open(BytesIO(response.read()))
            png.paste(img, (550 * x, 550 * y, 550 * (x + 1), 550 * (y + 1)))
    png.thumbnail((HEIGHT, HEIGHT), Image.ANTIALIAS)
    desktop.paste(png, ((WIDTH - HEIGHT) // 2, 0))
    desktop.save('/tmp/earth.png', "PNG")

if __name__ == '__main__':
    download()
&lt;/pre&gt;

&lt;p&gt;或许应该找一张有星星的照片
&lt;img src="https://images.honmaple.com/images/admin/photo/2017/03/149019162934663.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://images.honmaple.com/images/admin/photo/2017/03/149019186230320.png"/&gt;&lt;/p&gt;</content><category term="python"></category><category term="earth"></category></entry><entry><title>sqlalchemy使用上的小tips</title><link href="http://honmaple.org/articles/2017/03/sqlalchemy%E4%BD%BF%E7%94%A8%E4%B8%8A%E7%9A%84%E5%B0%8Ftips.html" rel="alternate"></link><published>2017-03-15T00:00:00+08:00</published><updated>2017-03-15T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-03-15:/articles/2017/03/sqlalchemy使用上的小tips.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310427"&gt;sqlalchemy object序列化为json&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310427"&gt;多个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;单个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;排除字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;仅包括字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;关系查询深度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310429"&gt;增加一些自定义的函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310430"&gt;可传递参数的函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310430"&gt;像django orm一样使用sqlalchemy&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310430"&gt;基本查询(已实现)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310433"&gt;关系查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310433"&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310433"&gt;去掉一些sqlalchemy的重复工作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310434"&gt;ModelMixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310435"&gt;ModelTimeMixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310436"&gt;ModelUserMixin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h1 id="org-15014130310427"&gt;sqlalchemy object序列化为json&lt;/h1&gt;
&lt;p&gt;灵感来源于 *Django REST framework*
&lt;pre class="python"&gt;
   posts = Post.query.all()
   serializer = Seralizer(posts,many=True)
   data = serializer.data
&lt;/pre&gt;&lt;/p&gt;
&lt;h2 id="org-15014130310427"&gt;多个实例&lt;/h2&gt;

&lt;h2 id="org-15014130310428"&gt;单个实例&lt;/h2&gt;
&lt;pre class="python"&gt;
   post = Post.query.first()
   serializer = Seralizer(post,many=False)
   data = serializer.data
&lt;/pre&gt;

&lt;h2 id="org-15014130310428"&gt;排除字段&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,exclude=['title'])
&lt;/pre&gt;

&lt;h2 id="org-15014130310428"&gt;仅包括字段&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post …&lt;/pre&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310427"&gt;sqlalchemy object序列化为json&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310427"&gt;多个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;单个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;排除字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;仅包括字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310428"&gt;关系查询深度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310429"&gt;增加一些自定义的函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310430"&gt;可传递参数的函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310430"&gt;像django orm一样使用sqlalchemy&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310430"&gt;基本查询(已实现)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310433"&gt;关系查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310433"&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310433"&gt;去掉一些sqlalchemy的重复工作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310434"&gt;ModelMixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310435"&gt;ModelTimeMixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310436"&gt;ModelUserMixin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h1 id="org-15014130310427"&gt;sqlalchemy object序列化为json&lt;/h1&gt;
&lt;p&gt;灵感来源于 *Django REST framework*
&lt;pre class="python"&gt;
   posts = Post.query.all()
   serializer = Seralizer(posts,many=True)
   data = serializer.data
&lt;/pre&gt;&lt;/p&gt;
&lt;h2 id="org-15014130310427"&gt;多个实例&lt;/h2&gt;

&lt;h2 id="org-15014130310428"&gt;单个实例&lt;/h2&gt;
&lt;pre class="python"&gt;
   post = Post.query.first()
   serializer = Seralizer(post,many=False)
   data = serializer.data
&lt;/pre&gt;

&lt;h2 id="org-15014130310428"&gt;排除字段&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,exclude=['title'])
&lt;/pre&gt;

&lt;h2 id="org-15014130310428"&gt;仅包括字段&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,include=['title'])
&lt;/pre&gt;

&lt;h2 id="org-15014130310428"&gt;关系查询深度&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,depth=3)
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;depth
&lt;p&gt;默认为2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="org-15014130310429"&gt;增加一些自定义的函数&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Serializer(post,extra=['get_post_count'])
&lt;/pre&gt;
&lt;p&gt;Post
&lt;pre class="python"&gt;
     class Post(Model):
         ......
         def get_post_count(self):
             return 11
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id="org-15014130310430"&gt;可传递参数的函数&lt;/h2&gt;
&lt;pre class="python"&gt;
    class PostSerializer(Serializer):
        count = Field(source = 'get_post_count',args={'name':'hello'},default=20)
        class Meta:
            include = []
            depth = 2
            include = []
            exclude = []
            extra = ['count']
&lt;/pre&gt;
&lt;h1 id="org-15014130310430"&gt;像django orm一样使用sqlalchemy&lt;/h1&gt;
&lt;p&gt;*djang orm*与sqlalchemy相比,为什么很多人都认为django orm更好用,大概就是因为django orm更方便&lt;/p&gt;

&lt;h2 id="org-15014130310430"&gt;基本查询(已实现)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gt&lt;/li&gt;
&lt;li&gt;lt&lt;/li&gt;
&lt;li&gt;lte&lt;/li&gt;
&lt;li&gt;gte&lt;/li&gt;
&lt;li&gt;contains&lt;/li&gt;
&lt;li&gt;in&lt;/li&gt;
&lt;li&gt;exact&lt;/li&gt;
&lt;li&gt;iexact&lt;/li&gt;
&lt;li&gt;startswith&lt;/li&gt;
&lt;li&gt;istartswith&lt;/li&gt;
&lt;li&gt;iendswith&lt;/li&gt;
&lt;li&gt;endswith&lt;/li&gt;
&lt;li&gt;isnull&lt;/li&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;year&lt;/li&gt;
&lt;li&gt;month&lt;/li&gt;
&lt;li&gt;day
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例:
&lt;pre class="python"&gt;
   Post.query.filter_by(title__contains = 'sql').all()
   Post.query.exclude_by(title__contains = 'sql').all()
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id="org-15014130310433"&gt;关系查询&lt;/h2&gt;
&lt;pre class="python"&gt;
   Post.query.filter_by(tags__name__contains = 'sql').all()
&lt;/pre&gt;

&lt;h2 id="org-15014130310433"&gt;其它&lt;/h2&gt;
&lt;pre class="python"&gt;
   Post.query.filter_by(tags__name__contains = 'sql').or(Post.id == 1,Post.id == 2).all()
   Post.query.filter_by(tags__name__contains = 'sql').and(Post.id == 1,Post.id == 2).all()
   Post.query.filter_by(tags__name__contains = 'sql').exists()
   Post.query.load_only('title')
&lt;/pre&gt;

&lt;h1 id="org-15014130310433"&gt;去掉一些sqlalchemy的重复工作&lt;/h1&gt;
&lt;p&gt;以*flask-sqlalchemy*为例,通过继承&lt;b&gt;models.py&lt;/b&gt; 中的*Mixin*,就可以去除部分重复工作&lt;/p&gt;

&lt;h2 id="org-15014130310434"&gt;ModelMixin&lt;/h2&gt;
&lt;p&gt;自增ID -- id&lt;/p&gt;

&lt;pre class="python"&gt;
   post = Post(·····)
   post.save() # 保存
   post.delete() # 保存
&lt;/pre&gt;

&lt;p&gt;批量操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bulk_insert&lt;/li&gt;
&lt;li&gt;bulk_update&lt;/li&gt;
&lt;li&gt;bulk_save
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="org-15014130310435"&gt;ModelTimeMixin&lt;/h2&gt;
&lt;p&gt;增加两字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;created_at
&lt;p&gt;数据创建时间&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;updated_at
&lt;p&gt;数据更新时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="org-15014130310436"&gt;ModelUserMixin&lt;/h2&gt;
&lt;p&gt;关联用户表,与*User*表现为*多对一*关系(即一个用户有多个post)
&lt;pre class="python"&gt;
     class Post(ModelUserMixin, Model):

         user_related_name = 'posts'
         titile = ...
&lt;/pre&gt;&lt;/p&gt;</content><category term="python"></category><category term="sqlalchemy"></category></entry><entry><title>使用flask实现一个简单的图片上传存储服务</title><link href="http://honmaple.org/articles/2017/03/%E4%BD%BF%E7%94%A8flask%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1.html" rel="alternate"></link><published>2017-03-14T00:00:00+08:00</published><updated>2017-03-14T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2017-03-14:/articles/2017/03/使用flask实现一个简单的图片上传存储服务.html</id><summary type="html">&lt;p&gt;GitHub地址: &lt;a href="https://github.com/honmaple/maple-file"&gt;https://github.com/honmaple/maple-file&lt;/a&gt;&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org269e3c4"&gt;1. maple-file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org7c6cb1e"&gt;1.1. 设计初衷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org97baa2a"&gt;1.2. 使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc428f36"&gt;1.2.1. API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org921606b"&gt;1.2.2. 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1f88b3a"&gt;1.2.3. 创建账户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org87063f2"&gt;1.2.4. 上传&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org06d4c86"&gt;1.2.5. example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a id="org269e3c4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;maple-file&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用flask实现的一个简单的图片上传服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id="org7c6cb1e"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;设计初衷&lt;/h2&gt;
&lt;p&gt;对于图片的存储,有很多选择,一般采用云服务如(七牛,又拍等),但是国内的服务像七牛
自定义域名竟然需要域名备案(&lt;strong&gt;Excuse me&lt;/strong&gt;,当初就是因为备案麻烦才选择国外的),而且浪费了我十块钱,&lt;/p&gt;
&lt;p&gt;而我又想像七牛一样可以直接在本地就可以上传图片,找来找去，没有找到一个比较合适的，所以花两天时间自己写了一个&lt;/p&gt;
&lt;p&gt;&lt;a id="org97baa2a"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;由于初衷是本地脚本就可以发布,所以没有前端界面,等以后有时间了再加上&lt;/p&gt;
&lt;p&gt;&lt;a id="orgc428f36"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/api/login&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;POST
    登录 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;GitHub地址: &lt;a href="https://github.com/honmaple/maple-file"&gt;https://github.com/honmaple/maple-file&lt;/a&gt;&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org269e3c4"&gt;1. maple-file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org7c6cb1e"&gt;1.1. 设计初衷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org97baa2a"&gt;1.2. 使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc428f36"&gt;1.2.1. API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org921606b"&gt;1.2.2. 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1f88b3a"&gt;1.2.3. 创建账户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org87063f2"&gt;1.2.4. 上传&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org06d4c86"&gt;1.2.5. example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a id="org269e3c4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;maple-file&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用flask实现的一个简单的图片上传服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id="org7c6cb1e"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;设计初衷&lt;/h2&gt;
&lt;p&gt;对于图片的存储,有很多选择,一般采用云服务如(七牛,又拍等),但是国内的服务像七牛
自定义域名竟然需要域名备案(&lt;strong&gt;Excuse me&lt;/strong&gt;,当初就是因为备案麻烦才选择国外的),而且浪费了我十块钱,&lt;/p&gt;
&lt;p&gt;而我又想像七牛一样可以直接在本地就可以上传图片,找来找去，没有找到一个比较合适的，所以花两天时间自己写了一个&lt;/p&gt;
&lt;p&gt;&lt;a id="org97baa2a"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;由于初衷是本地脚本就可以发布,所以没有前端界面,等以后有时间了再加上&lt;/p&gt;
&lt;p&gt;&lt;a id="orgc428f36"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/api/login&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;POST
    登录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/api/logout&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;GET
    注销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/api/albums&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;GET
    获取相册列表&lt;/li&gt;
&lt;li&gt;POST
    新建相册&lt;ul&gt;
&lt;li&gt;name 相册名称&lt;/li&gt;
&lt;li&gt;description 相册描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/api/albums/&lt;int:pk&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pk 相册ID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET
    获取相册信息&lt;/li&gt;
&lt;li&gt;PUT
    修改相册信息&lt;ul&gt;
&lt;li&gt;name 相册名称&lt;/li&gt;
&lt;li&gt;description 相册描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DELETE
    删除相册&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/api/images&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;GET
    获取图片列表&lt;/li&gt;
&lt;li&gt;POST
    上传图片&lt;ul&gt;
&lt;li&gt;images 上传图片列表&lt;/li&gt;
&lt;li&gt;album 相册ID(默认会新建一个&lt;strong&gt;default&lt;/strong&gt;相册)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/api/images/&lt;int:pk&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;GET
    获取图片信息&lt;/li&gt;
&lt;li&gt;PUT
    修改图片信息&lt;ul&gt;
&lt;li&gt;name 图片名称&lt;/li&gt;
&lt;li&gt;description 图片描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DELETE
    删除图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id="org921606b"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# 生产环境设置为False&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# import os;os.urandom(24)&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY_SALT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ssss&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;JSON_AS_ASCII&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;PERMANENT_SESSION_LIFETIME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;PER_PAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# 分页&lt;/span&gt;
    &lt;span class="n"&gt;ADMIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/admin/aaaaa&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 后台地址&lt;/span&gt;

    &lt;span class="n"&gt;LOGIN_TOKEN_HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Api-Key&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 将会影响到后面headers设置&lt;/span&gt;
    &lt;span class="n"&gt;LOGIN_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api_key&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#url?api_key=21312313&lt;/span&gt;

    &lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;storage.common.middleware.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sqlite:///test.db&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# SQLALCHEMY_ECHO = DEBUG&lt;/span&gt;
    &lt;span class="n"&gt;UPLOAD_ALLOWED_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jpeg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 允许上传的扩展名&lt;/span&gt;
    &lt;span class="n"&gt;UPLOAD_FOLDER_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;UPLOAD_FOLDER_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 相对于当前文件路径的地址&lt;/span&gt;
    &lt;span class="n"&gt;UPLOAD_FOLDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UPLOAD_FOLDER_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UPLOAD_FOLDER_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="org1f88b3a"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;创建账户&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manager.py create_user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将同时创建一个&lt;strong&gt;default&lt;/strong&gt;的相册&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manager.py key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显示用户key&lt;/p&gt;
&lt;p&gt;&lt;a id="org87063f2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;上传&lt;/h3&gt;
&lt;p&gt;上传后图片保存路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原图路径:&lt;/p&gt;
&lt;p&gt;UPLOAD_FOLDER + 'username' + 'photo' + %Y + %m + (时间戳+随机数).png&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩略图路径:&lt;/p&gt;
&lt;p&gt;UPLOAD_FOLDER + 'username' + 'thumb' + %Y + %m + (时间戳+随机数).png&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id="org06d4c86"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;p&gt;使用&lt;strong&gt;requests&lt;/strong&gt;本地上传&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;images&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:8000/api/images&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;desktop.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="n"&gt;multiple_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;11.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;11.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;desktop.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;desktop.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Api-Key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;InhpeWFuZzA4MDdJBtx4AWlPpI_Oxx1Ki8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;# r = requests.post(url, files=multiple_files, headers=headers)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="flask"></category><category term="linux"></category></entry><entry><title>Python中的__main__函数</title><link href="http://honmaple.org/articles/2016/12/Python%E4%B8%AD%E7%9A%84__main__%E5%87%BD%E6%95%B0.html" rel="alternate"></link><published>2016-12-14T00:00:00+08:00</published><updated>2016-12-14T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-12-14:/articles/2016/12/Python中的__main__函数.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311464"&gt;__main__&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311469"&gt;总结一下：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h2 id="org-15014130311464"&gt;__main__&lt;/h2&gt;

&lt;p&gt;转自 &lt;a href="http://www.jb51.net/article/51892.html"&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很多新手刚开始学习python的时候经常会看到python 中 *__name__ = '__main__'*
这样的代码，可能很多新手一开始学习的时候都比较疑惑，python 中__name__ = '__main__' 的作用，到底干嘛的？&lt;/p&gt;

&lt;p&gt;有句话经典的概括了这段代码的意义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Make a script both importable and executable”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思就是说让你写的脚本模块既可以导入到别的模块中用，另外该模块自己也可执行。
这句话，可能一开始听的还不是很懂。下面举例说明：
先写一个模块：
&lt;pre class="python"&gt;
  #module.py
  def main():
      print("we are in %s" % __name__)

  if __name__ == '__main__':
      main()
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;这个函数定义了一个main函数，我们执行一下该py文件发现结果是打印出

&lt;pre class="example"&gt;
we are in __main__
&lt;/pre&gt;

说明我们的if语句中的内容被执行了，调用了&lt;b&gt;main()：&lt;/b&gt;
但是如果我们从另我一个模块导入该模块，并调用一次*main()*函数会是怎样的结果呢？&lt;/p&gt;

&lt;pre class="python"&gt;
  #anothermodle.py
  from module …&lt;/pre&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311464"&gt;__main__&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311469"&gt;总结一下：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h2 id="org-15014130311464"&gt;__main__&lt;/h2&gt;

&lt;p&gt;转自 &lt;a href="http://www.jb51.net/article/51892.html"&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很多新手刚开始学习python的时候经常会看到python 中 *__name__ = '__main__'*
这样的代码，可能很多新手一开始学习的时候都比较疑惑，python 中__name__ = '__main__' 的作用，到底干嘛的？&lt;/p&gt;

&lt;p&gt;有句话经典的概括了这段代码的意义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Make a script both importable and executable”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思就是说让你写的脚本模块既可以导入到别的模块中用，另外该模块自己也可执行。
这句话，可能一开始听的还不是很懂。下面举例说明：
先写一个模块：
&lt;pre class="python"&gt;
  #module.py
  def main():
      print("we are in %s" % __name__)

  if __name__ == '__main__':
      main()
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;这个函数定义了一个main函数，我们执行一下该py文件发现结果是打印出

&lt;pre class="example"&gt;
we are in __main__
&lt;/pre&gt;

说明我们的if语句中的内容被执行了，调用了&lt;b&gt;main()：&lt;/b&gt;
但是如果我们从另我一个模块导入该模块，并调用一次*main()*函数会是怎样的结果呢？&lt;/p&gt;

&lt;pre class="python"&gt;
  #anothermodle.py
  from module import main
  main()
&lt;/pre&gt;

&lt;p&gt;其执行的结果是：

&lt;pre class="example"&gt;
we are in module
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;但是没有显示
&lt;pre class="python"&gt;
"we are in __main__"
&lt;/pre&gt;
也就是说模块__name__ = '__main__' 下面的函数没有执行。
这样既可以让“模块”文件运行，也可以被其他模块引入，而且不会执行函数2次。这才是关键。&lt;/p&gt;

&lt;h2 id="org-15014130311469"&gt;总结一下：&lt;/h2&gt;
&lt;p&gt;如果我们是直接执行某个.py文件的时候，该文件中那么

&lt;pre class="example"&gt;
__name__ == '__main__'
&lt;/pre&gt;

是*True*,
但是我们如果从另外一个.py文件通过import导入该文件的时候，这时__name__的值就是我们这个py文件的名字而不是__main__。
这个功能还有一个用处：调试代码的时候，在

&lt;pre class="example"&gt;
if __name__ == '__main__'
&lt;/pre&gt;

中加入一些我们的调试代码，
我们可以让外部模块调用的时候不执行我们的调试代码，但是如果我们想排查问题的时候，直接执行该模块文件，调试代码能够正常运行！&lt;/p&gt;</content><category term="python"></category></entry><entry><title>flask使用token进行验证</title><link href="http://honmaple.org/articles/2016/12/flask%E4%BD%BF%E7%94%A8token%E8%BF%9B%E8%A1%8C%E7%99%BB%E9%99%86.html" rel="alternate"></link><published>2016-12-13T00:00:00+08:00</published><updated>2016-12-13T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-12-13:/articles/2016/12/flask使用token进行登陆.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311090"&gt;为什么需要用token验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311093"&gt;如何使用token?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311093"&gt;生成token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311094"&gt;验证token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311097"&gt;使用flask-login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311099"&gt;设置csrf白名单&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311099"&gt;使用脚本发表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h1 id="org-15014130311090"&gt;为什么需要用token验证&lt;/h1&gt;
&lt;p&gt;原因呢是因为写博客时已经在本地写好了，但是要发表到网站上还需要这么几步:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;打开浏览器&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;打开我的网站&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;进入登陆页&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;登陆&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;进入后台页&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;进入文章发表页&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;复制粘贴&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;发表
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以使用*token*验证成为必然&lt;/p&gt;

&lt;h1 id="org-15014130311093"&gt;如何使用token?&lt;/h1&gt;

&lt;h2 id="org-15014130311093"&gt;生成token&lt;/h2&gt;
&lt;p&gt;使用*itsdangerous*对token进行加密
&lt;pre class="python"&gt;
     class User(model):
         ......

         @property
         def token(self):
             config = current_app.config
             secret_key = config.setdefault('SECRET_KEY')
             salt = config.setdefault('SECURITY_PASSWORD_SALT')
             serializer = URLSafeTimedSerializer(secret_key)
             # column = self.(需要加密的字段)
             token = serializer.dumps(column, salt=salt)
             return token
&lt;/pre&gt;
请保管好*SECRET_KEY* 和 …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311090"&gt;为什么需要用token验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311093"&gt;如何使用token?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311093"&gt;生成token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311094"&gt;验证token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311097"&gt;使用flask-login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311099"&gt;设置csrf白名单&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311099"&gt;使用脚本发表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h1 id="org-15014130311090"&gt;为什么需要用token验证&lt;/h1&gt;
&lt;p&gt;原因呢是因为写博客时已经在本地写好了，但是要发表到网站上还需要这么几步:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;打开浏览器&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;打开我的网站&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;进入登陆页&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;登陆&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;进入后台页&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;进入文章发表页&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;复制粘贴&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;发表
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以使用*token*验证成为必然&lt;/p&gt;

&lt;h1 id="org-15014130311093"&gt;如何使用token?&lt;/h1&gt;

&lt;h2 id="org-15014130311093"&gt;生成token&lt;/h2&gt;
&lt;p&gt;使用*itsdangerous*对token进行加密
&lt;pre class="python"&gt;
     class User(model):
         ......

         @property
         def token(self):
             config = current_app.config
             secret_key = config.setdefault('SECRET_KEY')
             salt = config.setdefault('SECURITY_PASSWORD_SALT')
             serializer = URLSafeTimedSerializer(secret_key)
             # column = self.(需要加密的字段)
             token = serializer.dumps(column, salt=salt)
             return token
&lt;/pre&gt;
请保管好*SECRET_KEY* 和&lt;b&gt;SECURITY_PASSWORD_SALT&lt;/b&gt;,不要泄露&lt;/p&gt;

&lt;h2 id="org-15014130311094"&gt;验证token&lt;/h2&gt;
&lt;pre class="python"&gt;
     class User(Model):
         ......

         @staticmethod
         def check_token(token, max_age=86400):
             config = current_app.config
             secret_key = config.setdefault('SECRET_KEY')
             salt = config.setdefault('SECURITY_PASSWORD_SALT')
             serializer = URLSafeTimedSerializer(secret_key)
             try:
                 column = serializer.loads(token, salt=salt, max_age=max_age)
             except BadSignature:
                 return False
             except SignatureExpired:
                 return False
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;max-age
&lt;p&gt;最大过期时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果验证成功查找*该用户*是否存在
&lt;pre class="python"&gt;
     user = User.query.filter_by(column=column).first()
     if user is None:
         return False
     return user
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;示例:
&lt;pre class="python"&gt;
     @staticmethod
     def check_token(token, max_age=86400):
         config = current_app.config
         secret_key = config.setdefault('SECRET_KEY')
         salt = config.setdefault('SECURITY_PASSWORD_SALT')
         serializer = URLSafeTimedSerializer(secret_key)
         try:
             username = serializer.loads(token, salt=salt, max_age=max_age)
         except BadSignature:
             return False
         except SignatureExpired:
             return False
         user = User.query.filter_by(username=username).first()
         if user is None:
             return False
         return user
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id="org-15014130311097"&gt;使用flask-login&lt;/h2&gt;
&lt;p&gt;flask-login是flask的一个登陆扩展,自带token验证,&lt;b&gt;但是请一定要设&lt;/b&gt;
&lt;pre class="python"&gt;
    login_manager.session_protection = "basic"
&lt;/pre&gt;
这是我在试验了n次后,读了flask-login的源码后才发现的（其实后面发现文档有写☹）&lt;/p&gt;

&lt;p&gt;然后设置&lt;b&gt;request_loader&lt;/b&gt;
&lt;pre class="python"&gt;
    @login_manager.request_loader
    def user_loader_from_request(request):
        token = request.args.get('your_token')
        if token is not None:
            user = User.check_token(token)
            if user:
                return user

    return login_manager
&lt;/pre&gt;
这是简单的从*url*中获取*token*进行验证,也可以从&lt;b&gt;header&lt;/b&gt;中获取(更安全)
&lt;pre class="python"&gt;
     token = request.headers.get('your_token')
&lt;/pre&gt;
非常不幸的是，假设你开启了*csrf*保护,本地使用脚本验证时会报*400*错误,设置*csrf*白名单
&lt;pre class="python"&gt;
    csrf.exempt
&lt;/pre&gt;&lt;/p&gt;
&lt;h2 id="org-15014130311099"&gt;设置csrf白名单&lt;/h2&gt;

&lt;h1 id="org-15014130311099"&gt;使用脚本发表&lt;/h1&gt;
&lt;p&gt;直接给出代码
&lt;pre class="python"&gt;
    from urllib import request
    import json

    content = '''
        ,* adssad
        ,** adasd
        ,*** adsad
        '''

    data = {
        'title': 'hello world',
        'content':content
    }
    data = json.dumps(data)
    data = bytes(data, 'utf8')
    url = 'xxxxx' + '?your_token='
    req = request.Request(url, data=data)
    req.add_header('Content-Type', 'application/json')
    req.add_header(
        'User-Agent',
        'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36'
    )
    result = request.urlopen(req).read().decode('utf-8')
    print(result)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;现在的步骤是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;复制粘贴&lt;/li&gt;
&lt;li&gt;&lt;input type="checkbox" checked="checked" /&gt;发表

&lt;p&gt;ok,后续可能还需要将+复制粘贴+这一步也去了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本篇文章就是采用这种方式发表&lt;/p&gt;</content><category term="flask"></category><category term="python"></category><category term="token"></category></entry><entry><title>sqlalchemy序列化为json</title><link href="http://honmaple.org/articles/2016/12/sqlalchemy%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BAjson.html" rel="alternate"></link><published>2016-12-13T00:00:00+08:00</published><updated>2016-12-13T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-12-13:/articles/2016/12/sqlalchemy序列化为json.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311408"&gt;为什么需要这个需求?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311409"&gt;如何实现?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311413"&gt;具体使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;多个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;单个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;排除字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;仅包括字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311415"&gt;关系查询深度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h1 id="org-15014130311408"&gt;为什么需要这个需求?&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;sqlalchemy&lt;/b&gt; 是个好东西,虽然其文档犹如/老太婆的裹脚布--又臭又长/,饱受诟病&lt;/p&gt;

&lt;p&gt;使用&lt;b&gt;restful&lt;/b&gt; 时sqlalchemy返回的是一个&lt;b&gt;object&lt;/b&gt; 类，假设前后端分离,前端无法处理&lt;/p&gt;

&lt;h1 id="org-15014130311409"&gt;如何实现?&lt;/h1&gt;
&lt;p&gt;直接给出代码
&lt;pre class="python"&gt;
  class Serializer(object):

      def __init__(self, instance, many=False, include=[], exclude=[], depth=2):
          self.instance = instance
          self.many = many
          self.include = include
          self.exclude = exclude
          self.depth = depth

      @property
      def data(self):
          if self.include and self.exclude …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311408"&gt;为什么需要这个需求?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311409"&gt;如何实现?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311413"&gt;具体使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;多个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;单个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;排除字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311414"&gt;仅包括字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130311415"&gt;关系查询深度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h1 id="org-15014130311408"&gt;为什么需要这个需求?&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;sqlalchemy&lt;/b&gt; 是个好东西,虽然其文档犹如/老太婆的裹脚布--又臭又长/,饱受诟病&lt;/p&gt;

&lt;p&gt;使用&lt;b&gt;restful&lt;/b&gt; 时sqlalchemy返回的是一个&lt;b&gt;object&lt;/b&gt; 类，假设前后端分离,前端无法处理&lt;/p&gt;

&lt;h1 id="org-15014130311409"&gt;如何实现?&lt;/h1&gt;
&lt;p&gt;直接给出代码
&lt;pre class="python"&gt;
  class Serializer(object):

      def __init__(self, instance, many=False, include=[], exclude=[], depth=2):
          self.instance = instance
          self.many = many
          self.include = include
          self.exclude = exclude
          self.depth = depth

      @property
      def data(self):
          if self.include and self.exclude:
              raise ValueError('include and exclude can\'t work together')
          if self.many:
              if isinstance(self.instance, list):
                  return self._serializerlist(self.instance, self.depth)
              pageinfo = {
                  'items': True,
                  'pages': self.instance.pages,
                  'has_prev': self.instance.has_prev,
                  'page': self.instance.page,
                  'has_next': self.instance.has_next,
                  'iter_pages': list(self.instance.iter_pages(left_edge=1,
                                                              left_current=2,
                                                              right_current=3,
                                                              right_edge=1))
              }
              return {'data': self._serializerlist(self.instance.items,
                                                   self.depth),
                      'pageinfo': pageinfo}
          return self._serializer(self.instance, self.depth)

      def _serializerlist(self, instances, depth):
          results = []
          for instance in instances:
              result = self._serializer(instance, depth)
              if result:
                  results.append(result)
          return results

      def _serializer(self, instance, depth):
          result = {}
          if depth == 0:
              return result
          depth -= 1
          model_class = self.get_model_class(instance)
          inp = self.get_inspect(model_class)
          model_data = self._serializer_model(inp, instance, depth)
          relation_data = self._serializer_relation(inp, instance, depth)
          result.update(model_data)
          result.update(relation_data)
          return result

      def _serializer_model(self, inp, instance, depth):
          result = {}
          model_columns = self.get_model_columns(inp)
          for column in model_columns:
              result[column] = getattr(instance, column)
          return result

      def _serializer_relation(self, inp, instance, depth):
          result = {}
          relation_columns = self.get_relation_columns(inp)
          for relation in relation_columns:
              column = relation.key
              if relation.direction in [ONETOMANY, MANYTOMANY]:
                  children = getattr(instance, column)
                  if relation.lazy == 'dynamic':
                      children = children.all()
                  result[column] = Serializer(
                      children,
                      many=True,
                      exclude=[relation.back_populates],
                      depth=depth).data
              else:
                  child = getattr(instance, column)
                  if relation.lazy == 'dynamic':
                      child = child.first()
                  result[column] = Serializer(
                      child,
                      many=False,
                      exclude=[relation.back_populates],
                      depth=depth).data
          return result

      def get_model_class(self, instance):
          return getattr(instance, '__class__')

      def get_inspect(self, model_class):
          return inspect(model_class)

      def get_model_columns(self, inp):
          if self.include:
              model_columns = [
                  column.name for column in inp.columns
                  if column.name in self.include
              ]
          elif self.exclude:
              model_columns = [
                  column.name for column in inp.columns
                  if column.name not in self.exclude
              ]
          else:
              model_columns = [column.name for column in inp.columns]

          return model_columns

      def get_relation_columns(self, inp):
          if self.include:
              relation_columns = [
                  relation for relation in inp.relationships
                  if relation.key in self.include
              ]
          elif self.exclude:
              relation_columns = [
                  relation for relation in inp.relationships
                  if relation.key not in self.exclude
              ]
          else:
              relation_columns = [relation for relation in inp.relationships]
          return relation_columns
&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id="org-15014130311413"&gt;具体使用&lt;/h1&gt;
&lt;p&gt;使用上很简单(以flask-sqlalchemy为例),原生*sqlalchemy*类似&lt;/p&gt;

&lt;h2 id="org-15014130311414"&gt;多个实例&lt;/h2&gt;
&lt;pre class="python"&gt;
   posts = Post.query.all()
   serializer = Seralizer(posts,many=True)
   data = serializer.data
&lt;/pre&gt;

&lt;h2 id="org-15014130311414"&gt;单个实例&lt;/h2&gt;
&lt;pre class="python"&gt;
   post = Post.query.first()
   serializer = Seralizer(post,many=False)
   data = serializer.data
&lt;/pre&gt;

&lt;h2 id="org-15014130311414"&gt;排除字段&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,exclude=['title'])
&lt;/pre&gt;

&lt;h2 id="org-15014130311414"&gt;仅包括字段&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,include=['title'])
&lt;/pre&gt;

&lt;h2 id="org-15014130311415"&gt;关系查询深度&lt;/h2&gt;
&lt;pre class="python"&gt;
   serializer = Seralizer(post,depth=3)
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;depth
&lt;p&gt;默认为2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="sqlalchemy"></category><category term="json"></category></entry><entry><title>利用网易云api获取歌曲信息</title><link href="http://honmaple.org/articles/2016/12/%E5%88%A9%E7%94%A8%E7%BD%91%E6%98%93%E4%BA%91api%E8%8E%B7%E5%8F%96%E6%AD%8C%E6%9B%B2%E4%BF%A1%E6%81%AF.html" rel="alternate"></link><published>2016-12-11T00:00:00+08:00</published><updated>2016-12-11T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-12-11:/articles/2016/12/利用网易云api获取歌曲信息.html</id><summary type="html">最近是增加了一个*aplayer*在网站上,但原本想要使用qiniu存储，最后觉得太麻烦了,直接利用网易云api获取歌曲</summary><content type="html">
&lt;p&gt;最近是增加了一个*aplayer*在网站上,但原本想要使用qiniu存储，最后觉得太麻烦了,直接利用网易云api获取歌曲&lt;/p&gt;

&lt;p&gt;使用*python标准库urllib*&lt;/p&gt;

&lt;p&gt;直接给出代码&lt;/p&gt;

&lt;pre class="python"&gt;
from urllib import request
import json

id = '28819878'
url = "http://music.163.com/api/song/detail/?id=" + id + "&amp;ids=%5B" + id + "%5D&amp;csrf_token"
rep = request.urlopen(url).read().decode('UTF-8')
rep = json.loads(rep)['songs'][0]
name = rep['name']
artist = rep['artists'][0]['name']
mp3url = rep['mp3Url']
picurl = rep['album']['blurPicUrl']
print('name:', name)
print('artists:', artist)
print('mp3:', mp3url)
print('pic:', picurl)
url = 'http://music.163.com/api/song/media?id=' + id
rep = request.urlopen(url).read().decode('UTF-8')
lyric = json.loads(rep)['lyric']
print('lyric:\n', json.dumps(lyric))
&lt;/pre&gt;

&lt;p&gt;: name: 轨迹
: artists: 徐小薇
: mp3: http://m2.music.126.net/1vGFlmmY1NeHEZy_1QuYhA==/5898879883333738.mp3
: pic: http://p4.music.126.net/EMS4GE-ojql3azwxXYPT3w==/3264450024433079.jpg
: lyric:
:  "[00:12.98]\u600e\u4e48\u9690\u85cf\u6211\u7684\u60b2\u4f24\n[00:19.10]\u5931\u53bb\u4f60\u7684\u5730\u65b9\n[00:25.61]\u4f60\u7684\u53d1\u9999\u6563\u7684\u5306\u5fd9\n[00:32.06]\u6211\u5df2\u7ecf\u8ddf\u4e0d\u4e0a\n[00:38.49]\u95ed\u4e0a\u773c\u775b\u8fd8\u80fd\u770b\u89c1\n[00:44.90]\u4f60\u79bb\u53bb\u7684\u75d5\u8ff9\n[00:51.21]\u5728\u6708\u5149\u4e0b\u4e00\u76f4\u627e\u5bfb\u90a3\u60f3\u5ff5\u7684\u8eab\u5f71\n[01:04.48]\u5982\u679c\u8bf4\u5206\u624b\u662f\u82e6\u75db\u7684\u8d77\u70b9\n[01:09.98]\u90a3\u5728\u7ec8\u70b9\u4e4b\u524d\n[01:13.25]\u6211\u613f\u610f\u518d\u7231\u4e00\u904d\n[01:17.25]\u60f3\u8981\u5bf9\u4f60\u8bf4\u7684\n[01:19.89]\u4e0d\u6562\u8bf4\u7684\u7231\n[01:23.52]\u4f1a\u4e0d\u4f1a\u6709\u4eba\u53ef\u4ee5\u660e\u767d\n[01:29.54]\u6211\u4f1a\u53d1\u7740\u5446\u7136\u540e\u5fd8\u8bb0\u4f60\n[01:35.83]\u63a5\u7740\u7d27\u7d27\u95ed\u4e0a\u773c\n[01:42.27]\u60f3\u7740\u90a3\u4e00\u5929\u4f1a\u6709\u4eba\u4ee3\u66ff\n[01:49.10]\u8ba9\u6211\u4e0d\u518d\u60f3\u5ff5\u4f60\n[01:55.10]\u6211\u4f1a\u53d1\u7740\u5446\u7136\u540e\u5fae\u5fae\u7b11\n[02:01.51]\u63a5\u7740\u7d27\u7d27\u95ed\u4e0a\u773c\n[02:07.81]\u53c8\u60f3\u4e86\u4e00\u904d\u4f60\u6e29\u67d4\u7684\u8138\n[02:14.54]\u5728\u6211\u5fd8\u8bb0\u4e4b\u524d\n[02:30.42]\u600e\u4e48\u9690\u85cf\u6211\u7684\u60b2\u4f24\n[02:36.77]\u5931\u53bb\u4f60\u7684\u5730\u65b9\n[02:43.17]\u4f60\u7684\u53d1\u9999\u6563\u7684\u5306\u5fd9\n[02:49.56]\u6211\u5df2\u7ecf\u8ddf\u4e0d\u4e0a\n[02:56.09]\u95ed\u4e0a\u773c\u775b\u8fd8\u80fd\u770b\u89c1\n[03:02.20]\u4f60\u79bb\u53bb\u7684\u75d5\u8ff9\n[03:08.81]\u5728\u6708\u5149\u4e0b\u4e00\u76f4\u627e\u5bfb\u90a3\u60f3\u5ff5\u7684\u8eab\u5f71\n[03:21.81]\u5982\u679c\u8bf4\u5206\u624b\u662f\u82e6\u75db\u7684\u8d77\u70b9\n[03:27.53]\u90a3\u5728\u7ec8\u70b9\u4e4b\u524d\n[03:34.82]\u6211\u613f\u610f\u518d\u7231\u4e00\u904d\n[03:34.68]\u60f3\u8981\u5bf9\u4f60\u8bf4\u7684\n[03:37.69]\u4e0d\u6562\u8bf4\u7684\u7231\n[03:41.11]\u4f1a\u4e0d\u4f1a\u6709\u4eba\u53ef\u4ee5\u660e\u767d\n[03:47.07]\u6211\u4f1a\u53d1\u7740\u5446\u7136\u540e\u5fd8\u8bb0\u4f60\n[03:53.54]\u63a5\u7740\u7d27\u7d27\u95ed\u4e0a\u773c\n[03:59.73]\u60f3\u7740\u90a3\u4e00\u5929\u4f1a\u6709\u4eba\u4ee3\u66ff\n[04:06.86]\u8ba9\u6211\u4e0d\u518d\u60f3\u5ff5\u4f60\n[04:12.96]\u6211\u4f1a\u53d1\u7740\u5446\u7136\u540e\u5fae\u5fae\u7b11\n[04:19.08]\u63a5\u7740\u7d27\u7d27\u95ed\u4e0a\u773c\n[04:25.53]\u53c8\u60f3\u4e86\u4e00\u904d\u4f60\u6e29\u67d4\u7684\u8138\n[04:32.24]\u5728\u6211\u5fd8\u8bb0\u4e4b\u524d\n\n[04:38.34]\u6211\u4f1a\u53d1\u7740\u5446\u7136\u540e\u5fd8\u8bb0\u4f60\n[04:45.05]\u63a5\u7740\u7d27\u7d27\u95ed\u4e0a\u773c\n[04:51.10]\u60f3\u7740\u90a3\u4e00\u5929\u4f1a\u6709\u4eba\u4ee3\u66ff\n[04:58.01]\u8ba9\u6211\u4e0d\u518d\u60f3\u5ff5\u4f60\n[05:03.89]\u6211\u4f1a\u53d1\u7740\u5446\u7136\u540e\u5fae\u5fae\u7b11\n[05:10.25]\u63a5\u7740\u7d27\u7d27\u95ed\u4e0a\u773c\n[05:16.70]\u53c8\u60f3\u4e86\u4e00\u904d\u4f60\u6e29\u67d4\u7684\u8138\n[05:23.50]\u5728\u6211\u5fd8\u8bb0\u4e4b\u524d\n\n[05:29.62]\u5fc3\u91cc\u7684\u773c\u6cea\n[05:32.81]\u6a21\u7cca\u4e86\u89c6\u7ebf\n[05:36.57]\u4f60\u5df2\u5feb\u770b\u4e0d\u89c1"&lt;/p&gt;

&lt;p&gt;结果格式化什么的看着格式吧，这些信息对我来说足够了&lt;/p&gt;
</content><category term="python"></category><category term="netease"></category></entry><entry><title>常用正则表达式</title><link href="http://honmaple.org/articles/2016/11/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html" rel="alternate"></link><published>2016-11-26T00:00:00+08:00</published><updated>2016-11-26T00:00:00+08:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-11-26:/articles/2016/11/常用正则表达式.html</id><summary type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310822"&gt;校验数字的表达式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310822"&gt;数字:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310822"&gt;n位的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;至少n位的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;m-n位的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;零和非零开头的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;非零开头的最多带两位小数的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;带1-2位小数的正数或负数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;正数、负数、和小数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;有两位小数的正实数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;有1~3位小数的正实数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非零的正整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非零的负整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非负整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非正整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非负浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非正浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;正浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;负浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;校验字符的表达式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;汉字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;英文和数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;长度为3-20的所有字符：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由26个英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由26个大写英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由26个小写英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由数字和26个英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由数字、26个英文字母或者下划线组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;中文、英文、数字包括下划线：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;中文、英文、数字但不包括下划线等符号：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;可以输入含有^%&amp;',;=?$\"等字符：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;禁止输入含有~的字符：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;特殊需求表达式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;Email地址：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;域名：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;InternetURL：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;手机号码：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;国内电话号码(0511-4405222、021-87888822)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;身份证号(15位 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;&lt;div id="text-table-of-contents"&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310822"&gt;校验数字的表达式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310822"&gt;数字:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310822"&gt;n位的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;至少n位的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;m-n位的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;零和非零开头的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;非零开头的最多带两位小数的数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;带1-2位小数的正数或负数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;正数、负数、和小数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310823"&gt;有两位小数的正实数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;有1~3位小数的正实数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非零的正整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非零的负整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非负整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非正整数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非负浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310824"&gt;非正浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;正浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;负浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;浮点数：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;校验字符的表达式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;汉字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310825"&gt;英文和数字：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;长度为3-20的所有字符：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由26个英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由26个大写英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由26个小写英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由数字和26个英文字母组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;由数字、26个英文字母或者下划线组成的字符串：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310826"&gt;中文、英文、数字包括下划线：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;中文、英文、数字但不包括下划线等符号：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;可以输入含有^%&amp;',;=?$\"等字符：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;禁止输入含有~的字符：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;特殊需求表达式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;Email地址：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;域名：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310827"&gt;InternetURL：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;手机号码：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;国内电话号码(0511-4405222、021-87888822)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;身份证号(15位、18位数字)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;短身份证号码(数字、字母x结尾)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310828"&gt;密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310829"&gt;强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310829"&gt;日期格式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310829"&gt;一年的12个月(01～09和1～12)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310829"&gt;一个月的31天(01～09和1～31)：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310829"&gt;钱的输入格式：&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org-15014130310829"&gt;有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310830"&gt;1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;xml文件：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;中文字符的正则表达式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;双字节字符：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;空白行的正则表达式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;HTML标记的正则表达式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;首尾空白字符的正则表达式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310831"&gt;腾讯QQ号：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310832"&gt;中国邮政编码：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310832"&gt;IP地址：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org-15014130310832"&gt;IP地址：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;h2 id="org-15014130310822"&gt;校验数字的表达式&lt;/h2&gt;
&lt;h3 id="org-15014130310822"&gt;数字:&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[0-9]*$
&lt;/pre&gt;

&lt;h3 id="org-15014130310822"&gt;n位的数字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d{n}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;至少n位的数字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d{n,}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;m-n位的数字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d{m,n}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;零和非零开头的数字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(0|[1-9][0-9]*)$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;非零开头的最多带两位小数的数字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^([1-9][0-9]*)+(.[0-9]{1,2})?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;带1-2位小数的正数或负数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(\-)?\d+(\.\d{1,2})?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;正数、负数、和小数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(\-|\+)?\d+(\.\d+)?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310823"&gt;有两位小数的正实数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[0-9]+(.[0-9]{2})?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;有1~3位小数的正实数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[0-9]+(.[0-9]{1,3})?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;非零的正整数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;非零的负整数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;非负整数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d+$ 或 ^[1-9]\d*|0$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;非正整数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;非负浮点数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
&lt;/pre&gt;

&lt;h3 id="org-15014130310824"&gt;非正浮点数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
&lt;/pre&gt;

&lt;h3 id="org-15014130310825"&gt;正浮点数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
&lt;/pre&gt;

&lt;h3 id="org-15014130310825"&gt;负浮点数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
&lt;/pre&gt;

&lt;h3 id="org-15014130310825"&gt;浮点数：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
&lt;/pre&gt;


&lt;h2 id="org-15014130310825"&gt;校验字符的表达式&lt;/h2&gt;
&lt;h3 id="org-15014130310825"&gt;汉字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[\u4e00-\u9fa5]{0,}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310825"&gt;英文和数字：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;长度为3-20的所有字符：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^.{3,20}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;由26个英文字母组成的字符串：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[A-Za-z]+$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;由26个大写英文字母组成的字符串：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[A-Z]+$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;由26个小写英文字母组成的字符串：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[a-z]+$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;由数字和26个英文字母组成的字符串：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[A-Za-z0-9]+$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;由数字、26个英文字母或者下划线组成的字符串：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\w+$ 或 ^\w{3,20}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310826"&gt;中文、英文、数字包括下划线：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[\u4E00-\u9FA5A-Za-z0-9_]+$
&lt;/pre&gt;

&lt;h3 id="org-15014130310827"&gt;中文、英文、数字但不包括下划线等符号：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310827"&gt;可以输入含有^%&amp;',;=?$\"等字符：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [^%&amp;',;=?$\x22]+
&lt;/pre&gt;

&lt;h3 id="org-15014130310827"&gt;禁止输入含有~的字符：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [^~\x22]+
&lt;/pre&gt;


&lt;h2 id="org-15014130310827"&gt;特殊需求表达式&lt;/h2&gt;
&lt;h3 id="org-15014130310827"&gt;Email地址：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
&lt;/pre&gt;

&lt;h3 id="org-15014130310827"&gt;域名：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
&lt;/pre&gt;

&lt;h3 id="org-15014130310827"&gt;InternetURL：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;手机号码：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;国内电话号码(0511-4405222、021-87888822)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    \d{3}-\d{8}|\d{4}-\d{7}
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;身份证号(15位、18位数字)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d{15}|\d{18}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;短身份证号码(数字、字母x结尾)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[a-zA-Z][a-zA-Z0-9_]{4,15}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310828"&gt;密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^[a-zA-Z]\w{5,17}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310829"&gt;强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
&lt;/pre&gt;

&lt;h3 id="org-15014130310829"&gt;日期格式：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\d{4}-\d{1,2}-\d{1,2}
&lt;/pre&gt;

&lt;h3 id="org-15014130310829"&gt;一年的12个月(01～09和1～12)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^(0?[1-9]|1[0-2])$
&lt;/pre&gt;

&lt;h3 id="org-15014130310829"&gt;一个月的31天(01～09和1～31)：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^((0?[1-9])|((1|2)[0-9])|30|31)$
&lt;/pre&gt;

&lt;h3 id="org-15014130310829"&gt;钱的输入格式：&lt;/h3&gt;
&lt;h4 id="org-15014130310829"&gt;有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^[1-9][0-9]*$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^(0|[1-9][0-9]*)$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^(0|-?[1-9][0-9]*)$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^[0-9]+(.[0-9]+)?$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^[0-9]+(.[0-9]{2})?$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^[0-9]+(.[0-9]{1,2})?$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$
&lt;/pre&gt;

&lt;h4 id="org-15014130310830"&gt;1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：&lt;/h4&gt;

&lt;pre class="example"&gt;
    ^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;xml文件：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;中文字符的正则表达式：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [\u4e00-\u9fa5]
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;双字节字符：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;空白行的正则表达式：&lt;/h3&gt;

&lt;pre class="example"&gt;
    \n\s*\r (可以用来删除空白行)
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;HTML标记的正则表达式：&lt;/h3&gt;

&lt;pre class="example"&gt;
    &lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;首尾空白字符的正则表达式：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
&lt;/pre&gt;

&lt;h3 id="org-15014130310831"&gt;腾讯QQ号：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [1-9][0-9]{4,} (腾讯QQ号从10000开始)
&lt;/pre&gt;

&lt;h3 id="org-15014130310832"&gt;中国邮政编码：&lt;/h3&gt;

&lt;pre class="example"&gt;
    [1-9]\d{5}(?!\d) (中国邮政编码为6位数字)
&lt;/pre&gt;

&lt;h3 id="org-15014130310832"&gt;IP地址：&lt;/h3&gt;

&lt;pre class="example"&gt;
    \d+\.\d+\.\d+\.\d+ (提取IP地址时有用)
&lt;/pre&gt;

&lt;h3 id="org-15014130310832"&gt;IP地址：&lt;/h3&gt;

&lt;pre class="example"&gt;
    ((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
&lt;/pre&gt;
</content><category term="python"></category><category term="regex"></category></entry></feed>