<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HonMaple's Blog</title><link href="http://honmaple.org/" rel="alternate"></link><link href="http://honmaple.org/feeds/python.rss.xml" rel="self"></link><id>http://honmaple.org/</id><updated>2016-07-28T00:00:00+02:00</updated><entry><title>python复习--装饰器</title><link href="http://honmaple.org/articles/2016/07/python%E5%A4%8D%E4%B9%A0--%E8%A3%85%E9%A5%B0%E5%99%A8.html" rel="alternate"></link><updated>2016-07-28T00:00:00+02:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-07-28:articles/2016/07/python复习--装饰器.html</id><summary type="html">&lt;p&gt;一个装饰器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;call &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;():&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者针对带参数的decorator：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def log(text):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kw):
            print(&amp;#39;%s %s():&amp;#39; % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="装饰器"></category></entry><entry><title>python的os模块学习</title><link href="http://honmaple.org/articles/2016/07/python%E7%9A%84os%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0.html" rel="alternate"></link><updated>2016-07-28T00:00:00+02:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-07-28:articles/2016/07/python的os模块学习.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline3"&gt;1. Process Parameters&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline1"&gt;1.1. os.environ(环境变量)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline2"&gt;1.2. os.getenv(key, default=None)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline36"&gt;2. os.path&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline4"&gt;2.1. os.path.abspath(path) #返回绝对路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline5"&gt;2.2. os.path.basename(path) #返回文件名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline6"&gt;2.3. os.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline7"&gt;2.4. os.path.dirname(path) #返回文件路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline8"&gt;2.5. os.path.exists(path) #路径存在则返回True,路径不存在返回False&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline9"&gt;2.6. os.path.exists('aa.py')&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline10"&gt;2.7. os.path.lexists #路径存在则返回True,路径不存在也返回False&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline11"&gt;2.8. os.path.expanduser(path) #把path中包含的"~"和"~user"转换成用户目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline12"&gt;2.9. os.path.expandvars(path) #根据环境变量的值替换path中包含的”(name”和”){name}”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline13"&gt;2.10. os.path.getatime(path) #返回最后一次进入此path的时间。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline14"&gt;2.11. os.path.getmtime(path) #返回在此path下最后一次修改的时间。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline15"&gt;2.12. os.path.getctime(path)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline16"&gt;2.13. os.path.getsize(path) #返回文件大小，如果文件不存在就返回错误&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline17"&gt;2.14. os.path.isabs(path) #判断是否为绝对路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline18"&gt;2.15. os.path.isfile(path) #判断路径是否为文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline19"&gt;2.16. os.path.isdir(path) #判断路径是否为目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline20"&gt;2.17. os.path.islink(path) #判断路径是否为链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline21"&gt;2.18. os.path.ismount(path) #判断路径是否为挂载点（）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline22"&gt;2.19. os.path.join(path1[, path2[, …]]) #把目录和文件名合成一个路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline23"&gt;2.20. os.path.normcase(path) #转换path的大小写和斜杠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline24"&gt;2.21. os.path.normpath(path) #规范path字符串形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline25"&gt;2.22. os.path.realpath(path) #返回path的真实路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline26"&gt;2.23. os.path.relpath(path[, start]) #从start开始计算相对路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline27"&gt;2.24. os.path.samefile(path1, path2) #判断目录或文件是否相同&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline28"&gt;2.25. os.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline29"&gt;2.26. os.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline30"&gt;2.27. os.path.split(path) #把路径分割成dirname和basename，返回一个元组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline31"&gt;2.28. os.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline32"&gt;2.29. os.path.splitext(path) #分割路径，返回路径名和文件扩展名的元组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline33"&gt;2.30. os.path.splitunc(path) #把路径分割为加载点与文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline34"&gt;2.31. os.path.walk(path, visit, arg) #遍历path，进入每个目录都调用visit函数，visit函数必须有&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline35"&gt;2.32. os.path.supportsunicodefilenames #设置是否支持unicode路径名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;Process Parameters&lt;a id="orgheadline3"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;os.environ(环境变量)&lt;a id="orgheadline1"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.environ[&amp;#39;HOME&amp;#39;]
&amp;#39;/home/xxx&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.getenv(key, default=None)&lt;a id="orgheadline2"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.getenv(&amp;quot;HOME&amp;quot;)
&amp;#39;/home/xxx&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;os.path&lt;a id="orgheadline36"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;os.path.abspath(path) #返回绝对路径&lt;a id="orgheadline4"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.abspath(&amp;#39;aa.py&amp;#39;)
&amp;#39;/home/jianglin/test/aa.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.basename(path) #返回文件名&lt;a id="orgheadline5"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.basename(&amp;#39;aa.py&amp;#39;)
&amp;#39;aa.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径。&lt;a id="orgheadline6"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.commonprefix([&amp;#39;aa.py&amp;#39;,&amp;#39;a.py&amp;#39;])
&amp;#39;a&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.commonprefix([&amp;#39;aa.py&amp;#39;,&amp;#39;c.py&amp;#39;])
&amp;#39;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.commonprefix([&amp;#39;~/test/aa.py&amp;#39;,&amp;#39;~/test/c.py&amp;#39;])
&amp;#39;~/test/&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.commonprefix([&amp;#39;~/test/aa.py&amp;#39;,&amp;#39;~/test/c.py&amp;#39;,&amp;#39;~/test/git/.git/config&amp;#39;])
&amp;#39;~/test/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.dirname(path) #返回文件路径&lt;a id="orgheadline7"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.dirname(&amp;#39;~/test/aa.py&amp;#39;)
&amp;#39;~/test&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.exists(path) #路径存在则返回True,路径不存在返回False&lt;a id="orgheadline8"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.exists('aa.py')&lt;a id="orgheadline9"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;True
&amp;gt;&amp;gt;&amp;gt; os.path.exists(&amp;#39;aa.pp&amp;#39;)
False
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.lexists #路径存在则返回True,路径不存在也返回False&lt;a id="orgheadline10"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.lexists(&amp;#39;aa.py&amp;#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.lexists(&amp;#39;aa.pp&amp;#39;)
False
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.expanduser(path) #把path中包含的"~"和"~user"转换成用户目录&lt;a id="orgheadline11"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.expanduser(&amp;#39;aa.py&amp;#39;)
&amp;#39;aa.py&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.expanduser(&amp;#39;~/test/aa.py&amp;#39;)
&amp;#39;/home/jianglin/test/aa.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.expandvars(path) #根据环境变量的值替换path中包含的”(name”和”){name}”&lt;a id="orgheadline12"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.getatime(path) #返回最后一次进入此path的时间。&lt;a id="orgheadline13"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.getatime(&amp;#39;aa.py&amp;#39;)
1461933601.0809627
&amp;gt;&amp;gt;&amp;gt; os.path.getatime(&amp;#39;~/git/&amp;#39;)
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/usr/lib/python3.5/genericpath.py&amp;quot;, line 60, in getatime
return os.stat(filename).st_atime
FileNotFoundError: [Errno 2] No such file or directory: &amp;#39;~/git/&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.getatime(&amp;#39;~/git/maple-bbs/.gitignore&amp;#39;)
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/usr/lib/python3.5/genericpath.py&amp;quot;, line 60, in getatime
return os.stat(filename).st_atime
FileNotFoundError: [Errno 2] No such file or directory: &amp;#39;~/git/maple-bbs/.gitignore&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.getatime(&amp;#39;a.py&amp;#39;)
1461418983.486829
&amp;gt;&amp;gt;&amp;gt; os.path.getatime(&amp;#39;~/git&amp;#39;)
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/usr/lib/python3.5/genericpath.py&amp;quot;, line 60, in getatime
return os.stat(filename).st_atime
FileNotFoundError: [Errno 2] No such file or directory: &amp;#39;~/git&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.getatime(&amp;#39;./git/.git/config&amp;#39;)
1461856107.9136002
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.getmtime(path) #返回在此path下最后一次修改的时间。&lt;a id="orgheadline14"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.getmtime(&amp;#39;aa.py&amp;#39;)
1461933858.6676357
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.getctime(path)&lt;a id="orgheadline15"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.getctime(&amp;#39;aa.py&amp;#39;)
1461933858.6676357
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.getsize(path) #返回文件大小，如果文件不存在就返回错误&lt;a id="orgheadline16"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.getsize(&amp;#39;aa.py&amp;#39;)
448
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.isabs(path) #判断是否为绝对路径&lt;a id="orgheadline17"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.isabs(&amp;#39;aa.py&amp;#39;)
False
&amp;gt;&amp;gt;&amp;gt; os.path.isabs(&amp;#39;~/test/aa.py&amp;#39;)
False
&amp;gt;&amp;gt;&amp;gt; os.path.isabs(&amp;#39;/home/jianglin/test/aa.py&amp;#39;)
True
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.isfile(path) #判断路径是否为文件&lt;a id="orgheadline18"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.isfile(&amp;#39;aa.py&amp;#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.isfile(&amp;#39;~/test&amp;#39;)
False
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.isdir(path) #判断路径是否为目录&lt;a id="orgheadline19"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&amp;#39;~/test&amp;#39;)
False
&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&amp;#39;/home/jianglin/test/aa.py&amp;#39;)
False
&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&amp;#39;/home/jianglin/test&amp;#39;)
True
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.islink(path) #判断路径是否为链接&lt;a id="orgheadline20"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.ismount(path) #判断路径是否为挂载点（）&lt;a id="orgheadline21"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.join(path1[, path2[, …]]) #把目录和文件名合成一个路径&lt;a id="orgheadline22"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.join(&amp;#39;/home/jianglin/test&amp;#39;,&amp;#39;aa.py&amp;#39;)
&amp;#39;/home/jianglin/test/aa.py&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.join(&amp;#39;/home/jianglin&amp;#39;,&amp;#39;test/aa.py&amp;#39;)
&amp;#39;/home/jianglin/test/aa.py&amp;#39;
&amp;gt;&amp;gt;&amp;gt; os.path.join(&amp;#39;~&amp;#39;,&amp;#39;test/aa.py&amp;#39;)
&amp;#39;~/test/aa.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.normcase(path) #转换path的大小写和斜杠&lt;a id="orgheadline23"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.normpath(path) #规范path字符串形式&lt;a id="orgheadline24"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.realpath(path) #返回path的真实路径&lt;a id="orgheadline25"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.relpath(path[, start]) #从start开始计算相对路径&lt;a id="orgheadline26"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.samefile(path1, path2) #判断目录或文件是否相同&lt;a id="orgheadline27"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件&lt;a id="orgheadline28"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件&lt;a id="orgheadline29"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.split(path) #把路径分割成dirname和basename，返回一个元组&lt;a id="orgheadline30"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.split(&amp;#39;~/test/aa.py&amp;#39;)
(&amp;#39;~/test&amp;#39;, &amp;#39;aa.py&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;os.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组&lt;a id="orgheadline31"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.splitext(path) #分割路径，返回路径名和文件扩展名的元组&lt;a id="orgheadline32"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.splitunc(path) #把路径分割为加载点与文件&lt;a id="orgheadline33"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;os.path.walk(path, visit, arg) #遍历path，进入每个目录都调用visit函数，visit函数必须有&lt;a id="orgheadline34"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有&lt;/p&gt;
&lt;p&gt;文件名，args则为walk的第三个参数&lt;/p&gt;
&lt;h2&gt;os.path.supportsunicodefilenames #设置是否支持unicode路径名&lt;a id="orgheadline35"&gt;&lt;/a&gt;&lt;/h2&gt;</summary><category term="python"></category><category term="os"></category></entry><entry><title>使用python脚本恢复原md文件</title><link href="http://honmaple.org/articles/2016/07/%E4%BD%BF%E7%94%A8python%E8%84%9A%E6%9C%AC%E6%81%A2%E5%A4%8D%E5%8E%9Fmd%E6%96%87%E4%BB%B6.html" rel="alternate"></link><updated>2016-07-28T00:00:00+02:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-07-28:articles/2016/07/使用python脚本恢复原md文件.html</id><summary type="html">&lt;p&gt;首先,这个恢复不是从磁盘中恢复,而是从数据库中恢复&lt;/p&gt;
&lt;p&gt;原因呢，不久前我的博客md文件被我不小心删了,
而我的博客分静态博客(基于pelican),和我自己写的动态博客(需数据库),静态博客需要md文件,
不过还好，我的数据库一直有备份,所以直接从数据库中恢复&lt;/p&gt;
&lt;p&gt;直接给出代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psycopg2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5432&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select id,title,publish,author,category,content from articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select a.title,t.name from articles as a,tags as t, &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;    tag_article as tt where  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;    tt.tags_id = t.id and tt.articles_id = a.id and a.id = &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.md&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Title: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Author: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Date: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Category: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Tags: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Slug: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Summary: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;][:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;结束&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok,就这样&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>centos7安装python3及pip3</title><link href="http://honmaple.org/articles/2016/07/centos7%E5%AE%89%E8%A3%85python3%E5%8F%8Apip3.html" rel="alternate"></link><updated>2016-07-07T00:00:00+02:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-07-07:articles/2016/07/centos7安装python3及pip3.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline1"&gt;1. 安装python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline2"&gt;2. 安装pip3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;安装python3&lt;a id="orgheadline1"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;安装python3很简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载源码并且编译&lt;/li&gt;
&lt;li&gt;安装epel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里采用第二种方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install epel-release
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完成之后,yum list python3*,你就可以看见 &lt;strong&gt;python34&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install python34
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安装pip3&lt;a id="orgheadline2"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/6587507/how-to-install-pip-with-python-3"&gt;参考问题&lt;/a&gt;
如果在上述安装 *python3*时采用了第二种方法,pip默认未安装,而且无法通过`yum install python34-pip`来安装&lt;/p&gt;
&lt;p&gt;正确的方法应该是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install python34-setuptools
easy_install-3.4 pip # 这里可能有一些出入,总之是使用python3的easy_install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok,就这样&lt;/p&gt;</summary><category term="python"></category><category term="python3"></category><category term="pip"></category><category term="pip3"></category></entry><entry><title>记录pip安装报的错.org</title><link href="http://honmaple.org/articles/2016/07/%E8%AE%B0%E5%BD%95pip%E5%AE%89%E8%A3%85%E6%8A%A5%E7%9A%84%E9%94%99.org.html" rel="alternate"></link><updated>2016-07-07T00:00:00+02:00</updated><author><name>honmaple</name></author><id>tag:honmaple.org,2016-07-07:articles/2016/07/记录pip安装报的错.org.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline1"&gt;1. Pillow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline2"&gt;2. misaka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline3"&gt;3. psycopg2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;Pillow&lt;a id="orgheadline1"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jpeg&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="n"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;disabled&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jpeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aborting&lt;/span&gt;

    &lt;span class="o"&gt;----------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Command&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/***/***/venv/bin/python3.4 -u -c &amp;quot;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/tmp/pip-build-k9djbrwk/Pillow/setup.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; install --record /tmp/pip-i_zr9z4a-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/***/***/venv/include/site/python3.4/Pillow&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k9djbrwk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Pillow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;解决办法:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# yum install libjpeg-turbo-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实这个办法也不太准确,
参考 &lt;a href="http://pillow.readthedocs.org/en/latest/installation.html"&gt;pillow文档&lt;/a&gt; ,安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;misaka&lt;a id="orgheadline2"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Setup&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install misaka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;报错&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Setup&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上 &lt;strong&gt;google&lt;/strong&gt; 搜了半天,结果都是 &lt;strong&gt;python-devel&lt;/strong&gt; 没装，实际上我的已经装上了，
我以为是因为我自己编译安装的python3没有安装python3-devel,又搜了半天，什么也没搜到，
后来心血来潮使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;easy_install misaka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不用多说，还是报错，但是报错原因成了 &lt;strong&gt;No package 'libffi' found&lt;/strong&gt; ,好吧，
yum list libffi\*之后，发现libffi已安装，但是libffi-devel未安装，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install libffi-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试一试，结果。。。成功了&lt;/p&gt;
&lt;h3&gt;psycopg2&lt;a id="orgheadline3"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;psycopg2安装之前需要安装 &lt;strong&gt;postgresql-devel&lt;/strong&gt; ,此外,正确的安装方式是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;:/usr/pgsql-9.3/bin/ pip install psycopg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;注意postgresql目录&lt;/em&gt;&lt;/p&gt;</summary><category term="python"></category><category term="pip"></category></entry><entry><title>基于restful的flask权限管理</title><link href="http://honmaple.org/articles/2016/06/%E5%9F%BA%E4%BA%8Erestful%E7%9A%84flask%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86.html" rel="alternate"></link><updated>2016-06-10T00:00:00+02:00</updated><author><name>2016-06-10 01:34:00</name></author><id>tag:honmaple.org,2016-06-10:articles/2016/06/基于restful的flask权限管理.html</id><summary type="html">&lt;h3&gt;为什么需要restful形式的权限管理&lt;a id="orgheadline1"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最近在写flask应用时使用了 &lt;strong&gt;restful&lt;/strong&gt; 形式的&lt;code&gt;flask.views.MethodView&lt;/code&gt;，但是在对其进行权限管理时遇到了一些问题&lt;/p&gt;
&lt;p&gt;flask文档上介绍说用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;decorators = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加装饰器,但实际使用上,比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;get&lt;/strong&gt; 和 &lt;strong&gt;post&lt;/strong&gt; 采用不同的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;get 不使用 login_required  &lt;br /&gt;
 post 需要 login_required&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就不能使用 &lt;strong&gt;decorators&lt;/strong&gt; 对视图进行装饰&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;post&lt;/strong&gt; ,&lt;strong&gt;delete&lt;/strong&gt;, &lt;strong&gt;put&lt;/strong&gt; 都需要 login_required,但是&lt;strong&gt;get&lt;/strong&gt;不需要
    而 &lt;strong&gt;delete&lt;/strong&gt; 又需要更高级别的权限,我们可以这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;AAA&lt;/span&gt;(&lt;span class="n"&gt;MethodView&lt;/span&gt;):

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="n"&gt;uid&lt;/span&gt;):
        ...

    &lt;span class="nv"&gt;@login_required&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        ...

    &lt;span class="nv"&gt;@login_required&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="n"&gt;uid&lt;/span&gt;):
        ...

    &lt;span class="nv"&gt;@login_required&lt;/span&gt;
    &lt;span class="nv"&gt;@more_required&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;delete&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="n"&gt;uid&lt;/span&gt;):
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是不是看起来还不错, &lt;strong&gt;但是&lt;/strong&gt;,如果再加上&lt;a href="http://www.pythonhosted.org/Flask-Principal/"&gt;类似EditBlogPostPermission&lt;/a&gt; 这样的权限管理呢?
是不是还需要这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@login_required
def put(self,uid):
    permission = EditBlogPostPermission(uid)
    if permission.can():
        # Save the edits ...
        return render_template(&amp;#39;edit_post.html&amp;#39;)
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先不论样式丑不丑，最重要的代码的 &lt;strong&gt;可维护性&lt;/strong&gt; 极差,所以我增加了如下代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;怎么实现restful形式的权限管理&lt;a id="orgheadline2"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;同样采用装饰器实现,调用 &lt;em&gt;BasePermission&lt;/em&gt; 时会自动调用 &lt;em&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/em&gt; 函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;BasePermission&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;func&lt;/span&gt;):
        &lt;span class="nv"&gt;@wraps&lt;/span&gt;(&lt;span class="n"&gt;func&lt;/span&gt;)
        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;(*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;):
            &lt;span class="n"&gt;meth&lt;/span&gt; = &lt;span class="n"&gt;getattr&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;request&lt;/span&gt;.&lt;span class="k"&gt;method&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;(), &lt;span class="n"&gt;None&lt;/span&gt;)
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;.&lt;span class="k"&gt;method&lt;/span&gt; == &lt;span class="s"&gt;&amp;#39;HEAD&amp;#39;&lt;/span&gt;:
                &lt;span class="n"&gt;meth&lt;/span&gt; = &lt;span class="n"&gt;getattr&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;None&lt;/span&gt;)
            &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;Unimplemented method %r&amp;#39;&lt;/span&gt; % &lt;span class="n"&gt;request&lt;/span&gt;.&lt;span class="k"&gt;method&lt;/span&gt;
            &lt;span class="n"&gt;check&lt;/span&gt; = &lt;span class="n"&gt;meth&lt;/span&gt;(*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
            &lt;span class="n"&gt;else:&lt;/span&gt;
                &lt;span class="nb"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;(*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;举个例子,get方式不需要用户登陆,而其它方式需要,并且put方式需要创建主题的作者才能更改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;TopicPermission&lt;/span&gt;(&lt;span class="n"&gt;BasePermission&lt;/span&gt;):
    &lt;span class="nv"&gt;@login_required&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;uid&lt;/span&gt;):
        &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="nv"&gt;@login_required&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;uid&lt;/span&gt;):
        &lt;span class="n"&gt;permission&lt;/span&gt; = &lt;span class="n"&gt;EditTopicPermission&lt;/span&gt;(&lt;span class="n"&gt;uid&lt;/span&gt;)
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt;.&lt;span class="nb"&gt;can&lt;/span&gt;():
            &lt;span class="n"&gt;flash&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;你没有权限&amp;#39;&lt;/span&gt;)
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;(&lt;span class="n"&gt;url_for&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;topic.topic&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;uid&lt;/span&gt;=&lt;span class="n"&gt;uid&lt;/span&gt;))

    &lt;span class="nv"&gt;@login_required&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;delete&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="n"&gt;uid&lt;/span&gt;):
        &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;topic_permission&lt;/span&gt; = &lt;span class="n"&gt;TopicPermission&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设四种方式都需要同一种权限,都需要用户登陆,总不能每个函数前都加上装饰器吧
所以稍加修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;decorators = ()
def __call__(self, func):
    if self.decorators:
        for dec in self.decorators:
            return dec(func)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK,这样就可以添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;decorators = [login_required]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;来实现四种请求方式采用同一种权限&lt;/p&gt;
&lt;p&gt;最后,你就可以在 &lt;em&gt;AAA&lt;/em&gt; 这个类里添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;decorators = [topic_permission]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实现restful形式的权限管理&lt;/p&gt;
&lt;p&gt;ok，就这样,可能还不完善或有一些问题，如有问题请联系我&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category><category term="restful"></category></entry><entry><title>sqlalchemy学习(一)</title><link href="http://honmaple.org/articles/2016/04/sqlalchemy%E5%AD%A6%E4%B9%A0(%E4%B8%80).html" rel="alternate"></link><updated>2016-04-25T00:00:00+02:00</updated><author><name>2016-04-25 21:55:00</name></author><id>tag:honmaple.org,2016-04-25:articles/2016/04/sqlalchemy学习(一).html</id><summary type="html">&lt;h1&gt;sqlalchemy&lt;a id="orgheadline19"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;系统的学一下&lt;/p&gt;
&lt;h1&gt;sqlalchemy&lt;a id="orgheadline19"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;系统的学一下sqlalchemyA,不过没有中文文档,只能用我的渣英文能力慢慢看原文档了&lt;/p&gt;
&lt;h2&gt;数据库连接&lt;a id="orgheadline6"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sqlite:///:memory:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;echo为True输出日志&lt;/p&gt;
&lt;h3&gt;各种数据库连接方式&lt;a id="orgheadline5"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dialect+driver://username:password@host:port/database
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Postgresql&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# default
engine = create_engine(&amp;#39;postgresql://scott:tiger@localhost/mydatabase&amp;#39;)
# psycopg2
engine = create_engine(&amp;#39;postgresql+psycopg2://scott:tiger@localhost/mydatabase&amp;#39;)
# pg8000
engine = create_engine(&amp;#39;postgresql+pg8000://scott:tiger@localhost/mydatabase&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# default
engine = create_engine(&amp;#39;mysql://scott:tiger@localhost/foo&amp;#39;)
# mysql-python
engine = create_engine(&amp;#39;mysql+mysqldb://scott:tiger@localhost/foo&amp;#39;)
# MySQL-connector-python
engine = create_engine(&amp;#39;mysql+mysqlconnector://scott:tiger@localhost/foo&amp;#39;)
# OurSQL
engine = create_engine(&amp;#39;mysql+oursql://scott:tiger@localhost/foo&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nl"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//scott:tiger@127.0.0.1:1521/sidname&amp;#39;)&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nl"&gt;cx_oracle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//scott:tiger@tnsname&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQLite&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# sqlite://&amp;lt;nohostname&amp;gt;/&amp;lt;path&amp;gt;
# where &amp;lt;path&amp;gt; is relative:
engine = create_engine(&amp;#39;sqlite:///foo.db&amp;#39;)
#Unix/Mac - 4 initial slashes in total
engine = create_engine(&amp;#39;sqlite:////absolute/path/to/foo.db&amp;#39;)
#Windows
engine = create_engine(&amp;#39;sqlite:///C:\\path\\to\\foo.db&amp;#39;)
#Windows alternative using raw string
engine = create_engine(r&amp;#39;sqlite:///C:\path\to\foo.db&amp;#39;)
# To use a SQLite :memory: database, specify an empty URL:
engine = create_engine(&amp;#39;sqlite://&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;声明样式&lt;a id="orgheadline11"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;

     &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;User(name=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;, fullname=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;, password=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;)&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;样式参数说明&lt;a id="orgheadline7"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;说明&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="org-left"&gt;**\_&lt;sub&gt;tablename&lt;/sub&gt;\_\_**&lt;/td&gt;
&lt;td class="org-left"&gt;表名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;字段类型及说明&lt;a id="orgheadline10"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.sqlalchemy.org/en/rel_1_0/core/type_basics.html#sqlalchemy.types.Integer"&gt;字段类型及文档&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generic Types&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;p&gt;&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;字段类型&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;BigInteger&lt;/td&gt;
&lt;td class="org-left"&gt;大数&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Boolean(create&lt;sub&gt;constraint&lt;/sub&gt;=True, name=None, _create&lt;sub&gt;events&lt;/sub&gt;=True)&lt;/td&gt;
&lt;td class="org-left"&gt;布尔&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Data&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;DateTime(timezone=False)&lt;/td&gt;
&lt;td class="org-left"&gt;时间&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Enum(*enums, **kw)&lt;/td&gt;
&lt;td class="org-left"&gt;枚举&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Float(precision=None, asdecimal=False, decimal&lt;sub&gt;return&lt;/sub&gt;&lt;sub&gt;scale&lt;/sub&gt;=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;浮点型&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Integer&lt;/td&gt;
&lt;td class="org-left"&gt;整型&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Interval(native=True, second&lt;sub&gt;precision&lt;/sub&gt;=None, day&lt;sub&gt;precision&lt;/sub&gt;=None)&lt;/td&gt;
&lt;td class="org-left"&gt;时间间隔&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;LargeBinary(length=None)&lt;/td&gt;
&lt;td class="org-left"&gt;二进制大对象&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;MatchType(create&lt;sub&gt;constraint&lt;/sub&gt;=True, name=None, _create&lt;sub&gt;events&lt;/sub&gt;=True)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Numeric(precision=None, scale=None, decimal&lt;sub&gt;return&lt;/sub&gt;&lt;sub&gt;scale&lt;/sub&gt;=None, asdecimal=True)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;PickleType(protocol=2, pickler=None, comparator=None)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;SchemaType(name=None, schema=None, metadata=None, inherit&lt;sub&gt;schema&lt;/sub&gt;=False, quote=None, _create&lt;sub&gt;events&lt;/sub&gt;=True)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;SmallInteger&lt;/td&gt;
&lt;td class="org-left"&gt;小整型&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;String(length=None, collation=None, convert&lt;sub&gt;unicode&lt;/sub&gt;=False, unicode&lt;sub&gt;error&lt;/sub&gt;=None, _warn&lt;sub&gt;on&lt;/sub&gt;&lt;sub&gt;bytestring&lt;/sub&gt;=False)&lt;/td&gt;
&lt;td class="org-left"&gt;字符串&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Text(length=None, collation=None, convert&lt;sub&gt;unicode&lt;/sub&gt;=False, unicode&lt;sub&gt;error&lt;/sub&gt;=None, _warn&lt;sub&gt;on&lt;/sub&gt;&lt;sub&gt;bytestring&lt;/sub&gt;=False)&lt;/td&gt;
&lt;td class="org-left"&gt;文本对象&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Time(timezone=False)&lt;/td&gt;
&lt;td class="org-left"&gt;时间&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;Unicode(length=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;UnicodeText(length=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL Standard Types&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;p&gt;&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;字段类型&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;BIGINT&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;BINARY(length=None)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;BLOB(length=None)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;BOOLEAN(create&lt;sub&gt;constraint&lt;/sub&gt;=True, name=None, _create&lt;sub&gt;events&lt;/sub&gt;=True)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;CHAR(length=None, collation=None, convert&lt;sub&gt;unicode&lt;/sub&gt;=False, unicode&lt;sub&gt;error&lt;/sub&gt;=None, _warn&lt;sub&gt;on&lt;/sub&gt;&lt;sub&gt;bytestring&lt;/sub&gt;=False)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;CLOB(length=None, collation=None, convert&lt;sub&gt;unicode&lt;/sub&gt;=False, unicode&lt;sub&gt;error&lt;/sub&gt;=None, _warn&lt;sub&gt;on&lt;/sub&gt;&lt;sub&gt;bytestring&lt;/sub&gt;=False)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;DATE&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;DATETIME(timezone=False)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;DECIMAL(precision=None, scale=None, decimal&lt;sub&gt;return&lt;/sub&gt;&lt;sub&gt;scale&lt;/sub&gt;=None, asdecimal=True)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;FLOAT(precision=None, asdecimal=False, decimal&lt;sub&gt;return&lt;/sub&gt;&lt;sub&gt;scale&lt;/sub&gt;=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;INT&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;INTEGER&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;NCHAR(length=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;NVARCHAR(length=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;NUMERIC(precision=None, scale=None, decimal&lt;sub&gt;return&lt;/sub&gt;&lt;sub&gt;scale&lt;/sub&gt;=None, asdecimal=True)¶&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;REAL(precision=None, asdecimal=False, decimal&lt;sub&gt;return&lt;/sub&gt;&lt;sub&gt;scale&lt;/sub&gt;=None, **kwargs)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;SMALLINT&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;TEXT(length=None, collation=None, convert&lt;sub&gt;unicode&lt;/sub&gt;=False, unicode&lt;sub&gt;error&lt;/sub&gt;=None, _warn&lt;sub&gt;on&lt;/sub&gt;&lt;sub&gt;bytestring&lt;/sub&gt;=False&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;TIME(timezone=False)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;TIMESTAMP(timezone=False)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;VARBINARY(length=None)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;
&lt;td class="org-left"&gt;VARCHAR(length=None, collation=None, convert&lt;sub&gt;unicode&lt;/sub&gt;=False, unicode&lt;sub&gt;error&lt;/sub&gt;=None, _warn&lt;sub&gt;on&lt;/sub&gt;&lt;sub&gt;bytestring&lt;/sub&gt;=False)&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;创建表&lt;a id="orgheadline12"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Base.metadata.create_all(engine)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;为表创建实例&lt;a id="orgheadline13"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ed_user = User(name=&amp;#39;ed&amp;#39;, fullname=&amp;#39;Ed Jones&amp;#39;, password=&amp;#39;edspassword&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; ed_user.name
&amp;#39;ed&amp;#39;
&amp;gt;&amp;gt;&amp;gt; ed_user.password
&amp;#39;edspassword&amp;#39;
&amp;gt;&amp;gt;&amp;gt; str(ed_user.id)
&amp;#39;None&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建session&lt;a id="orgheadline14"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也可以先创建Session,在创建应用前&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Session = sessionmaker()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你创建了应用,可以这样配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Session.configure(bind=engine)  # once engine is available
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;插入和更新数据&lt;a id="orgheadline18"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;插入&lt;a id="orgheadline15"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;插入一条数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ed_user = User(name=&amp;#39;ed&amp;#39;, fullname=&amp;#39;Ed Jones&amp;#39;, password=&amp;#39;edspassword&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; session.add(ed_user)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;插入多条数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; session.add_all([
...     User(name=&amp;#39;wendy&amp;#39;, fullname=&amp;#39;Wendy Williams&amp;#39;, password=&amp;#39;foobar&amp;#39;),
...     User(name=&amp;#39;mary&amp;#39;, fullname=&amp;#39;Mary Contrary&amp;#39;, password=&amp;#39;xxg527&amp;#39;),
...     User(name=&amp;#39;fred&amp;#39;, fullname=&amp;#39;Fred Flinstone&amp;#39;, password=&amp;#39;blah&amp;#39;)])
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更新&lt;a id="orgheadline16"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ed_user.password = &amp;#39;f8s7ccs&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; session.dirty
IdentitySet([&amp;lt;User(name=&amp;#39;ed&amp;#39;, fullname=&amp;#39;Ed Jones&amp;#39;, password=&amp;#39;f8s7ccs&amp;#39;)&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; session.new  # doctest: +SKIP
IdentitySet([&amp;lt;User(name=&amp;#39;wendy&amp;#39;, fullname=&amp;#39;Wendy Williams&amp;#39;, password=&amp;#39;foobar&amp;#39;)&amp;gt;,
&amp;lt;User(name=&amp;#39;mary&amp;#39;, fullname=&amp;#39;Mary Contrary&amp;#39;, password=&amp;#39;xxg527&amp;#39;)&amp;gt;,
&amp;lt;User(name=&amp;#39;fred&amp;#39;, fullname=&amp;#39;Fred Flinstone&amp;#39;, password=&amp;#39;blah&amp;#39;)&amp;gt;])
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;必须提交才能生效&lt;a id="orgheadline17"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; session.commit()
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="sql"></category><category term="sqlalchemy"></category></entry><entry><title>python一些加密解密</title><link href="http://honmaple.org/articles/2016/04/python%E4%B8%80%E4%BA%9B%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html" rel="alternate"></link><updated>2016-04-12T00:00:00+02:00</updated><author><name>2016-04-12 15:18:35.080776</name></author><id>tag:honmaple.org,2016-04-12:articles/2016/04/python一些加密解密.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;md5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;md5加密 :&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;sha1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha1加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;sha224&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha224&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sha224&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha224加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sha224&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha256加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;sha384&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha384&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sha384&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha384加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sha384&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;sha512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha512加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ripemd160&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;new加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encodestring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodestring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base64加密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base64解密: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="md5"></category></entry><entry><title>flask解决f5刷新问题</title><link href="http://honmaple.org/articles/2016/04/flask%E8%A7%A3%E5%86%B3f5%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98.html" rel="alternate"></link><updated>2016-04-07T00:00:00+02:00</updated><author><name>2016-04-07 23:52:12.180317</name></author><id>tag:honmaple.org,2016-04-07:articles/2016/04/flask解决f5刷新问题.html</id><summary type="html">&lt;p&gt;&lt;a href="https://segmentfault.com/q/1010000002486706"&gt;问题来源&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def index():
    if form.validate_on_submit() and request.method == &amp;quot;POST&amp;quot;:
        # do something
    else:
        # 这里使用**redirect**重定向而不是render_template
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>python时间转换</title><link href="http://honmaple.org/articles/2016/04/python%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2.html" rel="alternate"></link><updated>2016-04-07T00:00:00+02:00</updated><author><name>2016-04-07 23:42:07.357686</name></author><id>tag:honmaple.org,2016-04-07:articles/2016/04/python时间转换.html</id><summary type="html">&lt;h3&gt;string转datetime&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-04-03&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date_time&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;datetime转string&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; date_time.strftime(&amp;#39;%Y-%m-%d&amp;#39;)
&amp;#39;2016-04-03&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;datetime转时间戳&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; time_time = time.mktime(date_time.timetuple())
&amp;gt;&amp;gt;&amp;gt; time_time
1459612800.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;时间戳转string&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; time.strftime(&amp;#39;%Y-%m-%d&amp;#39;,time.localtime(time_time))
&amp;#39;2016-04-03&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="datetime"></category></entry><entry><title>母羊生羊问题解决</title><link href="http://honmaple.org/articles/2016/03/%E6%AF%8D%E7%BE%8A%E7%94%9F%E7%BE%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html" rel="alternate"></link><updated>2016-03-12T00:00:00+01:00</updated><author><name>2016-03-12 18:25:36.632142</name></author><id>tag:honmaple.org,2016-03-12:articles/2016/03/母羊生羊问题解决.html</id><summary type="html">&lt;p&gt;想了&lt;/p&gt;
&lt;p&gt;问题是这样的: 1只母羊，在第2年和第4年生下小母羊,在第5年死去,问N年后有多少母羊?&lt;/p&gt;
&lt;p&gt;想了很久，终于有了一个思路，不过目前效率不高  &lt;/p&gt;
&lt;p&gt;给出代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = [1]
def sheep(N):
    N = int(N)
    if N == 1:
        return a
    for n,k in enumerate(a):
        a[n] += 1
    for n,k in enumerate(a):
        if k == 2:
            a.append(1)
        if k == 4:
            a.append(1)
    return sheep(N-1)

while True:
    b = sheep(input(&amp;#39;请输入年份:\n&amp;#39;))
    c = [i for i in b if i &amp;lt; 5]
    print(&amp;#39;母羊总数: %d&amp;#39;%len(c))
    a = [1]
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>python复习(二)</title><link href="http://honmaple.org/articles/2016/03/python%E5%A4%8D%E4%B9%A0(%E4%BA%8C).html" rel="alternate"></link><updated>2016-03-07T00:00:00+01:00</updated><author><name>2016-03-07 12:07:12.147581</name></author><id>tag:honmaple.org,2016-03-07:articles/2016/03/python复习(二).html</id><summary type="html">&lt;p&gt;map()函数接收两个参数，一个是函数，一个是Iterable，
map将传入的&lt;/p&gt;
&lt;h3&gt;map&lt;/h3&gt;
&lt;p&gt;map()函数接收两个参数，一个是函数，一个是Iterable，
map将传入的函数依次作用到序列的每个元素，
并把结果作为新的Iterator返回。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def f(x):
...     return x * x
...
&amp;gt;&amp;gt;&amp;gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
&amp;gt;&amp;gt;&amp;gt; list(r)
[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
[&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;reduce&lt;/h3&gt;
&lt;p&gt;reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，
这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;filter&lt;/h3&gt;
&lt;p&gt;filter()把传入的函数依次作用于每个元素，
然后根据返回值是True还是False决定保留还是丢弃该元素。&lt;br /&gt;
例如，在一个list中，删掉偶数，只保留奇数，可以这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_odd(n):
    return n % 2 == 1

list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
# 结果: [1, 5, 9, 15]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;sorted&lt;/h3&gt;
&lt;p&gt;sorted()可以对list进行排序  &lt;/p&gt;
&lt;h4&gt;key&lt;/h4&gt;
&lt;p&gt;接收&lt;em&gt;key&lt;/em&gt;实现自定义排序  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对&lt;strong&gt;字符串排序&lt;/strong&gt;，是按照&lt;strong&gt;ASCII&lt;/strong&gt;的大小比较的&lt;br /&gt;
排序忽略大小写  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted([&amp;#39;bob&amp;#39;, &amp;#39;about&amp;#39;, &amp;#39;Zoo&amp;#39;, &amp;#39;Credit&amp;#39;], key=str.lower)
[&amp;#39;about&amp;#39;, &amp;#39;bob&amp;#39;, &amp;#39;Credit&amp;#39;, &amp;#39;Zoo&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;reverse&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;reverse = True&lt;/code&gt;反向排序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted([&amp;#39;bob&amp;#39;, &amp;#39;about&amp;#39;, &amp;#39;Zoo&amp;#39;, &amp;#39;Credit&amp;#39;], key=str.lower, reverse=True)
[&amp;#39;Zoo&amp;#39;, &amp;#39;Credit&amp;#39;, &amp;#39;bob&amp;#39;, &amp;#39;about&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;返回函数&lt;/h3&gt;
&lt;p&gt;返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，
或者后续会发生变化的变量。&lt;/p&gt;
&lt;h3&gt;匿名函数lambda&lt;/h3&gt;
&lt;p&gt;可以把匿名函数赋值给一个变量，再利用变量来调用该函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f = lambda x: x * x
&amp;gt;&amp;gt;&amp;gt; f
&amp;lt;function &amp;lt;lambda&amp;gt; at 0x101c6ef28&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f(5)
25
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把匿名函数作为返回值返回:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def build(x, y):
    return lambda: x * x + y * y
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>flask-sqlalchemy使用</title><link href="http://honmaple.org/articles/2016/03/flask-sqlalchemy%E4%BD%BF%E7%94%A8.html" rel="alternate"></link><updated>2016-03-05T00:00:00+01:00</updated><author><name>2016-03-05 00:40:08.696626</name></author><id>tag:honmaple.org,2016-03-05:articles/2016/03/flask-sqlalchemy使用.html</id><summary type="html">&lt;p&gt;简单的例子&lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/quickstart/"&gt;这里&lt;/a&gt;已经有了&lt;br /&gt;
&lt;a href="http://www.pythondoc.com/flask-sqlalchemy/index.html"&gt;中文&lt;/a&gt;
这里记录一下平时我遇到的一些问题  &lt;/p&gt;
&lt;h4&gt;一对多&lt;/h4&gt;
&lt;p&gt;需求:一个问题对应多个回复&lt;br /&gt;
下面给出代码(字段不完整)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Questions&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;questions&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;primary_key&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
    &lt;span class="n"&gt;title&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;String&lt;/span&gt;(&lt;span class="mi"&gt;50&lt;/span&gt;), &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)
    &lt;span class="n"&gt;content&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Text&lt;/span&gt;, &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;,&lt;span class="n"&gt;title&lt;/span&gt;,&lt;span class="n"&gt;content&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;title&lt;/span&gt; = &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;content&lt;/span&gt; = &lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__repr__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;Questions %r&amp;gt;&amp;quot;&lt;/span&gt; % &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;title&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Replies&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;replies&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;primary_key&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
    &lt;span class="n"&gt;content&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Text&lt;/span&gt;, &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)
    &lt;span class="n"&gt;question_id&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;ForeignKey&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;questions.id&amp;#39;&lt;/span&gt;,
                                                      &lt;span class="n"&gt;ondelete&lt;/span&gt;=&lt;span class="s"&gt;&amp;quot;CASCADE&amp;quot;&lt;/span&gt;))
    &lt;span class="n"&gt;replies&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;relationship&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;Questions&amp;#39;&lt;/span&gt;,
                              &lt;span class="n"&gt;backref&lt;/span&gt;=&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;backref&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;replies&amp;#39;&lt;/span&gt;,
                                                 &lt;span class="n"&gt;cascade&lt;/span&gt;=&lt;span class="s"&gt;&amp;#39;all,delete-orphan&amp;#39;&lt;/span&gt;,
                                                 &lt;span class="nb"&gt;lazy&lt;/span&gt;=&lt;span class="s"&gt;&amp;#39;dynamic&amp;#39;&lt;/span&gt;,
                                                 &lt;span class="n"&gt;order_by&lt;/span&gt;=&lt;span class="s"&gt;&amp;#39;Replies.time&amp;#39;&lt;/span&gt;)
                              )

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;content&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;content&lt;/span&gt; = &lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__repr__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;Replies %r&amp;gt;&amp;quot;&lt;/span&gt; % &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会发现这样的两行(虽然实际上有好几行)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    question_id = db.Column(db.Integer, db.ForeignKey(&amp;#39;questions.id&amp;#39;,
                                                      ondelete=&amp;quot;CASCADE&amp;quot;))
    replies = db.relationship(&amp;#39;Questions&amp;#39;,
                              backref=db.backref(&amp;#39;replies&amp;#39;,
                                                 cascade=&amp;#39;all,delete-orphan&amp;#39;,
                                                 lazy=&amp;#39;dynamic&amp;#39;,
                                                 order_by=&amp;#39;Replies.time&amp;#39;)
                              )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;question_id为外键,关联着questions这个数据表&lt;br /&gt;
replies这一行我习惯用反代,也就是backref=db.backref&lt;br /&gt;
&lt;strong&gt;调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;question = Questions.query.filter_by(id=1).first()
print(question.replies)  # 输出该问题的回复
print(question.replies.content) # 错误
for reply in question.replies:
    print(reply.content)  # 正确
reply = Replies.query.filter_by(id=1).first()
print(reply.question_id) # 输出该回复的所属问题
print(reply.question_id.title)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;级联删除&lt;/h4&gt;
&lt;p&gt;也就是删除一个问题，也会将该问题下的所有回复删除,而删除问题下的回复将不会影响到具体问题&lt;br /&gt;
具体请google sqlalchemy cascade&lt;br /&gt;
经过测试,上面代码可级联删除回复,而不是将外键置空&lt;/p&gt;</summary><category term="flask"></category><category term="sqlalchemy"></category></entry><entry><title>python复习(一)</title><link href="http://honmaple.org/articles/2016/03/python%E5%A4%8D%E4%B9%A0(%E4%B8%80).html" rel="alternate"></link><updated>2016-03-05T00:00:00+01:00</updated><author><name>2016-03-05 21:46:57.056881</name></author><id>tag:honmaple.org,2016-03-05:articles/2016/03/python复习(一).html</id><summary type="html">&lt;p&gt;·&lt;a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000"&gt;参考&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;循环&lt;/h3&gt;
&lt;p&gt;ranger(100)表示0到99这一百个数&lt;br /&gt;
可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。&lt;br /&gt;
把list、dict、str等Iterable变成Iterator可以使用iter()函数&lt;/p&gt;
&lt;h3&gt;不可变对象&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;abc&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a.replace(&amp;#39;a&amp;#39;, &amp;#39;A&amp;#39;)
&amp;#39;Abc&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;abc&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;列表(list)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 向列表追加元素  
a = [&amp;#39;hello&amp;#39;,&amp;#39;h&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;]
a.append(&amp;#39;world&amp;#39;)
# 删除列表最后一个元素
a.pop()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;切片&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 从a[0]开始到a[2]
a[0:3]
# 或者,省略0
a[:3]
# 省略-1
a[-2:]
# 每两个取一个
a[::2]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;迭代&lt;/h4&gt;
&lt;p&gt;判断是否可迭代&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;isinstance(x, Iterable)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下标循环&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for i, value in enumerate([&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]):
...     print(i, value)
...
0 A
1 B
2 C
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;列表生成式&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
# 或者
&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
# 使用两层循环，生成全排列
&amp;gt;&amp;gt;&amp;gt; [m + n for m in &amp;#39;ABC&amp;#39; for n in &amp;#39;XYZ&amp;#39;]
[&amp;#39;AX&amp;#39;, &amp;#39;AY&amp;#39;, &amp;#39;AZ&amp;#39;, &amp;#39;BX&amp;#39;, &amp;#39;BY&amp;#39;, &amp;#39;BZ&amp;#39;, &amp;#39;CX&amp;#39;, &amp;#39;CY&amp;#39;, &amp;#39;CZ&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;元组(tuple)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 只有一个元素时
a = (&amp;#39;hello&amp;#39;,)
# 而不是
a = (&amp;#39;hello&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;字典(dict)&lt;/h3&gt;
&lt;h4&gt;key不存在&lt;/h4&gt;
&lt;p&gt;如果key不存在,dict会报错
    &amp;gt;&amp;gt;&amp;gt; a['hello']
    Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    KeyError: 'hello'
可以用&lt;strong&gt;get&lt;/strong&gt;方式避免报错,如果key不存在，返回None,或者自己指定的value
    &amp;gt;&amp;gt;&amp;gt; a.get('hello')
    &amp;gt;&amp;gt;&amp;gt; a.get('hello', -1)
    -1&lt;/p&gt;
&lt;h4&gt;删除key&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a.pop(&amp;#39;hello&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;set&lt;/h4&gt;
&lt;p&gt;key不会重复  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = set([1,2,3])
# 添加key到set
a.add(4)
# 删除key从set
a.add(4)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s1 = set([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; s2 = set([2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s1 &amp;amp; s2
{2, 3}
&amp;gt;&amp;gt;&amp;gt; s1 | s2
{1, 2, 3, 4}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;迭代key和value&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for k,v in a.items():
    print(k,v)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数据类型转化及内置函数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 转换函数
int float str bool
# 数据类型检查
isinstance(x, (int, float))
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;generator&lt;/h3&gt;
&lt;p&gt;生成一个generator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; g = (x * x for x in range(2))
&amp;gt;&amp;gt;&amp;gt; g
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x1022ef630&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;输出generator&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; next(g)
0
&amp;gt;&amp;gt;&amp;gt; next(g)
1
&amp;gt;&amp;gt;&amp;gt; next(g)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者使用for&lt;/p&gt;
&lt;h4&gt;yield&lt;/h4&gt;
&lt;p&gt;可将函数输出转化为generator&lt;/p&gt;
&lt;h3&gt;函数&lt;/h3&gt;
&lt;p&gt;函数没有return，默认return None,简写为return&lt;br /&gt;
返回多个数&lt;code&gt;return 'hello','world'&lt;/code&gt;其实质是一个tuple&lt;/p&gt;
&lt;h4&gt;可变参数&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用是需要使用list或tuple,&lt;code&gt;calc([1,2,3])&lt;/code&gt;或&lt;code&gt;calc((1,2,3))&lt;/code&gt;&lt;br /&gt;
使用可变参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用时就可以&lt;code&gt;calc(1,2,3)&lt;/code&gt;&lt;br /&gt;
也可以将list或tuple传入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; calc(*nums)
14
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;关键字参数&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def person(name, age, **kw):
    print(&amp;#39;name:&amp;#39;, name, &amp;#39;age:&amp;#39;, age, &amp;#39;other:&amp;#39;, kw)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用时可以只传入&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;,或者传入任意个数的关键字参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Michael&amp;#39;, 30)
name: Michael age: 30 other: {}
&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Adam&amp;#39;, 45, gender=&amp;#39;M&amp;#39;, job=&amp;#39;Engineer&amp;#39;)
name: Adam age: 45 other: {&amp;#39;gender&amp;#39;: &amp;#39;M&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可这样调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; extra = {&amp;#39;city&amp;#39;: &amp;#39;Beijing&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Jack&amp;#39;, 24, **extra)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;命名关键字参数&lt;/h4&gt;
&lt;p&gt;如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def person(name, age, *, city, job):
    print(name, age, city, job)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;参数组合&lt;/h4&gt;
&lt;p&gt;参数定义的顺序必须是：必选参数、默认参数、可变参数/命名关键字参数和关键字参数&lt;/p&gt;
&lt;h3&gt;尾递归&lt;/h3&gt;</summary><category term="python"></category></entry><entry><title>关于sqlalchemy的desc</title><link href="http://honmaple.org/articles/2016/03/%E5%85%B3%E4%BA%8Esqlalchemy%E7%9A%84desc.html" rel="alternate"></link><updated>2016-03-05T00:00:00+01:00</updated><author><name>2016-03-05 17:02:36.545788</name></author><id>tag:honmaple.org,2016-03-05:articles/2016/03/关于sqlalchemy的desc.html</id><summary type="html">&lt;h3&gt;简单使用&lt;/h3&gt;
&lt;p&gt;questions = Questions.query.o&lt;/p&gt;
&lt;p&gt;也就是降序排序&lt;/p&gt;
&lt;h3&gt;简单使用&lt;/h3&gt;
&lt;p&gt;questions = Questions.query.order_by(Questions.time.desc()).all()&lt;/p&gt;
&lt;h3&gt;设置默认排序&lt;/h3&gt;
&lt;p&gt;如果几乎所有的questions都是按照时间降序排序,总不能每一条语句都加上&lt;code&gt;order_by(Questions.time.desc())&lt;/code&gt;&lt;br /&gt;
所以设置默认排序是有效的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Questions&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;questions&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;primary_key&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
    &lt;span class="n"&gt;title&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;String&lt;/span&gt;(&lt;span class="mi"&gt;50&lt;/span&gt;), &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)
    &lt;span class="n"&gt;content&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Text&lt;/span&gt;, &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)
    &lt;span class="nb"&gt;time&lt;/span&gt; = &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="n"&gt;DateTime&lt;/span&gt;, &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)

    &lt;span class="n"&gt;__mapper_args__&lt;/span&gt; = {
        &lt;span class="s"&gt;&amp;quot;order_by&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;time&lt;/span&gt;.&lt;span class="n"&gt;desc&lt;/span&gt;()
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如代码所示,使用&lt;code&gt;__mapper_args__&lt;/code&gt;就可，&lt;code&gt;__mapper_args__&lt;/code&gt;可以做很多事,具体看&lt;a href="http://docs.sqlalchemy.org/en/latest/orm/mapping_api.html"&gt;这里&lt;/a&gt;&lt;br /&gt;
设置默认排序下面的做法是&lt;strong&gt;错误&lt;/strong&gt;的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    __mapper_args__ = {
        &amp;quot;order_by&amp;quot;: &amp;#39;Questions.time.desc()&amp;#39;
    }
    # 或者
    __mapper_args__ = {
        &amp;quot;order_by&amp;quot;: &amp;#39;Questions.time desc&amp;#39;
    }
    # 或者
    __mapper_args__ = {
        &amp;quot;order_by&amp;quot;: &amp;#39;desc(Questions.time)&amp;#39;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;多对多默认排序&lt;/h3&gt;
&lt;p&gt;比如这样  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;question = Questions.query.filter_by(id=1).first()
for reply in question.replies:
    print(reply.content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;又如何设置回复是按照回复时间排序的&lt;br /&gt;
总不能这样  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for reply in sorted(question.replies):
# 这会报错的
TypeError: unorderable types: Replies() &amp;lt; Replies()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;怎么设置  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;replies = db.relationship(&amp;#39;Questions&amp;#39;,
                          backref=db.backref(&amp;#39;replies&amp;#39;,
                                             lazy=&amp;#39;dynamic&amp;#39;,
                                             order_by=&amp;#39;Replies.time&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok，暂时这样&lt;/p&gt;</summary><category term="flask"></category><category term="sqlalchemy"></category></entry><entry><title>关于sqlalchemy的filter_by与filter</title><link href="http://honmaple.org/articles/2016/03/%E5%85%B3%E4%BA%8Esqlalchemy%E7%9A%84filter_by%E4%B8%8Efilter.html" rel="alternate"></link><updated>2016-03-05T00:00:00+01:00</updated><author><name>2016-03-05 17:18:41.294541</name></author><id>tag:honmaple.org,2016-03-05:articles/2016/03/关于sqlalchemy的filter_by与filter.html</id><summary type="html">&lt;h3&gt;filter_by&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;都可看做是where但用法不一样&lt;/p&gt;
&lt;h3&gt;filter_by&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;question = Questions.query.filter_by(id=1).first()
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;filter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;question = Questions.query.filter(Questions.id==1).first()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实就是&lt;code&gt;=&lt;/code&gt; 与&lt;code&gt;==&lt;/code&gt;还有是否带类名的区别&lt;br /&gt;
如果要&lt;code&gt;select * from questions where id &amp;lt; 5&lt;/code&gt;&lt;br /&gt;
这时只能使用&lt;strong&gt;filter&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;questions = Questions.query.filter(Questions.id &amp;lt; 5).all()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;多个条件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;question = Questions.query.filter_by(name=&amp;#39;hello&amp;#39;,id=5).first()
# 或者
question = Questions.query.filter(Questions.name==&amp;#39;hello&amp;#39;,Questions.id==5).first()
&lt;/pre&gt;&lt;/div&gt;</summary><category term="flask"></category><category term="sqlalchemy"></category></entry><entry><title>记录Flask-Login的例子</title><link href="http://honmaple.org/articles/2016/02/%E8%AE%B0%E5%BD%95Flask-Login%E7%9A%84%E4%BE%8B%E5%AD%90.html" rel="alternate"></link><updated>2016-02-25T00:00:00+01:00</updated><author><name>2016-02-25 12:21:58.487342</name></author><id>tag:honmaple.org,2016-02-25:articles/2016/02/记录Flask-Login的例子.html</id><summary type="html">&lt;p&gt;例子1:[https://gist.github.com/bkdinoop/66&lt;/p&gt;
&lt;p&gt;书签不够用了&lt;br /&gt;
例子1:&lt;a href="https://gist.github.com/bkdinoop/6698956"&gt;https://gist.github.com/bkdinoop/6698956&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>自定义jinja2转义标签</title><link href="http://honmaple.org/articles/2016/02/%E8%87%AA%E5%AE%9A%E4%B9%89jinja2%E8%BD%AC%E4%B9%89%E6%A0%87%E7%AD%BE.html" rel="alternate"></link><updated>2016-02-22T00:00:00+01:00</updated><author><name>2016-02-22 15:43:25.400593</name></author><id>tag:honmaple.org,2016-02-22:articles/2016/02/自定义jinja2转义标签.html</id><summary type="html">&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/8976683/jinja2-escape-all-html-but-img-b-etc/8976872"&gt;参考问题&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://bleach.readthedocs.org/en/latest/clean.html#callable-filters"&gt;参考资料&lt;/a&gt;  &lt;br /&gt;
最终代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Markup&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bleach&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;font&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自定义filter过滤器&lt;/p&gt;</summary><category term="jinja2"></category><category term="python"></category><category term="flask"></category></entry><entry><title>flask使用ajax</title><link href="http://honmaple.org/articles/2016/02/flask%E4%BD%BF%E7%94%A8ajax.html" rel="alternate"></link><updated>2016-02-02T00:00:00+01:00</updated><author><name>2016-02-02 16:57:01.607024</name></author><id>tag:honmaple.org,2016-02-02:articles/2016/02/flask使用ajax.html</id><summary type="html">&lt;p&gt;[参考文档](http://www.w3school.com.cn/jq&lt;/p&gt;
&lt;h3&gt;简单使用ajax&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp"&gt;参考文档&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
$(document).ready(function(){
    $(&amp;#39;button#ajax&amp;#39;).click(function() {
        $.ajax ({
            type : &amp;quot;POST&amp;quot;,
            url : &amp;quot;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.login&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&amp;quot;,
            data:JSON.stringify({
                name: $(&amp;#39;input[name=&amp;quot;name&amp;quot;]&amp;#39;).val(),
                passwd: $(&amp;#39;input[name=&amp;quot;passwd&amp;quot;]&amp;#39;).val()
            }),
            contentType: &amp;#39;application/json;charset=UTF-8&amp;#39;,
            success: function(result) {
                if (result.judge == true)
                {
                    window.location = &amp;#39;/&amp;#39;;
                }
                else 
                {
                    $(&amp;quot;#showerror&amp;quot;).show();
                    $(&amp;quot;#error&amp;quot;).text(result.error);
                }
            }
        });
    });
});
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ajax使用CSRF&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://flask-wtf.readthedocs.org/en/latest/csrf.html"&gt;参考文档&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;首先注册CSRF&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_wtf.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CsrfProtect&lt;/span&gt;
&lt;span class="n"&gt;csrf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CsrfProtect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;csrf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;在模板中使用&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;var csrftoken = &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;csrf_token&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    $.ajaxSetup({&lt;/span&gt;
&lt;span class="x"&gt;        beforeSend: function(xhr, settings) {&lt;/span&gt;
&lt;span class="x"&gt;            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) &amp;amp;&amp;amp; !this.crossDomain) {&lt;/span&gt;
&lt;span class="x"&gt;                xhr.setRequestHeader(&amp;quot;X-CSRFToken&amp;quot;, csrftoken)&lt;/span&gt;
&lt;span class="x"&gt;            }&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="flask"></category><category term="ajax"></category><category term="jquery"></category></entry><entry><title>关于flask-wtf中的validators</title><link href="http://honmaple.org/articles/2016/02/%E5%85%B3%E4%BA%8Eflask-wtf%E4%B8%AD%E7%9A%84validators.html" rel="alternate"></link><updated>2016-02-02T00:00:00+01:00</updated><author><name>2016-02-02 22:49:36.640594</name></author><id>tag:honmaple.org,2016-02-02:articles/2016/02/关于flask-wtf中的validators.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;以前都是"吃快餐",利用别人的例子进行修改，弄得自己不明不白的，这次放假，静下心来好好的看看官方文档，
才发现写的代码有很多不必要的东西，可以进行很多优化  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;flask-wtforms是一个优秀的flask扩展，可惜官方文档说的不明不白，只是简单的说了大概的
功能,如果想要更好的利用这个扩展，请google wtforms,或者&lt;a href="http://wtforms.readthedocs.org/en/latest/"&gt;看这里&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;这里记录一下wtforms的&lt;strong&gt;validators&lt;/strong&gt;&lt;br /&gt;
&lt;a href="http://wtforms.simplecodes.com/docs/1.0.1/validators.html"&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RegisterForm&lt;/span&gt;(&lt;span class="n"&gt;Form&lt;/span&gt;):
    &lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="n"&gt;StringField&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;用户名:&amp;#39;&lt;/span&gt;)
    &lt;span class="n"&gt;email&lt;/span&gt; = &lt;span class="n"&gt;StringField&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;邮箱:&amp;#39;&lt;/span&gt;)
    &lt;span class="n"&gt;passwd&lt;/span&gt; = &lt;span class="n"&gt;PasswordField&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;密码:&amp;#39;&lt;/span&gt;)
    &lt;span class="n"&gt;repasswd&lt;/span&gt; = &lt;span class="n"&gt;PasswordField&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;重复密码:&amp;#39;&lt;/span&gt;)
    &lt;span class="n"&gt;register&lt;/span&gt; = &lt;span class="n"&gt;SubmitField&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;注册&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这只是一个最简单注册表单&lt;/p&gt;
&lt;h4&gt;慢慢地加上一些要求:&lt;/h4&gt;
&lt;h4&gt;输入不能为空&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Required&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;用户名:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;限制name长度&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;用户名:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;判断邮箱格式是否正确&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;邮箱&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;比较两次密码是否一致&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;密码:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;repasswd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;repasswd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;重复密码:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;自定义错误信息&lt;/h4&gt;
&lt;p&gt;默认错误信息可以通过  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;form = RegisterForm()
print(form.errors) //或者print(form.name.errors)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看&lt;br /&gt;
比如输入不能为空的默认错误信息  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;This field is required.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想要修改默认信息,请使用&lt;em&gt;message&lt;/em&gt;&lt;br /&gt;
比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name = StringField(&amp;#39;用户名:&amp;#39;,
                   [Required(message=u&amp;#39;输入不能为空&amp;#39;)])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Length(min=4,
       max=25,
       message=u&amp;#39;用户名长度在4到25个字符之间&amp;#39;)
Email(message=u&amp;#39;错误的邮箱地址&amp;#39;)
EqualTo(&amp;#39;confirm&amp;#39;,message=u&amp;#39;两次密码不一致&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就不用在视图文件不停地判断了,不要像我原先那样  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if form.name.data == &amp;#39;&amp;#39; or form.passwd.data == &amp;#39;&amp;#39;:
    flash(u&amp;#39;输入不能为空&amp;#39;)
if form.repasswd.data != form.passwd.data:
    flash(u&amp;#39;两次密码不一致&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok,就这样,这里写的不完善，不过对于我来说暂时够用了&lt;/p&gt;</summary><category term="flask"></category><category term="wtforms"></category></entry><entry><title>使用python的Pillow模块生成验证码</title><link href="http://honmaple.org/articles/2015/12/%E4%BD%BF%E7%94%A8python%E7%9A%84Pillow%E6%A8%A1%E5%9D%97%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81.html" rel="alternate"></link><updated>2015-12-30T00:00:00+01:00</updated><author><name>2015-12-30 10:04:54.813940</name></author><id>tag:honmaple.org,2015-12-30:articles/2015/12/使用python的Pillow模块生成验证码.html</id><summary type="html">&lt;p&gt;准&lt;/p&gt;
&lt;p&gt;&lt;a href="http://codingnow.cn/language/627.html"&gt;参考资料&lt;/a&gt;&lt;br /&gt;
准备 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageFilter&lt;/span&gt;

&lt;span class="n"&gt;_letter_cases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abcdefghjkmnpqrstuvwxy&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# 去除可能干扰的i，l，o，z&lt;/span&gt;
&lt;span class="n"&gt;_upper_cases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_letter_cases&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 大写字母&lt;/span&gt;
&lt;span class="n"&gt;_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="c1"&gt;# 数字&lt;/span&gt;
&lt;span class="n"&gt;init_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;_letter_cases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_upper_cases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;fontType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/share/fonts/TTF/DejaVuSans.ttf&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.创建图像  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_validate_code(self,size=(120, 30),
                        chars=init_chars,
                        img_type=&amp;quot;PNG&amp;quot;,
                        mode=&amp;quot;RGB&amp;quot;,
                        bg_color=(255, 255, 255),
                        fg_color=(0, 0, 255),
                        font_size=18,
                        font_type=fontType,
                        length=4,
                        draw_lines=True,
                        n_line=(1, 2),
                        draw_points=True,
                        point_chance = 2):

    width, height = size # 图像的宽，高
    img = Image.new(mode, size, bg_color) # 创建新图像
    img.save(&amp;quot;validate.png&amp;quot;, &amp;quot;PNG&amp;quot;) # 存储图片
if __name__ == &amp;#39;__main__&amp;#39;:
    create_validate_code()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.绘制干扰线&lt;br /&gt;
在创建新图像后添加  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if draw_lines:
    self.create_lines(draw,n_line,width,height) # 绘制干扰线
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;干扰线函数  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_lines(self,draw,n_line,width,height):
    line_num = random.randint(n_line[0],n_line[1]) # 干扰线条数
    for i in range(line_num):
        # 起始点
        begin = (random.randint(0, width), random.randint(0, height))
        #结束点
        end = (random.randint(0, width), random.randint(0, height))
        draw.line([begin, end], fill=(0, 0, 0))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.绘制干扰点&lt;br /&gt;
在绘制干扰线后添加  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if draw_points:
    self.create_points(draw,point_chance,width,height) #绘制干扰点
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;干扰点函数  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_points(self,draw,point_chance,width,height):
    chance = min(100, max(0, int(point_chance))) # 大小限制在[0, 100]

    for w in range(width):
        for h in range(height):
            tmp = random.randint(0, 100)
            if tmp &amp;gt; 100 - chance:
                draw.point((w, h), fill=(0, 0, 0))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.生成验证码&lt;br /&gt;
在绘制干扰点之后添加  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;strs = self.create_strs(draw,chars,length,font_type,
                         font_size,width,height,fg_color)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;验证码函数  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_strs(self,draw,chars,length,font_type, 
                font_size,width,height,fg_color):
    c_chars = random.sample(chars, length)
    strs = &amp;#39; %s &amp;#39; % &amp;#39; &amp;#39;.join(c_chars) # 每个字符前后以空格隔开

    font = ImageFont.truetype(font_type, font_size)
    font_width, font_height = font.getsize(strs)

    draw.text(((width - font_width) / 3, (height - font_height) / 3),strs,\
              font=font, fill=fg_color)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ok，简单的验证码就生成好了&lt;/p&gt;</summary><category term="python"></category><category term="pillow"></category><category term="验证码"></category></entry><entry><title>flask学习--jinja模板</title><link href="http://honmaple.org/articles/2015/12/flask%E5%AD%A6%E4%B9%A0--jinja%E6%A8%A1%E6%9D%BF.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:48:15.468761</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/flask学习--jinja模板.html</id><summary type="html">&lt;p&gt;janja2是flask的默认模板,使用模板能够很大程度的将前端与后端分离&lt;br /&gt; 下面内容主要参考&lt;/p&gt;
&lt;h2&gt;jinja介绍&lt;/h2&gt;
&lt;p&gt;Jinja是flask的默认模板引擎。&lt;/p&gt;
&lt;h2&gt;jinja设置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在扩展名为 .html 、 .htm 、 .xml 和 .xhtml 的模板中开启自动 转义。&lt;/li&gt;
&lt;li&gt;在模板中可以使用 {% autoescape %} 来手动设置是否转义。&lt;/li&gt;
&lt;li&gt;Flask 在 Jinja2 环境中加入一些全局函数和辅助对象，以增强模板的功能。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="flask"></category><category term="jinja"></category></entry><entry><title>flask学习——数据库操作</title><link href="http://honmaple.org/articles/2015/12/flask%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:50:17.974688</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/flask学习——数据库操作.html</id><summary type="html">&lt;p&gt;我将使用三种&lt;/p&gt;
&lt;p&gt;flask 作为后端数据库操作是必要的，现在记录一下一些flask数据库的相关操作，
我将使用三种方法操作数据库&lt;br /&gt;
暂时使用较简单的sqlite作为例子&lt;/p&gt;
&lt;h3&gt;相关环境的安装&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;建议使用ve虚拟环境&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S sqlite # archlinux
sudo pip install virtualenv 
# 在vertualenv环境下执行
pip install Flask-SQLAlchemy Jinja2 SQLAlchemy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;最好是多看文档&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;1.使用sqlite3模块API&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.runoob.com/sqlite/sqlite-python.html"&gt;参考资料&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;这是最简单的方法,不仅适用于flask,python的其他方面也一样适用,如爬虫之类&lt;/em&gt;  &lt;/p&gt;
&lt;h4&gt;连接数据库&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding=UTF-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;  &lt;span class="c1"&gt;#数据库文件路径&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#连接数据库，如果数据库文件不存在则创建&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connect database successfully&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#关闭数据库连接&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;如果将数据库名改为&lt;strong&gt;:memory:&lt;/strong&gt;,则在内存中打开数据库而不是磁盘&lt;/p&gt;
&lt;h4&gt;创建表&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;database = /path/test.db
test = sqlite.connect(&amp;#39;database&amp;#39;)
test.execute(&amp;#39;&amp;#39;&amp;#39;CREATE TABLE BOOKS
       (ID INT PRIMARY KEY     NOT NULL,
       TYPE           TEXT    NOT NULL,
       NAME           TEXT    NOT NULL,
       CONTENT        TEXT);&amp;#39;&amp;#39;&amp;#39;)
print(&amp;quot;Table created successfully&amp;quot;)
test.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;插入数据&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;database = /path/test.db
test = sqlite.connect(&amp;#39;database&amp;#39;)
test.execute(&amp;quot;INSERT INTO BOOKS (ID,TYPE,NAME,CONTENT) \
      VALUES (1, &amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;helloworld&amp;#39;)&amp;quot;);
test.execute(&amp;quot;INSERT INTO BOOKS (ID,TYPE,NAME,CONTENT) \
      VALUES (2, &amp;#39;goodbye&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;goodbyeworld&amp;#39;)&amp;quot;);
test.commit() #要使数据保存，必须提交
print(&amp;quot;Records commited successfully&amp;quot;)
test.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;查询数据&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;database = /path/test.db
test = sqlite.connect(&amp;#39;database&amp;#39;)
cursor = test.execute(&amp;quot;SELECT ID,TYPE,NAME,CONTENT  from BOOKS&amp;quot;)
for row in cursor:
   print(&amp;quot;ID =%d &amp;quot;%(row[0]))
   print(&amp;quot;TYPE =%s &amp;quot;%(row[1]))
   print(&amp;quot;NAME =%s &amp;quot;%(row[2]))
   print(&amp;quot;CONTENT =%s &amp;quot;%(row[3]))
test.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;更新数据&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;database = /path/test.db
test = sqlite.connect(&amp;#39;database&amp;#39;)
test.execute(&amp;quot;UPDATE BOOKS SET CONTENT = &amp;#39;hello&amp;#39; WHERE ID=2&amp;quot;)
test.commit
test.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;删除数据&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;database = /path/test.db
test = sqlite.connect(&amp;#39;database&amp;#39;)
test.execute(&amp;quot;DELETE FROM BOOKS WHERE ID=2&amp;quot;)
test.commit
test.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;由于数据库文件我已经在外部使用第一种方法创建,所以第二种方法我直接打开&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;2.使用文档上所说的方法&lt;/h3&gt;
&lt;p&gt;参考资料&lt;br /&gt;
&lt;a href="http://flask.readthedocs.org/en/0.2/patterns/sqlite3/"&gt;英文&lt;/a&gt;
&lt;a href="http://docs.jinkan.org/docs/flask/patterns/sqlite3.html"&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="n"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/database.db&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATABASE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.before_request&lt;/span&gt; &lt;span class="c1"&gt;#使用app_request装饰器打开数据库&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.teardown_request&lt;/span&gt; &lt;span class="c1"&gt;#使用app_request装饰器关闭数据库&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;#数据库简化查询&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要使用时(主要是查询)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;for book in query_db(&amp;#39;select * from BOOKS&amp;#39;):&lt;/span&gt;
&lt;span class="x"&gt;    print book[&amp;#39;NAME&amp;#39;], &amp;#39;has the id&amp;#39;, book[&amp;#39;ID&amp;#39;]&lt;/span&gt;
&lt;span class="x"&gt;#由于flask一般不使用print，可以这样&lt;/span&gt;
&lt;span class="x"&gt;book = query_db(&amp;#39;select * from BOOKS&amp;#39;)&lt;/span&gt;
&lt;span class="x"&gt;在模板中&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;book.ID&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;或着&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;book&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果只希望得到一个单独的结果  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;book = query_db(&amp;#39;select * from BOOKS where NAME = ?&amp;#39;,
                [the_bookname], one=True)
if book is None:
    print &amp;#39;No such user&amp;#39;
else:
    print the_bookname, &amp;#39;has the id&amp;#39;, book[&amp;#39;ID&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建，更新，插入，删除数据请使用第一个方法  &lt;/p&gt;
&lt;h4&gt;初始化数据库模型&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;closing&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;closing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema.sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executescript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.使用Flask-SQLAlchemy扩展 (这应该是最推荐的方法)&lt;/h3&gt;
&lt;p&gt;参考文档&lt;br /&gt;
&lt;a href="http://www.pythondoc.com/flask-sqlalchemy/index.html"&gt;中文&lt;/a&gt;
&lt;a href="https://pythonhosted.org/Flask-SQLAlchemy/"&gt;英文&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;一个最小应用&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sqlite:////tmp/test.db&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# sqlite打开的格式是sql:///三个&amp;quot;/&amp;quot;,接着是数据库文件的**绝对路径**&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;User &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用&lt;/h4&gt;
&lt;p&gt;假若上面代码保存为test.py  &lt;br /&gt;
    打开python shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#创建表&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#创建数据&lt;/span&gt;
&lt;span class="c1"&gt;# 这时数据还未真正写入数据库,需要提交&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#这时数据已经写入数据库中&lt;/span&gt;
&lt;span class="c1"&gt;# 简单数据查询&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想要简单的查看数据,推荐firefox的一个sqlite插件 &lt;strong&gt;sqlite manager&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;配置&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQLALCHEMY_DATABASE_URI #用于连接的数据库
SQLALCHEMY_BINDS #连接多个数据库
# 比如
SQLALCHEMY_BINDS = {
    &amp;#39;users&amp;#39;:        &amp;#39;mysqldb://localhost/users&amp;#39;,
    &amp;#39;appmeta&amp;#39;:      &amp;#39;sqlite:////path/to/appmeta.db&amp;#39;
}
# 创建删除表
&amp;gt;&amp;gt;&amp;gt; db.create_all(bind=[&amp;#39;users&amp;#39;])
&amp;gt;&amp;gt;&amp;gt; db.create_all(bind=&amp;#39;appmeta&amp;#39;)
# 引用绑定,使用 __bind_key__
class User(db.Model):
    __bind_key__ = &amp;#39;users&amp;#39;
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;选择，插入，删除&lt;/h4&gt;
&lt;p&gt;插入  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;删除  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; db.session.delete(me)
&amp;gt;&amp;gt;&amp;gt; db.session.commit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询&lt;br /&gt;
首先插入如下数据&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;id&lt;/th&gt;
&lt;th align="center"&gt;username&lt;/th&gt;
&lt;th align="center"&gt;email&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;admin&lt;/td&gt;
&lt;td align="center"&gt;admin@example.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;peter&lt;/td&gt;
&lt;td align="center"&gt;peter@example.org&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;guest&lt;/td&gt;
&lt;td align="center"&gt;guest@example.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;通过用户名查询用户:&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; admin = User.query.filter_by(username=&amp;#39;admin&amp;#39;).first()
&amp;gt;&amp;gt;&amp;gt; print(admin.id)
1
&amp;gt;&amp;gt;&amp;gt; print(admin.email)
u&amp;#39;admin@example.com&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查找不存在的用户名:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; missing = User.query.filter_by(username=&amp;#39;missing&amp;#39;).first()
&amp;gt;&amp;gt;&amp;gt; missing is None
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用更复杂的表达式查询一些用户:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; User.query.filter(User.email.endswith(&amp;#39;@example.com&amp;#39;)).all()
[&amp;lt;User u&amp;#39;admin&amp;#39;&amp;gt;, &amp;lt;User u&amp;#39;guest&amp;#39;&amp;gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按某种规则对用户排序:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; User.query.order_by(User.username)
[&amp;lt;User u&amp;#39;admin&amp;#39;&amp;gt;, &amp;lt;User u&amp;#39;guest&amp;#39;&amp;gt;, &amp;lt;User u&amp;#39;peter&amp;#39;&amp;gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;限制返回用户的数量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; User.query.limit(1).all()
[&amp;lt;User u&amp;#39;admin&amp;#39;&amp;gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用主键查询用户:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; User.query.get(1)
&amp;lt;User u&amp;#39;admin&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;在视图中使用&lt;/h4&gt;
&lt;p&gt;使用 get_or_404() 来代替 get()，使用 first_or_404() 来代替 first()。
这样会抛出一个 404 错误，而不是返回 None:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/user/&amp;lt;username&amp;gt;&amp;#39;)
def show_user(username):
    user = User.query.filter_by(username=username).first_or_404()
    return render_template(&amp;#39;show_user.html&amp;#39;, user=user)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;主要就是这样，最好看完整的文档&lt;/em&gt;&lt;br /&gt;
具体例子可以查看&lt;a href="http://github.com/honmaple/flask"&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category><category term="sqlite"></category><category term="sql"></category></entry><entry><title>flask学习笔记--1</title><link href="http://honmaple.org/articles/2015/12/flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--1.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:49:00.058916</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/flask学习笔记--1.html</id><summary type="html">&lt;p&gt;python html/css javascript http等&lt;/p&gt;
&lt;h2&gt;fl&lt;/h2&gt;
&lt;h2&gt;基本知识&lt;/h2&gt;
&lt;p&gt;python html/css javascript http等&lt;/p&gt;
&lt;h2&gt;flask安装&lt;/h2&gt;
&lt;p&gt;Flask 依赖两个外部库： Werkzeug 和 Jinja2 。
Werkzeug 是一个 WSGI 套件。 WSGI 是 Web 应用与 多种服务器之间的标准 Python 接口，即用于开发，也用于部署。 
Jinja2 是用于渲染 模板的。&lt;/p&gt;
&lt;h3&gt;virtualenv&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;关于virtualenv&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;安装 virtualenv  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完virtualenv后创建自己的文件夹  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir flask
$ &lt;span class="nb"&gt;cd&lt;/span&gt; flask
$ virtualenv venv
New python executable in env/bin/python
Installing setuptools............done.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以后要使用virtualenv只用输入  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ . venv/bin/activate   &lt;span class="c1"&gt;#不要忘记了&amp;quot;.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你会发现在终端PS1前会出现(venv),代表你已经进入virtualenv虚拟环境&lt;br /&gt;
退出virtualenv  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在virtualenv中安装flask&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="x"&gt; install flask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;另外,你也可以使用&lt;code&gt;$ sudo pip install flask&lt;/code&gt;安装flask到你的电脑中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;flask使用&lt;/h2&gt;
&lt;p&gt;安装完后就可以使用了
注意项目结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐使用&lt;br /&gt;
|-app/&lt;br /&gt;
|-|views.py&lt;br /&gt;
|-|models.py&lt;br /&gt;
|-|&lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
|-|templates/&lt;br /&gt;
|-|static/&lt;br /&gt;
|-config.py&lt;br /&gt;
|-run.py&lt;br /&gt;
|-tmp/  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;创建第一个应用过过隐&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;暂时可以不用进行项目结构编排&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;vim&lt;/span&gt;&lt;span class="x"&gt; hello.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="c1"&gt;#导入Flask类&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#__name__模块名，必须的&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#使用 route() 装饰器来告诉 Flask 触发函数的 URL &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#使用 run() 函数来运行本地服务器和应用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行后出现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;* Running on http://127.0.0.1:5000/  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开浏览器输入网址&lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;打开调试模式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.debug = True
app.run()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者是  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.run(debug=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;注意&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;调试模式仅限在本地使用，在生产环境中不要打开&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>flask学习笔记--2</title><link href="http://honmaple.org/articles/2015/12/flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--2.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:49:23.970455</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/flask学习笔记--2.html</id><summary type="html">&lt;p&gt;今天被flask的项目结构或者说是蓝图搞得晕头转脑，各种文档也没说清，从github搜索并clone了几个用flask做成的网站，无奈水平太低，看不懂&lt;/p&gt;
&lt;p&gt;记录一下今天学到的&lt;/p&gt;
&lt;h2&gt;蓝图&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-app/&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;views.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;templates/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;static/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-config.py&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-run.py&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-tmp/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;run.py&lt;/h3&gt;
&lt;p&gt;输入&lt;code&gt;python run.py&lt;/code&gt;就可以运行程序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="c1"&gt;#从app包中调用app模块&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#运行程序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;config.py&lt;/h3&gt;
&lt;p&gt;一些基本的配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEBUG = True #打开调试模式
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;app/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
     &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#调用config.py配置文件&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="c1"&gt;#从app包中导入views模块&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;app/views.py&lt;/h3&gt;
&lt;p&gt;视图文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
     &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;
&lt;span class="nd"&gt;@app.route.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello,world&amp;#39;&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Show_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;app/templates/&lt;/h3&gt;
&lt;p&gt;放置模板&lt;/p&gt;
&lt;h3&gt;app/templates/index.html&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;stylesheet&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style.css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        #使用static文件夹中的css，js
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        hello
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hello&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;app/static&lt;/h3&gt;
&lt;p&gt;放置一些静态文件
css,js等&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>flask学习笔记——3</title><link href="http://honmaple.org/articles/2015/12/flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%943.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:49:52.903411</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/flask学习笔记——3.html</id><summary type="html">&lt;p&gt;好久没有写东西的，主要是最近在用flask写一个网站，由于写前端界面时为了让UI好看一点，搞得自己晕头转向，方向都错了,在此期间也遇到很多问题，虽然绝大部分已经解决了，但是还有很多没有解决。其实，做一个项目是最能检验能力的。  &lt;/p&gt;
&lt;h3&gt;中文网站链接编码&lt;/h3&gt;
&lt;p&gt;如果访问一个含中文字符的网站，很大可能会提示错误&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>使用pelican搭建个人博客</title><link href="http://honmaple.org/articles/2015/12/%E4%BD%BF%E7%94%A8pelican%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:48:28.933468</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/使用pelican搭建个人博客.html</id><summary type="html">&lt;p&gt;Pelican是一个用Python语言编写的静态网站生成器，支持使用re&lt;/p&gt;
&lt;h2&gt;pelican介绍&lt;/h2&gt;
&lt;p&gt;Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强  &lt;/p&gt;
&lt;h2&gt;pelican安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pelican使用&lt;/h2&gt;
&lt;p&gt;工具准备好了，接下来就开始使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; git
$ mkdir pelican  &lt;span class="c1"&gt;#建立一个文件夹(位置和名称随意，自己记得就行)&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; pelican
$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显示  (也可以直接回车默认)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Welcome to pelican-quickstart v3.4.0.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? HonMaple
&amp;gt; Who will be the author of this web site? honmaple
&amp;gt; What will be the default language of this web site? [en] zh
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://honmaple.github.io
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)
&amp;gt; Do you want to upload your website using FTP? (y/N)
&amp;gt; Do you want to upload your website using SSH? (y/N)
&amp;gt; Do you want to upload your website using Dropbox? (y/N)
&amp;gt; Do you want to upload your website using S3? (y/N)
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N)
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) Y
&amp;gt; Is this your personal page (username.github.io)? (y/N) Y
Done. Your new project is available at /home/git/pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来要设置pelicanconf.py和publishconf.py&lt;br /&gt;
具体可以看&lt;a href="https://pelican.readthedocs.org/en/latest/"&gt;官方帮助文档&lt;/a&gt;或者参考&lt;a href="https://github.com/honmaple/honmaple/"&gt;我的配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看目录&lt;br /&gt;
pelican/&lt;br /&gt;
├── content&lt;br /&gt;
├── output&lt;br /&gt;
├── develop_server.sh&lt;br /&gt;
├── fabfile.py&lt;br /&gt;
├── Makefile&lt;br /&gt;
├── pelicanconf.py       # Main settings file&lt;br /&gt;
└── publishconf.py       # Settings to use when ready to publish  &lt;/p&gt;
&lt;p&gt;现在可以开始写第一篇文章了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; content
$ mkdir articles pages extra impages
$ &lt;span class="nb"&gt;cd&lt;/span&gt; articles
$ vim hello.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在文件开头输入下列内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;文章标题&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;作者&lt;/span&gt; 
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;文章类别&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;标签&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;概要内容&lt;/span&gt;

&lt;span class="err"&gt;具体内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存退出后输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../ &lt;span class="c1"&gt;#进入pelican文件夹下&lt;/span&gt;
$ make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看实际效果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ google-chrome-stable output/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;提交内容&lt;/h2&gt;
&lt;p&gt;编辑好内容并且&lt;code&gt;make html&lt;/code&gt;后需要将内容push到github&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; output/
$ git init
$ git remote add origin git@github.com:honmaple/honmaple.github.io.git &lt;span class="c1"&gt;#关联远程仓库&lt;/span&gt;
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;My first blog by pelican&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过几分钟后就可以看到内容了&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>我的flask项目结构</title><link href="http://honmaple.org/articles/2015/12/%E6%88%91%E7%9A%84flask%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.html" rel="alternate"></link><updated>2015-12-22T00:00:00+01:00</updated><author><name>2015-12-22 08:50:29.887665</name></author><id>tag:honmaple.org,2015-12-22:articles/2015/12/我的flask项目结构.html</id><summary type="html">&lt;h3&gt;总的结构&lt;/h3&gt;
&lt;p&gt;听说每个flask应用最后都会写成自己的django,原来真的会是这样  &lt;/p&gt;
&lt;h3&gt;总的结构&lt;/h3&gt;
&lt;p&gt;|── app/&lt;br /&gt;
│   ├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
│   ├── email/&lt;br /&gt;
│   ├── forms/&lt;br /&gt;
│   ├── models/&lt;br /&gt;
│   ├── static/&lt;br /&gt;
│   ├── templates/&lt;br /&gt;
│   ├── utils/&lt;br /&gt;
│   └── views/&lt;br /&gt;
├── config/&lt;br /&gt;
│   ├── default.py&lt;br /&gt;
│   ├── development.py&lt;br /&gt;
│   └── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
├── gunicorn.conf&lt;br /&gt;
├── README.md&lt;br /&gt;
├── requirements.txt&lt;br /&gt;
├── run.py  &lt;/p&gt;
&lt;h3&gt;视图&lt;/h3&gt;
&lt;p&gt;views/&lt;br /&gt;
├── admin.py&lt;br /&gt;
├── blog.py&lt;br /&gt;
├── book.py&lt;br /&gt;
├── index.py&lt;br /&gt;
├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
└── question.py  &lt;/p&gt;
&lt;h3&gt;表单&lt;/h3&gt;
&lt;p&gt;forms/&lt;br /&gt;
├── admin_form.py&lt;br /&gt;
├── article_form.py&lt;br /&gt;
├── comment_form.py&lt;br /&gt;
├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
├── question_form.py&lt;br /&gt;
└── register_form.py  &lt;/p&gt;
&lt;h3&gt;数据库&lt;/h3&gt;
&lt;p&gt;models/&lt;br /&gt;
├── account_db.py&lt;br /&gt;
├── article_db.py&lt;br /&gt;
├── base.py&lt;br /&gt;
├── book_db.py&lt;br /&gt;
├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
└── question_db.py  &lt;/p&gt;
&lt;h3&gt;模板&lt;/h3&gt;
&lt;p&gt;templates/&lt;br /&gt;
├── admin&lt;br /&gt;
│   ├── admin_article.html&lt;br /&gt;
│   ├── admin_base.html&lt;br /&gt;
│   ├── admin_comment.html&lt;br /&gt;
│   ├── admin_edit.html&lt;br /&gt;
│   ├── admin.html&lt;br /&gt;
│   ├── admin_post.html&lt;br /&gt;
│   ├── admin_question.html&lt;br /&gt;
│   └── admin_user.html&lt;br /&gt;
├── blog&lt;br /&gt;
│   ├── blog_archives.html&lt;br /&gt;
│   ├── blog_base.html&lt;br /&gt;
│   ├── blog_category.html&lt;br /&gt;
│   ├── blog.html&lt;br /&gt;
│   ├── blog_page.html&lt;br /&gt;
│   └── blog_tag.html&lt;br /&gt;
├── book&lt;br /&gt;
│   ├── book_base.html&lt;br /&gt;
│   ├── book.html&lt;br /&gt;
│   ├── book_intro.html&lt;br /&gt;
│   └── book_type.html&lt;br /&gt;
├── email.html&lt;br /&gt;
├── forget.html&lt;br /&gt;
├── index&lt;br /&gt;
│   ├── about_me.html&lt;br /&gt;
│   ├── base.html&lt;br /&gt;
│   ├── error.html&lt;br /&gt;
│   ├── forget.html&lt;br /&gt;
│   ├── index.html&lt;br /&gt;
│   ├── login.html&lt;br /&gt;
│   ├── logout.html&lt;br /&gt;
│   ├── revise_passwd.html&lt;br /&gt;
│   ├── search.html&lt;br /&gt;
│   └── sign_in.html&lt;br /&gt;
├── question&lt;br /&gt;
│   ├── question_base.html&lt;br /&gt;
│   ├── question.html&lt;br /&gt;
│   └── question_view.html&lt;br /&gt;
└── user&lt;br /&gt;
      └── user.html  &lt;/p&gt;
&lt;h3&gt;其它模块&lt;/h3&gt;
&lt;p&gt;utils/&lt;br /&gt;
├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
├── manager.py&lt;br /&gt;
├── permissions.py&lt;br /&gt;
└── validate_code.py  &lt;/p&gt;
&lt;p&gt;email/&lt;br /&gt;
├── email.py&lt;br /&gt;
├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br /&gt;
└── token.py  &lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry></feed>